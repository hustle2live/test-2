/* MinifyError
(11218,15-16): run-time error JS1010: Expected identifier: .
(11218,15-16): run-time error JS1195: Expected expression: .
(11906,15-16): run-time error JS1010: Expected identifier: [
 */
/*
 * Author: James Bhatt
 * Date: 2019-11-15
 * Description: Collection of formatters for prices.
 * Changes:
 *
 * Notes:
 *
 * Version: 0.1
 */
var PriceFormatters = /** @class */ (function () {
    function PriceFormatters(currencyPosition, currencySymbol) {
        this.defaultCurrencySymbol = "";
        this.defaultCurrencyPosition = "left";
        this.LEFT_WITH_SPACE = "leftwithspace";
        this.LEFT = "left";
        this.RIGHT_WITH_SPACE = "rightwithspace";
        this.RIGHT = "right";
        this.defaultCurrencyPosition = currencyPosition || "left";
        this.defaultCurrencySymbol = currencySymbol || "";
        this.defaultFormatter = this.getCurrencyFormatter(currencyPosition, currencySymbol);
    }
    PriceFormatters.prototype.getCurrencyFormatter = function (currencyPosition, currencySymbol) {
        if (!currencyPosition || currencyPosition == "") {
            currencyPosition = this.defaultCurrencyPosition;
        }
        if (!currencySymbol || currencySymbol == "") {
            currencySymbol = this.defaultCurrencySymbol;
        }
        switch (currencyPosition) {
            case this.LEFT_WITH_SPACE: {
                return function (value) {
                    return [currencySymbol, value.trim()].join(" ");
                };
            }
            case this.RIGHT_WITH_SPACE: {
                return function (value) {
                    return [value.trim(), currencySymbol].join(" ");
                };
            }
            case this.LEFT: {
                return function (value) {
                    return [currencySymbol, value.trim()].join("");
                };
            }
            case this.RIGHT: {
                return function (value) {
                    return [value.trim(), currencySymbol].join("");
                };
            }
        }
        // Default to LEFT
        return function (value) {
            return [currencySymbol, value.trim()].join("");
        };
    };
    PriceFormatters.prototype.formatPrice = function (price) {
        return this.formatPriceWithFormatter(price, this.defaultFormatter);
    };
    PriceFormatters.prototype.formatPriceWithFormatter = function (price, formatter) {
        if (!price || price.length == 0 || !formatter) {
            return '';
        }
        return this.doFormat(price, formatter);
    };
    PriceFormatters.prototype.formatPriceWithSymbol = function (price, currencyPosition, currencySymbol) {
        if (!price || price.length == 0) {
            return '';
        }
        var formatter = this.getCurrencyFormatter(currencyPosition, currencySymbol);
        return this.doFormat(price, formatter);
    };
    PriceFormatters.prototype.removeMultiplePriceSymbols = function (priceWithCurrency, currencyPosition, symbolToRemove) {
        //quickly bail if not a price range
        if (priceWithCurrency.indexOf("-") == -1) {
            return priceWithCurrency;
        }
        var result = priceWithCurrency;
        var regex = new RegExp(symbolToRemove, "g");
        var occurrences = (priceWithCurrency.match(regex) || []).length;
        if (occurrences > 1) {
            if (currencyPosition.indexOf(this.RIGHT) > -1) {
                if (currencyPosition == this.RIGHT_WITH_SPACE) {
                    symbolToRemove = " " + symbolToRemove;
                }
                var firstIndex = priceWithCurrency.indexOf(symbolToRemove);
                result = priceWithCurrency.substring(0, firstIndex - 1) + priceWithCurrency.substring(firstIndex + symbolToRemove.length);
            }
            else if (currencyPosition.indexOf(this.LEFT) > -1) {
                if (currencyPosition == this.LEFT_WITH_SPACE) {
                    symbolToRemove = symbolToRemove + " ";
                }
                var lastIndex = priceWithCurrency.lastIndexOf(symbolToRemove);
                result = priceWithCurrency.substring(0, lastIndex) + priceWithCurrency.substring(lastIndex + symbolToRemove.length);
            }
        }
        return result;
    };
    PriceFormatters.prototype.doFormat = function (price, formatter) {
        var split = price.split('-');
        var result = '';
        for (var idx = 0; idx < split.length; idx++) {
            //add a dash if there's more than 1 item in the array
            if (idx > 0) {
                result += ' - ';
            }
            result += formatter(split[idx]);
        } //end each
        return result;
    };
    return PriceFormatters;
}());
//# sourceMappingURL=Pricing.js.map;
var ModularPDPHelper;
(function (ModularPDPHelper) {
    //URL Related
    var PROTOCOL = window.location.protocol;
    var HOST = window.location.host;
    var PATH_NAME = window.location.pathname;
    var HREF = window.location.href;
    var URL_ORIGIN = PROTOCOL + "//" + Next.Settings.Channel.SiteUrl.split("//")[1];
    var URL_PATH_NAME = getUrlPathName();
    var URL_SEGMENTS = URL_PATH_NAME.split('/');
    var URL_SEGMENTS_COUNT = URL_SEGMENTS.length;
    var HASH = window.location.hash;
    var IS_REFERRER_SPREAD = HASH.indexOf("/referrer=spread") >= 0;
    var UrlSegments = /** @class */ (function () {
        function UrlSegments() {
        }
        return UrlSegments;
    }());
    ModularPDPHelper.UrlSegments = UrlSegments;
    function isUrlInOldFormat() {
        //Detect PDP URL in old format (Eg: /style/st211319#548308 or /g8316s12#649138)
        //Style and shot old URLs with spread page checks
        return (URL_PATH_NAME.indexOf("style/") >= 0 && URL_SEGMENTS_COUNT == 3 && HASH && !IS_REFERRER_SPREAD) || (URL_SEGMENTS_COUNT == 2 && HASH && !IS_REFERRER_SPREAD)
            ? true
            : false;
    }
    ModularPDPHelper.isUrlInOldFormat = isUrlInOldFormat;
    function isUrlInNewFormat() {
        return (URL_PATH_NAME.indexOf("style/") >= 0 && URL_SEGMENTS_COUNT == 4) || (URL_PATH_NAME.indexOf("style/") < 0 && URL_SEGMENTS_COUNT == 3)
            ? true
            : false;
    }
    ModularPDPHelper.isUrlInNewFormat = isUrlInNewFormat;
    function getNewUrlWithoutHash(urlCheckArguments) {
        var itemNumber = urlCheckArguments.itemNumber || getItemNumber();
        itemNumber = getItemNumberWithoutDash(itemNumber);
        var urlWithoutHash = HREF.substring(0, HREF.indexOf("#"));
        //New url
        var newUrl = urlWithoutHash + "/" + itemNumber;
        if (!urlCheckArguments.includeOrigin) {
            newUrl = newUrl.replace(URL_ORIGIN, "");
        }
        if (!urlCheckArguments.includeStyle) {
            newUrl = newUrl.replace("/style", "");
        }
        if (urlCheckArguments.replaceLastSegment) {
            var url = URL_PATH_NAME.replace("/style", "");
            var urlPathSegments = getSegmentOptions(url);
            urlPathSegments.segments[urlPathSegments.segmentsCount - 1] = itemNumber;
            newUrl = urlPathSegments.segments.join('/');
        }
        return newUrl;
    }
    ModularPDPHelper.getNewUrlWithoutHash = getNewUrlWithoutHash;
    function getNewUrlPathName(url, itemNumber) {
        var urlPathSegments = getSegmentOptions(url);
        urlPathSegments.segments[urlPathSegments.segmentsCount] = itemNumber;
        return urlPathSegments.segments.join('/');
    }
    ModularPDPHelper.getNewUrlPathName = getNewUrlPathName;
    function getNewUrlWithHash(newHash) {
        var newUrl = "", index = 0;
        var formattedHash = newHash;
        if (newHash.indexOf("/") >= 0) {
            formattedHash = newHash.substring(0, newHash.indexOf("/"));
        }
        //New url format
        if (isUrlPathNameInNewFormat()) {
            index = URL_SEGMENTS_COUNT - 1;
        }
        //Old url format
        else if (isUrlPathNameInOldFormat()) {
            index = URL_SEGMENTS_COUNT;
        }
        URL_SEGMENTS[index] = formattedHash.replace("#", "");
        newUrl = URL_SEGMENTS.join("/") + newHash;
        return newUrl;
    }
    ModularPDPHelper.getNewUrlWithHash = getNewUrlWithHash;
    function updateUrlProperties(isShortUrl, firstSegment, secondSegment) {
        URL_SEGMENTS = [];
        if (isShortUrl) {
            URL_SEGMENTS[1] = firstSegment;
            URL_SEGMENTS[2] = secondSegment;
            PATH_NAME = "/" + firstSegment + "/" + secondSegment;
        }
        else {
            URL_SEGMENTS[1] = "style";
            URL_SEGMENTS[2] = firstSegment;
            URL_SEGMENTS[3] = secondSegment;
            PATH_NAME = "/style/" + firstSegment + "/" + secondSegment;
        }
        URL_SEGMENTS_COUNT = URL_SEGMENTS.length;
        URL_PATH_NAME = PATH_NAME;
    }
    ModularPDPHelper.updateUrlProperties = updateUrlProperties;
    function isUrlPathNameInNewFormat(pathName, urlSegmentsCount) {
        var pathName = pathName || URL_PATH_NAME;
        var urlSegmentsCount = urlSegmentsCount || URL_SEGMENTS_COUNT;
        return (pathName.indexOf("style/") >= 0 && urlSegmentsCount == 4) || (pathName.indexOf("style/") < 0 && urlSegmentsCount == 3);
    }
    ModularPDPHelper.isUrlPathNameInNewFormat = isUrlPathNameInNewFormat;
    function isUrlPathNameInOldFormat(pathName, urlSegmentsCount) {
        var pathName = pathName || URL_PATH_NAME;
        var urlSegmentsCount = urlSegmentsCount || URL_SEGMENTS_COUNT;
        return (pathName.indexOf("style/") >= 0 && urlSegmentsCount == 3) || (pathName.indexOf("style/") < 0 && urlSegmentsCount == 2);
    }
    ModularPDPHelper.isUrlPathNameInOldFormat = isUrlPathNameInOldFormat;
    function checkAndAddSlashBeforeUrl(url) {
        return url.indexOf('/') != 0 ? '/' + url : url;
    }
    ModularPDPHelper.checkAndAddSlashBeforeUrl = checkAndAddSlashBeforeUrl;
    function getItemNumber() {
        var itemNumber = HASH.replace("#", "");
        if (itemNumber.indexOf("/") >= 0) {
            itemNumber = itemNumber.substring(0, itemNumber.indexOf("/"));
        }
        return itemNumber;
    }
    ModularPDPHelper.getItemNumber = getItemNumber;
    function getItemNumberWithoutDash(itemNumber) {
        return itemNumber.replace(/-/g, "");
    }
    ModularPDPHelper.getItemNumberWithoutDash = getItemNumberWithoutDash;
    function getSegmentOptions(pathName) {
        var urlSegments = pathName.split('/');
        var segments = new UrlSegments();
        segments.segments = urlSegments;
        segments.segmentsCount = urlSegments.length;
        return segments;
    }
    ModularPDPHelper.getSegmentOptions = getSegmentOptions;
    function getUrlPathName() {
        var urlWithoutHash = PROTOCOL + "//" + HOST + PATH_NAME;
        return urlWithoutHash.replace(URL_ORIGIN, "");
    }
    ModularPDPHelper.getUrlPathName = getUrlPathName;
    function transformShotJsonShortenedNames(shot) {
        if (shot.Media !== null && shot.Media !== undefined) {
            shot.Media = mapMediaItems(shot.Media);
        }
        if (shot.Styles !== null && shot.Styles !== undefined) {
            shot.Styles.forEach(function (style) {
                if (style.Fits !== null && style.Fits !== undefined) {
                    style.Fits.forEach(function (fit) {
                        if (fit.Items !== null && fit.Items !== undefined) {
                            fit.Items.forEach(function (item) {
                                if (item.Media !== null && item.Media !== undefined) {
                                    item.Media = mapMediaItems(item.Media);
                                }
                                if (item.Options !== null && item.Options !== undefined) {
                                    item.Options = mapOptions(item.Options);
                                }
                            });
                        }
                    });
                }
            });
        }
    }
    ModularPDPHelper.transformShotJsonShortenedNames = transformShotJsonShortenedNames;
    function mapOptions(options) {
        options = options.map(function (_a) {
            var Number = _a.Nmb, Name = _a.Nm, StockStatus = _a.SSt, Price = _a.Prc, SplitSizes = _a.SplSz, FitSizes = _a.FitSz, MarkdownType = _a.MdT, SizeType = _a.SzTyp;
            return ({
                Number: Number,
                Name: Name,
                StockStatus: StockStatus,
                Price: Price,
                SplitSizes: SplitSizes,
                FitSizes: FitSizes,
                MarkdownType: MarkdownType,
                SizeType: SizeType
            });
        });
        return options;
    }
    function mapMediaItems(mediaItems) {
        mediaItems = mediaItems.map(function (_a) {
            var name = _a.nm, level = _a.lvl, imageType = _a.imgTyp, shotType = _a.shTyp, webType = _a.wbTyp, outlet = _a.outl, pageNo = _a.pgNo, id = _a.id, alsoItemLevel = _a.alLvl;
            return ({
                name: name,
                level: level,
                imageType: imageType,
                shotType: shotType,
                webType: webType,
                outlet: outlet,
                pageNo: pageNo,
                id: id,
                alsoItemLevel: alsoItemLevel
            });
        });
        return mediaItems;
    }
})(ModularPDPHelper || (ModularPDPHelper = {}));
//# sourceMappingURL=modularpdphelper.js.map;
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   3.0.2
 */

(function(){"use strict";function lib$es6$promise$utils$$objectOrFunction(x){return typeof x==="function"||typeof x==="object"&&x!==null}function lib$es6$promise$utils$$isFunction(x){return typeof x==="function"}function lib$es6$promise$utils$$isMaybeThenable(x){return typeof x==="object"&&x!==null}var lib$es6$promise$utils$$_isArray;if(!Array.isArray){lib$es6$promise$utils$$_isArray=function(x){return Object.prototype.toString.call(x)==="[object Array]"}}else{lib$es6$promise$utils$$_isArray=Array.isArray}var lib$es6$promise$utils$$isArray=lib$es6$promise$utils$$_isArray;var lib$es6$promise$asap$$len=0;var lib$es6$promise$asap$$toString={}.toString;var lib$es6$promise$asap$$vertxNext;var lib$es6$promise$asap$$customSchedulerFn;var lib$es6$promise$asap$$asap=function asap(callback,arg){lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len]=callback;lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len+1]=arg;lib$es6$promise$asap$$len+=2;if(lib$es6$promise$asap$$len===2){if(lib$es6$promise$asap$$customSchedulerFn){lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush)}else{lib$es6$promise$asap$$scheduleFlush()}}};function lib$es6$promise$asap$$setScheduler(scheduleFn){lib$es6$promise$asap$$customSchedulerFn=scheduleFn}function lib$es6$promise$asap$$setAsap(asapFn){lib$es6$promise$asap$$asap=asapFn}var lib$es6$promise$asap$$browserWindow=typeof window!=="undefined"?window:undefined;var lib$es6$promise$asap$$browserGlobal=lib$es6$promise$asap$$browserWindow||{};var lib$es6$promise$asap$$BrowserMutationObserver=lib$es6$promise$asap$$browserGlobal.MutationObserver||lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;var lib$es6$promise$asap$$isNode=typeof process!=="undefined"&&{}.toString.call(process)==="[object process]";var lib$es6$promise$asap$$isWorker=typeof Uint8ClampedArray!=="undefined"&&typeof importScripts!=="undefined"&&typeof MessageChannel!=="undefined";function lib$es6$promise$asap$$useNextTick(){return function(){process.nextTick(lib$es6$promise$asap$$flush)}}function lib$es6$promise$asap$$useVertxTimer(){return function(){lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush)}}function lib$es6$promise$asap$$useMutationObserver(){var iterations=0;var observer=new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);var node=document.createTextNode("");observer.observe(node,{characterData:true});return function(){node.data=iterations=++iterations%2}}function lib$es6$promise$asap$$useMessageChannel(){var channel=new MessageChannel;channel.port1.onmessage=lib$es6$promise$asap$$flush;return function(){channel.port2.postMessage(0)}}function lib$es6$promise$asap$$useSetTimeout(){return function(){setTimeout(lib$es6$promise$asap$$flush,1)}}var lib$es6$promise$asap$$queue=new Array(1e3);function lib$es6$promise$asap$$flush(){for(var i=0;i<lib$es6$promise$asap$$len;i+=2){var callback=lib$es6$promise$asap$$queue[i];var arg=lib$es6$promise$asap$$queue[i+1];callback(arg);lib$es6$promise$asap$$queue[i]=undefined;lib$es6$promise$asap$$queue[i+1]=undefined}lib$es6$promise$asap$$len=0}function lib$es6$promise$asap$$attemptVertx(){try{var r=require;var vertx=r("vertx");lib$es6$promise$asap$$vertxNext=vertx.runOnLoop||vertx.runOnContext;return lib$es6$promise$asap$$useVertxTimer()}catch(e){return lib$es6$promise$asap$$useSetTimeout()}}var lib$es6$promise$asap$$scheduleFlush;if(lib$es6$promise$asap$$isNode){lib$es6$promise$asap$$scheduleFlush=lib$es6$promise$asap$$useNextTick()}else if(lib$es6$promise$asap$$BrowserMutationObserver){lib$es6$promise$asap$$scheduleFlush=lib$es6$promise$asap$$useMutationObserver()}else if(lib$es6$promise$asap$$isWorker){lib$es6$promise$asap$$scheduleFlush=lib$es6$promise$asap$$useMessageChannel()}else if(lib$es6$promise$asap$$browserWindow===undefined&&typeof require==="function"){lib$es6$promise$asap$$scheduleFlush=lib$es6$promise$asap$$attemptVertx()}else{lib$es6$promise$asap$$scheduleFlush=lib$es6$promise$asap$$useSetTimeout()}function lib$es6$promise$$internal$$noop(){}var lib$es6$promise$$internal$$PENDING=void 0;var lib$es6$promise$$internal$$FULFILLED=1;var lib$es6$promise$$internal$$REJECTED=2;var lib$es6$promise$$internal$$GET_THEN_ERROR=new lib$es6$promise$$internal$$ErrorObject;function lib$es6$promise$$internal$$selfFulfillment(){return new TypeError("You cannot resolve a promise with itself")}function lib$es6$promise$$internal$$cannotReturnOwn(){return new TypeError("A promises callback cannot return that same promise.")}function lib$es6$promise$$internal$$getThen(promise){try{return promise.then}catch(error){lib$es6$promise$$internal$$GET_THEN_ERROR.error=error;return lib$es6$promise$$internal$$GET_THEN_ERROR}}function lib$es6$promise$$internal$$tryThen(then,value,fulfillmentHandler,rejectionHandler){try{then.call(value,fulfillmentHandler,rejectionHandler)}catch(e){return e}}function lib$es6$promise$$internal$$handleForeignThenable(promise,thenable,then){lib$es6$promise$asap$$asap(function(promise){var sealed=false;var error=lib$es6$promise$$internal$$tryThen(then,thenable,function(value){if(sealed){return}sealed=true;if(thenable!==value){lib$es6$promise$$internal$$resolve(promise,value)}else{lib$es6$promise$$internal$$fulfill(promise,value)}},function(reason){if(sealed){return}sealed=true;lib$es6$promise$$internal$$reject(promise,reason)},"Settle: "+(promise._label||" unknown promise"));if(!sealed&&error){sealed=true;lib$es6$promise$$internal$$reject(promise,error)}},promise)}function lib$es6$promise$$internal$$handleOwnThenable(promise,thenable){if(thenable._state===lib$es6$promise$$internal$$FULFILLED){lib$es6$promise$$internal$$fulfill(promise,thenable._result)}else if(thenable._state===lib$es6$promise$$internal$$REJECTED){lib$es6$promise$$internal$$reject(promise,thenable._result)}else{lib$es6$promise$$internal$$subscribe(thenable,undefined,function(value){lib$es6$promise$$internal$$resolve(promise,value)},function(reason){lib$es6$promise$$internal$$reject(promise,reason)})}}function lib$es6$promise$$internal$$handleMaybeThenable(promise,maybeThenable){if(maybeThenable.constructor===promise.constructor){lib$es6$promise$$internal$$handleOwnThenable(promise,maybeThenable)}else{var then=lib$es6$promise$$internal$$getThen(maybeThenable);if(then===lib$es6$promise$$internal$$GET_THEN_ERROR){lib$es6$promise$$internal$$reject(promise,lib$es6$promise$$internal$$GET_THEN_ERROR.error)}else if(then===undefined){lib$es6$promise$$internal$$fulfill(promise,maybeThenable)}else if(lib$es6$promise$utils$$isFunction(then)){lib$es6$promise$$internal$$handleForeignThenable(promise,maybeThenable,then)}else{lib$es6$promise$$internal$$fulfill(promise,maybeThenable)}}}function lib$es6$promise$$internal$$resolve(promise,value){if(promise===value){lib$es6$promise$$internal$$reject(promise,lib$es6$promise$$internal$$selfFulfillment())}else if(lib$es6$promise$utils$$objectOrFunction(value)){lib$es6$promise$$internal$$handleMaybeThenable(promise,value)}else{lib$es6$promise$$internal$$fulfill(promise,value)}}function lib$es6$promise$$internal$$publishRejection(promise){if(promise._onerror){promise._onerror(promise._result)}lib$es6$promise$$internal$$publish(promise)}function lib$es6$promise$$internal$$fulfill(promise,value){if(promise._state!==lib$es6$promise$$internal$$PENDING){return}promise._result=value;promise._state=lib$es6$promise$$internal$$FULFILLED;if(promise._subscribers.length!==0){lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish,promise)}}function lib$es6$promise$$internal$$reject(promise,reason){if(promise._state!==lib$es6$promise$$internal$$PENDING){return}promise._state=lib$es6$promise$$internal$$REJECTED;promise._result=reason;lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection,promise)}function lib$es6$promise$$internal$$subscribe(parent,child,onFulfillment,onRejection){var subscribers=parent._subscribers;var length=subscribers.length;parent._onerror=null;subscribers[length]=child;subscribers[length+lib$es6$promise$$internal$$FULFILLED]=onFulfillment;subscribers[length+lib$es6$promise$$internal$$REJECTED]=onRejection;if(length===0&&parent._state){lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish,parent)}}function lib$es6$promise$$internal$$publish(promise){var subscribers=promise._subscribers;var settled=promise._state;if(subscribers.length===0){return}var child,callback,detail=promise._result;for(var i=0;i<subscribers.length;i+=3){child=subscribers[i];callback=subscribers[i+settled];if(child){lib$es6$promise$$internal$$invokeCallback(settled,child,callback,detail)}else{callback(detail)}}promise._subscribers.length=0}function lib$es6$promise$$internal$$ErrorObject(){this.error=null}var lib$es6$promise$$internal$$TRY_CATCH_ERROR=new lib$es6$promise$$internal$$ErrorObject;function lib$es6$promise$$internal$$tryCatch(callback,detail){try{return callback(detail)}catch(e){lib$es6$promise$$internal$$TRY_CATCH_ERROR.error=e;return lib$es6$promise$$internal$$TRY_CATCH_ERROR}}function lib$es6$promise$$internal$$invokeCallback(settled,promise,callback,detail){var hasCallback=lib$es6$promise$utils$$isFunction(callback),value,error,succeeded,failed;if(hasCallback){value=lib$es6$promise$$internal$$tryCatch(callback,detail);if(value===lib$es6$promise$$internal$$TRY_CATCH_ERROR){failed=true;error=value.error;value=null}else{succeeded=true}if(promise===value){lib$es6$promise$$internal$$reject(promise,lib$es6$promise$$internal$$cannotReturnOwn());return}}else{value=detail;succeeded=true}if(promise._state!==lib$es6$promise$$internal$$PENDING){}else if(hasCallback&&succeeded){lib$es6$promise$$internal$$resolve(promise,value)}else if(failed){lib$es6$promise$$internal$$reject(promise,error)}else if(settled===lib$es6$promise$$internal$$FULFILLED){lib$es6$promise$$internal$$fulfill(promise,value)}else if(settled===lib$es6$promise$$internal$$REJECTED){lib$es6$promise$$internal$$reject(promise,value)}}function lib$es6$promise$$internal$$initializePromise(promise,resolver){try{resolver(function resolvePromise(value){lib$es6$promise$$internal$$resolve(promise,value)},function rejectPromise(reason){lib$es6$promise$$internal$$reject(promise,reason)})}catch(e){lib$es6$promise$$internal$$reject(promise,e)}}function lib$es6$promise$enumerator$$Enumerator(Constructor,input){var enumerator=this;enumerator._instanceConstructor=Constructor;enumerator.promise=new Constructor(lib$es6$promise$$internal$$noop);if(enumerator._validateInput(input)){enumerator._input=input;enumerator.length=input.length;enumerator._remaining=input.length;enumerator._init();if(enumerator.length===0){lib$es6$promise$$internal$$fulfill(enumerator.promise,enumerator._result)}else{enumerator.length=enumerator.length||0;enumerator._enumerate();if(enumerator._remaining===0){lib$es6$promise$$internal$$fulfill(enumerator.promise,enumerator._result)}}}else{lib$es6$promise$$internal$$reject(enumerator.promise,enumerator._validationError())}}lib$es6$promise$enumerator$$Enumerator.prototype._validateInput=function(input){return lib$es6$promise$utils$$isArray(input)};lib$es6$promise$enumerator$$Enumerator.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")};lib$es6$promise$enumerator$$Enumerator.prototype._init=function(){this._result=new Array(this.length)};var lib$es6$promise$enumerator$$default=lib$es6$promise$enumerator$$Enumerator;lib$es6$promise$enumerator$$Enumerator.prototype._enumerate=function(){var enumerator=this;var length=enumerator.length;var promise=enumerator.promise;var input=enumerator._input;for(var i=0;promise._state===lib$es6$promise$$internal$$PENDING&&i<length;i++){enumerator._eachEntry(input[i],i)}};lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry=function(entry,i){var enumerator=this;var c=enumerator._instanceConstructor;if(lib$es6$promise$utils$$isMaybeThenable(entry)){if(entry.constructor===c&&entry._state!==lib$es6$promise$$internal$$PENDING){entry._onerror=null;enumerator._settledAt(entry._state,i,entry._result)}else{enumerator._willSettleAt(c.resolve(entry),i)}}else{enumerator._remaining--;enumerator._result[i]=entry}};lib$es6$promise$enumerator$$Enumerator.prototype._settledAt=function(state,i,value){var enumerator=this;var promise=enumerator.promise;if(promise._state===lib$es6$promise$$internal$$PENDING){enumerator._remaining--;if(state===lib$es6$promise$$internal$$REJECTED){lib$es6$promise$$internal$$reject(promise,value)}else{enumerator._result[i]=value}}if(enumerator._remaining===0){lib$es6$promise$$internal$$fulfill(promise,enumerator._result)}};lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt=function(promise,i){var enumerator=this;lib$es6$promise$$internal$$subscribe(promise,undefined,function(value){enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED,i,value)},function(reason){enumerator._settledAt(lib$es6$promise$$internal$$REJECTED,i,reason)})};function lib$es6$promise$promise$all$$all(entries){return new lib$es6$promise$enumerator$$default(this,entries).promise}var lib$es6$promise$promise$all$$default=lib$es6$promise$promise$all$$all;function lib$es6$promise$promise$race$$race(entries){var Constructor=this;var promise=new Constructor(lib$es6$promise$$internal$$noop);if(!lib$es6$promise$utils$$isArray(entries)){lib$es6$promise$$internal$$reject(promise,new TypeError("You must pass an array to race."));return promise}var length=entries.length;function onFulfillment(value){lib$es6$promise$$internal$$resolve(promise,value)}function onRejection(reason){lib$es6$promise$$internal$$reject(promise,reason)}for(var i=0;promise._state===lib$es6$promise$$internal$$PENDING&&i<length;i++){lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]),undefined,onFulfillment,onRejection)}return promise}var lib$es6$promise$promise$race$$default=lib$es6$promise$promise$race$$race;function lib$es6$promise$promise$resolve$$resolve(object){var Constructor=this;if(object&&typeof object==="object"&&object.constructor===Constructor){return object}var promise=new Constructor(lib$es6$promise$$internal$$noop);lib$es6$promise$$internal$$resolve(promise,object);return promise}var lib$es6$promise$promise$resolve$$default=lib$es6$promise$promise$resolve$$resolve;function lib$es6$promise$promise$reject$$reject(reason){var Constructor=this;var promise=new Constructor(lib$es6$promise$$internal$$noop);lib$es6$promise$$internal$$reject(promise,reason);return promise}var lib$es6$promise$promise$reject$$default=lib$es6$promise$promise$reject$$reject;var lib$es6$promise$promise$$counter=0;function lib$es6$promise$promise$$needsResolver(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function lib$es6$promise$promise$$needsNew(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}var lib$es6$promise$promise$$default=lib$es6$promise$promise$$Promise;function lib$es6$promise$promise$$Promise(resolver){this._id=lib$es6$promise$promise$$counter++;this._state=undefined;this._result=undefined;this._subscribers=[];if(lib$es6$promise$$internal$$noop!==resolver){if(!lib$es6$promise$utils$$isFunction(resolver)){lib$es6$promise$promise$$needsResolver()}if(!(this instanceof lib$es6$promise$promise$$Promise)){lib$es6$promise$promise$$needsNew()}lib$es6$promise$$internal$$initializePromise(this,resolver)}}lib$es6$promise$promise$$Promise.all=lib$es6$promise$promise$all$$default;lib$es6$promise$promise$$Promise.race=lib$es6$promise$promise$race$$default;lib$es6$promise$promise$$Promise.resolve=lib$es6$promise$promise$resolve$$default;lib$es6$promise$promise$$Promise.reject=lib$es6$promise$promise$reject$$default;lib$es6$promise$promise$$Promise._setScheduler=lib$es6$promise$asap$$setScheduler;lib$es6$promise$promise$$Promise._setAsap=lib$es6$promise$asap$$setAsap;lib$es6$promise$promise$$Promise._asap=lib$es6$promise$asap$$asap;lib$es6$promise$promise$$Promise.prototype={constructor:lib$es6$promise$promise$$Promise,then:function(onFulfillment,onRejection){var parent=this;var state=parent._state;if(state===lib$es6$promise$$internal$$FULFILLED&&!onFulfillment||state===lib$es6$promise$$internal$$REJECTED&&!onRejection){return this}var child=new this.constructor(lib$es6$promise$$internal$$noop);var result=parent._result;if(state){var callback=arguments[state-1];lib$es6$promise$asap$$asap(function(){lib$es6$promise$$internal$$invokeCallback(state,child,callback,result)})}else{lib$es6$promise$$internal$$subscribe(parent,child,onFulfillment,onRejection)}return child},"catch":function(onRejection){return this.then(null,onRejection)}};function lib$es6$promise$polyfill$$polyfill(){var local;if(typeof global!=="undefined"){local=global}else if(typeof self!=="undefined"){local=self}else{try{local=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}}var P=local.Promise;if(P&&Object.prototype.toString.call(P.resolve())==="[object Promise]"&&!P.cast){return}local.Promise=lib$es6$promise$promise$$default}var lib$es6$promise$polyfill$$default=lib$es6$promise$polyfill$$polyfill;var lib$es6$promise$umd$$ES6Promise={Promise:lib$es6$promise$promise$$default,polyfill:lib$es6$promise$polyfill$$default};if(typeof define==="function"&&define["amd"]){define(function(){return lib$es6$promise$umd$$ES6Promise})}else if(typeof module!=="undefined"&&module["exports"]){module["exports"]=lib$es6$promise$umd$$ES6Promise}else if(typeof this!=="undefined"){this["ES6Promise"]=lib$es6$promise$umd$$ES6Promise}lib$es6$promise$polyfill$$default()}).call(this);;

/* USAGE:
    $(document).on("featureSettingsReady", function () {
        if (Next.FeatureManager.FeatureSettings.RecentlyViewed.IsEnabled) {
            // feature setting dependent logic here..
        }
    });
*/

var FeatureSettingsLoaded = false;

$(document).ready(function () {
    // set up namespacing
    if (typeof window.Next === "undefined") window.Next = {};
    if (typeof window.Next.FeatureManager === "undefined") window.Next.FeatureManager = {};

    Next.FeatureManager.FeatureSettings = (function () {        
        var host = (window.location.protocol == "http:" ? Next.Settings.Channel.SiteUrl : Next.Settings.Channel.SecureSiteUrl) + '/';
        $.ajax({
            url: host + "FeatureSettings/GetClientFeatures",
            type: "GET",
            dataType: "json",
            success: function (data) {
                Next.FeatureManager.FeatureSettings = data;
            },
            error: function (jqXhr, textStatus, errorThrown) {
                if (window.console && console.log) {
                    console.log(errorThrown);
                }
            },
            complete: function () {
                FeatureSettingsLoaded = true;
                $(document).trigger("featureSettingsReady");
            }
        });

        var defaultSettings = {
            RecentlyViewed: {
                IsEnabled: true,
                DisplayCounter: false,
                DisplayInFooter: true,
                DisplayInPage: true,
                DisplayInSecureFooter: false,
                DisplayViewAllLink: false,
                EnableAdditions: true,
                InPageDisabledPageTypes: [
                    // ENABLED: evoucher, homepage, shoppingbag, shot, sofashot
                    "brands",
                    "branddirectory",
                    "classic",
                    "classicstorefront",
                    "collection",
                    "complete",
                    "delivery",
                    "department",
                    "footer",
                    "item",
                    "login",
                    "meganav",
                    "myaccount",
                    "pageframe",
                    "payment",
                    "primary",
                    "quickshop",
                    "returns",
                    "search",
                    "singleitem",
                    "spread",
                    "spreadonly",
                    "spread_carousel",
                    "storefront",
                    "story",
                    "subcollection",
                    "undefined"
                ],
                ToolbarDisabledPageTypes: []
            },
            Search: {
                BaseAddress: "http://localhost:62161",
                SuggestionsEnabled: true,
                RecentSearchesSaved: 5
            }
        };

        return defaultSettings;
    })();
});



;
// ---------------------------------------------------------------------------------
// Personalisation JS Library
// ---------------------------------------------------------------------------------
/// <reference path="typings/jquery/jquery.d.ts" />
// ---------------------------------------------------------------------------------
// Personalisation Module 
// ---------------------------------------------------------------------------------
var Personalisation;
(function (Personalisation) {
    //#region Constants, Variables & Properties -------------------------------
    // Constants (psuedo)
    var PERSONALISATION_DATASTORAGE_KEYNAME = "PersonalisationEntity";
    // Local variables
    var _personalisationEntity = null;
    // Public variables
    Personalisation.isReady = false;
    Personalisation.isLocalStorageSupported = false;
    //#endregion
    //#region Initialisation --------------------------------------------------
    function initState() {
        // iOS browsing in private mode can show localstorage as available but will throw exceptions when calling get/set item data
        Personalisation.isLocalStorageSupported = false;
        // Replace console.log with an empty function if browser has disabled or not support it.
        // Thus stopping further console.log errors.
        window['console'] = window['console'] || {};
        window['console']['log'] = window['console']['log'] || function () { };
        try {
            if ("localStorage" in window && window.localStorage && typeof (localStorage) !== "undefined") {
                localStorage.setItem("__tmp_localstoragetest", '1');
                localStorage.getItem("__tmp_localstoragetest");
                localStorage.removeItem("__tmp_localstoragetest");
            }
            Personalisation.isLocalStorageSupported = true;
        }
        catch (error) {
            Personalisation.isLocalStorageSupported = false;
        }
        // InitState function will try to retrieve personalisation entity object from client first (localstorage), 
        // otherwise will attempt to get from personalisation service on server and if not returned will then
        // create a new local entity. At this stage it will not be saved to LocalStorage or server until a data item 
        // is set (added)
        if (_personalisationEntity == null) {
            clientGetObject(); // Attempt to get entity from localstorage
            if (_personalisationEntity == null) {
                // If no personalisation data in localstorage then attempt to get from server...
                // If data is returned then it will have updated _personalisationEntity
                apiGetObject().then(function () {
                    // If '_personalisationEntity' still null then create blank entity with visitor id only
                    if (_personalisationEntity == null) {
                        _personalisationEntity = new PersonalisationEntity();
                        _personalisationEntity.VisitorId = getVisitorId();
                    }
                    Personalisation.isReady = true;
                    console.log("Personalisation client is ready");
                })['catch'](function () {
                    // If '_personalisationEntity' still null then create blank entity with visitor id only
                    if (_personalisationEntity == null) {
                        _personalisationEntity = new PersonalisationEntity();
                        _personalisationEntity.VisitorId = getVisitorId();
                    }
                    Personalisation.isReady = true;
                    console.log("Personalisation client is ready");
                });
                return; // Return so that we process no further and leave to promise callbacks
            }
        }
        Personalisation.isReady = true;
        console.log("Personalisation client is ready");
    }
    Personalisation.initState = initState;
    //#endregion 
    //#region Public Functions ------------------------------------------------
    function itemGet(key) {
        if (_personalisationEntity == null) {
            clientGetObject(); // Attempt to get entity from localstorage
        }
        if (_personalisationEntity != null) {
            // Check expiry value
            if (_personalisationEntity.Expiry != null) {
                if (_personalisationEntity.Expiry < new Date()) {
                    // Expire (remove) personalisation entity (client side only)
                    verifyClientObject();
                    return null;
                }
            }
            // Return item value
            if (_personalisationEntity.Data[key] != null) {
                return _personalisationEntity.Data[key];
            }
            else {
                return null;
            }
        }
        else {
            return null;
        }
    }
    Personalisation.itemGet = itemGet;
    function itemSet(key, value) {
        if (_personalisationEntity == null) {
            clientGetObject(); // Attempt to get entity from localstorage
            // If no personalisation data then create entity object
            if (_personalisationEntity == null) {
                _personalisationEntity = new PersonalisationEntity();
                _personalisationEntity.VisitorId = getVisitorId();
            }
        }
        // Ensure VisitorId is populated
        if (_personalisationEntity.VisitorId == null || _personalisationEntity.VisitorId === "") {
            _personalisationEntity.VisitorId = getVisitorId();
        }
        if (value != null) {
            _personalisationEntity.Data[key] = value;
            _personalisationEntity.Expiry = new Date(new Date().getTime() + PersonalisationExpiryInMinutes * 60000);
        }
        else {
            delete _personalisationEntity.Data[key];
        }
        clientSetObject();
    }
    Personalisation.itemSet = itemSet;
    // GET the PersonalisationEntity object (_personalisationEntity) from server for visitor
    function apiGetObject() {
        if (PersonalisationClientOnly === true)
            return Promise.reject("501"); // reject promise with 501 Not Implemented?
        var promise = new Promise(function (resolve, reject) {
            var visitorId = getVisitorId();
            if (visitorId != null && visitorId != "") {
                $.ajax({
                    method: "GET",
                    url: PersonalisationApiUrl + "/visitor/" + visitorId
                })
                    .done(function (data, statusText, xhr) {
                    var status = xhr.status;
                    if (status >= 200 && status < 300 || status === 304) {
                        var getPersonalisationDataResponse = data;
                        _personalisationEntity = getPersonalisationDataResponse.PersonalisationEntity;
                        // Update localStorage
                        clientSetObject();
                        // Resolve promise
                        resolve(data);
                    }
                    else {
                        // We only see success as data being returned (i.e 200 - not 404 etc) - therefore will reject promise
                        // Reject promise
                        reject(status);
                    }
                })
                    .fail(function (jqXHR, textStatus, errorThrown) {
                    console.warn("Personalisation API GET call failed");
                    // Reject promise
                    reject(jqXHR.status);
                });
            }
            else {
                reject("No VisitorID supplied");
            }
        });
        return promise;
    }
    Personalisation.apiGetObject = apiGetObject;
    // POST the current PersonalisationEntity object (_personalisationEntity) to server for visitor
    function apiSetObject() {
        if (PersonalisationClientOnly === true)
            return;
        // Simple fire and forget call to Personalisation API
        $.ajax({
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            url: PersonalisationApiUrl + "/visitor",
            dataType: 'json',
            processData: false,
            data: JSON.stringify(_personalisationEntity)
        });
    }
    //#endregion
    //#region Private Functions ------------------------------------------------
    // Get the personalisation entity for current visitor from local storage. 
    // If it does not exist then an attempt is made to the Personalisation API
    function clientGetObject() {
        // Verify client object (inc. check expiry)
        verifyClientObject();
        if (Personalisation.isLocalStorageSupported) {
            if (localStorage.getItem(PERSONALISATION_DATASTORAGE_KEYNAME) !== null) {
                _personalisationEntity = JSON.parse(localStorage.getItem(PERSONALISATION_DATASTORAGE_KEYNAME));
            }
        }
        else {
            // TODO: Fallback for non-localstorage support?
        }
    }
    // Save the personalisation entity for current visitor in local storage and call function to save to Personalisation API. 
    function clientSetObject() {
        if (Personalisation.isLocalStorageSupported) {
            // Store on client in LocalStorage...
            localStorage.setItem(PERSONALISATION_DATASTORAGE_KEYNAME, JSON.stringify(_personalisationEntity));
            // Update server
            apiSetObject();
        }
        else {
            // TODO: Fallback for non-localstorage support?
        }
    }
    // Expire personalisation entity
    function verifyClientObject() {
        // Check if expired?... If it has then only removes from localstorage (not server).
        if (Personalisation.isLocalStorageSupported) {
            if (localStorage.getItem(PERSONALISATION_DATASTORAGE_KEYNAME) !== null) {
                var perEntity = localStorage.getItem(PERSONALISATION_DATASTORAGE_KEYNAME);
                // Check expiry value
                if (perEntity.Expiry != null) {
                    if (_personalisationEntity.Expiry < new Date()) {
                        // Remove personalisation entity (client side only)
                        localStorage.removeItem(PERSONALISATION_DATASTORAGE_KEYNAME);
                        return null;
                    }
                }
            }
        }
    }
    // Get VisitorId
    function getVisitorId() {
        // We are unable to access VisitorID direct from cookie as NextVisitor cookie has HttpOnly attribute
        // VisitorID is made available to every page using shared layout as var 'PersonalisationVisitorID'
        // (It is also available VisitorID from NextBasket although this is not available immediately)
        if (typeof NextBasket != "undefined")
            return NextBasket.VisitorID;
        else
            return null;
        // TODO: Can't use the old PersonalisationVisitorID property as this would be cached on Akamai (the devil) for all users with wrong ID.
        //return PersonalisationVisitorID;
    }
    Personalisation.getVisitorId = getVisitorId;
    //#endregion
    //#region Interfaces & Classes --------------------------------------------
    /// <summary>
    /// PersonalisationEntity class. Represents the server side personalisation entity
    /// </summary>
    var PersonalisationEntity = /** @class */ (function () {
        function PersonalisationEntity() {
            this.Data = {};
        }
        return PersonalisationEntity;
    }());
    //#endregion
})(Personalisation || (Personalisation = {}));
// Initialise Personalisation module...
Personalisation.initState();
//# sourceMappingURL=personalisation.js.map;
/* eslint-disable */
var HContextArray = new Array(); // Define Horizontal Context Array (for detecting changes in department, and the direction in which the transition should move)
var DynamicResources = new Array(); // Define an array to store the dynamically added resources for the current page, so they can be removed when we leave the page asynchronously
var PreviousPageResources;
var PageURLInput = String(window.location.pathname) + String(window.location.search); // Drop the current page url in to a variable - used to detect context changes when triggering back functionality
var siteAssetsUrl; // This is the URL that is used to request further assests such as CSS and JS on the fly - Set by the header.xsl code
var PageType;
var OverrideWithSecureFooter = (OverrideWithSecureFooter == null) ? false : OverrideWithSecureFooter;
var PageTransitionLock = false;
var preventReplaceState = false; // This is true if we don't want to replace state when leaving this page
var PagePopped = false; // This is true if the popstate has been triggered for this page load
var PagePoppedData = null; // This will contain history object data if the page is popped

var mouseOverHeader = false;
var liveSpreadPageIndex; // There are conditions where the header needs to know if the mouse is still over them. This variable is used to determine that. It should be set on mouseover/mouseenter, and cleared on mouseout/mouseleave as required.

var ScriptsLoadedCallback = null; // Store the ScriptsLoadedCallback as a null function. This will get updated by indiviual pages and cleared after it has been called (this saves us from the browser keeping hold of the previous pages ScriptsLoadedCallback function and causing double init issues)
var PageVisibleCallback = null; // Store the PageVisibleCallback as a null function. This will get updated by indiviual pages and cleared after it has been called (this saves us from the browser keeping hold of the previous pages PageVisibleCallback function and causing double init issues)

var ThirdPartiesEnabled = false;

var GomezEnabled;
var GomezPageTagEnabled;
var GomezPageId;
var gomez; 

var connectionSpeed = 0;

var isTouchEnabled = false;
var isMSPointerDevice = false;

var MainSiteURL = window.location.host;

var isErrorPage = false;
var isSocialPLPPage = false;

var rvScrollOffset = 0; //stores item scroller offset. This will be useful in Footer.js to identify document click

var currentKey = null

window.console = window.console || { log: function (_) { } };
window._AutofillCallbackHandler = window._AutofillCallbackHandler || function () { }

var jqueryUpgradeEnabledOnPage = jqueryUpgradeEnabledOnPage || false;

if (console && console.log) {
    console.log('\n                                    t\n       n nnnnn    eeeee   xx     xx ttttt\n       nn     n  e     e   xx   xx  t\n       n      n eeeeeeeee    xxx    t\n       n      n  e         xx   xx  t   t\n       n      n   eeeeee  xx     xx  ttt\n\n                S  Y  S  T  E  M  S\n\nThanks for looking! Our systems teams develop and\nmanage the IT that supports our entire enterprise.\nAnd we\'re recruiting now.\n\nHave a look at https://careers.next.co.uk/head-office/\n\n');
}

if ((typeof (navigator.maxTouchPoints) == 'undefined')) {
    if ((typeof (window.ontouchstart) != 'undefined')) {
        isTouchEnabled = true;
    }
    else if (navigator.msMaxTouchPoints > 0) { //IE10 on touch device supports this 
        isTouchEnabled = true;
        isMSPointerDevice = true;
    }
}
else if (navigator.maxTouchPoints > 0) {
    isTouchEnabled = true;
    isMSPointerDevice = true;
}

var enableTouchFunctions = false;

if (isTouchEnabled) {
    enableTouchFunctions = true;
}

if (/\bMSIE 6/.test(navigator.userAgent) && !window.opera) {

    if (window.location.pathname != '/browser-update') {
        window.location = '/browser-update';
    }
}

var isIpad = false;
var isIOS = false;
var iOS = 0;

if (navigator.userAgent.indexOf('iPad') != -1) {
    isIpad = true;

    if (/OS [2-4]_\d(_\d)? like Mac OS X/i.test(navigator.userAgent)) {
        //Treat 2 - 4 as just 4
        iOS = 4;
    } else if (/CPU like Mac OS X/i.test(navigator.userAgent)) {
        iOS = 1;
    } else {
        //Set to 5 for all iOS 5 and above
        iOS = 5;
    }
}

if (navigator.userAgent.indexOf('iPad') != -1
    || navigator.userAgent.indexOf('iPhone') != -1
    || navigator.userAgent.indexOf('iPod') != -1) {
    isIOS = true;
    ConsoleLog("iOs detected");
}

// The documentState is a JSON object that contains params that are specific to the page.
// These will be appended to the path as querystring params when transitioning and used on page load. 
// If a variable name begins with 'hidden', it will not be used as a querystring param
// The hashtag variable is reserved & placed at the end of the querystring
// e.g. { spreadview: true, hiddenSearchbreadcrumb: '<div>secret</div>', hashtag: '123456x50' } Will be output as /path?speadview=true#123456x50
// The following methods can be used to manage documentState: getDocStateParamValue(Name), addParamToDocState(Name, Value), getDocStateString(documentState)
var documentState = {};                                                                                                                                                     // Declare global to store current document state

try {
    if (typeof window.history.replaceState != "undefined") {  																								// If we're navigating the site rather than clicking back or forward
        window.history.replaceState({ "url": window.location.href, "title": document.title, "DocState": documentState, "scrollPoint": $(window).scrollTop() }, document.title, window.location.href); 			        // On load, attempt to replace the last state object on the history stack with one that is populated with the relevent transition data (although in all likely hood this will just insert a new item)
    }
} catch (e) {
    ConsoleLog('Unable to replace history state');
}

/* - Global Event Handlers - */

/* - Window Focus Detection - */
window.onfocus = onFocus;
window.onblur = onBlur;

// Chrome detect as variable
var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
// isolated Chrome hack for window focus
$(window).on("click", function () {
    if (is_chrome) {
        $(window).trigger("focus");
    }
});

function AddMouseEarTouchEvents() {
    $(".MouseEar").on('touchstart', function () {
        $(this).addClass('hover');
    });

    $(".MouseEar").on('touchend', function () {
        var $ear = $(this);
        setTimeout(function () {
            $ear.removeClass('hover');
        }, 250);
    });
}

$(document).ready(function () {
    AddMouseEarTouchEvents();

    if (!Next.Settings.UI.PlpDesktopJumpinessFix) {
        setPagePositioning();
    } 

    //Start timing requests - this is used in LoadHTMLContent in ajax.js
    lastRequest = new Date().getTime();

    //Look in current content page params - if it exists, we have fully loaded a new page (not from loadHTML ajax)
    //Update SEO and breadcrumb here

    //Update breadcrumb/SEO
    if ($(".CurrentContent #PageParams").length) {

        var BCHTML = $(".CurrentContent #PageParams #BreadcrumbWrapper").html();

        if (BCHTML != null && BCHTML.length) {
            UpdateBreadcrumbTrail(BCHTML);
        }
        //Remove page params from page
        $(".CurrentContent #PageParams").remove();
    }

    LoadGomezScripts();

    SetupFallbackForChannelisedLogos();
});

function onBlur() {
    if ($("body").hasClass("Focus")) {
        $("body").removeClass("Focus");
    }
};

function onFocus() {
    //Need to check viewport size here as well as the user may have resized window while in a different tab
    if (!Next.Settings.UI.PlpDesktopJumpinessFix) {
        setPagePositioning();
    } 
   
    if (!$("body").hasClass("Focus")) {
        $("body").addClass("Focus");
    }
};

var addSpreadToHistory = true;
var trackSpreadClick = true;
var previousPageGrid = false;
var hideScrollBars = false;
window.onpopstate = function (stackstate) {


    if ($("body").css("overflow") == "hidden" && !hideScrollBars) {
        $("body").css("overflow", "visible");
    }

    $("#SuperZoomBoxDiv > a").trigger("click");

    // Fired when user clicks forward or back buttons in browser, or when window.history.back() or .forward() is used. WARNING: Chrome incorrectly fires this event handler on load too. This should be catered for by the replace state above.
    PagePopped = true;
    preventReplaceState = true;

    if (stackstate.state == null) { // stackstate tends to only be null on initial vist page OR if we have done a full page reload, ie F5 or transitioning to another page without using AJAX.
        if (!window.location.pathname.substring(0, PageURLInput.length) == PageURLInput + "#") {
            LoadHTMLContent(window.location.href, window.title, "", false, 0, {}); // in either instance, we need to reload the relevant content.
        }
    } else {

        // The stackstate will come in handy for some pages...
        PagePoppedData = stackstate.state;

        if (previousPageGrid) {
            previousPageGrid = false;
        }

        if (stackstate.state.url != null) {
            //If the state object has a url property
            LoadHTMLContent(stackstate.state.url, stackstate.state.title, "", false, stackstate.state.scrollPoint, stackstate.state.DocState); // Load the content defined by the history object - as we're going back or forward in the history stack at this point, the 4th param is set to false to prevent a new history item being inserted in the stack.
        }
    }
}

window.onload = function (event) { // Fired on initial page load or when user hits refresh or F5.
    $(window).trigger("focus");
    positionMouseEars(); // Check to see if the footer is in the correct state for the document's initial scroll position. The transition param allows the toolbar to animate in gracefully.
}

window.onscroll = function (event) {

    if (!$(".ContentArea").hasClass("HideOverflow")) {
        resizeContentArea();
    }
}

window.onresize = function (event) { // Fired when the user resizes their browser window
    resizeContentArea();
    positionMouseEars();
    if (!Next.Settings.UI.PlpDesktopJumpinessFix) {
        setPagePositioning();
    } 
}

$(document).on("keydown", function (event) {
    switch (event.keyCode) {
        case 27:
            if (typeof ModalPopup === 'object') {
                ModalPopup.close();
            }
            break;
    }
});

$(document).on("keyup", function (event) {
    switch (event.keyCode) {
        case 37:
            if ($(".MouseEar.Left.Active a")) {
                try {
                    $(".MouseEar.Left.Active a")[0].trigger("click");
                } catch (e) {
                }
            }
            break;
        case 39:
            if ($(".MouseEar.Right.Active a")) {
                try {
                    $(".MouseEar.Right.Active a")[0].trigger("click");
                } catch (e) {
                }
            }
            break;
    }
});

/* - SEO / Social Media - */
function updateSeo(seoTitle, seoDescription, seoKeywords, seoRobots, seoCanonical) {
    var defaultTitle = "Next Official Site: Shop for Clothes, Shoes, Electricals, Homeware & More";
    var defaultDescription = "next.co.uk - shop online for the latest fashion for women, men, children and homeware. Next day delivery and free returns available.";
    var defaultKeywords = "Next,next.co.uk,Next Directory,Next Flowers,Next Electrics,fashion,clothes,womens,mens,childrens,home,furniture";
    var defaultRobots = "";

    if ((window.Next && Next.Settings)) {
        defaultTitle = Next.Settings.Channel.SEOTitle;
        defaultDescription = Next.Settings.Channel.SEODescription;
        defaultKeywords = Next.Settings.Channel.SEOKeywords;
        defaultRobots = Next.Settings.Channel.SEORobots;
    }

    var headEl = $("head");

    function createOrGetMeta(name, value) {
        if (value != "") {
            var el = $("meta[name='" + name + "']");
            if (el != null) {
                el.attr("content", value);
            } else {
                headEl.append($("<meta />").attr("name", name).attr("value", value));
            }
        }
    }

    function createOrGetCanonical(value) {
        if (value != "") {
            var el = $("link[rel='canonical']");
            if (el != null) {
                el.attr("rel", "canonical").attr("href", value)
            } else {
                headEl.append($("<link />").attr("rel", "canonical").attr("href", value));
            }
        }
    }

    seoTitle = seoTitle || defaultTitle;
    seoDescription = seoDescription || defaultDescription;
    seoKeywords = seoKeywords || defaultKeywords;
    seoRobots = seoRobots || defaultRobots;

    createOrGetMeta("title", seoTitle);
    createOrGetMeta("description", seoDescription);
    createOrGetMeta("keywords", seoKeywords);
    createOrGetMeta("robots", seoRobots);
    createOrGetCanonical(seoCanonical);

    document.title = seoTitle;
}

/* - Dynamic Resource Management - */
function InsertScript(scriptSrc) { // Dynamically inserts JS file references :)
    var headID = document.getElementsByTagName("head")[0];
    var newScript = document.createElement('script');
    newScript.type = 'text/javascript';
    newScript.src = scriptSrc;
    headID.appendChild(newScript);
    DynamicResources.push({ Type: "JS", Path: scriptSrc });
}

function InsertCSS(cssSrc) { // Dynamically inserts CSS file references :)
    var headID = document.getElementsByTagName("head")[0];
    var cssNode = document.createElement('link');
    cssNode.href = cssSrc;
    cssNode.rel = 'stylesheet';
    //cssNode.media = 'screen'; // Required?
    headID.appendChild(cssNode);
    DynamicResources.push({ Type: "CSS", Path: cssSrc });
}

function AddDynamicResource(type, path) {
    DynamicResources.push({ Type: type, Path: path });
}

function checkPreloadSupported() {
    if(!window.isPreloadSupportedChecked) {
        window.isPreloadSupportedChecked = true;
        var relList = document.createElement('link').relList;
        window.isPreloadSupported = !!(relList && relList.supports && relList.supports('preload'));
    }
}

function CreateDynamicResources() {
    var $ = jQuery;
    var Animation = createAnimation();

    checkPreloadSupported();

    let superLightPage = TotalPlatformSuperLightHelper.IsSuperLightPage();
    let showBreadcrumbs = true;
    if (superLightPage != null) {
        showBreadcrumbs = superLightPage.ShowBreadcrumbs;
    }

    if (window.location.pathname == "/" || window.location.pathname.toLowerCase() == Next.Settings.Channel.MainSiteAbsolutePath.toLowerCase() || !showBreadcrumbs) {
        if ($(".PageHeader").hasClass("Large")) {
            Animation = HideBreadcrumbBar(Animation);
        }
    } else {
        if (!$(".PageHeader").hasClass("Large")) {
            Animation = ShowBreadcrumbBar(Animation);
        }
    }

    runAnimation(Animation);

    var headID = document.getElementsByTagName("head")[0];
    var waitForCSS = false;
    var checkPreviousPageResources = false;
    //If previous page resources exist, we'll need to check it while we add new resources
    if (PreviousPageResources != null && PreviousPageResources.length) { checkPreviousPageResources = true; }


    for (var i = 0; i < DynamicResources.length; i++) { // Split in to 2 loops to force CSS to render first.
        if (DynamicResources[i].Type == "CSS") {
            waitForCSS = true;
            var doInsert = true;

            //Check if item already exists in memory from previous page
            if (checkPreviousPageResources) {
                var exInstance = $.grep(PreviousPageResources, function (n) {
                    return n.Path == DynamicResources[i].Path;
                });
                //If the item already exists, don't add it again
                if (exInstance != null && exInstance.length) {
                    doInsert = false;
                }
            }

            if (doInsert) {
                var cssNode = document.createElement('link');
                cssNode.href = DynamicResources[i].Path;
                cssNode.rel = 'stylesheet';
                if( window.isPreloadSupported ) { // IE11 safety check
                    cssNode.rel = 'preload';
                    cssNode.setAttribute('as', 'style');
                    cssNode.setAttribute('onload', "this.rel='stylesheet';");
                }
                headID.appendChild(cssNode);
            }
        }
    }
    CreateDynamicJSResources(waitForCSS)
}

function CreateDynamicJSResources(waitForCSS) {

    if (waitForCSS == false
        || $(".CSSLoadDetector").css("background-color") == "rgb(255, 255, 255)"
        || $(".CSSLoadDetector").css("background-color") == "#ffffff"
        || $(".CSSLoadDetector").css("background-color") == "#fff"
        || $(".CSSLoadDetector").css("background-color") == "white") {

        loadScripts(DynamicResources, 0);

        $(".CurrentContent").removeClass("FirstLoad");
    } else {
        window.setTimeout("CreateDynamicJSResources(true)", 200);
    }
}

//Loads scripts in sequence - in order to guarantee scripts have loaded before calling dependencies in other files
function loadScripts(DynamicResources, index) {

    if (DynamicResources[index] == null || DynamicResources.length == 0) {
        //Completed all script loading
        CallDocumentLoaded();
        return false;
    }

    //If current resource is CSS, move onto next
    if (DynamicResources[index].Type != "JS") {

        loadScripts(DynamicResources, index + 1);
        return false;
    }

    //If item already exists in memory
    if (PreviousPageResources != null && PreviousPageResources.length) {
        var exInstance = $.grep(PreviousPageResources, function (n) {
            return n.Path == DynamicResources[index].Path;
        });
        //If the item already exists, don't add it again
        if (exInstance != null && exInstance.length) {

            loadScripts(DynamicResources, index + 1);
            return false;
        }
    }

    //Create new script element
    var script = document.createElement("script")
    script.type = "text/javascript";
    script.defer = true;

    //Add script load handlers - once current script has loaded, move to next. May seem slower than async loading multiple scripts but ensures we don't call non exisitent functions
    if (script.readyState) {  //IE
        script.onreadystatechange = function () {
            if (script.readyState == "loaded" ||
                script.readyState == "complete") {
                script.onreadystatechange = null;

                loadScripts(DynamicResources, index + 1);
            }
        };
    } else {  //Others
        script.onload = function () {

            loadScripts(DynamicResources, index + 1);
        };
    }

    script.src = DynamicResources[index].Path;
    document.getElementsByTagName("head")[0].appendChild(script);
}

//Call this once all scripts have loaded
function CallDocumentLoaded(ignoreScriptCallBack) {

    //Implement this function if we need to fire scripts as soon as they are loaded
    //This may be during a page transition - if the scripts cause performance issues during 
    //a page transition, wait until the transition is finished i.e. implement PageVisibleCallback() instead
    if (!ignoreScriptCallBack) {
        if (typeof ScriptsLoadedCallback === 'function') {
            ScriptsLoadedCallback();
            ScriptsLoadedCallback = null;
        }
    }

    //If page is transitioning, wait until that finishes
    if (isPageTransitioning) {
        window.setTimeout("CallDocumentLoaded(true)", 100);
        return false;
    }

    try {
        PageVisibleCallback();
        PageVisibleCallback = null;
    }
    catch (ex) {
        //ignore - callback method not implemented
    }

    AddMouseEarHoverStates();

    if (ThirdPartiesEnabled == true && AddThisEnabled == true) {
        updateSocialMediaButtons(window.location.pathname);
    }

    $("#PageLoadBlock").remove();
    if (!Next.Settings.UI.PlpDesktopJumpinessFix) {
        setPagePositioning();
    } 
    
    // reset the PagePopped flag here as the page visible callback might need it and this is the latest we can reset it
    PagePopped = false;
    PagePoppedData = null;

    var paymentCompletePageUrl = "/secure/checkout/complete"; //Payment complete page should redirect to "Next home page"
    if (!PageURLInput.match(paymentCompletePageUrl + "$")) {
        if ($.jStorage.storageAvailable()) {
            var lastPageVisited = $.jStorage.get("LastPageVisited");
            if (typeof lastPageVisited !== 'undefined' && lastPageVisited != '') {
                $('ul#steps a.lastPageVisited').attr('href', lastPageVisited);
            }
        }
    }
}

function RemoveDynamicResources() {
    var $ = jQuery;
    if ((PreviousPageResources != undefined) && (PreviousPageResources.length > 0)) {
        var DRObject = PreviousPageResources.shift();

        //Check this item isn't required by current page (i.e. added to dynamic resources)
        if (DynamicResources != null && DynamicResources.length) {
            var exInstance = $.grep(DynamicResources, function (n) {
                return n.Path == DRObject.Path;
            });
            //If the item we're about to remove from DOM exists in the new DynamicResources, don't remove it
            if (exInstance != null && exInstance.length) {
                RemoveDynamicResources();
                return false;
            }
        }

        switch (DRObject.Type) {
            case "JS":
                $($('script[src="' + DRObject.Path + '"]')[0]).remove();
                break;
            case "CSS":
                $($('link[href="' + DRObject.Path + '"]')[0]).remove();
                break;
        }
        RemoveDynamicResources();
    } else {
        isPageTransitioning = false;
    }
}

/* - Animation Stack Handlers - */
function createAnimation() {
    var AnimationStack = new Array();
    return AnimationStack;
}

function addToAnimation(AnimationStack, CommandText, Duration, WaitForComplete) {
    var StackObject
    if (WaitForComplete) {
        StackObject = { Command: CommandText, NextActionDelay: Duration + 10 };
    } else {
        StackObject = { Command: CommandText }
    }
    AnimationStack.push(StackObject);
}

function runAnimation(stack) {
    if (stack.length > 0) {
        StackObject = stack.shift();
        eval(StackObject.Command);
        if (StackObject.NextActionDelay != null && StackObject.NextActionDelay != 0) {
            var timer = window.setTimeout(function () { runAnimation(stack) }, StackObject.NextActionDelay)
        } else {
            runAnimation(stack);
        }
    }
}

/* - Document State Management - */
function getDocStateParamValue(Name) {
    if (documentState[Name] !== undefined)
        return documentState[Name];
    else
        return null;
}

function addParamToDocState(Name, Value) {
    if (documentState[Name] !== undefined) {
        documentState[Name] = Value;
    }
    else {
        documentState[Name] = Value;
    }

    if (window.history.replaceState) {
        window.history.replaceState({ "url": window.location.href, "DocState": documentState, "title": document.title, "scrollPoint": $(window).scrollTop() }, document.title, window.location.href); 			// On load, attempt to replace the last state object on the history stack with one that is populated with the relevent transition data (although in all likely hood this will just insert a new item)
    }
}

function getDocStateString(DocState) {
    var docStateString = ""
    var hashTag = ""
    if (typeof DocState != "undefined" && DocState != null) {
        // If it is already a string, just append it
        if (typeof DocState === "string")
            docStateString = DocState;
        // If it is a JSON object, parse it
        else if (typeof DocState === "object") {
            jQuery.each(DocState, function (varName, varVal) {
                if (varName === 'hashtag')
                    hashTag = '#' + varVal;
                // If this is not a hidden variable, then add it to the docstate string
                else if (varName.indexOf('hidden') !== 0)
                    docStateString += '&' + varName + '=' + varVal;
            });
        }
    }

    return docStateString + hashTag;
}

/* - Page Transitions - */
/* - Context Handlers - */
function getVTransitionContext(url) {
    url = String(url);
    var newVTransitionContext
    if (url == "/") {
        newVTransitionContext = 0;
    } else {
        newVTransitionContext = url.split(/\//g).length - 1;
    }
    return newVTransitionContext;
}

function getHTransitionContext(url) {
    url = String(url);
    var newHTransitionContext
    if (url == "/") {
        newHTransitionContext = -1;
    } else {
        if (url.indexOf("/") != -1) {
            var urlSeg = url.split(/\//g);
            newHTransitionContext = HContextArray.indexOf(urlSeg[1])
        } else {
            newHTransitionContext = 1
        }
    }
    return newHTransitionContext;
}

/* - Layout Size Handlers - */
function resizeContentArea() {
    return false;
}

function ResizeContentAreaToContentV2() {
    return false;
}

/* - CSS Dynamic Content Handlers - */
function scriptEnabledValidation() {
    var $ = jQuery;
    // If JS is enabled, we want to add a class to the body so that we can show/hide content in our CSS
    $('body').addClass('JSEnabled');
    //Also add browser class to body tag

    var browserName;

    if (jqueryUpgradeEnabledOnPage) {
        if (typeof (navigator.userAgent) !== 'undefined') {
            if (navigator.userAgent.search("webkit")) { browserName = "webkit"; }
            if (navigator.userAgent.search("opera")) { browserName = "opera"; }
            //ie11 on desktop will have this broser class name
            if (navigator.userAgent.search("mozilla")) { browserName = "mozilla"; }
            if (navigator.userAgent.search("msie") || !!document.documentMode === true) {
                browserName = "msie" + document.documentMode;     
            }
        }
    } else {
        if (typeof ($.browser) !== 'undefined')
        {
            if ($.browser.webkit) { browserName = "webkit"; }
            if ($.browser.opera) { browserName = "opera"; }
            if ($.browser.mozilla) { browserName = "mozilla"; }//ie11 on desktop will have this broser class name
            if ($.browser.msie) { browserName = "msie" + $.browser.version.split('.')[0]; }
        }
    }

    if (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0) {//this is for IE touch device
        //browserName = "msie" + $.browser.version.split('.')[0];
        browserName = "ie11TouchDevice";
    }
    if (!(window.ActiveXObject) && "ActiveXObject" in window) {
        browserName = "msie11";
    }

    $('body').addClass(browserName);
}

scriptEnabledValidation();

/* - Page Callback Handlers - */

function PageTransitionComplete() {
    try {
        PageVisibleCallback();
        PageVisibleCallback = null;
    }
    catch (ex) {
        //ignore - callback method not implemented
    }
}

/* - Mouse Ear Logic - */
function ShowMouseEarHover(params, forcePopUp) {

    if (isIpad) {
        RemoveMouseEarHover(params.element);
        return false;
    }

    var $ = jQuery;
    if (!params.img) {

        RemoveMouseEarHover(params.element);
        return false;

    }

    var mouseEar = params.element;

    //If mouse ear already has an associated pop up image, return false
    if ($(mouseEar).find(".MouseEarHoverPopUp").length) {
        return false;
    }

    $(mouseEar).addClass("hasPopUp");

    //Create wrapper element
    var hoverEl = $("<div />");
    $(hoverEl).addClass("MouseEarHoverPopUp");

    if (params.title) {
        $(hoverEl).append($("<h5>").text(params.title));
    }

    //Create pointer arrow element
    //Create pointer arrow element for older browsers which don't support psuedo elements (:before/:after)
    if ($("body").hasClass("msie8")) {
        var arrow = $("<div />");
        $(arrow).addClass("MouseEarHoverArrow");
        $(hoverEl).append(arrow);
    }

    //Create image shadow inset wrapper
    var imgWrap = $("<div />");
    $(imgWrap).addClass("MouseEarImg");

    //Create image path
    var imgPath = cdnURL + "/common/items/default/default/sitemaps/" + params.sitemap + params.img;
    //Load the image - make sure the image is loaded before animating into view
    var img = $("<img/>").attr('src', imgPath).load(function () {

        $(imgWrap).append(img);

        //Append image to wrapper element
        $(hoverEl).append(imgWrap);

        //Create text node
        var textNode = $("<h5 />");
        var elName = params.name;
        $(textNode).html(elName);
        $(hoverEl).append(textNode);

        //Hide element
        $(hoverEl).css("opacity", 0);
        //Add it to the page
        $(mouseEar).append(hoverEl);

        //Animate element into view based on which mouse ear it is related to
        if ($(mouseEar).hasClass("Right")) {

            var animations = {
                opacity: 1
            };
            animations[Next.Settings.CSS.right] = "-=" + 20;

            $(hoverEl).animate(animations, 300, 'easeOutBack');
        }

        if ($(mouseEar).hasClass("Left")) {

            var animations = {
                opacity: 1
            };
            animations[Next.Settings.CSS.left] = "-=" + 20;

            $(hoverEl).animate(animations, 300, 'easeOutBack');
        }

    });
}

//Change contents of open pop-up as user pages while mouse is still over the mouseEar
function UpdateMouseEarHover(params) {
    var $ = jQuery;
    var mouseEar = params.element;

    if (!params.img) {
        RemoveMouseEarHover(mouseEar);
        return false;
    }

    var popUp = $(mouseEar).find(".MouseEarHoverPopUp");

    if (popUp.length == 0) {
        ShowMouseEarHover(params, true);
        return false;
    }

    //Create image path
    var imgPath = cdnURL + "/common/items/default/default/sitemaps/" + params.sitemap + params.img;

    $(popUp).find("h5").empty();
    $(popUp).find("h5").html(params.name);

    //Load the image
    var img = $("<img/>").attr('src', imgPath).load(function () {
        $(popUp).find(".MouseEarImgShadow img").first().replaceWith(img);
    });
}

function RemoveMouseEarHover(mouseEar) {

    var $ = jQuery;
    //Animate element away from parent mouse ear based on position of mouse ear then remove from DOM
    if ($(mouseEar).hasClass("Right")) {

        var animations = {
            opacity: 0
        };
        animations[Next.Settings.CSS.right] = "+=" + 20;

        $(mouseEar).find(".MouseEarHoverPopUp")
            .animate(animations, 300, 'easeInBack', function () {
                $(mouseEar).removeClass("hasPopUp");
                $(this).remove();
            });
    }

    if ($(mouseEar).hasClass("Left")) {

        var animations = {
            opacity: 0
        };
        animations[Next.Settings.CSS.left] = "+=" + 20;

        $(mouseEar).find(".MouseEarHoverPopUp")
            .animate(animations, 300, 'easeInBack', function () {
                $(mouseEar).removeClass("hasPopUp");
                $(this).remove();
            });
    }
}

function ClearMouseEarStates() {

    $("div.MouseEar").each(function () {
        $(this).unbind('mouseenter').unbind('mouseleave');
    });
}

//Limit mouse ear position to 1280 width - anything beyoned that, the mouse ears will be fixed
function positionMouseEars() {
    var $ = jQuery;
    if ($(window).width() > 1280) {
        $("body").addClass("LimitWidth");

    } else {
        $("body").removeClass("LimitWidth");
    }
}

//Add hover states for spread mouse ears
function AddSpreadHoverStates() {

    var $ = jQuery;

    //Clear out any mouse ears from previous pages
    $(".MouseEar.Right.Proxy").remove();
    $(".MouseEar.Left.Proxy").remove();

    var $mouseEarRight = $(".MouseEar.Right");
    var $mouseEarLeft = $(".MouseEar.Left");

    //Make new spread mouse ears visible
    $mouseEarRight.addClass("visible");
    $mouseEarLeft.addClass("visible");
    //Unbind any existing hover event handlers
    $mouseEarRight.off('hover');
    $mouseEarLeft.off('hover');
    //If Right mouse ear has a next page image preview, build hover state
    if ($mouseEarRight.attr("data-img").length) {

        var paramsRight = {
            element: $mouseEarRight,
            img: $mouseEarRight.attr("data-img"),
            sitemap: $mouseEarRight.attr("data-sitemap"),
            name: $mouseEarRight.attr("data-name"),
            title: "Coming Next"
        };
        //Create mouseEar hover event handler
        $mouseEarRight.hover(function () { ShowMouseEarHover(paramsRight); }, function () { RemoveMouseEarHover($mouseEarRight); });
        //And close pop up on click
        $mouseEarRight.on("click", function () { RemoveMouseEarHover($mouseEarRight); });
    }
    else if ($mouseEarRight.hasClass("hasPopUp"))
        $mouseEarRight.mouseout(function () { RemoveMouseEarHover($mouseEarRight); })

    //Same as above for left mouse ear
    if ($mouseEarLeft.attr("data-img").length) {

        var paramsLeft = {
            element: $mouseEarLeft,
            img: $mouseEarLeft.attr("data-img"),
            sitemap: $mouseEarLeft.attr("data-sitemap"),
            name: $mouseEarLeft.attr("data-name")
        };

        $mouseEarLeft.hover(function () { ShowMouseEarHover(paramsLeft); }, function () { RemoveMouseEarHover($mouseEarLeft); });
        $mouseEarLeft.on("click", function () { RemoveMouseEarHover($mouseEarLeft); });
    }
    else if ($mouseEarLeft.hasClass("hasPopUp"))
        $mouseEarLeft.mouseout(function () { RemoveMouseEarHover($mouseEarLeft); })

    //Move mouse ears (first time round) to outer wrapper to prevent animations overlapping ears
    if (!$mouseEarLeft.hasClass("spreadEar")) {
        $mouseEarLeft.addClass("spreadEar");
        $(".ContentArea").prepend($mouseEarLeft);
    }

    if (!$mouseEarRight.hasClass("spreadEar")) {
        $mouseEarRight.addClass("spreadEar");
        $(".ContentArea").prepend($mouseEarRight);
    }

    return false;
}

//Create hover event handlers for mouse ears
function AddMouseEarHoverStates() {
    var $ = jQuery;
    //If we're in a Spread page, handle mouse ears separately 
    if ($(".SpreadsPage").length) {
        AddSpreadHoverStates();
        return false;
    }

    //Clean up spread MouseEars
    $(".MouseEar.Left.spreadEar").remove();
    $(".MouseEar.Right.spreadEar").remove();

    //Hide incoming/new MouseEars
    $(".MouseEar.Right").removeClass("visible");
    $(".MouseEar.Left").removeClass("visible");

    var hasNewLeft = false;
    var hasNewRight = false;
    var hasLeftProxy = false;
    var hasRightProxy = false;

    //Check we already have a mouse ear to handle hover/click events
    if ($(".ContentArea div.MouseEar.Left.Proxy").length) {
        hasLeftProxy = true;
    }

    if ($(".ContentArea div.MouseEar.Right.Proxy").length) {
        hasRightProxy = true;
    }
    //Check incoming page has a left and right mouse ear
    if ($(".CurrentContent div.MouseEar.Left").length) {
        hasNewLeft = true;
    } else {
        //Incoming page has no left mouse ear, remove any exisitng Left mouseEar
        $(".ContentArea div.MouseEar.Left.Proxy").remove();
    }

    if ($(".CurrentContent div.MouseEar.Right").length) {
        hasNewRight = true;
    } else {
        $(".ContentArea div.MouseEar.Right.Proxy").remove();
    }
    //Add hover event handlers for each mouse ear
    $(".CurrentContent div.MouseEar").each(function () {

        var mouseEar = $(this);
        var params = {
            element: $(this),
            img: $(this).attr("data-img"),
            sitemap: $(this).attr("data-sitemap"),
            name: $(this).attr("data-name")
        };

        if ($(this).hasClass("Left") && hasLeftProxy) {

            var leftProxy = $(".ContentArea div.MouseEar.Left.Proxy");
            $(leftProxy).off('hover');
            params.element = leftProxy;

            $(leftProxy).attr("data-img", $(this).attr("data-img"));
            $(leftProxy).attr("data-sitemap", $(this).attr("data-sitemap"));
            $(leftProxy).attr("data-name", $(this).attr("data-name"));

            $(leftProxy).hover(function () { ShowMouseEarHover(params); }, function () { RemoveMouseEarHover(leftProxy); });

            $(leftProxy).find("a").attr("href", $(this).find("a").attr("href"));
            $(leftProxy).find("a").attr("onclick", $(this).find("a").attr("onclick"));

            if ($(this).hasClass("Active")) {
                $(leftProxy).removeClass("Inactive");
                $(leftProxy).addClass("Active");
            }

            if ($(this).hasClass("Inactive")) {
                $(leftProxy).removeClass("Active");
                $(leftProxy).addClass("Inactive");
            }


            if ($(leftProxy).hasClass("hasPopUp")) {
                UpdateMouseEarHover(params);
            }
        }

        if ($(this).hasClass("Left") && !hasLeftProxy) {
            $(this).hover(function () { ShowMouseEarHover(params); }, function () { RemoveMouseEarHover(mouseEar); });
            $(this).addClass("Proxy");
            $(".ContentArea").prepend(this);
        }

        if ($(this).hasClass("Right") && hasRightProxy) {

            var RightProxy = $(".ContentArea div.MouseEar.Right.Proxy");
            $(RightProxy).off('hover');
            params.element = RightProxy;
            $(RightProxy).attr("data-img", $(this).attr("data-img"));
            $(RightProxy).attr("data-sitemap", $(this).attr("data-sitemap"));
            $(RightProxy).attr("data-name", $(this).attr("data-name"));

            $(RightProxy).hover(function () { ShowMouseEarHover(params); }, function () { RemoveMouseEarHover(RightProxy); });

            $(RightProxy).find("a").attr("href", $(this).find("a").attr("href"));
            $(RightProxy).find("a").attr("onclick", $(this).find("a").attr("onclick"));


            if ($(this).hasClass("Active")) {
                $(RightProxy).removeClass("Inactive");
                $(RightProxy).addClass("Active");
            }

            if ($(this).hasClass("Inactive")) {
                $(RightProxy).removeClass("Active");
                $(RightProxy).addClass("Inactive");
            }


            if ($(RightProxy).hasClass("hasPopUp")) {
                UpdateMouseEarHover(params);
            }
        }

        if ($(this).hasClass("Right") && !hasRightProxy) {
            $(this).hover(function () { ShowMouseEarHover(params); }, function () { RemoveMouseEarHover(mouseEar); });
            $(this).addClass("Proxy");
            $(".ContentArea").prepend(this);
        }
    });
}

$(function () {
    var $document = $(document),
        left = 0,
        scrollTimer = 0;

    // Detect horizontal scroll start and stop.
    $document.on("scroll", function () {
        var docLeft = $document.scrollLeft();
        if (left !== docLeft && !isTouchEnabled) {
            var self = this, args = arguments;
            if (!scrollTimer) {
                // We've not yet (re)started the timer: It's the beginning of scrolling.
                startHScroll.apply(self, args);
            }
            window.clearTimeout(scrollTimer);
            scrollTimer = window.setTimeout(function () {
                scrollTimer = 0;
                // Our timer was never stopped: We've finished scrolling.
                stopHScroll.apply(self, args);
            }, 100);
            left = docLeft;
        }
    });

    // Horizontal scroll started - Make header absolutely positioned.
    function startHScroll() {
        console.log("Scroll Start");
        $(".PageHeader")
            // Clear out any left-positioning set by stopHScroll.
            .css("left", "")
            .each(function () {
                var $this = $(this),
                    pos = $this.offset();
                // Preserve our current vertical position...
                $this.css("top", pos.top)
            })
            // ...before making it absolutely positioned.
            .css("position", "absolute");
    }

    // Horizontal scroll stopped - Make header float again.
    function stopHScroll() {
        var leftScroll = $(window).scrollLeft();
        console.log("Scroll Stop");
        $(".PageHeader")
            // Clear out any top-positioning set by startHScroll.
            .css("top", "")
            .each(function () {
                var $this = $(this),
                    pos = $this.position();
                // Preserve our current horizontal position, munus the scroll position...
                $this.css("left", pos.left - leftScroll);
            })
            // ...before making it fixed positioned.
            .css("position", "fixed");
    }
});

function isTouchDevice() {
    var deviceAgent = navigator.userAgent.toLowerCase();

    var isTouch = Modernizr.touch ||
        (deviceAgent.match(/(iphone|ipod|ipad)/) ||
            deviceAgent.match(/(android)/) ||
            deviceAgent.match(/(iemobile)/) ||
            deviceAgent.match(/iphone/i) ||
            deviceAgent.match(/ipad/i) ||
            deviceAgent.match(/ipod/i) ||
            deviceAgent.match(/blackberry/i) ||
            deviceAgent.match(/bada/i));

    return isTouch;
}

function setPagePositioning() {
    var $ = jQuery;

    if (isTouchEnabled) {
        // New header is always fixed
          $(".PageHeader").css({
            "position": "fixed",
            "width": "100%",
            "min-width": "1000px"
        });


        $('body').addClass("isTouchDevice");
    }
    else {
        $(".PageHeader").css({
            "position": "fixed",
            "width": "100%",
            "min-width": "1000px"
        });
    }
}

/* - Generic Session Variable Methods - */
var ClientTempSessionVariables = {};    // This is a local store of the Session Variables that will save us from going to the Server each time we want to get a value
var UseLocalStorage = true;             // Config switch to use either Local Storage on the browser or use the Server side Session Storage Objects

function UpdateSessionVariable(variableName, newValue, forceServerPost, successCallback, errorCallback) {
	
	if (UseLocalStorage && !forceServerPost) {
        $.jStorage.set(variableName, newValue);

        if (successCallback)
            successCallback();
    }
    else {
        if ((forceServerPost !== null && forceServerPost !== undefined && forceServerPost) || ClientTempSessionVariables === null || ClientTempSessionVariables === undefined || ClientTempSessionVariables[variableName] === null || ClientTempSessionVariables[variableName] === undefined || (ClientTempSessionVariables[variableName] !== newValue)) {
            // Build the URL used to set Session Variables
            var reqUrl = ''
            if (typeof baseURL != 'undefined')
                reqUrl = baseURL;
            reqUrl += "/session/AddVariable";

			// if a json object is passed as newValue then convert to string and post to the session controller
            if (typeof newValue == "object") {newValue = JSON.stringify(newValue)}
            
        	// Send the request
            $.ajax({
                url: reqUrl,
                data: { name: variableName, value: newValue },
                type: "POST",
                cache: false,
                async: true,
                timeout: 10000,
                dataType: "json",
                xhrFields: { withCredentials: true },
                crossDomain: true,
                success: function (data, textStatus, jqXHR) {
                    checkAndRedirectForAjaxError(jqXHR, false, 'Global.js: UpdateSessionVariable');
                    // Update the temporary client-side session variables
                    ClientTempSessionVariables = data

                    if (successCallback)
                        successCallback(data, textStatus, jqXHR);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (errorCallback)
                        errorCallback(jqXHR, textStatus, errorThrown);
                }
            });
        }
    }
}

function GetSessionVariable(variableName, forceServerGet, successCallback, errorCallback) {
    if (UseLocalStorage) {
        if (successCallback)
            successCallback($.jStorage.get(variableName));
        else
            return $.jStorage.get(variableName);
    }
    else {
        // If we need to force a refresh or the variable doesn't exist in the jQuery temp ClientTempSessionVariables store, then refresh it
        if (forceServerGet || ClientTempSessionVariables === null || ClientTempSessionVariables === undefined || ClientTempSessionVariables[variableName] === null || ClientTempSessionVariables[variableName] === undefined) {
            var reqUrl = ''
            if (typeof baseURL != 'undefined')
                reqUrl = baseURL;
            reqUrl += "/session/GetVariables";

            $.ajax({
                url: reqUrl,
                type: "POST",
                cache: false,
                async: true,
                timeout: 5000,
                dataType: "json",
                xhrFields: { withCredentials: true },
                crossDomain: true,
                success: function (data, textStatus, jqXHR) {
                    checkAndRedirectForAjaxError(jqXHR, false, 'Global.js: GetSessionVariable');
                    ClientTempSessionVariables = data;
                    // Return the value if it exists
                    if (ClientTempSessionVariables !== null && ClientTempSessionVariables !== undefined && ClientTempSessionVariables[variableName] !== undefined) { // Allow this to return a null value as it is valid
                        if (successCallback)
                            successCallback(ClientTempSessionVariables[variableName], data, textStatus, jqXHR);
                    }
                    else {
                        if (errorCallback)
                            errorCallback(jqXHR, textStatus);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (errorCallback)
                        errorCallback(jqXHR, textStatus, errorThrown);
                }
            });
        }
        else {
            // Return the value if it exists
            if (successCallback)
                successCallback(ClientTempSessionVariables[variableName]);
        }
    }
}

/* - Continue Shopping Methods - */
function UpdateContinueShopping(shoppableUrl) {
    var newValue;

    if (typeof shoppableUrl != "undefined")
        newValue = shoppableUrl;
    else
        newValue = window.location.href;

    // Check the current value and update it if the values are different
    GetSessionVariable(
        "ContinueShopping",
        false,
        function (UrlReturned) { // SUCCESS CALLBACK
            var allowUpdate = true;

            // Don't bother re-adding it if it was the last one to be added
            if (UrlReturned != null && UrlReturned != undefined && UrlReturned == newValue) {
                allowUpdate = false;
            }

            if (allowUpdate) {
            	UpdateContinueShoppingAndShoppingHistory(newValue);
            }
        },
        function () { // ERROR CALLBACK
            // Just update it anyway on error (there is an issue with the Get, so Setting it is safer than ignoring it)
            UpdateContinueShoppingAndShoppingHistory(newValue);
        }
    );
}

function UpdateContinueShoppingAndShoppingHistory(newValue) {
    UpdateSessionVariable('ContinueShopping', newValue);

    // If we are using LocalStorage, then we need to manually update the ShoppingHistory too 
    // Note this is replicating server-side logic that is in place in the non-LocalStorage version of this method
    if (UseLocalStorage) {
        GetSessionVariable(
            "ShoppingHistory",
            false,
            function (returnedHistory) {
                var tempHistory = [];
                if (returnedHistory !== null) {
                    tempHistory = returnedHistory;
                }
                tempHistory.push(newValue);

                // We only want to keep a small history, so get rid of the first item
                if (tempHistory.length > 2)
                    tempHistory.shift();

                UpdateSessionVariable("ShoppingHistory", tempHistory);
            }
        );
    }

}

function ContinueShopping(boolSuppressTransition) {

    // Try to get hold of the Continue Shopping Session Variable, if it doesn't exist, then take the user to the homepage

    var suppressTransition = true;
    if (boolSuppressTransition != undefined)
        suppressTransition = boolSuppressTransition;

    // Default to the Base Url if it is available, otherwise default it to the root
    var urlToLoad = '/';
    if (typeof siteBaseUrl != 'undefined') {
        urlToLoad = siteBaseUrl;
    }

    GetSessionVariable(
        "ContinueShopping",
        false,
        function (UrlReturned) { // SUCCESS CALLBACK

            if (UrlReturned != null && UrlReturned != undefined)
                urlToLoad = UrlReturned;
            LoadContinueShoppingUrl(urlToLoad, suppressTransition)
        },
        function () { // ERROR CALLBACK
            LoadContinueShoppingUrl(urlToLoad, suppressTransition)
        }
    );
}

function LoadContinueShoppingUrl(urlToLoad, suppressTransition) {
    // Check whether the path is going to load up in HTTPS and force it to load in HTTP
    if (urlToLoad.indexOf('http:') < 0) {
        // First check whether this is an absolute path in HTTPS
        if (urlToLoad.indexOf('https:') == 0) {
            if (typeof siteBaseUrl != 'undefined') {
                var fullUrlToLoad = new UrlHelper(urlToLoad);
                urlToLoad = siteBaseUrl + fullUrlToLoad.Path() + fullUrlToLoad.Query() + fullUrlToLoad.Hash();
            }
            else
                urlToLoad = 'http' + urlToLoad.substring(5);
        }
        // Otherwise, it must be a relative path, so check if we are in HTTPS and change it accordingly
        else if (window.location.protocol === 'https:') {
            if (typeof siteBaseUrl != 'undefined')
                urlToLoad = siteBaseUrl + urlToLoad;
            else {
                var fullUrlToLoad = new UrlHelper(urlToLoad);
                fullUrlToLoad.Protocol('http:');
                urlToLoad = fullUrlToLoad.FullUrl();
            }
        }
    }

    if (NextBasket
        && NextBasket.Data
        && NextBasket.Data.FromLabelWebsite) {
        urlToLoad = "/transfer/out/label";
    }

    if (suppressTransition)
        window.location = urlToLoad;
    else
        LoadHTMLContent(urlToLoad);
}

function ShopMore() {
    ContinueShopping(true);
    return false;
}


/* - General Helpers - */
function UrlHelper(urlToProcess) {
    this._protocol = '',
        this._host = '',
        this._port = '',
        this._path = '',
        this._query = '',
        this._hash = '';
    this._rawUrl = '';

    if (urlToProcess != undefined) {
        var urlLeftToProcess = urlToProcess;
        var indexTemp = 0;

        this._rawUrl = urlLeftToProcess;

        // Protocol & Host

        if (urlLeftToProcess.substring(0, 4) == 'http') {
            var slashSplit = urlLeftToProcess.split('/');
            this._protocol = slashSplit[0];
            this._host = slashSplit[2].split(':')[0].split('?')[0].split('#')[0];
            if (slashSplit[2].split(':').length > 1)
                this._port = slashSplit[2].split(':')[1].split('?')[0].split('#')[0];
            urlLeftToProcess = urlLeftToProcess.substring(this._protocol.length + 2 + this._host.length + 1 + this._port.length);
        }

        if (urlLeftToProcess.substring(0, 1) == '/')
            urlLeftToProcess = urlLeftToProcess.substring(1);

        // Path

        indexTemp = urlLeftToProcess.indexOf('?');
        if (indexTemp > 0) {
            this._path = urlLeftToProcess.substring(0, indexTemp);
            urlLeftToProcess = urlLeftToProcess.substring(indexTemp);
        }
        else {
            indexTemp = urlLeftToProcess.indexOf('#');
            if (indexTemp > 0) {
                this._path = urlLeftToProcess.substring(0, indexTemp);
                urlLeftToProcess = urlLeftToProcess.substring(indexTemp);
            }
            else {
                this._path = urlLeftToProcess;
                urlLeftToProcess = '';
            }
        }

        if (urlLeftToProcess.substring(0, 1) == '?')
            urlLeftToProcess = urlLeftToProcess.substring(1);

        // Query & Hash

        indexTemp = urlLeftToProcess.indexOf('#');
        if (indexTemp > 0) {
            this._query = urlLeftToProcess.substring(0, indexTemp);
            urlLeftToProcess = urlLeftToProcess.substring(indexTemp);
            if (urlLeftToProcess.substring(0, 1) == '#')
                this._hash = urlLeftToProcess.substring(1);
            urlLeftToProcess = '';
        }
        else {
            this._query = urlLeftToProcess;
            urlLeftToProcess = '';
        }


    }

    this.Protocol = function (newval) {
        if (newval == undefined) {
            if (this._protocol == '')
                return window.location.protocol + '//';
            else
                return this._protocol + '//';
        }
        else {
            this._protocol = newval;
        }
    }

    this.Host = function (newval) {
        if (newval == undefined) {
            if (this._host == '')
                return window.location.hostname;
            else
                return this._host;
        }
        else {
            this._host = newval;
        }
    }

    this.Port = function (newval) {
        if (newval == undefined) {
            if (this._port == '') {
                if (window.location.port == '')
                    return '';
                else
                    return ':' + window.location.port;
            }
            else
                return ':' + this._port;
        }
        else {
            this._port = newval;
        }
    }

    this.Path = function (newval) {
        if (newval == undefined) {
            if (this._path == '')
                return '';
            else
                return '/' + this._path;
        }
        else {
            this._path = newval;
        }
    }

    this.Query = function (newval) {
        if (newval == undefined) {
            if (this._query == '')
                return '';
            else
                return '?' + this._query;
        }
        else {
            this._query = newval;
        }
    }

    this.Hash = function (newval) {
        if (newval == undefined) {
            if (this._hash == '')
                return '';
            else
                return '#' + this._hash;
        }
        else {
            this._hash = newval;
        }
    }

    this.FullUrl = function () {
        return this.Protocol() + this.Host() + this.Port() + this.Path() + this.Query() + this.Hash();
    }

    this.ServerUrl = function () {
        return this.Protocol() + this.Host() + this.Port() + this.Path() + this.Query();
    }

    this.AddQueryParam = function (name, value) {
        this._query += '&' + name + '=' + value;
    }
}

function GetQueryStringValue(name) {
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}

function ConsoleLog(obj) {
    if (window.console && console.log) {
        console.log(obj);
    }
}

function ScrollToPoint(scrollPoint) {
    if (scrollPoint != 'undefined' && scrollPoint != null && (parseInt(scrollPoint) > 100))
        $('html, body').animate({ scrollTop: scrollPoint }, 400);
}

// Check's if an 500 error has occurred during an AJAX call and if so to track it and redirect the user to a friendly error page
function checkAndRedirectForAjaxError(jqXHR, initGaAccount, label) {
    if (jqXHR.getResponseHeader('X-Error500Initiated') == 'True') {
        if (initGaAccount == true) {
            GoogleAnalytics(GAAccount);
        }
        TrackGAEvent('500 AJAX - Internal Server Error', jqXHR.getResponseHeader('X-Error500Message'), label);

        var RedirectError = false;

        if (RedirectError) {
            // Redirect to the error page if we are not on an error page
            if (window.location.href.indexOf('error') === -1 || isErrorPage == false) {
                window.location = '/error';
            }
        }
        else {

            var errorDom = $(jqXHR.responseText);
            $('.CurrentContent').html(errorDom.find('.CurrentContent').html()).addClass('dynamicLoadError');

            // Execute the JavaScript in the the Error Page response
            errorDom.filter('script').each(function () {
                if (this.className != "monetate-tag") {
                    $.globalEval(this.text || this.textContent || this.innerHTML || '');
                }
            });

            resizeContentArea();
        }
    }
}

function SetupFallbackForChannelisedLegalWarningLogos() {
    $(".channelisedLegalWarningLogo").on('error', function () {

        if (Next.Settings.Channel.CountryCode === "GB") {
            $(this).closest('p').remove();
        }
        else {
            var nextSpacerRow = $(this).closest('tr').next('tr.lwTableSpacingRow');
            var prevSpacerRow = $(this).closest('tr').prev('tr.lwTableSpacingRow');
            var lwTable = $(this).closest('table');
            var lwTableRowCount = lwTable.find('tr').length;

            if (lwTableRowCount === 1) {
                lwTable.remove();
            } else {
                if (nextSpacerRow.html()) {
                    nextSpacerRow.remove();
                } else if (prevSpacerRow.html()) {
                    prevSpacerRow.remove();
                }

                $(this).closest('tr').remove();
            }
        }
        $(this).unbind('error');
    });

    
    if (jqueryUpgradeEnabledOnPage) {
        $(".channelisedLegalWarningLogo").on("load", function () {
            $(".legalWarningLogos").show();
        });

    } else {
        $(".channelisedLegalWarningLogo").load(function () {
            $(".legalWarningLogos").show();
        });

    }
}

function AddLegalWarningLogoImage(styleCopy, url, imageName, imageDesc) {

    var $legalWarningLogos = styleCopy.find("#legalWarningLogos");

    // check to see if the image has already been added...   
    var $img = $legalWarningLogos.find("img[src$='" + url + "'][class='channelisedLegalWarningLogo']");

    if ($img.length === 0) {
        $legalWarningLogos.append("<p><img class=\"channelisedLegalWarningLogo\" src='" + url + "' alt='" + imageName + "' />" + imageDesc + "</p>");
    }
}

function SetupFallbackForChannelisedLogos() {
    $(".channelisedLogo").on('error', function () {
        $(this).closest('tr').remove();
        $(this).unbind('error');
    });

    $(".channelisedLogo").on("load", function () {
        $(".logos").show();
    });
}

function AddLogoImage(styleCopy, URL, imageName, imageDesc) {

    $logos = styleCopy.find("#logos");
    $logosTable = $logos.find("table");

    // check to see if the image has already been added...   
    $img = $logosTable.find("img[src$='" + URL + "'][class='channelisedLogo']");

    if ($img.length == 0) {
        $logosTable.append("<tr><td class='img'><img class=\"channelisedLogo\" src='" + URL + "' alt='" + imageName + "' /></td><td><div class='description'>" + imageDesc + "</div></td></tr>");
    }
}

function LoadGomezScripts() {
    if (GomezEnabled) {
        // Create a gomez variable that will be used once the script has loaded
        if (GomezPageTagEnabled && pageLoadStart && GomezPageId) {
            gomez = { gs: pageLoadStart, acctId: 'FDA173', pgId: GomezPageId, grpId: 'Vision' };
            if (typeof (GomezGroupId2) == 'string') {
                gomez.grpId2 = GomezGroupId2;
            }
        }

        // UNCOMMENT BELOW FOR GOMEZ DEBUG LOGGING
        /*
        // Log whatever detail we have
        ConsoleLog("Loading Gomez Tag...");
        ConsoleLog(gomez);

        // Log the time to load so far
        var timeToLoad = new Date().getTime();
        timeToLoad = timeToLoad - pageLoadStart;
        ConsoleLog("Time To Load So Far: " + timeToLoad)
        */

        // Append the gomez script to the page - if we do this any earlier than the footer or doc ready, then we may not have enough params from the page to load the tag
        var docHeadID = document.getElementsByTagName("head")[0];
        var newGomezScript = document.createElement('script');
        newGomezScript.type = 'text/javascript';
        newGomezScript.src = siteAssetsUrl + '/Scripts/Gomez.js?v1';
        docHeadID.appendChild(newGomezScript);
    }
}

function GoBackOrClose() {
    var canGoBack = false;
    var ua = navigator.userAgent || navigator.vendor || window.opera;

    if (Next.Settings.UI.IsSocialPLPEnabled && ((ua.indexOf("FBAN") > -1) || (ua.indexOf("FBAV") > -1))) {
        if (window.location.href.indexOf('frm_sclp') > -1) {
            var __sclPlpUrl = window.location.href.split('#')[0] + '?frm_sclp';
            location.replace(__sclPlpUrl);

            return;
        }
    }

    $(window).on('beforeunload', function () {
        canGoBack = true;
    });

    window.history.back();

    window.setTimeout(function () {
        if (!canGoBack) { window.close(); }
    }, 200);

}

/*
* ----------------------------- JSTORAGE -------------------------------------
* Simple local storage wrapper to save data on the browser side, supporting
* all major browsers - IE6+, Firefox2+, Safari4+, Chrome4+ and Opera 10.5+
*
* Copyright (c) 2010 Andris Reinman, andris.reinman@gmail.com
* Project homepage: www.jstorage.info
*
* Licensed under MIT-style license:
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

/**
* $.jStorage
*
* USAGE:
*
* jStorage requires Prototype, MooTools or jQuery! If jQuery is used, then
* jQuery-JSON (http://code.google.com/p/jquery-json/) is also needed.
* (jQuery-JSON needs to be loaded BEFORE jStorage!)
*
* Methods:
*
* -set(key, value[, options])
* $.jStorage.set(key, value) -> saves a value
*
* -get(key[, default])
* value = $.jStorage.get(key [, default]) ->
*    retrieves value if key exists, or default if it doesn't
*
* -deleteKey(key)
* $.jStorage.deleteKey(key) -> removes a key from the storage
*
* -flush()
* $.jStorage.flush() -> clears the cache
*
* -storageObj()
* $.jStorage.storageObj() -> returns a read-ony copy of the actual storage
*
* -storageSize()
* $.jStorage.storageSize() -> returns the size of the storage in bytes
*
* -index()
* $.jStorage.index() -> returns the used keys as an array
*
* -storageAvailable()
* $.jStorage.storageAvailable() -> returns true if storage is available
*
* -reInit()
* $.jStorage.reInit() -> reloads the data from browser storage
*
* <value> can be any JSON-able value, including objects and arrays.
*
**/

(function ($) {
    if (!$ || !($.toJSON || Object.toJSON || window.JSON)) {
        throw new Error("jQuery, MooTools or Prototype needs to be loaded before jStorage!");
    }

    var
        /* This is the object, that holds the cached values */
        _storage = {},

        /* Actual browser storage (localStorage or globalStorage['domain']) */
        _storage_service = { jStorage: "{}" },

        /* DOM element for older IE versions, holds userData behavior */
        _storage_elm = null,

        /* How much space does the storage take */
        _storage_size = 0,

        /* function to encode objects to JSON strings */
        json_encode = $.toJSON || Object.toJSON || (window.JSON && (JSON.encode || JSON.stringify)),

        /* function to decode objects from JSON strings */
        json_decode = $.evalJSON || (window.JSON && (JSON.decode || JSON.parse)) || function (str) {
            return String(str).evalJSON();
        },

        /* which backend is currently used */
        _backend = false,

        /* Next check for TTL */
        _ttl_timeout,

        /**
        * XML encoding and decoding as XML nodes can't be JSON'ized
        * XML nodes are encoded and decoded if the node is the value to be saved
        * but not if it's as a property of another object
        * Eg. -
        *   $.jStorage.set("key", xmlNode);        // IS OK
        *   $.jStorage.set("key", {xml: xmlNode}); // NOT OK
        */
        _XMLService = {

            /**
            * Validates a XML node to be XML
            * based on jQuery.isXML function
            */
            isXML: function (elm) {
                var documentElement = (elm ? elm.ownerDocument || elm : 0).documentElement;
                return documentElement ? documentElement.nodeName !== "HTML" : false;
            },

            /**
            * Encodes a XML node to string
            * based on http://www.mercurytide.co.uk/news/article/issues-when-working-ajax/
            */
            encode: function (xmlNode) {
                if (!this.isXML(xmlNode)) {
                    return false;
                }
                try { // Mozilla, Webkit, Opera
                    return new XMLSerializer().serializeToString(xmlNode);
                } catch (E1) {
                    try {  // IE
                        return xmlNode.xml;
                    } catch (E2) { }
                }
                return false;
            },

            /**
            * Decodes a XML node from string
            * loosely based on http://outwestmedia.com/jquery-plugins/xmldom/
            */
            decode: function (xmlString) {
                var dom_parser = ("DOMParser" in window && (new DOMParser()).parseFromString) ||
                    (window.ActiveXObject && function (_xmlString) {
                        var xml_doc = new ActiveXObject('Microsoft.XMLDOM');
                        xml_doc.async = 'false';
                        xml_doc.loadXML(_xmlString);
                        return xml_doc;
                    }),
                    resultXML;
                if (!dom_parser) {
                    return false;
                }
                resultXML = dom_parser.call("DOMParser" in window && (new DOMParser()) || window, xmlString, 'text/xml');
                return this.isXML(resultXML) ? resultXML : false;
            }
        };

    ////////////////////////// PRIVATE METHODS ////////////////////////

    /**
    * Initialization function. Detects if the browser supports DOM Storage
    * or userData behavior and behaves accordingly.
    * @returns undefined
    */
    function _init() {
        /* Check if browser supports localStorage */
        var localStorageReallyWorks = false;
        if ("localStorage" in window) {
            try {
                window.localStorage.setItem('_tmptest', 'tmpval');
                localStorageReallyWorks = true;
                window.localStorage.removeItem('_tmptest');
            } catch (BogusQuotaExceededErrorOnIos5) {
                // Thanks be to iOS5 Private Browsing mode which throws
                // QUOTA_EXCEEDED_ERRROR DOM Exception 22.
            }
        }
        if (localStorageReallyWorks) {
            try {
                if (window.localStorage) {
                    _storage_service = window.localStorage;
                    _backend = "localStorage";
                }
            } catch (E3) { /* Firefox fails when touching localStorage and cookies are disabled */ }
        }
        /* Check if browser supports globalStorage */
        else if ("globalStorage" in window) {
            try {
                if (window.globalStorage) {
                    _storage_service = window.globalStorage[window.location.hostname];
                    _backend = "globalStorage";
                }
            } catch (E4) { /* Firefox fails when touching localStorage and cookies are disabled */ }
        }
        /* Check if browser supports userData behavior */
        else {
            _storage_elm = document.createElement('link');
            if (_storage_elm.addBehavior) {

                /* Use a DOM element to act as userData storage */
                _storage_elm.style.behavior = 'url(#default#userData)';

                /* userData element needs to be inserted into the DOM! */
                document.getElementsByTagName('head')[0].appendChild(_storage_elm);

                _storage_elm.load("jStorage");
                var data = "{}";
                try {
                    data = _storage_elm.getAttribute("jStorage");
                } catch (E5) { }
                _storage_service.jStorage = data;
                _backend = "userDataBehavior";
            } else {
                _storage_elm = null;
                return;
            }
        }

        _load_storage();

        // remove dead keys
        _handleTTL();
    }

    /**
    * Loads the data from the storage based on the supported mechanism
    * @returns undefined
    */
    function _load_storage() {
        /* if jStorage string is retrieved, then decode it */
        if (_storage_service.jStorage) {
            try {
                _storage = json_decode(String(_storage_service.jStorage));
            } catch (E6) { _storage_service.jStorage = "{}"; }
        } else {
            _storage_service.jStorage = "{}";
        }
        _storage_size = _storage_service.jStorage ? String(_storage_service.jStorage).length : 0;
    }

    /**
    * This functions provides the "save" mechanism to store the jStorage object
    * @returns undefined
    */
    function _save() {
        try {
            _storage_service.jStorage = json_encode(_storage);
            // If userData is used as the storage engine, additional
            if (_storage_elm) {
                _storage_elm.setAttribute("jStorage", _storage_service.jStorage);
                _storage_elm.save("jStorage");
            }
            _storage_size = _storage_service.jStorage ? String(_storage_service.jStorage).length : 0;
        } catch (E7) { /* probably cache is full, nothing is saved this way*/ }
    }

    /**
    * Function checks if a key is set and is string or numberic
    */
    function _checkKey(key) {
        if (!key || (typeof key != "string" && typeof key != "number")) {
            throw new TypeError('Key name must be string or numeric');
        }
        if (key == "__jstorage_meta") {
            throw new TypeError('Reserved key name');
        }
        return true;
    }

    /**
    * Removes expired keys
    */
    function _handleTTL() {
        var curtime, i, TTL, nextExpire = Infinity, changed = false;

        clearTimeout(_ttl_timeout);

        if (!_storage.__jstorage_meta || typeof _storage.__jstorage_meta.TTL != "object") {
            // nothing to do here
            return;
        }

        curtime = +new Date();
        TTL = _storage.__jstorage_meta.TTL;
        for (i in TTL) {
            if (TTL.hasOwnProperty(i)) {
                if (TTL[i] <= curtime) {
                    delete TTL[i];
                    delete _storage[i];
                    changed = true;
                } else if (TTL[i] < nextExpire) {
                    nextExpire = TTL[i];
                }
            }
        }

        // set next check
        if (nextExpire != Infinity) {
            _ttl_timeout = setTimeout(_handleTTL, nextExpire - curtime);
        }

        // save changes
        if (changed) {
            _save();
        }
    }


    ////////////////////////// PUBLIC INTERFACE /////////////////////////

    $.jStorage = {
        /* Version number */
        version: "0.1.7.0",

        /**
        * Sets a key's value.
        *
        * @param {String} key - Key to set. If this value is not set or not
        *              a string an exception is raised.
        * @param {Mixed} value - Value to set. This can be any value that is JSON
        *              compatible (Numbers, Strings, Objects etc.).
        * @param {Object} [options] - possible options to use
        * @param {Number} [options.TTL] - optional TTL value
        * @returns the used value
        */
        set: function (key, value, options) {
            _checkKey(key);

            options = options || {};

            if (_XMLService.isXML(value)) {
                value = { _is_xml: true, xml: _XMLService.encode(value) };
            } else if (typeof value == "function") {
                value = null; // functions can't be saved!
            } else if (value && typeof value == "object") {
                // clone the object before saving to _storage tree
                value = json_decode(json_encode(value));
            }
            _storage[key] = value;

            if (!isNaN(options.TTL)) {
                this.setTTL(key, options.TTL);
                // also handles saving
            } else {
                _save();
            }
            return value;
        },

        /**
        * Looks up a key in cache
        *
        * @param {String} key - Key to look up.
        * @param {mixed} def - Default value to return, if key didn't exist.
        * @returns the key value, default value or <null>
        */
        get: function (key, def) {
            _checkKey(key);
            if (key in _storage) {
                if (_storage[key] && typeof _storage[key] == "object" &&
                    _storage[key]._is_xml &&
                    _storage[key]._is_xml) {
                    return _XMLService.decode(_storage[key].xml);
                } else {
                    return _storage[key];
                }
            }
            return typeof (def) == 'undefined' ? null : def;
        },

        /**
        * Deletes a key from cache.
        *
        * @param {String} key - Key to delete.
        * @returns true if key existed or false if it didn't
        */
        deleteKey: function (key) {
            _checkKey(key);
            if (key in _storage) {
                delete _storage[key];
                // remove from TTL list
                if (_storage.__jstorage_meta &&
                    typeof _storage.__jstorage_meta.TTL == "object" &&
                    key in _storage.__jstorage_meta.TTL) {
                    delete _storage.__jstorage_meta.TTL[key];
                }
                _save();
                return true;
            }
            return false;
        },

        /**
        * Sets a TTL for a key, or remove it if ttl value is 0 or below
        *
        * @param {String} key - key to set the TTL for
        * @param {Number} ttl - TTL timeout in milliseconds
        * @returns true if key existed or false if it didn't
        */
        setTTL: function (key, ttl) {
            var curtime = +new Date();
            _checkKey(key);
            ttl = Number(ttl) || 0;
            if (key in _storage) {

                if (!_storage.__jstorage_meta) {
                    _storage.__jstorage_meta = {};
                }
                if (!_storage.__jstorage_meta.TTL) {
                    _storage.__jstorage_meta.TTL = {};
                }

                // Set TTL value for the key
                if (ttl > 0) {
                    _storage.__jstorage_meta.TTL[key] = curtime + ttl;
                } else {
                    delete _storage.__jstorage_meta.TTL[key];
                }

                _save();

                _handleTTL();
                return true;
            }
            return false;
        },

        /**
        * Deletes everything in cache.
        *
        * @return true
        */
        flush: function () {
            _storage = {};
            _save();
            return true;
        },

        /**
        * Returns a read-only copy of _storage
        *
        * @returns Object
        */
        storageObj: function () {
            function F() { }
            F.prototype = _storage;
            return new F();
        },

        /**
        * Returns an index of all used keys as an array
        * ['key1', 'key2',..'keyN']
        *
        * @returns Array
        */
        index: function () {
            var index = [], i;
            for (i in _storage) {
                if (_storage.hasOwnProperty(i) && i != "__jstorage_meta") {
                    index.push(i);
                }
            }
            return index;
        },

        /**
        * How much space in bytes does the storage take?
        *
        * @returns Number
        */
        storageSize: function () {
            return _storage_size;
        },

        /**
        * Which backend is currently in use?
        *
        * @returns String
        */
        currentBackend: function () {
            return _backend;
        },

        /**
        * Test if storage is available
        *
        * @returns Boolean
        */
        storageAvailable: function () {
            return !!_backend;
        },

        /**
        * Reloads the data from browser storage
        *
        * @returns undefined
        */
        reInit: function () {
            var new_storage_elm, data;
            if (_storage_elm && _storage_elm.addBehavior) {
                new_storage_elm = document.createElement('link');

                _storage_elm.parentNode.replaceChild(new_storage_elm, _storage_elm);
                _storage_elm = new_storage_elm;

                /* Use a DOM element to act as userData storage */
                _storage_elm.style.behavior = 'url(#default#userData)';

                /* userData element needs to be inserted into the DOM! */
                document.getElementsByTagName('head')[0].appendChild(_storage_elm);

                _storage_elm.load("jStorage");
                data = "{}";
                try {
                    data = _storage_elm.getAttribute("jStorage");
                } catch (E5) { }
                _storage_service.jStorage = data;
                _backend = "userDataBehavior";
            }

            _load_storage();
        }
    };

    // Initialize jStorage
    _init();

})(window.$ || window.jQuery);


// ------- Helper -------------
var Helpers = {
    RoundToHalf: function (value) {
        //<summary>Converts decimal to nearest half value (e.g 4.3=4.5, 5.1=5)</summary>

        var converted = parseFloat(value); // Make sure we have a number 
        var decimal = (converted - parseInt(converted, 10));
        //Set to Math.floor to match value returned by search provider
        decimal = Math.floor(decimal * 10);
        if (decimal == 5) { return (parseInt(converted, 10) + 0.5); }
        if ((decimal < 3) || (decimal > 7)) {
            return Math.round(converted);
        } else {
            return (parseInt(converted, 10) + 0.5);
        }
    },
    FormatDate: function (JavascriptDateTime) {

        var dateString = JavascriptDateTime.substring(0, 10);

        var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

        var dateArr = dateString.split('-');
        var year = dateArr[0];

        var monthString = dateArr[1];
        var monthInt = parseInt(monthString, 10);
        var monthIndex = monthInt - 1;

        var month = monthNames[monthIndex];
        var day = dateArr[2];

        var dateJSON =
        {
            "day": day,
            "month": month,
            "year": year
        }

        return dateJSON;
    }
}

// ------- Helper -------------
var Helpers = {
    RoundToHalf: function (value) {
        //<summary>Converts decimal to nearest half value (e.g 4.3=4.5, 5.1=5)</summary>

        var converted = parseFloat(value); // Make sure we have a number 
        var decimal = (converted - parseInt(converted, 10));

        //Set to Math.floor to match value returned by search provider
        decimal = Math.floor(decimal * 10);
        if (decimal == 5) { return (parseInt(converted, 10) + 0.5); }
        if ((decimal < 3) || (decimal > 7)) {
            return Math.round(converted);
        } else {
            return (parseInt(converted, 10) + 0.5);
        }
    },
    FormatDate: function (JavascriptDateTime) {

        var dateString = JavascriptDateTime.substring(0, 10);

        var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

        var dateArr = dateString.split('-');
        var year = dateArr[0];

        var monthString = dateArr[1];
        var monthInt = parseInt(monthString, 10);
        var monthIndex = monthInt - 1;

        var month = monthNames[monthIndex];
        var day = dateArr[2];

        var dateJSON =
        {
            "day": day,
            "month": month,
            "year": year
        }

        return dateJSON;

    },
    FormatCurrencyAndPrice: function (currencySymbol, currencyPosition, price) {
        switch (currencyPosition) {
            case 'left':
                return currencySymbol + price;
            case 'right':
                return price + currencySymbol;
            case 'leftwithspace':
                return currencySymbol + ' ' + price;
            case 'rightwithspace':
                return price + ' ' + currencySymbol;
            default:
                return currencySymbol + price;
        }
    }
}

var GlobalURLHelper = {
    SetRedirectUrl: function (url) {

        if (url.length < 1) {
            return url;
        }

        var MainSiteAbsolutePath = Next.Settings.Channel.MainSiteAbsolutePath;

        //check first character of url
        var firstUrlChar = url.charAt(0)

        if (firstUrlChar !== '/') {
            url = '/' + url;
        }

        if (MainSiteAbsolutePath == '/') {
            return url;

        } else
            return url = MainSiteAbsolutePath + url;
    }
}

var Button = {
    Vars: {
        Classes: {
            Loading: "loading"
        }
    },
    UpdateUI: function ($btn, settings) {

        var _this = this;

        if (settings.loading) {

            var btnWidth = $btn.width();

            $btn.width(btnWidth)
                .addClass(_this.Vars.Classes.Loading);
        }
        else if (settings.loading == false) {

            $btn.removeClass(_this.Vars.Classes.Loading)
                .css("width", "");
        }

    }
}

var Next = Next || {};
Next.NextTrial = {
    Init: function (trialEnabled) {
        this.Vars.TrialEnabled = trialEnabled;
        this.Vars.TrialImgPath = "/content/co-uk/images/trial/";
        this.Vars.TrialImgAltTxt = "Northern Ireland Only | FREE next day delivery to home on orders over &pound;50&#42;. All deliveries and returns to store are FREE. Returns collected from your home cost &pound;1.99. &#42; Subject to stock, and courier availability. Product exceptions apply see full Terms and Conditions.";
        this.Vars.TrialRefundTxt = 'All deliveries and returns to store are free. Returns collected from your home cost &pound;2.50. Subject to stock, and courier availability. Product exceptions apply, see full <a href=\"/terms" target=\"_blank\"><u>Terms and Conditions</u></a>.';
        this.Vars.TrialInitialised = true;
        this.Vars.TrialCookieName = 'Next-TL';
    },

    Vars: {
        TrialEnabled: null,
        TrialImgPath: null,
        TrialInitialised: false
    },

    InitRecursiveCheck: function (f) {
        if (!this.Vars.TrialInitialised) {
            setTimeout(function () {
                f();
            }, 600);
            return false;
        }
        else {
            return true;
        }
    },

    trackGa: function () {
        var _this = this;
        var trialId = _this.getTrialCookieKeyValue(_this.Vars.TrialCookieName, 'id');
        var urlPath = window.location.pathname.toLowerCase();

        if (!Next.NextTrial.InitRecursiveCheck(_this.trackGa)) {
            return false;
        }

        if (_this.getTrialCookie(_this.Vars.TrialCookieName) != null) {
            if (urlPath == "/") {
                TrackGAEvent('Trial', trialId, 'NI Homepage', 0);
            } else if (urlPath == "/shoppingbag") {
                TrackGAEvent('Trial', trialId, 'NI Shoppingbag', 0);
            } else if (urlPath == "/quickshop") {
                TrackGAEvent('Trial', trialId, 'NI Quickshop', 0);
            } else if (urlPath == "/delivery/") {
                TrackGAEvent('Trial', trialId, 'NI Delivery', 0);
            }
        }
    },


    getTrialCookie: function (name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    },

    getTrialCookieKeyValue: function (cookieName, keyName) {
        var _this = this;
        var nextTrialCookie = _this.getTrialCookie(cookieName);
        if (nextTrialCookie != null) {
            var splitVars = nextTrialCookie.split("&");
            for (var i = 0; i < splitVars.length; i++) {
                var splitKvp = splitVars[i].split("=");
                if (splitKvp != null && splitKvp[0] == keyName)
                    return splitKvp[1];
            }
        }
        return null;
    },

    getTrialHomepage: function () {

        var _this = this;
        if (window.location.pathname != "/") {
            return false;
        }

        if (!Next.NextTrial.InitRecursiveCheck(_this.getTrialHomepage)) {
            return false;
        }

        if (_this.Vars.TrialEnabled == 'true') {
            if (_this.getTrialCookie(_this.Vars.TrialCookieName) != null) {
                var trialId = _this.getTrialCookieKeyValue('Next-TL', 'id');
                var trialStoreFrontUrl = window.location.href + trialId;

                if (trialId != null) {
                    $.ajax({
                        url: trialStoreFrontUrl,
                        timeout: 10000,
                        dataType: 'html',
                        type: 'GET',
                        error: function () { },
                        success: function (htmlResponse, textStatus, jqXHR) {
                            checkAndRedirectForAjaxError(jqXHR, false, 'global.js: function getTrialHomepage');
                            var htmlDataResponse = $(htmlResponse);
                            $('.Storefront .Background').replaceWith(htmlDataResponse.find('.Storefront .Background'));
                            _this.trackGa();
                        },
                        complete: function (jqXHR, errorThrown) {
                            if (errorThrown == 'timeout') {

                            }
                        }
                    })
                }
            }
        }
    },

    getTrialShopBanner: function () {
        var _this = this;

        if (!Next.NextTrial.InitRecursiveCheck(_this.getTrialShopBanner)) {
            return false;
        }

        var trialImgPath = _this.Vars.TrialImgPath;
        var trialImgAltTxt = _this.Vars.TrialImgAltTxt;
        var shoppingBagImgPath;

        var oBanner = $('.ContentArea .trialShopBanner');
        if (_this.Vars.TrialEnabled == 'true') {
            if (_this.getTrialCookie('Next-TL') != null) {

                var trialId = _this.getTrialCookieKeyValue('Next-TL', 'id');
                if (trialId != null) {
                    if (oBanner.length) {
                        shoppingBagImgPath = MainSiteURL + trialImgPath + trialId + '/shop.jpg';
                        oBanner.html("<img src='" + shoppingBagImgPath + "' alt='" + trialImgAltTxt + "' />");
                        _this.trackGa();
                    }
                }
            }
        }
    },

    getTrialCheckoutBanner: function () {
        var _this = this;
        var MainSiteURLSecure = window.location.protocol + "//" + window.location.host;

        if (!Next.NextTrial.InitRecursiveCheck(_this.getTrialCheckoutBanner)) {
            return false;
        }

        var trialImgPath = _this.Vars.TrialImgPath;
        var trialImgAltTxt = _this.Vars.TrialImgAltTxt;
        var checkoutImgPath;

        var oBanner = $('#deliveryForm .trialCheckoutBanner');
        if (_this.Vars.TrialEnabled == 'true') {
            if (_this.getTrialCookie('Next-TL') != null) {

                var trialId = _this.getTrialCookieKeyValue('Next-TL', 'id');
                if (trialId != null) {
                    if (oBanner.length) {
                        checkoutImgPath = MainSiteURLSecure + trialImgPath + trialId + '/checkout.jpg';
                        oBanner.html("<img src='" + checkoutImgPath + "' alt='" + trialImgAltTxt + "' />");
                        _this.trackGa();
                    }
                }
            }
        }
    },

    getTrialCheckoutRefundTxt: function () {
        var _this = this;

        if (!Next.NextTrial.InitRecursiveCheck(_this.getTrialCheckoutRefundTxt)) {
            return false;
        }

        var trialImgPath = _this.Vars.TrialImgPath;
        var trialImgAltTxt = _this.Vars.TrialImgAltTxt;
        var trialRefundTxt = _this.Vars.TrialRefundTxt;

        var oRefundTxt = $('.dBag .trialCheckoutRefundTxt');
        if (_this.Vars.TrialEnabled == 'true') {
            if (_this.getTrialCookie('Next-TL') != null) {

                var trialId = _this.getTrialCookieKeyValue('Next-TL', 'id');
                if (trialId != null) {
                    if (oRefundTxt.length) {
                        oRefundTxt.html(trialRefundTxt);
                    }
                }
            }
        }
    }
}

$(function () {
    var urlPath = window.location.pathname.toLowerCase();
    if (typeof NextTrialEnabled !== "undefined") {
        Next.NextTrial.Init(NextTrialEnabled);
    }
});

function isValidDomain(domain) {
	return domain.split(".").length > 2;
}

function getValidDomain() {
    var siteUrl = Next.Settings.Channel.SiteUrl;

    var domains = ["next"];
    var strippedDownUrl = "";

    for (var i = 0; i < domains.length; ++i) {
        var domainVal = domains[i];
        var regex = new RegExp("^.*" + domainVal + "")
        strippedDownUrl = (siteUrl.replace(regex, domainVal)).replace(/(?=\/)(.*)/, '');

        if (isValidDomain(strippedDownUrl)) {
            return strippedDownUrl;
        }
    }
    
    return "";
}

function generateAlternativeCookiePolicy(site, link, showFull) {

    var returnString = "";
    var cookiePolicyClass = !showFull ? "altCookiePolicySmall" : "";

    var isUK = Next.Settings.Channel.CountryCode === 'GB';
    var isChildsPlay = site === "Childsplay";
    var isFromNext = window.location.href.toLowerCase().indexOf('?fromnext') > 0;
    var directToCP = isChildsPlay && !isFromNext ? " cp-direct" : "";

    returnString += "<div id='alternativeCookiePolicy' class='col-sm-10 " + cookiePolicyClass + directToCP + "'>";

    if (showFull) {
        var cookiePolicyHeaderText;
        var sectionImg1Class, sectionImg2Class, sectionImg3Class, sectionImg4Class;
        var section1Text, section2Text, section3Text, section4Text;
        var section1Hide, section2Hide;

        sectionImg1Class = "sharedBag";
        sectionImg2Class = "nextUnlimited";
        sectionImg3Class = "spreadCosts";
        sectionImg4Class = "backArrow";

        section1Hide = false;
        section2Hide = false;

        switch (site) {
            case "Childsplay":
                sectionImg1Class = "luxuryBrands";
                sectionImg2Class = "sharedBag";
                cookiePolicyHeaderText = "Childsplay Clothing";
                section1Text = "Luxury Kids Brands from Moncler to Versace";
                section2Text = "Shared Shopping Bag across Next and Childsplay";
                section3Text = "Pay Using your Next Pay Account*";
                section4Text = "Easily Navigate Back to Next";
                section2Hide = !Next.Settings.Channel.StateConvergence.IsEnabled;
                break;
        }

        var sectionHiddenFormatClass = section1Hide || section2Hide ? "sectionHiddenFormat " : "";

        returnString += "<div class='altCookiePolicyHeader'>";
        if (!isChildsPlay) {
            returnString += "<span class='altCookiePolicyHeaderText'>Welcome to <span class='altCookiePolicyHeaderLogo'></span>" + cookiePolicyHeaderText + "</span>";
        } else {
            returnString += "<span class='altCookiePolicyHeaderText'>Welcome to " + cookiePolicyHeaderText + "</span>";
        }
        returnString += "<span class='altCookiePolicyClose'></span>";
        returnString += "</div>";

        returnString += "<div id='altCookiePolicySections'>";
        if (!section1Hide) {
            returnString += "<div class='" + sectionHiddenFormatClass + "altCookiePolicySection'><span class='altCookiePolicySectionImage " + sectionImg1Class + "'></span><span class='altCookiePolicySectionText'>" + section1Text + "</span></div>";
        }
        if (!section2Hide) {
            returnString += "<div class='" + sectionHiddenFormatClass + "altCookiePolicySection'><span class='altCookiePolicySectionImage " + sectionImg2Class + "'></span><span class='altCookiePolicySectionText'>" + section2Text + "</span></div>";
        }

        returnString += "<div class='" + sectionHiddenFormatClass + "altCookiePolicySection'><span class='altCookiePolicySectionImage " + sectionImg3Class + "'></span><span class='altCookiePolicySectionText'>" + section3Text + "</span></div>";
        returnString += "<div class='" + sectionHiddenFormatClass + "altCookiePolicySection'><span class='altCookiePolicySectionImage " + sectionImg4Class + "'></span><span class='altCookiePolicySectionText'>" + section4Text + "</span></div>";

        returnString += "</div>";
    }
  
    returnString += "<div id='altCookiePolicyLegal'" + (isChildsPlay && isFromNext ? " class='from-next'" : "") + ">";

    if (!isChildsPlay || (isChildsPlay && isFromNext && isUK)) {
        returnString += "<span class='altCookieNextPayTerms'>*29.9% APR Representative Variable. Credit subject to status.</span>";
    }

    returnString += " We use cookies to provide you with the best possible experience. By continuing to use our site, you agree to our use of cookies. <a href='" + link + "' target='_blank'>Find out more</a> about managing your cookie settings.<span class='altCookiePolicyClose'></span></div>"


    returnString += "</div>";

    return returnString;
}

$(document).ready(function () {
    //Moved before userConsentManagementEnabled check.
    if (!Next.Settings.Channel.PlatModGoogleAnalyticsSDK) {
        $('#platform_modernisation_header').on('click',
            'a,\
         button,\
         [data-testid="header-small-screen-search"]>[role="link"],\
         [data-testid="country-selector-select-menu"] li',
            function () {
                if (currentKey) {
                    currentKey = null
                    return
                }

                var $this = $(this)
                var testId = $this.data("testid")
                if (testId &&
                    (testId == "header-search-bar-clear-text-button" ||
                        testId == "header-search-bar-button")) {
                    var variant2 = $this.closest('[data-testid$="screen-search"]').find('[data-testid="header-search-bar-text-input"]').val();
                    TrackPlatModLinkID($this, null, variant2)
                    return
                }

                TrackPlatModLinkID($this);
            }
        );

        $('#platform_modernisation_header').on('keypress', '.header-adaptive-search form [data-testid="header-search-bar-text-input"]', function (e) {
            if (e.which == 13) {
                currentKey = 13
                var $this = $(this)
                TrackPlatModLinkID($this, null, $this.val(), $this.data('ga-enter-event'));
            }
        });
    }

    if (!Next.Settings.Channel.EnableModernisedConsentCookie) {
        var enabled = "true"; // Toggle for UK channels only
        if (Next.Settings.Channel.CountryCode !== 'GB') eraseCookie('NextConsentCookie');// This deletes the UK Consent Cookie if an International customer has it.
        var siteUrl = Next.Settings.Channel.SiteUrl;
        var nextConsentCookie = (Next.Settings.Channel.CountryCode === 'GB') ? readCookie('NextConsentCookie') : readCookie('NextDirectConsentCookie');
        var aLink = (Next.Settings.Channel.CountryCode === 'GB') ? siteUrl + "/privacy" : siteUrl + "/privacypolicy";
        var ukChannels = Next.Settings.Channel.ChannelId === "NEXT_GB" || Next.Settings.Channel.ChannelId === "NXTA_GB" || Next.Settings.Channel.ChannelId === "NXTB_GB" || Next.Settings.Channel.ChannelId === "NXTD_GB";
        var fromNextCookieName = Next.Settings.Cookie.BackToNextCookieName;
        var isFromNext = readCookie(fromNextCookieName) === "True";
        var isChildsPlay = Next.Settings.Channel.ChannelTheme === "Childsplay";
        var userConsentManagementEnabled = Next.Settings.Channel.UserConsentManagement.Enabled;

        if (userConsentManagementEnabled === true) {
            return;
        }
        else if ((enabled == "true" && ukChannels) || Next.Settings.UI.CookiePolicyPopup) {
            if (nextConsentCookie == null) {
                var cookiePopUp = "";
                if (Next.Settings.Channel.EnableAltCookiePolicy) {
                    if (isFromNext || isChildsPlay) {
                        cookiePopUp = generateAlternativeCookiePolicy(Next.Settings.Channel.ChannelTheme, aLink, true);
                    } else {
                        cookiePopUp = generateAlternativeCookiePolicy(Next.Settings.Channel.ChannelTheme, aLink, false);
                    }

                } else {
                    cookiePopUp = '<div class="CookieConsent hide-in-app-mode"><p style="font-weight:600">' + nxt.jstranslations.cookiepolicy.header + '</p><div class="CookieConsentCross"></div><p>' + nxt.jstranslations.cookiepolicy.messagebody1 + ' <br/> <a id="aFindOutMore" href="' + aLink + '" target="_blank" style="text-decoration:underline">' + nxt.jstranslations.cookiepolicy.messagebody2 + '</a> ' + nxt.jstranslations.cookiepolicy.messagebody3 + '</p ></div > ';
                }
                $("body").append(cookiePopUp);

                var d = new Date();
                d.setTime(d.getTime() + (365 * 24 * 60 * 60 * 1000)); //1 years expiry time
                var expires = "expires=" + d.toUTCString();
                var domain = getValidDomain(); // strip URL down to just next domain e.g. https://account.next.de/de -> .next.de
                // If domain computed is not correct just use the configured domain
                if (!isValidDomain(domain)) {
                    domain = Next.Settings.Channel.CookieDomainName;
                }
                var cookieData = (Next.Settings.Channel.CountryCode === 'GB') ? "NextConsentCookie=" : "NextDirectConsentCookie=";
                cookieData += "AllowCookiesFromNext=True;path=/;" + expires + ";domain=" + domain;
                document.cookie = cookieData;
            }
        }

        $('.CookieConsent').on("click", function (event) {
            if (event.target.toString() != aLink) {

                $('.CookieConsent').hide();
            }
        });
        $('.altCookiePolicyClose').on("click", function (e) {
            $("#alternativeCookiePolicy").hide();
        })
    }
});
;
//define a global namespace for nxt - this will be used in all js file requiring translation.
var nxt = window.nxt || {};

(function ($, nx) {   

    /*
     * formats a JS string using string interpolation similar to string.Format in .Net
     * Usage:
     * var param1 = 3;
     * var param2 = "shopping bag";
     * var message = nxt.stringFormat("You have {0} items in your {1}", param1, param2);
     */    
    nx.stringFormat = function (string) {
        var args = arguments;
        return string.replace(/{(\d+)}/g, function (match, index) {
            var pos = parseInt(index) + 1;
            return args[pos] < 0 ? args[pos] || Math : args[pos];
        });
    };

    

    //initialise
    nxt.jstranslations = nxt.jsData.next.jscontent;

})(window.jQuery, nxt);;
var FontLoader = {
    Init: function () {

        var _this = this;

        WebFont.load({
            timeout: 2000,
            custom: {
                families: ['azo-sans']
            },
            fontactive: function () {
                
                _this.FontLoadComplete();

            },
            fontinactive: function () {

                _this.FontLoadComplete();

            }
        });

    },
    FontLoadComplete: function () {

        if (typeof setNavItemWidths === "function") {
            setNavItemWidths();
        }

    }
}

$(function () {
    FontLoader.Init();
});;
var Next = Next || {};
Next.UI = Next.UI || {};
Next.UI.CustomDropDown = {
    Init: function () {

        if (Next.Settings.UI.CustomDropdownEnabled) {

            $("select[data-customdropdown='true']:visible").each(function(i, v) {

                var $this = $(this);
                if (!$this.data("dropkick")) {
                    $this.dropkick();
                }

            });
        }

    }
}

$(function () {
    Next.UI.CustomDropDown.Init();
});;

/* - Functions -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/* - Site Chrome / Layout ------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/* - Prototype Code ----------------------------------------------------------------------------------------------------------------------------------------------------------------*/

var xhr = null;
var isPageTransitioning = null;
var isSpreadTransitioning = null;
var isDragging = false;
var globalPageReferrer = document.referrer;
var globalPageLocation = document.location.href;
var lastRequest = null;

function toggleFixedProductViewer() {																									// Check to see if the footer is in the correct state for the document's scroll position.
    if ($("ProductViewer")) {
        var PVB = $(document).scrollTop() + $(".ProductViewer").height() + 130; 														// (VPB = View Port Bottom) Calculates the position of the bottom of the users browser viewport on the document
        var FTB = $(".FooterPromotions").position().top; 			 																	// (FTB = Footer Toolbar Bottom) Calculates the position of the bottom of the footer toolbar, when not fixed and in document flow
        if (PVB < FTB) {																												// If the View Port Bottom Position is less than the normal position of the bottom of the footer toolbar when it's in the document flow (ie the toolbar would be out of view) then
            if (parseInt($(".PageHeader").height()) == 48 && $(document).scrollTop() >= 32) {
                pinProductViewer()																											// Pin the Footer Toolbar to the bottom of the browser chrome
            } else {
                releaseProductViewer();
            }
        } else {																														// Otherwise (ie the toolbar would be fully in view
            releaseProductViewer("Bottom"); 																										// Unpin the toolbar from the browser chrome, and drop it back in to the document flow.
        }
    }
}

function pinProductViewer() {
    /*
    if ($(".ProductViewer").hasClass("Top")) {
    $(".ProductViewer").removeClass("Top");
    }																										
    */
    if ($(".ProductViewer").hasClass("Bottom")) {
        $(".ProductViewer").removeClass("Bottom");
    }
    if (!$(".ProductViewer").hasClass("Fixed")) {
        $(".ProductViewer").addClass("Fixed");
    } else {
        $(".ProductViewer").removeAttr("style");
    }
}

function releaseProductViewer(className) {
    /*
    if ($(".ProductViewer").hasClass("Top")) {
    $(".ProductViewer").removeClass("Top");
    }																										
    */
    if ($(".ProductViewer").hasClass("Fixed")) {
        $(".ProductViewer").removeClass("Fixed");
    }

    if (className == "Bottom" && !$(".ProductViewer").hasClass("Bottom")) {
        $(".ProductViewer").addClass("Bottom");
    }
    $(".ProductViewer").removeAttr("style");
}

/* - Page / Data Handlers ----------------------------------------------------------------------------------------------------------------------------------------------------------*/

function LoadHTMLFragment(Path, Parameters, TargetElement) {
    //  alert("Remove This Call!");
    $.get(Path, Parameters, function (data) { document.getElementById(TargetElement).innerHTML = data; });
}

// Method:      LoadHTMLContent
// Description: This is the main method called by pages when a link is clicked
//              It will check whether the link is the current page, whether another page is already loading and also whether the browser can use the HTML5 History Object (Pushstate)
//              If it passes these checks then it will load the respective data and kick off a transition
// Params:
//              Path:               [REQUIRED] String - The URL of the content to be loaded - e.g. '/women'
//              Title:              [OPTIONAL] String - The title of the conent to be loaded (used for history object) - e.g. 'Next.co.uk - Women'
//              Transition:         [OPTIONAL] String - This will override the default transition UP/DOWN/LEFT/RIGHT - e.g. 'RIGHT'
//              AddToHistory:       [OPTIONAL] Boolean - This will determine whether the history stack needs to be updated - e.g. true
//              ScrollPoint:        [OPTIONAL] Integer - This will scroll the document to the specified point after loading - e.g. 0
//              DocState:           [OPTIONAL] JSON - This is an object that contains querystring params that are specific to the page. These will be appended to the path and used on page load. If a variable name begins with 'hidden', it will not be appended to the path and the hashtag variable is reserved & placed at the end of the querystring - e.g. { spreadview: true, hiddenSearchbreadcrumb: '<div>secret</div>', hashtag: '123456x50' }
//              FormData:           [OPTIONAL] JSON - If form data (page params) needs to be sent with the $.get request, it can be specified here - e.g. { w: 'dress' }
//              CompletionCallback: [OPTIONAL] Function - Once the transition is complete, this method will be called - e.g. function() { ConsoleLog('Page has loaded...'); }

function LoadHTMLContent(Path, Title, Transition, AddToHistory, ScrollPoint, DocState, FormData, CompletionCallback) {

    if (typeof mobileDragged !== 'undefined' || typeof isDragStopping !== 'undefined') {
        if (mobileDragged || isDragStopping) {
            return false;
        }
    }


    var $ = jQuery;
    var allowTransition = true;

    // Check whether the parent of the DOM element that called this has a class "Inactive"
    // This is mainly for Mouse Ears, where the user is on the last Spread in a Department and they select the Right Mouse Ear to load up a malformed sread page
    if ((this.event != undefined) && this.event.srcElement && this.event.srcElement.parentNode && this.event.srcElement.parentNode.parentNode) {
        var srcWrapper = this.event.srcElement.parentNode.parentNode;
        if ($(srcWrapper).hasClass("Inactive")) {
            return false;
        }
    }

    //This ensures, no matter what happens, we don't lock the UI for more than 2 seconds
    //In theory this wont be needed but acts as a fallback should something go wrong
    var newRquest = new Date().getTime();
    if (lastRequest != null) {
        if ((newRquest - lastRequest) > 2000) {
            isPageTransitioning = false;
        }
    }
    lastRequest = newRquest;

    //$("section.BreadcrumbNavigation div.Content a.ContinueShopping").remove(); // this will remove 'continue shopping' link from all other pages - Raj

    //Check if we're loading an external URL - external URLs should be loaded in a new window
    if (Path.indexOf(location.hostname) == -1 && Path.indexOf("http://") == 0) {
        window.open(Path, "_blank");
        return false;
    }

    //If page is transitioning, ignore request
    if (isPageTransitioning || isDragging) {
        return false;
    }

    //This is for browsers that support pushState - if the user loads a page by manipulating the url or clicks on a standard link with no onclick event
    //the browser will fully load the requested page. If the user then hits the back button the loadHTML content will fire at the same time as a full refresh,
    //effectively requesting the same content twice. This stops a transition happening on the same page AFTER the content has loaded.
    //Previously, this only comapred the Path element, but it has been modified to compare the full url as it was causing issues on the search page when consecutive searches were made
    var newUrl = new UrlHelper(Path);
    var currUrl = new UrlHelper(PageURLInput);

    if (newUrl.ServerUrl() == currUrl.ServerUrl()) {
        isPageTransitioning = false;
        return false;
    }

    $("section.BreadcrumbNavigation div.Content a.ContinueShopping").remove(); // this will remove 'continue shopping' link from all other pages - Raj

    // If we are on an error page, then we should not transition to the next page as the DOM may be in a bad state
    if (window.location.pathname.indexOf('error') > -1) {
        allowTransition = false;
    }

    // Temporary solution to force lipsy homepage to be loaded without transitions - this is required until the storefronts are moved into the MVC architechure
    if ((newUrl.Path() == '/lipsy') || (newUrl.Path() == '/lipsy/')) {
        allowTransition = false;
    }

    // Check if the DocState was passed in and make it blank if it wasn't
    if (typeof DocState === "undefined") {
        DocState = {};
    }

    //Check we're not passing in the full URL the same as current location
    if (location.href == Path && !PagePopped) {
        isPageTransitioning = false;
        return false;
    }

    globalPageReferrer = globalPageLocation;
    globalPageLocation = Path;

    // Disable all transitions except spread to grid and grid to spread.
    if (Transition != 'SPREADTOGRID' && Transition != 'GRIDTOSPREAD') {
        allowTransition = false;
    }

    /* ASP pages do not contain ContentArea, so transitions cannot be used for them. */
    if (allowTransition && typeof window.history.pushState != "undefined" && document.getElementById("ContentArea") != null) {

        //Clean up path - remove http://domain
        var siteURL = window.location.protocol + "//" + window.location.host;
        Path = Path.replace(siteURL, '');

        //Kill hero carousel from home page if it still exists
        if (typeof cInterval != "undefined") {
            try {
                clearInterval(cInterval);
                cInterval = null;
            } catch (ex) { }
        }

        //Kill any current async page requests.
        //The only time this can happen is if the user has clicked a link again before the previous xhr request has completed
        //As soon as the xhr succeeds we will be transitioning the page so this wont apply.
        //This just allows the user the click something else if the request is taking too long
        if (xhr != null) {
            xhr.abort();
            xhr = null;
        }

        //Store outgoing page's resource array (jscript and css) so we can remove them from header when transition is complete
        PreviousPageResources = DynamicResources;
        DynamicResources = new Array();
        var backTransition;
        var forwardTransition = Transition;
        var currentPageURL = window.location.pathname;

        var addToHistory = true;
        if (AddToHistory == false) {
            addToHistory = false;
            currentPageURL = PageURLInput;
            //currentPageURL = Path;
            //ConsoleLog(PageURLInput);
        }

        // Figure out what transition we need to use
        var currentHContext = getHTransitionContext(currentPageURL);

        var currentVContext = getVTransitionContext(currentPageURL);
        var newHContext = getHTransitionContext(Path);
        var newVContext = getVTransitionContext(Path);
        var productPageURLPattern = /^\/[xgXG](l)?(L)?\d{2}\d+[sS]\d+$/gi;

        var productPageTransition = false;
        if (currentPageURL.search(productPageURLPattern) != -1 || Path.search(productPageURLPattern) != -1) {
            productPageTransition = true;
        }

        if (Transition == null || Transition == "") {
            if (Path == "/") {																									// Homepage Handler
                forwardTransition = "DOWN"; 																					// Moving to the homepage is always a DOWN
            } else {
                if (currentHContext == -1) {																					// Currently on a root level page (ie homepage), all transitions are UP
                    if (currentPageURL.search(productPageURLPattern) != -1) {
                        forwardTransition = "DOWN";
                    } else {
                        if (newVContext < currentVContext) {
                            forwardTransition = "DOWN";
                        } else if (newVContext > currentVContext) {
                            forwardTransition = "UP";
                        } else {
                            forwardTransition = "LEFT";
                        }
                        //If next page is a product page, regardless of where we are, animate up
                        if (Path.search(productPageURLPattern) != -1) {
                            forwardTransition = "UP";
                        }
                    }
                } else if (currentHContext > newHContext) {																		// Changing Department RIGHT
                    if (Path.search(productPageURLPattern) != -1) {
                        forwardTransition = "UP";
                    } else {
                        forwardTransition = "RIGHT";
                    }
                } else if (currentHContext < newHContext) {																		// Changing Department LEFT
                    forwardTransition = "LEFT";
                } else if (currentHContext == newHContext) {																	// Within the same Department
                    if (currentVContext > newVContext) {																		// Current Vertical Context is higher in Context Tree than New Vertical Context
                        forwardTransition = "DOWN";
                    } else if (currentVContext < newVContext) {																	// Current Vertical Context is lower in Context Tree than New Vertical Context
                        forwardTransition = "UP";
                    } else if (currentVContext == newVContext) {																// Current Vertical Context is same as New Vertical Context (Maybe a different horizontal context)
                        //forwardTransition = "UP";
                        return false; 																							// At the same vertical Context Level - Should be horizontal transition?
                    }
                }
            }
        }

        //Shopping bag
        if (Path.toLowerCase() == "/shoppingbag") {
            forwardTransition = "UP";
        }
        if (currentPageURL.toLowerCase() == "/shoppingbag") {
            forwardTransition = "DOWN";
        }

        // Build up the request and get the content from the server
        if (Path != currentPageURL || addToHistory == false) {
            // We are about to build up the request path, but we need to get rid of the hash temporarily so we can append some querystring params
            // If we don't do this then we will end up with a malformed request and this causes issues when we go from a redirected product page with hashtag to a spread view and back again
            var hashSplit = Path.split('#');
            var reqPath = hashSplit[0];

            // Add contentonly=true so that we are not pulling back the header and footer
            if (reqPath.toLowerCase().indexOf("?") >= 0)
                reqPath += '&';
            else
                reqPath += '?';
            reqPath += "contentonly=true";

            // Build up a docstate string that we can append to the Url
            var docStateString = getDocStateString(DocState);

            // Add the docstate string
            if (docStateString !== '') {
                if (docStateString.charAt(0) === '?')
                    reqPath += docStateString.replace('?', '&');
                else if (docStateString.charAt(0) === '&' || docStateString.charAt(0) === '#')
                    reqPath += docStateString;
                else
                    reqPath += '&' + docStateString;
            }

            // If the original path already had a hash on it, add it back on
            if (hashSplit.length > 1) {
                // If the getDocStateString brought back a hashtag, then replace it with the original
                if (reqPath.indexOf('#') > -1) {
                    reqPath = reqPath.substring(0, reqPath.indexOf('#'));
                }
                reqPath += '#' + hashSplit[1];
            }

            // Get the form data defined if it isn't
            var formData = ""
            if (typeof FormData != "undefined" && FormData != null) {
                formData = FormData;
            }

            // Send the request
            xhr = $.ajax({
                type: "GET",
                url: reqPath,
                timeout: 5000,
                data: formData,
                success: function (data, textStatus, jqXHR) { // 200 (and non cross domain 301 redirects)
                    checkAndRedirectForAjaxError(jqXHR, false, 'AJAXv1.js: LoadHTMLContent');
                    if (jqXHR.getResponseHeader('X-RequestUrl') != null) {
                        // We cannot detect whether there was a redirect (e.g. 301) as the browser handles this and gets the redirect content before bubbling anything back up to the JavaScript
                        // So lets check if our custom header with the requested url on the actual server matches the url that we sent in the initial request
                        try {
                            var serverRequestUrl = jqXHR.getResponseHeader('X-RequestUrl');
                            var clientUrl = new UrlHelper(reqPath);
                            var serverUrl = new UrlHelper(serverRequestUrl);
                            if (clientUrl.ServerUrl() !== serverUrl.ServerUrl()) {
                                // If they are different, reload the page with the original URL so that we are redirected with a hashtag
                                window.location = Path;
                                return false;
                            }
                        }
                        catch (exp) {
                            // Let it carry on and transition
                        }
                    }

                    TransitionHandler("success", data, forwardTransition, Path, addToHistory, ScrollPoint, DocState, CompletionCallback);
                },
                error: function (data) { // 404 etc (and cross domain 301 redirects which are handled in the TransitionHandler)
                    TransitionHandler("error", data, forwardTransition, Path, addToHistory, ScrollPoint, DocState, CompletionCallback);
                }
            });
        }
        return false;
    } else {
        //Browser doesn't support pushstate, load page the 'traditional' way.
        isPageTransitioning = false;

        var isMsie = jqueryUpgradeEnabledOnPage ? navigator.userAgent.toLowerCase().indexOf('msie') > -1 : $.browser.msie;

        if (isMsie && Path.substr(0, 4) != ('http') && Path.charAt(0) != '/') {
            Path = "/" + Path;
        }

        //Check if there's a hash param in the docstate
        if (DocState['hashtag'] !== undefined && DocState['hashtag'] !== null && DocState['hashtag'] != "") {
            window.location = Path + '#' + DocState['hashtag'];
        } else {
            window.location = Path;
            var _pattern = /[#][0-9][_][0-9]/;
            if (Next.Settings.UI.HorizontalFiltersEnabled && bcSearchBy != undefined && (bcSearchBy == "category" || bcSearchBy == "keyword") && (_pattern.test(Path))) {
                window.location.reload();
            }
        }
        return false;
    }
}

function TransitionHandler(type, data, forwardTransition, Path, addToHistory, ScrollPoint, DocState, CompletionCallback) {
    var $ = jQuery;
    //Could change animation interval here
    //The default is 13 - giving a smooth, approx 75 fps
    //But - this might kill some browsers. By increasing the interval between 'frames' we decrease the fps 
    //potentially improving performance but a less smooth transition.
    //Setting the interval to 40 gives an approximate fps of 24 - shouldn't really go any lower than that.
    //jQuery.fx.interval = 20;

    //No need to track users aborting the rerquest,
    //Just cancel
    if (data.statusText == "abort") {
        isPageTransitioning = false;
        xhr = null;
        return false;
    }

    //Set the transition lock before we bind anything to the page as scripts contained in the incoming data
    //may need to fire after the transtion finishes - this prevents those scripts firing until we want them to
    isPageTransitioning = true;
    var Title
    Path = Path.toLowerCase();

    switch (type) {
        case "success":
            TrackGAPageView(Path);
            $(".NextContent").html(data);
            xhr = null;
            break;
        case "error":
            var StatusCode = "" + data.status
            var Details = "";

            if (data.statusText == "timeout") {
                StatusCode = "408";
            }

            switch (StatusCode) {
                case "404":
                    StatusCode += " - File Not Found"
                    Details = "Referrer: " + window.location.href;
                    break;
                case "408":
                    TrackGAEvent(StatusCode + " - " + data.statusText, Path, Details, 0);
                    xhr.abort();
                    xhr = null;
                    isPageTransitioning = false;
                    return false;
                    break;
                case "500":
                    Details = data.responseText
                    break;
            }

            TrackGAEvent(StatusCode + " - " + data.statusText, Path, Details, 0);

            if (data.responseText != "") {
                $(".NextContent").html(data.responseText);
            } else {
                // If we hit any cross domain redirect issues or the request is malformed, then we need to reload the page
                // We catch this instance with the status code 0. 
                // The browser will make the initial request, get a 301, try to get the redirect url and hit a permission denyed if it is cross domain, then it will return a 0 instead of a 301
                if (data.status === 0)
                    window.location = Path;
                return false;
            }
            break;
    }



    //Check if we are currently on a spread page and the user has navigated to a spread in the same dept
    //If so, we need to trigger the spread animation instead
    if ($(".CurrentContent .SpreadsPage").length && $(".NextContent .SpreadsPage").length) {

        var nextSpread = $(".NextContent .Spread");
        var nextDept = $(".NextContent .SpreadsPage #hdnDeptName").val();
        var curDept = $(".CurrentContent .SpreadsPage #hdnDeptName").val();
        var nextPage = $(".NextContent .SpreadsPage .ImageLayer").attr("data-page");
        var nextBook = $(".NextContent .SpreadsPage .ImageLayer").attr("data-book");
        var nextOccurrence = $(".NextContent .SpreadsPage .ImageLayer").attr("data-occurrence");

        $(".NextContent").html("");
        //If we're in the same dept
        if (nextDept == curDept) {
            //Target the item in the current carousel we need to click to load incoming spread
            var targetCarouselLI = $(".CurrentContent .SpreadsPage li[data-page='" + nextPage + "'][data-book='" + nextBook + "'][data-occurrence='" + nextOccurrence + "']");
            $(targetCarouselLI).find("a").first().click();
            //Scroll carousel to display selected carousel item
            scrollThumbNailBar($(targetCarouselLI).offset().left, targetCarouselLI, true);

        } else {
            //Else - we're navigating between spread pages of different departments
            ////            //Load the new spread carousel
            ////            LoadSpreadCarousel(nextDept);
            //Update attributes on current spread - this allows us to target the correct carousel item once the carousel has loaded
            $(".ImageLayer").attr("data-page", nextPage);
            $(".ImageLayer").attr("data-book", nextBook);
            $(".ImageLayer").attr("data-occurrence", nextOccurrence);
            $(".ImageLayer").attr("data-reloadContent", true);
            $(".CurrentContent .SpreadsPage #hdnDeptName").val(nextDept);
            initCarousel(nextDept);
            ////            initPage();

        }
        //Return false here as we've passed transitioning over to the spread transition handler (via a carousel click).
        return false;
    }

    //Update breadcrumb/SEO
    if ($(".NextContent #PageParams").length) {
        var BCHTML = $(".NextContent #PageParams #BreadcrumbWrapper").html();
        if (BCHTML.length) {
            UpdateBreadcrumbTrail(BCHTML);
        }

        var seoTitle = $(".NextContent #PageParams #seoTitle").val();
        var seoDescription = $(".NextContent #PageParams #seoDescription").val();
        var seoKeywords = $(".NextContent #PageParams #seoKeywords").val();
        var seoRobots = $(".NextContent #PageParams #seoRobots").val();
        var seoCanonical = $(".NextContent #PageParams #seoCanonical").val();

        updateSeo(seoTitle, seoDescription, seoKeywords, seoRobots, seoCanonical);

        //Remove page params from page
        $(".NextContent #PageParams").remove();

    }

    if (addToHistory && !preventReplaceState) {																											// If we're navigating the site rather than clicking back or forward
        window.history.replaceState({ "url": window.location.href, "DocState": documentState, "title": document.title, "scrollPoint": $(window).scrollTop() }, document.title, window.location.href); 			// On load, attempt to replace the last state object on the history stack with one that is populated with the relevent transition data (although in all likely hood this will just insert a new item)
    }

    var Animation = createAnimation()

    var siteURL = window.location.protocol + "//" + window.location.host;
    var relPath = Path.replace(siteURL, '');

    if (relPath == "/") {
        $(".PageHeader").addClass("home");
        if ($(".PageHeader").hasClass("Large")) {
            addToAnimation(Animation, '$("footer.ToolBar").animate({bottom: -50}, 1000);', 0, false);
            addToAnimation(Animation, '$("#SpreadsGridTitle").fadeOut(350);', 0, false);
            addToAnimation(Animation, '$(".PageHeader .BreadcrumbNavigation").fadeOut(350);', 350, true);
            //addToAnimation(Animation, '$(".HeaderSpacer").animate({ "height": "-=' + $(".BreadcrumbNavigation").height() + 'px" }, 250);', 250, true);
            addToAnimation(Animation, '$(".PageHeader").removeClass("Large")', 0, false);
            //addToAnimation(Animation, '$(".HeaderSpacer").removeClass("Large")', 0, false);
            //addToAnimation(Animation, '$(".HeaderSpacer").removeAttr("style")', 0, false);
        }
    } else {
        $(".PageHeader").removeClass("home");
        if (!$(".PageHeader").hasClass("Large")) {
            addToAnimation(Animation, '$("footer.ToolBar").animate({bottom: 0}, 1000);', 0, false);
            addToAnimation(Animation, '$(".PageHeader").addClass("Large")', 0, false);
            //addToAnimation(Animation, '$(".HeaderSpacer").animate({ "height": "+=' + $(".BreadcrumbNavigation").height() + 'px" }, 250);', 250, true);
            //addToAnimation(Animation, '$(".HeaderSpacer").addClass("Large")', 0, false);
            //addToAnimation(Animation, '$(".HeaderSpacer").removeAttr("style")', 0, false);
            addToAnimation(Animation, '$(".PageHeader .BreadcrumbNavigation").fadeIn(650);', 150, true);
        }
    }



    addToAnimation(Animation, 'PageTransition' + forwardTransition + '(' + ScrollPoint + ')', 0, false);
    if (typeof CompletionCallback != "undefined")
        addToAnimation(Animation, CompletionCallback, 0, true);


    runAnimation(Animation);

    //If hash value was passed, add this to path
    if (DocState['hashtag'] !== undefined && DocState['hashtag'] !== null) {
        Path += '#' + DocState['hashtag'];
    }

    //eval("PageTransition" + forwardTransition + "(" + ScrollPoint + ")");
    if (addToHistory) {
        var historyObject
        //if (Transition == null || Transition == "") {
        historyObject = { "url": Path, "title": Title, "DocState": DocState, "scrollPoint": ScrollPoint }
        //} else {
        //    historyObject = { "url": Path, "title": Title, "transition": Transition }
        //}
        window.history.pushState(historyObject, Title, Path);
    }
    //document.title = Title;
    PageURLInput = Path;
    preventReplaceState = false;

}

function LoadSpread(Path, Title, Transition, AddToHistory, ScrollPoint, DocState) {

    var $ = jQuery;

    // Check whether the parent of the DOM element that called this has a class "Inactive"
    // This is mainly for Mouse Ears, where the user is on the last Spread in a Department and they select the Right Mouse Ear to load up a malformed sread page
    if ((this.event != undefined) && this.event.srcElement && this.event.srcElement.parentNode && this.event.srcElement.parentNode.parentNode) {
        var srcWrapper = this.event.srcElement.parentNode.parentNode;
        if ($(srcWrapper).hasClass("Inactive")) {
            return false;
        }
    }

    // If there is a hash at the end of the Url, strip it off
    if (Path.indexOf('#', Path.length - 1) !== -1) {
        Path = Path.substring(0, Path.length - 1)
    }

    //Check we're not passing in the full URL the same as current location
    if (location.href == Path && !PagePopped) {
        return false;
    }

    // This prevents the spread from being loaded twice when Chrome incorrectly fires onpopstate on page load.
    var newUrl = new UrlHelper(Path);
    var currUrl = new UrlHelper(PageURLInput);
    if (newUrl.ServerUrl() == currUrl.ServerUrl()) {
        return false;
    }

    if (typeof window.history.pushState != "undefined") {

        //Prevents spread locking completely
        var newRquest = new Date().getTime();
        if (lastRequest != null) {
            if ((newRquest - lastRequest) > 1500) {
                isSpreadTransitioning = false;
            }
        }
        lastRequest = newRquest;


        //Prevent using building up a stack of clicks/transtions
        if (isSpreadTransitioning) {
            return false;
        }
        //Set isSpreadTransitioning to true - indicates we're in a spread transition
        isSpreadTransitioning = true;

        var currentPageURL = window.location.pathname;
        var siteURL = window.location.protocol + "//" + window.location.host;

        Path = Path.replace(siteURL, '');



        if (PageTransitionLock == false) {
            PageTransitionLock = true;
            var backTransition;
            var forwardTransition = Transition;

            var addToHistory = true;
            if (AddToHistory == false) {
                addToHistory = false;
                currentPageURL = PageURLInput;
            }

            // Check if the DocState was passed in and make it blank if it wasn't
            if (typeof DocState === "undefined") {
                DocState = {};
            }

            if (Path != currentPageURL || addToHistory == false) {
                // Add contentonly=true so that we are not pulling back the header and footer
                var reqPath = Path;
                if (reqPath.toLowerCase().indexOf("?") >= 0)
                    reqPath += '&';
                else
                    reqPath += '?';
                reqPath += "contentonly=true&spreadonly=true";

                // Build up a docstate string that we can append to the Url
                var docStateString = getDocStateString(DocState);

                // Add the docstate string
                if (docStateString !== '') {
                    if (docStateString.charAt(0) === '?')
                        reqPath += docStateString.replace('?', '&');
                    else if (docStateString.charAt(0) === '&' || docStateString.charAt(0) === '#')
                        reqPath += docStateString;
                    else
                        reqPath += '&' + docStateString;
                }

                var request = $.get(reqPath);
                request.success(function (data) {

                    Path = Path.toLowerCase();
                    TrackGAPageView(Path);

                    $(".NextSpread").html(data);

                    //Update breadcrumb/SEO
                    if ($(".NextSpread #PageParams").length) {
                        var BCHTML = $(".NextSpread #PageParams #BreadcrumbWrapper").html();
                        if (BCHTML.length) {
                            UpdateBreadcrumbTrail(BCHTML);
                        }


                        var seoTitle = $(".NextSpread #PageParams #seoTitle").val();
                        var seoDescription = $(".NextSpread #PageParams #seoDescription").val();
                        var seoKeywords = $(".NextSpread #PageParams #seoKeywords").val();
                        var seoRobots = $(".NextSpread #PageParams #seoRobots").val();
                        var seoCanonical = $(".NextSpread #PageParams #seoCanonical").val();

                        updateSeo(seoTitle, seoDescription, seoKeywords, seoRobots, seoCanonical);


                        //Remove page params from page
                        $(".NextSpread #PageParams").remove();

                    }

                    if (addToHistory) {																										// If we're navigating the site rather than clicking back or forward
                        window.history.replaceState({ "url": window.location.href, "spreadView": true, "DocState": documentState, "title": document.title, "scrollPoint": $(window).scrollTop() }, document.title, window.location.href); 			// On load, attempt to replace the last state object on the history stack with one that is populated with the relevent transition data (although in all likely hood this will just insert a new item)
                        //ConsoleLog(documentState);
                    }

                    if (Title == '')
                        Title = seoTitle;

                    SpreadTransition(forwardTransition === "LEFT");

                    if (addToHistory) {
                        var historyObject
                        if (Transition == null || Transition == "") {
                            historyObject = { "url": Path, "title": Title, "spreadView": true, "DocState": DocState, "scrollPoint": ScrollPoint }
                        } else {
                            historyObject = { "url": Path, "title": Title, "transition": Transition, "spreadView": true, "DocState": DocState, "scrollPoint": ScrollPoint }
                        }
                        window.history.pushState(historyObject, Title, Path);
                    }
                    document.title = Title;
                    PageURLInput = Path;

                    UpdateContinueShopping(Path)
                });
                request.error(function (data) { // 404, 500 Response => To Error Page
                    isSpreadTransitioning = false;
                    PageTransitionLock = false;
                    TransitionHandler("error", data, forwardTransition, Path, addToHistory, ScrollPoint, DocState);
                });
            } else {
                isSpreadTransitioning = false;
                PageTransitionLock = false;
            }
        }
        return false;
    } else {

        var siteURL = window.location.protocol + "//" + window.location.host;

        Path = Path.replace(siteURL, '');

        window.location.pathname = Path;
    }
}


/* - Transition Handlers / Definitions ---------------------------------------------------------------------------------------------------------------------------------------------*/


/* Available easings ----------------------------------------------------
linea, swing, jswing, easeInQuad, easeOutQuad, easeInOutQuad, easeInCubic, 
easeOutCubic, easeInOutCubic, easeInQuart, easeOutQuart, easeInOutQuart, 
easeInQuint, easeOutQuint, easeInOutQuint, easeInSine, easeOutSine, easeInOutSine, 
easeInExpo, easeOutExpo, easeInOutExpo, easeInCirc, easeOutCirc, easeInOutCirc, 
easeInElastic, easeOutElastic, easeInOutElastic, easeInBack, easeOutBack, easeInOutBack, 
easeInBounce, easeOutBounce, easeInOutBounce
*/


var pageTransitionSpeed = 800;
var leftRightTransitionSpeed = 900;
var pageTransitionEasing = 'easeOutCirc';
var pageTransitionEasingIn = 'easeInQuint';
var fadeContent = false;

//TODO - Need to decide whether fading next content in is required
//In chrome it can give the appearance of a smoother transition, firefox maybe not 
//if ($.browser.mozilla == true) {
//    fadeContent = false;
// 
//}

//Set page up correctly for any transition
function PreparePageForTransition(scrollToTop) {
    var $ = jQuery;

    $(window).scrollTop(0);

    if (fadeContent) {
        $(".NextContent").css("position", "absolute").css("opacity", "0").css("display", "block");
    } else {
        $(".NextContent").css("position", "absolute").css("display", "block");
    }
    $("#ContentArea").removeAttr("style").removeClass("HideOverflow");

    $(".ToolBar").css("position", "fixed");

    var newContentHeight = $(".NextContent").height();
    var ViewportHeight = $(window).height();

    $(".NextContent").height(ViewportHeight);

}

function PageTransitionGRIDTOSPREAD(scrollPoint) {
    var $ = jQuery;
    var imageLoadCalled = false;
    PreparePageForTransition();

    // Load page and image so we can get the image position/size
    $(".NextContent").css("top", 0).css("left", 0).css("opacity", 0);

    var $spreadImg = $(".NextContent .ImageLayer img");
    var onSpreadImageLoad = function () {
        if (Next.Settings.Channel.IsInnovationDesktopSpreadQuickView) {
            if (imageLoadCalled) {
                return false;
            }
            imageLoadCalled = true;
        }
        var imgOffset = $spreadImg.offset();
        var spreadDimensions = {
            top: imgOffset.top,
            left: imgOffset.left,
            width: $spreadImg.width(),
            height: $spreadImg.height()
        };

        var animateElement = $spreadImg.clone();
        $spreadImg.css("opacity", 0);

        var $gridImg = $("a.selectedGrid img");
        var gridImgOffset = $gridImg.offset();

        $(".CurrentContent").animate({ opacity: 0 }, 700);

        $(animateElement).css("position", "absolute")
           .css("top", gridImgOffset.top)
           .css("left", gridImgOffset.left)
           .width($gridImg.width())
           .height($gridImg.height())
           .css("border", "none").css("margin", "").css("z-index", "1000");

        $(".NextContent").after(animateElement);

        $(animateElement).animate(spreadDimensions, 800, "easeOutExpo");

        setTimeout(function () {
            $(".NextContent").animate({ opacity: 1 }, 600, pageTransitionEasing, function () {
                $(".NextContent .ImageLayer").find("img").css("opacity", 1);
                $(animateElement).remove()
                PageTransitionTidy();
            });
        }, 20)
    };
    $spreadImg.load(function () {
        onSpreadImageLoad();
    });
    //Cached images and the “load” event issue--http://mikefowler.me/journal/2014/04/22/cached-images-load-event
    if (Next.Settings.Channel.IsInnovationDesktopSpreadQuickView && $spreadImg.length > 0 && isIOS) {
        var spreadImageElement = $spreadImg[0];
        if (spreadImageElement.complete) {
            onSpreadImageLoad();
        }
    }
}

function PageTransitionSPREADTOGRID(scrollPoint) {
    var $ = jQuery;
    PreparePageForTransition();
    $(".NextContent").css("top", 0).css("left", 0).css("opacity", 0);
    $(".CurrentContent .NextSpread").remove();
    var srcPage = $(".CurrentContent .CurrentSpread .ImageLayer").attr("data-page");
    var $spreadImage = $(".CurrentContent .CurrentSpread .ImageLayer img");
   
    var srcImg = $spreadImage.clone();
    var $targetImg = $(".NextContent img[data-page='" +srcPage + "']");

    var targetParent = $targetImg.parent();
    $(targetParent).addClass("StorySelected");

    var srcOffset = $spreadImage.offset();

    srcImg.css("position", "absolute")
    srcImg.offset(srcOffset);
    srcImg.height($spreadImage.height());
    srcImg.css("z-index", 1);
    $(".NextContent").after(srcImg);

    $spreadImage.animate({ opacity: 0 }, 200, function () {
        var $img = $(".StorySelected img");
        var imgOffset;
        if ($img.length > 0) {
            imgOffset = $img.offset();
            $(srcImg).animate({
                top: imgOffset.top,
                left: imgOffset.left,
                width: $img.width(),
                height: $img.height()
            }, 600, "easeOutExpo");
        }

        $(".Controller").hide();

        $(".NextContent").animate({ opacity: 1 }, 600, "easeInExpo", function () {
            PageTransitionTidy();
            var $storySel = $(".StorySelected");
            $(srcImg).remove();
            // Only scroll if necessary to bring image into view.
            if ($storySel.length > 0) {
                $("body,html").animate({ scrollTop: $storySel.offset().top + 250 - $(window).height() }, 200);
            }
        });
    });
}

function PageTransitionGRIDLEFT(scrollPoint) {
    var $ = jQuery;
    PreparePageForTransition();
    var ViewportHeight = $(window).height();
    $(".NextContent").css("top", 0).css("left", 0).css("opacity", 1).css("background-color", "transparent");
    $(".NextContent .SpreadsGridTitle").css("opacity", 0);

    $(".NextContent .SpreadGridSection").height(ViewportHeight).css("background-color", "#fff"); ;

    $(".NextContent .SpreadGridSection").offset({ left: $(".NextContent .SpreadGridSection").offset().left + 970 });
    $(".NextContent .SpreadGridSection").animate({
        left: "-=" + 970
    }, 900, "easeOutExpo", function () {
        $(".NextContent .SpreadGridSection").css("height", "");
        PageTransitionTidy();

    });

    //    $(".CurrentContent .SpreadGridSection").animate({
    //        left: "-=" + 970
    //    }, 700, "easeOutExpo");

    $(".NextContent .SpreadsGridTitle").animate({ opacity: 1 }, 700);
    $(".CurrentContent .SpreadsGridTitle").animate({ opacity: 0 }, 700);


}


function PageTransitionGRIDRIGHT(scrollPoint) {
    var $ = jQuery;
    PreparePageForTransition();
    var ViewportHeight = $(window).height();
    $(".NextContent").css("top", 0).css("left", 0).css("opacity", 1).css("background-color", "transparent").css("z-index", 100);
    $(".NextContent .SpreadsGridTitle").css("opacity", 0);
    $(".NextContent .SpreadGridSection").offset({ left: $(".NextContent .SpreadGridSection").offset().left });



    $(".CurrentContent .SpreadGridSection").css("background-color", "#fff").css("z-index", 101).css("height", ViewportHeight);

    //    $(".NextContent .SpreadGridSection").animate({
    //        left: "+=" + 970
    //    }, 700, "easeOutExpo");

    $(".CurrentContent .SpreadGridSection").animate({
        left: "+=" + 970
    }, 900, pageTransitionEasingIn, function () {
        PageTransitionTidy();
        ScrollToPoint(scrollPoint);
    });

    $(".NextContent .SpreadsGridTitle").animate({ opacity: 1 }, 700);
    $(".CurrentContent .SpreadsGridTitle").animate({ opacity: 0 }, 700);

}

function PageTransitionUP(scrollPoint) {
    var $ = jQuery;
    PreparePageForTransition();
    var ViewportHeight = $(window).height();
    var HeaderHeight = $(".PageHeader").height();
    $(".NextContent").css("top", ViewportHeight).css("left", "0px");
    var animateJSON;

    if (fadeContent) {
        animateJSON = {
            top: "-=" + ViewportHeight,
            opacity: 1
        };
    } else {
        animateJSON = {
            top: "-=" + ViewportHeight
        };

    }

    $(".NextContent").animate(animateJSON, pageTransitionSpeed, pageTransitionEasing, function () {
        PageTransitionTidy();
        ScrollToPoint(scrollPoint);
    });
}

function PageTransitionDOWN(scrollPoint) {
    var $ = jQuery;
    PreparePageForTransition();
    var ViewportHeight = $(window).height();
    var HeaderHeight = $(".PageHeader").height();
    var ContentViewportHeight = ViewportHeight - HeaderHeight;
    var newContentHeight = $(".NextContent").height();
    var newContentPositon = 0 - newContentHeight;

    $(".CurrentContent").css("z-index", "1000")
                        .css("position", "absolute")
                        .css("overflow", "hidden")
                        .height(ViewportHeight);

    $(".NextContent").css("top", "0px")
                        .css("left", "0px")
                        .css("opacity", "1");
    var animateJSON;

    if (fadeContent) {
        animateJSON = {
            top: "+=" + ViewportHeight,
            opacity: 0
        };
    } else {
        animateJSON = {
            top: "+=" + ViewportHeight
        };
    }

    $(".CurrentContent").animate(animateJSON, pageTransitionSpeed, pageTransitionEasingIn, function () {
        PageTransitionTidy();
        ScrollToPoint(scrollPoint);
    });
}

//Page transition for going BACK - content transtions to the right, user clicked on LEFT mouse ear
function PageTransitionRIGHT(scrollPoint) {
    var $ = jQuery;
    PinMouseEars();
    PreparePageForTransition();



    var tempClip = $("<div />");
    $(tempClip).addClass("tempClip");
    $(tempClip).height($(window).height());
    $(tempClip).append($(".NextContent"));
    $(tempClip).append($(".CurrentContent"));
    $("#ContentArea").append(tempClip);

    $(".NextContent .TitleBar").first().addClass("newTitle");
    $(".CurrentContent .TitleBar").first().addClass("newTitle");

    if ($(".NextContent .TitleBar").length) {
        $(".NextContent .TitleBar").parent().css("margin-top", 48);
    }

    if ($(".CurrentContent .TitleBar").length) {
        $(".CurrentContent .TitleBar").parent().css("margin-top", 48);
    }

    var ViewportHeight = $(window).height();
    var ViewportWidth = $(window).width();
    var HeaderHeight = $(".PageHeader").height();
    var ContentViewportHeight = ViewportHeight - HeaderHeight;
    var newContentHeight = $(".NextContent").height();
    var newContentWidth = $(".NextContent").width();
    var newContentPositon = 0 - 976;
    $(".NextContent").css("left", 0).css("width", 976).css("top", "0px").css("z-index", 100);
    $(".CurrentContent").css("left", 0).css("width", 976).css("top", "0px").css("position", "absolute").css("z-index", 101).css("height", ViewportHeight);
    var animateJSON;
    if (fadeContent) {
        animateJSON = {
            left: "+=" + 976,
            opacity: 1
        };
    } else {
        animateJSON = {
            left: "+=" + 976
        };
    }

    //$(".NextContent").animate(animateJSON, pageTransitionSpeed, pageTransitionEasing);

    $(".CurrentContent").animate(animateJSON, leftRightTransitionSpeed, 'easeInCubic', function () {
        var cnt = $(".tempClip").contents()
        $(".tempClip").replaceWith(cnt);

        PageTransitionTidy();
        ScrollToPoint(scrollPoint);

    });

    $(".NextContent .TitleBar").first().animate({ opacity: 1 }, 300);

}

function PageTransitionLEFT(scrollPoint) {
    var $ = jQuery;
    PinMouseEars();

    PreparePageForTransition();

    var tempClip = $("<div />");

    $(tempClip).addClass("tempClip");
    $(tempClip).height($(window).height());
    $(tempClip).append($(".NextContent"));
    $(tempClip).append($(".CurrentContent"));
    $("#ContentArea").append(tempClip);
    $(".NextContent .TitleBar").first().addClass("newTitle");
    $(".CurrentContent .TitleBar").first().addClass("newTitle");

    if ($(".NextContent .TitleBar").length) {
        $(".NextContent .TitleBar").parent().css("margin-top", 48);
    }

    if ($(".CurrentContent .TitleBar").length) {
        $(".CurrentContent .TitleBar").parent().css("margin-top", 48);
    }


    $("body").css("overflow-x", "hidden");
    var ViewportHeight = $(window).height();
    var ViewportWidth = $(window).width();
    var HeaderHeight = $(".PageHeader").height();
    var ContentViewportHeight = ViewportHeight - HeaderHeight;
    var newContentHeight = $(".NextContent").height();
    var newContentWidth = $(".NextContent").width();
    var newContentPositon = ViewportWidth;
    $(".NextContent").css("left", 976).css("width", 976).css("top", "0px").css("height", ViewportHeight);
    $(".CurrentContent").css("left", 0).css("width", 976).css("top", "0px").css("position", "absolute");



    var animateJSON;
    if (fadeContent) {
        animateJSON = {
            left: "-=" + 976,
            opacity: 1
        };
    } else {
        animateJSON = {
            left: "-=" + 976
        };
    }

    $(".NextContent").animate(animateJSON, leftRightTransitionSpeed, pageTransitionEasing, function () {
        var cnt = $(".tempClip").contents()
        $(".tempClip").replaceWith(cnt);

        PageTransitionTidy();
        ScrollToPoint(scrollPoint);
    });

    //$(".CurrentContent").animate(animateJSON, pageTransitionSpeed, pageTransitionEasing);

    $(".NextContent .TitleBar").first().animate({ opacity: 1 }, 300);

}



function PinMouseEars() {

    return false;
    var oldContent = $(".CurrentContent");
    var newContent = $(".NextContent");

    var oldMouseEarLeft = $(".CurrentContent").find(".MouseEar.Left");
    var oldMouseEarRight = $(".CurrentContent").find(".MouseEar.Right");

    var newMouseEarLeft = $(".NextContent").find(".MouseEar.Left");
    var newMouseEarRight = $(".NextContent").find(".MouseEar.Right");

    var omeLPOS = $(oldMouseEarLeft).offset();
    var omeRPOS = $(oldMouseEarRight).offset();

    $(oldMouseEarLeft).css("position", "fixed").css("left", "0px").css("top", omeLPOS.top);
    $(oldMouseEarRight).css("position", "fixed").css("right", "0px").css("top", omeRPOS.top);

    $(newMouseEarLeft).css("position", "fixed").css("left", "0px").css("top", omeLPOS.top).css("opacity", "0");
    $(newMouseEarRight).css("position", "fixed").css("right", "0px").css("top", omeRPOS.top).css("opacity", "0");

    $(oldMouseEarLeft).animate({ opacity: 0 }, 700);
    $(oldMouseEarRight).animate({ opacity: 0 }, 700);

    $(newMouseEarLeft).animate({ opacity: 1 }, 700);
    $(newMouseEarRight).animate({ opacity: 1 }, 700);


}

/////////////Spread transitions
// Copied  into htmlSpreadCanvas.js
function SpreadTransition(left) {
    var $ = jQuery;

    // Is spread expanded?
    var $exp = $(".SpreadsPage .Expanded:visible");
    if ($exp.length) {

        doAnimation(function () {
            var src = $(".ImageLayer img").attr("src");
            var $img = $exp.find("img");
            $img.attr("src", src);
        });

    } else {

        // Transition Data
        var ContentViewportWidth = $(".SpreadCarousel").width();
        var currentSpreadOffset = $(".CurrentSpread").offset();

        var targetOffset;
        if (left) 
            targetOffset = "-=" + currentSpreadOffset.left + ContentViewportWidth;
         else 
            targetOffset = "+=" + ContentViewportWidth;
        
        $(".NextSpread").offset({ left: currentSpreadOffset.left }).css("z-index", 100);
        $(".CurrentSpread").css("z-index", 101);
        $(".NextSpread .ImageLayer img").load(function () {
            $(".CurrentSpread").animate({ left: targetOffset }, 700, 'easeInSine', doAnimation);
        });

    }

    function doAnimation(callback) {
        var Animation = createAnimation();
        Animation = SpreadTransitionUpdateNavigationAids(Animation)
        Animation = SpreadTransitionClearDown(Animation);
        runAnimation(Animation, callback);
        isSpreadTransitioning = false;
        PageTransitionLock = false;
    }
}

//function SpreadTransitionLEFT() {
//    SpreadTransition(true);
//}

//function SpreadTransitionRIGHT() {
//    SpreadTransition(false);
//}

function SpreadTransitionUpdateNavigationAids(Animation) {
    var $ = jQuery;
    addToAnimation(Animation, 'ClearMouseEarStates();', 0, true);

    if ($(".BreadcrumbTrail").html() != "") {
        // addToAnimation(Animation, '$(".Breadcrumbs").html($(".NextSpread .BreadcrumbTrail .Breadcrumbs").html())', 0, false);
    }

    if ($(".NextSpread .NextPageURL").val() == "") {
        addToAnimation(Animation, '$(".MouseEar.Right").addClass("Inactive").removeClass("Active");', 0, false);
        addToAnimation(Animation, '$(".MouseEar.Right a")[0].href = "#";', 0, false);
    } else {
        addToAnimation(Animation, '$(".MouseEar.Right").addClass("Active").removeClass("Inactive");', 0, false);
        addToAnimation(Animation, '$(".MouseEar.Right a")[0].href = $(".NextSpread .NextPageURL").val();', 0, false); //
    }

    if ($(".NextSpread .PreviousPageURL").val() == "") {
        addToAnimation(Animation, '$(".MouseEar.Left").addClass("Inactive").removeClass("Active");', 0, false);
        addToAnimation(Animation, '$(".MouseEar.Left a")[0].href = "#";', 0, false);
    } else {
        addToAnimation(Animation, '$(".MouseEar.Left").addClass("Active").removeClass("Inactive");', 0, false);
        addToAnimation(Animation, '$(".MouseEar.Left a")[0].href = $(".NextSpread .PreviousPageURL").val();', 0, false);

    }

    if ($(".NextSpread .NextPageIMG").val() == "") {
        addToAnimation(Animation, '$(".MouseEar.Right").attr("data-img","");', 0, false);
    } else {
        addToAnimation(Animation, '$(".MouseEar.Right").attr("data-img","' + $(".NextSpread .NextPageIMG").val() + '");', 0, false);
    }

    if ($(".NextSpread .PreviousPageIMG").val() == "") {
        addToAnimation(Animation, '$(".MouseEar.Left").attr("data-img","");', 0, false);
    } else {
        addToAnimation(Animation, '$(".MouseEar.Left").attr("data-img","' + $(".NextSpread .PreviousPageIMG").val() + '");', 0, false);
    }

    if ($(".NextSpread .NextPageName").val() == "") {
        addToAnimation(Animation, '$(".MouseEar.Right").attr("data-name","");', 0, false);
    } else {
        addToAnimation(Animation, '$(".MouseEar.Right").attr("data-name","' + $(".NextSpread .NextPageName").val() + '");', 0, false);
    }

    if ($(".NextSpread .PreviousPageName").val() == "") {
        addToAnimation(Animation, '$(".MouseEar.Left").attr("data-name","");', 0, false);
    } else {
        addToAnimation(Animation, '$(".MouseEar.Left").attr("data-name","' + $(".NextSpread .PreviousPageName").val() + '");', 0, false);
    }


    return Animation;
}

function SpreadTransitionClearDown(Animation, UpdateMeta) {
    ConsoleLog("SpreadTransitionClearDown");
    var $ = jQuery;
    // Tidy Up Function For Page Transitions - makes sure everything is reset correctly for next time.
    addToAnimation(Animation, '$(".CurrentSpread").removeClass("CurrentSpread").addClass("Held");', 0, false); 					// Change Class Of CurrentContent To Held - It will ultimately become NextContent
    addToAnimation(Animation, '$(".NextSpread").removeClass("NextSpread").addClass("CurrentSpread");', 0, false); 				// Reassign the classes on the NextContent container to reflect it's new position (CurrentContent)
    addToAnimation(Animation, '$(".Held").removeClass("Held").addClass("NextSpread");', 0, true); 									// Reassign the classes on the Held container to reflect it's new position (NextContent)
    addToAnimation(Animation, '$(".NextSpread").html("");', 0, false);

    addToAnimation(Animation, '$(".NextSpread").css("-webkit-transform", ""); ', 0, false);
    addToAnimation(Animation, '$(".CurrentSpread").css("-webkit-transform", ""); ', 0, false);
    addToAnimation(Animation, '$(".NextSpread").css("transform", ""); ', 0, false);
    addToAnimation(Animation, '$(".CurrentSpread").css("transform", ""); ', 0, false);
    addToAnimation(Animation, '$(".CurrentSpread").removeClass("animate"); ', 0, false);
    addToAnimation(Animation, '$(".NextSpread").removeClass("animate"); ', 0, false);


    addToAnimation(Animation, '$(".NextSpread").removeAttr("style");', 0, false); 													// Remove dynamically added css styles.
    addToAnimation(Animation, '$(".CurrentSpread").removeAttr("style");', 0, false); 												// Remove dynamically added css styles.
    //addToAnimation(Animation, 'PageTransitionLock = false;', 0, true);

    addToAnimation(Animation, 'AddMouseEarHoverStates();', 0, true);

    if (UpdateMeta) {
        addToAnimation(Animation, 'makeSpreadDraggable(false, true);', 0, true);
    } else {
        addToAnimation(Animation, 'makeSpreadDraggable();', 0, true);
    }

    addToAnimation(Animation, 'selectCurrentSpreadThumbnail();', 0, true);
    addToAnimation(Animation, 'setGridViewUrl();', 0, true);
    
 

    return Animation;
}


function PageTransitionTidy() {
    var $ = jQuery;
    $("body").css("overflow-x", "");

    var oldContent = $(".CurrentContent");
    var newContent = $(".NextContent");

    $(oldContent).html("").removeClass("CurrentContent")
                        .addClass("NextContent")
                        .css("position", "absolute")
                        .css("display", "none")
                        .css("opacity", "")
                        .css("width", "")
                        .css("overflow", "")
                        .css("z-index", "")
                        .css("height", "");

    $(newContent).addClass("CurrentContent")
                        .removeClass("NextContent")
                        .css("position", "")
                        .css("opacity", "")
                        .css("width", "")
                        .css("top", "")
                        .css("left", "")
                        .css("height", "")
                        .css("background-color", "#fff");

    $(".CurrentContent .TitleBar").parent().css("margin-top", 0);

    $(".ProductImagery").css("position", "").css("margin-top", "");
    $("#ContentArea").removeAttr("style").removeClass("HideOverflow").addClass("LargeHeader");

    AddMouseEarTouchEvents();

    RemoveDynamicResources();
}

function PageTransitionClearDown(Animation, scrollPoint) {
    var $ = jQuery;
    // Tidy Up Function For Page Transitions - makes sure everything is reset correctly for next time.

    //Potential to do something with ContentArea here to make the transition to the scroll point better?
    addToAnimation(Animation, '$(".CurrentContent").removeClass("CurrentContent").addClass("Held");', 0, false); 					// Change Class Of CurrentContent To Held - It will ultimately become NextContent
    addToAnimation(Animation, '$(".NextContent").removeClass("NextContent").addClass("CurrentContent").addClass("BackgroundWhite");', 0, false); 				// Reassign the classes on the NextContent container to reflect it's new position (CurrentContent)
    addToAnimation(Animation, '$(".Held").removeClass("Held").addClass("NextContent");', 0, true); 									// Reassign the classes on the Held container to reflect it's new position (NextContent)
    addToAnimation(Animation, '$(".NextContent").html("");', 0, false); 																// Remove Content From NextContent Container
    addToAnimation(Animation, '$(".NextContent").removeAttr("style");', 0, false); 													// Remove dynamically added css styles.
    addToAnimation(Animation, '$(".CurrentContent").removeAttr("style");', 0, false); 												// Remove dynamically added css styles.
    //addToAnimation(Animation, 'ResizeContentAreaToContent(' + scrollPoint + ')', 0, false);

    addToAnimation(Animation, 'Resize(".ContentArea", "Y", $(".CurrentContent").height() + "px", 500, "")', 500, true);                 // The content bottom is not visible, so we cna shorten the transition by just snapping it in to place.
    // For Toolbar
    //addToAnimation(Animation, 'toggleFixedFooterToolbar("transition");', 200, true);                                                    // ...and switch the footer toolbar to fixed mode.

    addToAnimation(Animation, 'RemoveDynamicResources();', 0, false);
    //addToAnimation(Animation, 'PageTransitionComplete();', 0, true);

    // addToAnimation(Animation, '$(".CurrentContent").removeClass("BackgroundWhite");', 100, true); 


    return Animation;
}

function ResizeContentAreaToContent(scrollPoint) {
    return false;
    var scrolltimer = 500;
    var CCHeight = $(".CurrentContent").height();
    var CAHeight = $(".ContentArea").height();
    var CAMinHeight = parseInt($(".ContentArea").css('min-height'));
    var CAHeightDiff
    var timer

    if (CCHeight >= CAHeight) {
        if (CAMinHeight > CAHeight) {
            CAHeight = CAMinHeight;
        }
        CAHeightDiff = CCHeight - CAHeight
        ContentResizeComplete("+", CAHeightDiff, scrolltimer, scrollPoint);
    } else {
        CAHeightDiff = CAHeight - CCHeight
        var newContentHeight = $(".PageHeader").height() + CCHeight + $(".FooterPromotions").height();
        if (newContentHeight < $(window).height()) {
            unPinFooterToolbar('transition');
            timer = window.setTimeout(function () { ContentResizeComplete("-", CAHeightDiff, scrolltimer, scrollPoint); }, 300)			// Wait for animation to complete, then continue
        } else {
            ContentResizeComplete("-", CAHeightDiff, scrolltimer, scrollPoint);
        }
    }
}

function ContentResizeComplete(animationDirection, animationDistance, animationDuration, scrollPoint) {

    //$(".ContentArea").animate({ "height": animationDirection + "=" + animationDistance + "px" }, animationDuration);
    timer = window.setTimeout(function () { ResetScrollPoint(scrollPoint) }, animationDuration + 10)									// Wait for animation to complete, then continue
}

function ResetScrollPoint(scrollPoint) {
    $(".CurrentContent").scrollTop(1); 																								// Match content's scroll point to the window scrollpoint and...
    $(window).scrollTop(scrollPoint);
 																							// Reset the window's scroll point to 0 - this ensures that the new page's content starts at the top, rather than at the scroll point from the previous page!
}

function ToggleExpander(target, ExpanderID) {
    ToggleExpanderResize(target, "Expanded");

    if (!$(target).hasClass("Expanded")) {

        if (!$(target).is("#CategoryViewport")) {

            if ($(ExpanderID + "Img")) {
                $(ExpanderID + "Img").attr("src", $(ExpanderID + "Img").attr("src").toLowerCase().replace("down", "up"));
            }
            if ($(ExpanderID + "Text")) {
                $(ExpanderID + "Text").text($(ExpanderID + "Text").text().replace("More", "Less"));
            }

        }

        if ($(target).hasClass("ExpansionFinished")) {

            if ($(ExpanderID + "Img")) {
                $(ExpanderID + "Img").attr("src", $(ExpanderID + "Img").attr("src").toLowerCase().replace("down", "up"));
            }
            if ($(ExpanderID + "Text")) {
                $(ExpanderID + "Text").text($(ExpanderID + "Text").text().replace("More", "Less"));
            }

            $(target).removeClass("ExpansionFinished");
        }

        addParamToDocState(target, 'Expanded');
    } else {

        if ($(ExpanderID + "Img")) {
            $(ExpanderID + "Img").attr("src", $(ExpanderID + "Img").attr("src").toLowerCase().replace("up", "down"));
        }
        if ($(ExpanderID + "Text")) {
            $(ExpanderID + "Text").text($(ExpanderID + "Text").text().replace("Less", "More"));
        }
        addParamToDocState(target, '');
    }
}

function ToggleExpanderResize(target, toggleClass) {
    var value


    if (!$(target).hasClass(toggleClass)) {

        if ($(target).is("#CategoryViewport")) {
            var maxHeight = $(target).children().height();
            var unitHeight = $(target).find("article").first().height();
            var unitMargin = parseInt($(target).find("article").first().css("margin-top")) * 2;
            var curentHeight = $(target).height();
            var baseAdjust = parseInt($(target).css("min-height")) - (unitHeight + unitMargin);
            var hiddenUnitsLeft = parseInt((maxHeight - (curentHeight - baseAdjust)) / (unitHeight + unitMargin));

            if (unitHeight * 2 > curentHeight && unitHeight * 2 <= maxHeight) {

                //add two more rows
                value = curentHeight + ((unitHeight + unitMargin) * 2);
            }
            else {

                //add more rows based on where we are in the visible and hidden grid

                if (hiddenUnitsLeft > 3) {
                    hiddenUnitsLeft = 3;
                }

                // calcualte the new height to show 
                value = curentHeight + ((unitHeight + unitMargin) * hiddenUnitsLeft);
            }

            // chack to see if we are at the end of the collection
            if (value > maxHeight) {
                $(target).addClass("ExpansionFinished");
            }

            if (value < maxHeight) {
                toggleClass = "";
            }

        }
        else {
            value = $(target).children(1).height();
        }
    } else {
        value = parseInt($(target).css("min-height"));
    }

    ResizeExpander(target, value, 500, toggleClass);
}

function ResizeExpander(target, value, duration, toggleClass) {
    var Animation = createAnimation();
    var newHeight = $(".ContentArea").height() - $(target).height() + value;

    addToAnimation(Animation, '$("' + target + '").animate({"height": "' + value + '"}, ' + duration + ')', 0, false);
    addToAnimation(Animation, '$(".ContentArea").animate({"height": "' + newHeight + '"}, ' + duration + ')', duration, true);

    if (toggleClass != '') {
        if (!$(target).hasClass(toggleClass)) {
            addToAnimation(Animation, '$("' + target + '").addClass("' + toggleClass + '")', 0, false);
        } else {
            addToAnimation(Animation, '$("' + target + '").removeClass("' + toggleClass + '")', 0, false);
        }
    }

    runAnimation(Animation);
}

function ToggleResize(target, axis, toggleClass) {
    var newvalue
    var startvalue

    if (axis == "Y") {
        newvalue = $("#" + target).children(1).height()
        startvalue = parseInt($("#" + target).css("min-height"));
    }
    if (axis == "X") {
        newvalue = $("#" + target).children(1).width()
        startvalue = parseInt($("#" + target).css("min-width"));
    }

    if (!$("#" + target).hasClass(toggleClass)) {
        Resize("#" + target, axis, newvalue, 500, toggleClass);
    } else {
        Resize("#" + target, axis, startvalue, 500, toggleClass);
    }
}

function Resize(target, axis, value, duration, toggleClass) {
    var Animation = createAnimation();
    var dimension
    switch (axis) {
        case "Y":
            dimension = "height";
            break;
        case "X":
            dimension = "width";
            break;
    }

    addToAnimation(Animation, '$("' + target + '").animate({"' + dimension + '": "' + value + '"}, ' + duration + ')', duration, true);

    if (toggleClass != '') {
        if (!$("" + target).hasClass(toggleClass)) {
            addToAnimation(Animation, '$("' + target + '").addClass("' + toggleClass + '")', 0, false);
        } else {
            addToAnimation(Animation, '$("' + target + '").removeClass("' + toggleClass + '")', 0, false);
        }
        addToAnimation(Animation, '$("' + target + '").removeAttr("style")', 0, false);
    }

    //addToAnimation(Animation, 'ResizeContentAreaToContent(' + $(window).scrollTop() + ')', 0, false);

    runAnimation(Animation);
}

function ToggleView(View1, View2, Trigger, DocStateParam) {
    var Animation = createAnimation();
    var scrollTimer = 500
    var ToggleClass = 'Hide'

    if ($(View1.className).hasClass(ToggleClass)) {
        addToAnimation(Animation, '$(".' + View2.className + '").fadeOut(' + scrollTimer + ')', scrollTimer, true);
        addToAnimation(Animation, '$("' + View2.className + '").addClass("FadedOut")', 0, false);
        addToAnimation(Animation, '$("' + View1.className + '").removeClass("' + ToggleClass + '")', 0, false);
        addToAnimation(Animation, '$("' + View2.className + '").addClass("' + ToggleClass + '")', 0, false);
        addToAnimation(Animation, '$(".' + View1.className + '").fadeIn(' + scrollTimer + ');', scrollTimer, true);
        addToAnimation(Animation, '$("' + View1.className + '").removeClass("FadedOut")', 0, false);
        addToAnimation(Animation, '$("' + View1.className + '").removeAttr("style")', 0, false);
        addToAnimation(Animation, '$("' + View2.className + '").removeAttr("style")', 0, false);
        if (Trigger.TextID && Trigger.TextID != "" && View2.trigger.text && View2.trigger.text != '') {
            addToAnimation(Animation, '$("#' + Trigger.TextID + '").text("' + View2.trigger.text + '")', 0, false);
        }

        if (DocStateParam != '') {
            if (View1.DocStateValue) {
                addParamToDocState(DocStateParam, View1.DocStateValue)
            } else {
                addParamToDocState(DocStateParam, '')
            }
        }
    } else {
        addToAnimation(Animation, '$(".' + View1.className + '").fadeOut(' + scrollTimer + ')', scrollTimer, true);
        addToAnimation(Animation, '$("' + View1.className + '").addClass("FadedOut")', 0, false);
        addToAnimation(Animation, '$("' + View2.className + '").removeClass("Hide")', 0, false);
        addToAnimation(Animation, '$("' + View1.className + '").addClass("Hide")', 0, false);
        addToAnimation(Animation, '$(".' + View2.className + '").fadeIn(' + scrollTimer + ')', scrollTimer, true);
        addToAnimation(Animation, '$("' + View2.className + '").removeClass("FadedOut")', 0, false);
        addToAnimation(Animation, '$("' + View1.className + '").removeAttr("style")', 0, false);
        addToAnimation(Animation, '$("' + View2.className + '").removeAttr("style")', 0, false);
        if (Trigger.TextID && Trigger.TextID != "" && View1.trigger.text && View1.trigger.text != '') {
            addToAnimation(Animation, '$("#' + Trigger.TextID + '").text("' + View1.trigger.text + '")', 0, false);
        }
        if (DocStateParam != '') {
            if (View2.DocStateValue) {
                addParamToDocState(DocStateParam, View2.DocStateValue)
            } else {
                addParamToDocState(DocStateParam, '')
            }
        }
    }

    runAnimation(Animation);
}

/*function ZoomTarget(e) {
if ($(".ProductViewer").hasClass("ShowZoom")) {
} else {
return false;
}
}*/
;
var StateConvergence = /** @class */ (function () {
    function StateConvergence() {
    }
    StateConvergence.prototype.GetStateConvergenceCookie = function () {
        var cookieName = Next.Settings.Channel.StateConvergence.CookieName;
        var cookieValue = {};
        var stateConvergenceCookie = readCookie(cookieName);
        if (stateConvergenceCookie != null) {
            var splitVars = stateConvergenceCookie.split("&");
            for (var i = 0; i < splitVars.length; i++) {
                var splitKvp = splitVars[i].split("=");
                if (splitKvp != null) {
                    cookieValue[splitKvp[0]] = splitKvp[1];
                }
            }
        }
        return cookieValue;
    };
    StateConvergence.prototype.GetAgentId = function () {
        var cookieAgentIdKey = Next.Settings.Channel.StateConvergence.CookieAgentIDKey;
        var cookieValue = this.GetStateConvergenceCookie();
        return cookieValue[cookieAgentIdKey];
    };
    StateConvergence.prototype.GetConvergedFlag = function () {
        var cookieConvergedFlagKey = Next.Settings.Channel.StateConvergence.CookieConvergedFlagKey;
        var cookieValue = this.GetStateConvergenceCookie();
        return cookieValue[cookieConvergedFlagKey] === "True";
    };
    StateConvergence.prototype.StripTrailingForwardSlash = function (url) {
        var lastForwardSlashIndex = url.lastIndexOf("/");
        var lastIndexOfUrl = url.length - 1;
        var output;
        if (lastForwardSlashIndex === lastIndexOfUrl) {
            output = url.substring(0, lastForwardSlashIndex);
        }
        else {
            output = url;
        }
        return output;
    };
    StateConvergence.prototype.FromEndpoint = function (endpoint, agentId) {
        var formattedEndpoint = this.StripTrailingForwardSlash(endpoint);
        var formattedOrigin = this.StripTrailingForwardSlash(window.location.origin);
        if (formattedEndpoint !== formattedOrigin) {
            var pixelEndpoint = endpoint + "/StateConvergence/Pixel/" + agentId;
            var pixelImage = new Image();
            pixelImage.src = pixelEndpoint;
        }
    };
    StateConvergence.prototype.Execute = function () {
        var convergedFlag = this.GetConvergedFlag();
        if (convergedFlag) {
            return;
        }
        var convergedDomains = Next.Settings.Channel.StateConvergence.Domains;
        var agentId = this.GetAgentId();
        if (agentId && convergedDomains.length) {
            for (var i = 0; i < convergedDomains.length; i++) {
                var endpoint = convergedDomains[i];
                this.FromEndpoint(endpoint, agentId);
            }
        }
    };
    return StateConvergence;
}());
var NextStateConvergence = new StateConvergence();
//# sourceMappingURL=StateConvergenceCommon.js.map;
// globals we reference
// todo supply interface for consumers, rather than letting them randomly add to our data structure?
var rebuildDataLayer = true;
var setUpGA = true;
var itemNumberAdded = "";
var guestAccountConverted = false;
var platmodCommon;
(function (platmodCommon) {
    var w = window;
    var NextUnlimitedModel = /** @class */ (function () {
        function NextUnlimitedModel() {
            this.IsEnabled = false;
            this.IsExistingNUCustomer = false;
            this.ShowAlreadyNUCustomerBanner = false;
            this.ShowBelowMinimumOrderValueBanner = false;
            this.AmountToSatisfyMinimumOrderValue = "";
            this.ShowAlreadyNUCustomerNURemovedAlert = false;
            this.NextUnlimitedItemNumbers = [];
        }
        NextUnlimitedModel.prototype.Update = function (data) {
            this.IsEnabled = data.IsEnabled;
            this.IsExistingNUCustomer = data.IsExistingNUCustomer;
            this.ShowAlreadyNUCustomerBanner = data.ShowAlreadyNUCustomerBanner;
            this.ShowBelowMinimumOrderValueBanner = data.ShowBelowMinimumOrderValueBanner;
            this.AmountToSatisfyMinimumOrderValue = data.AmountToSatisfyMinimumOrderValue;
            this.ShowAlreadyNUCustomerNURemovedAlert = data.ShowAlreadyNUCustomerNURemovedAlert;
            if (data.ItemNumbersWithoutHyphen && data.ItemNumbersWithoutHyphen.length > 0) {
                this.NextUnlimitedItemNumbers = data.ItemNumbersWithoutHyphen;
            }
        };
        return NextUnlimitedModel;
    }());
    var NextBasketData = /** @class */ (function () {
        function NextBasketData() {
            this.Version = 0;
            this.ItemCount = 0;
        }
        return NextBasketData;
    }());
    var SessionTransferVariables = /** @class */ (function () {
        function SessionTransferVariables() {
            this.GAAccount = '';
            this.GASessionId = '';
            this.HomeUrl = '';
            this.IgnoreGA = true;
            this.SearchUrl = '';
            this.ShoppingBagUrl = '';
            this.GAEnabledForGTM = false;
            this.GAAccountForGTM = '';
        }
        return SessionTransferVariables;
    }());
    var Basket = /** @class */ (function () {
        function Basket() {
            this.VisitorID = '';
            this.SessionID = '';
            this.Data = new NextBasketData();
            this.NotifyChange = [];
            this.NotifyError = [];
            this.Loaded = false;
            this.UsingKeepAlive = false;
            this.KeepAlivePollTime = 60000;
            this.HostURL = "";
            this.InboundQueue = [];
            this.OutboundQueue = [];
            this.ItemsWaiting = false;
            this.NotifyWaiting = false;
            this.SessionTransferVariables = new SessionTransferVariables();
            this.NextUnlimited = new NextUnlimitedModel();
            this.RoamingProfileId = "";
            this.BrowseOnlyMode = false;
            this.MobilePMeterAnimationEnabled = Next.Settings.Channel.BagIconShutterAnimation;
            this.TriggerMobilePMeterAnimation = false;
            this.DesktopPMeterAnimationEnabled = Next.Settings.Channel.BagIconShutterAnimation;
            this.TriggerDesktopPMeterAnimation = false;
            // todo pass baseUrl to ctor
            // Use baseURL if it exists (used by AccountPortal to post to MVC app).
            if (typeof baseURL != 'undefined') {
                this.HostURL = baseURL;
            }
            // the header is not there at this point so we don't want to do this
            // Load -> LoadSuccess calls UpdateBagUI anyway
            //this.UpdateBagUI(this);
        }
        Basket.prototype.SubscribeToEvents = function () {
            var _this = this;
            if (typeof w.subjects !== "undefined") {
                w.subjects["$ SHOPPING_BAG_GET_CALLBACK"].subscribe(function (eventResponse) {
                    var jqXHR = {
                        getResponseHeader: function () { return false; },
                        status: eventResponse.status
                    };
                    if (eventResponse.success) {
                        var data = eventResponse.data;
                        if (data.redirect === "true") {
                            _this.ConfirmRedirectModal(data.cancelUrl);
                        }
                        else {
                            _this.LoadSuccess(data, eventResponse.textStatus, jqXHR, 'load');
                        }
                    }
                    else {
                        _this.LoadError(jqXHR, eventResponse.textStatus, null, 'load');
                    }
                });
            }
        };
        // these methods should be overridden in the logically-concrete subclass (this class is logically abstract, but we do not enforced that to keep things simple)
        //todo enforce these are overridden?
        Basket.prototype.UpdateBagUI = function (basket) { };
        Basket.prototype.PriceDial = function (bag) { };
        Basket.prototype.Notify = function (messageObj) { };
        Basket.prototype.DisplayRebuildNotification = function (messageObj) { };
        Basket.prototype.NotifyItemAdded = function (itemObj) { };
        Basket.prototype.NotifyGAAccount = function (GAAccountToUse, GASessionId, GAEnabled) { };
        Basket.prototype.NotifyGAAccountForGTM = function (GAAccountForGTM, GASessionIdForGTM, GAEnabledForGTM) { };
        //Executes bag actions
        Basket.prototype.ExecuteBagAction = function (actionParams) {
            var _this = this;
            if (this.SessionID == '') {
                return;
            }
            var eventId = Date.now().toString();
            switch (actionParams.actionPath) {
                case "bag/add":
                    var addBagSubscription = w.subjects["$ SHOPPING_BAG_ADD_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addBagSubscription);
                        }
                    });
                    var addBagEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                        optionNumber: actionParams.postData.option,
                        chain: actionParams.postData.chain,
                        quantity: actionParams.postData.quantity,
                        modalItemUrl: actionParams.postData.modalItemUrl,
                        saleClearanceSofaImage: actionParams.postData.SaleClearanceSofaImage,
                        itemNumberAdded: itemNumberAdded
                    };
                    w.subjects["$ SHOPPING_BAG_ADD"].next(addBagEventData);
                    return;
                case "bag/AddCist":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_ADD_CIST_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var addCistEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                        optionNumber: actionParams.postData.option,
                        chain: actionParams.postData.chain,
                        quantity: actionParams.postData.quantity,
                        cistStoreId: actionParams.postData.ciststoreid,
                    };
                    w.subjects["$ SHOPPING_BAG_ADD_CIST"].next(addCistEventData);
                    return;
                case "bag/addevoucher":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_ADD_EVOUCHER_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var addEvoucherEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                        option: actionParams.postData.option,
                        optionNumber: actionParams.postData.option,
                        eVoucherTo: actionParams.postData.eVoucherTo,
                        eVoucherFrom: actionParams.postData.eVoucherFrom,
                        eVoucherEmail: actionParams.postData.eVoucherEmail,
                        eVoucherMessage: actionParams.postData.eVoucherMessage,
                        ecardDeliveryDate: actionParams.postData.ecardDeliveryDate,
                    };
                    w.subjects["$ SHOPPING_BAG_ADD_EVOUCHER"].next(addEvoucherEventData);
                    return;
                case "bag/addgiftcard":
                    var addGCSubscription = w.subjects["$ SHOPPING_BAG_ADD_GIFT_CARD_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addGCSubscription);
                        }
                    });
                    var addGiftCardEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                        amountOption: actionParams.postData.amountOption,
                        firstName: actionParams.postData.firstName,
                        lastName: actionParams.postData.lastName,
                        addressLine1: actionParams.postData.addressLine1,
                        addressLine2: actionParams.postData.addressLine2,
                        addressLine3: actionParams.postData.addressLine3,
                        addressLine4: actionParams.postData.addressLine4,
                        addressLine5: actionParams.postData.addressLine5,
                        postCode: actionParams.postData.postCode,
                        message: actionParams.postData.message,
                        deliveryDate: actionParams.postData.deliveryDate,
                        deliveryOption: actionParams.postData.deliveryOption,
                        deliveryCharge: actionParams.postData.deliveryCharge,
                        mediacode: actionParams.postData.mediacode
                    };
                    w.subjects["$ SHOPPING_BAG_ADD_GIFT_CARD"].next(addGiftCardEventData);
                    return;
                case "bag/addlinkeditem":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_ADD_LINKED_ITEM_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var addLinkedItemEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                        optionNumber: actionParams.postData.option,
                        linkedItemId: actionParams.postData.linkeditem,
                        linkedItemOption: actionParams.postData.linkeditemoption,
                        itemNumberAdded: itemNumberAdded
                    };
                    w.subjects["$ SHOPPING_BAG_ADD_LINKED_ITEM"].next(addLinkedItemEventData);
                    return;
                case "bag/addmultiple":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_ADD_MULTIPLE_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var addMultipleEventData = {
                        eventId: eventId,
                        data: actionParams.postData.data,
                        pageUrl: actionParams.postData.pageurl,
                        deliveryWeeks: actionParams.postData.deliveryweeks,
                        isGrouped: actionParams.postData.grouped,
                        groupType: actionParams.postData.groupType
                    };
                    w.subjects["$ SHOPPING_BAG_ADD_MULTIPLE"].next(addMultipleEventData);
                    return;
                case "bag/addwarranty":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_ADD_WARRANTY_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var addWarrantyEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                        optionNumber: actionParams.postData.option,
                        warrantyId: actionParams.postData.warranty,
                        warrantyOptionNumber: actionParams.postData.warrantyoptionno,
                    };
                    w.subjects["$ SHOPPING_BAG_ADD_WARRANTY"].next(addWarrantyEventData);
                    return;
                case "bag/remove":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_REMOVE_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var removeEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                        customItemType: actionParams.postData.customItemType
                    };
                    w.subjects["$ SHOPPING_BAG_REMOVE"].next(removeEventData);
                    return;
                case "bag/reject":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_REJECT_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var rejectEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                    };
                    w.subjects["$ SHOPPING_BAG_REJECT"].next(rejectEventData);
                    return;
                case "bag/accept":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_ACCEPT_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var acceptEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                    };
                    w.subjects["$ SHOPPING_BAG_ACCEPT"].next(acceptEventData);
                    return;
                case "bag/addSample":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_ADD_SAMPLE_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var addSampleEventData = {
                        eventId: eventId,
                        items: actionParams.postData.items,
                    };
                    w.subjects["$ SHOPPING_BAG_ADD_SAMPLE"].next(addSampleEventData);
                    return;
                case "bag/removeSample":
                    var addCistSubscription = w.subjects["$ SHOPPING_BAG_REMOVE_SAMPLE_CALLBACK"].subscribe(function (eventResponse) {
                        if (eventId === eventResponse.eventId) {
                            _this.EventCallbackHandler(eventResponse, actionParams, addCistSubscription);
                        }
                    });
                    var removeSampleEventData = {
                        eventId: eventId,
                        id: actionParams.postData.id,
                    };
                    w.subjects["$ SHOPPING_BAG_REMOVE_SAMPLE"].next(removeSampleEventData);
                    return;
                default:
                    var jqXHR = {
                        getResponseHeader: function () { return false; },
                        status: "Error"
                    };
                    console.log("ERROR UNHANDLED BAG EVENT - " + actionParams.actionPath);
                    this.LoadError(jqXHR, "500", "ERROR UNHANDLED BAG EVENT - " + actionParams.actionPath, actionParams.actionType, actionParams.callBack, actionParams.dataLoadCallback);
                    break;
            }
        };
        Basket.prototype.EventCallbackHandler = function (eventResponse, actionParams, subscription) {
            console.log("SHOPPING_BAG_CALLBACK", actionParams, eventResponse);
            var jqXHR = {
                getResponseHeader: function () { return false; },
                status: eventResponse.status
            };
            if (eventResponse.success) {
                if (this.MobilePMeterAnimationEnabled) {
                    this.TriggerMobilePMeterAnimation = true;
                }
                if (this.DesktopPMeterAnimationEnabled) {
                    this.TriggerDesktopPMeterAnimation = true;
                }
                this.LoadSuccess(eventResponse.data, eventResponse.textStatus, jqXHR, actionParams.actionType, actionParams.loadBasketPage, actionParams.callBack, actionParams.dataLoadCallback);
            }
            else {
                this.LoadError(jqXHR, eventResponse.textStatus, null, actionParams.actionType, actionParams.callBack, actionParams.dataLoadCallback);
            }
            subscription.unsubscribe();
        };
        //All bag actions are passed here and added to the queue of actions
        Basket.prototype.AddBagAction = function (actionParams) {
            //Add action to inbound queue
            this.InboundQueue.push(actionParams);
            //If ItemsWaiting is set to false, we have not yet begun to process the items in the Inbound queue
            //Need to kick it off here
            if (!this.ItemsWaiting) {
                this.ItemsWaiting = true;
                //Get (and remove) first item from queue and send it off to be processed
                //In most cases we will be using the item we just added but if user has clicked 'add' multiple times,
                //we can loop through the items one by one
                var firstAction = this.InboundQueue.shift();
                this.ExecuteBagAction(firstAction);
            }
            if (!Next.Settings.Channel.PlatModGoogleAnalyticsSDK) {
                if (actionParams.postData != undefined) {
                    if (actionParams.actionType != undefined && (actionParams.actionType === "add" || actionParams.actionType === "addEvoucher" || actionParams.actionType === "addgiftcard")) {
                        var products = "";
                        var itemNumber = "";
                        var sku = "";
                        if (actionParams.postData.id != undefined) {
                            itemNumber = actionParams.postData.id;
                            if (itemNumber.lastIndexOf("-") === -1) {
                                itemNumber = itemNumber.substring(0, 3) + "-" + itemNumber.substring(3, 6);
                            }
                            else if (itemNumber.lastIndexOf("-") === 7) {
                                itemNumber = itemNumber.substring(0, 7);
                            }
                            if (actionParams.postData.option != undefined) {
                                sku = itemNumber + "-" + actionParams.postData.option;
                            }
                            else {
                                sku = itemNumber + "-01";
                            }
                            products = '{"prod_id": "' + itemNumber + '", "sku": "' + sku + '"}';
                            if (actionParams.postData.linkeditem != undefined) {
                                itemNumber = actionParams.postData.linkeditem;
                                if (itemNumber.lastIndexOf("-") === -1) {
                                    itemNumber = itemNumber.substring(0, 3) + "-" + itemNumber.substring(3, 6);
                                }
                                else if (itemNumber.lastIndexOf("-") === 7) {
                                    itemNumber = itemNumber.substring(0, 7);
                                }
                                if (actionParams.postData.linkeditemoption != undefined) {
                                    sku = itemNumber + "-" + actionParams.postData.linkeditemoption;
                                }
                                else {
                                    sku = itemNumber + "-01";
                                }
                                products = products + "," + '{"prod_id": "' + itemNumber + '", "sku": "' + sku + '"}';
                            }
                            if (actionParams.postData.warranty != undefined) {
                                itemNumber = actionParams.postData.warranty;
                                if (itemNumber.lastIndexOf("-") === -1) {
                                    itemNumber = itemNumber.substring(0, 3) + "-" + itemNumber.substring(3, 6);
                                }
                                else if (itemNumber.lastIndexOf("-") === 7) {
                                    itemNumber = itemNumber.substring(0, 7);
                                }
                                if (actionParams.postData.warrantyoptionno != undefined) {
                                    sku = itemNumber + "-" + actionParams.postData.warrantyoptionno;
                                }
                                else {
                                    sku = itemNumber + "-01";
                                }
                                products = products + "," + '{"prod_id": "' + itemNumber + '", "sku": "' + sku + '"}';
                            }
                        }
                        else if (actionParams.postData.data != undefined) {
                            var jsonData = JSON.parse(actionParams.postData.data);
                            if (jsonData != undefined && jsonData.Items != undefined && jsonData.Items.length > 0) {
                                for (var j = 0; j < jsonData.Items.length; j++) {
                                    if (jsonData.Items[j].id != undefined) {
                                        itemNumber = jsonData.Items[j].id;
                                        if (itemNumber.lastIndexOf("-") === -1) {
                                            itemNumber = itemNumber.substring(0, 3) + "-" + itemNumber.substring(3, 6);
                                        }
                                        else if (itemNumber.lastIndexOf("-") === 7) {
                                            itemNumber = itemNumber.substring(0, 7);
                                        }
                                        if (jsonData.Items[j].option != undefined) {
                                            sku = itemNumber + "-" + jsonData.Items[j].option;
                                        }
                                        else {
                                            sku = itemNumber + "-01";
                                        }
                                    }
                                    if (products !== "") {
                                        products = products + ",";
                                    }
                                    products = products + '{"prod_id": "' + itemNumber + '", "sku": "' + sku + '"}';
                                    if (jsonData.Items[j].linkeditem != undefined) {
                                        itemNumber = jsonData.Items[j].linkeditem;
                                        if (itemNumber.lastIndexOf("-") === -1) {
                                            itemNumber = itemNumber.substring(0, 3) + "-" + itemNumber.substring(3, 6);
                                        }
                                        else if (itemNumber.lastIndexOf("-") === 7) {
                                            itemNumber = itemNumber.substring(0, 7);
                                        }
                                        if (jsonData.Items[j].linkeditemoption != undefined) {
                                            sku = itemNumber + "-" + jsonData.Items[j].linkeditemoption;
                                        }
                                        else {
                                            sku = itemNumber + "-01";
                                        }
                                        products = products + "," + '{"prod_id": "' + itemNumber + '", "sku": "' + sku + '"}';
                                    }
                                    if (jsonData.Items[j].warranty != undefined) {
                                        itemNumber = jsonData.Items[j].warranty;
                                        if (itemNumber.lastIndexOf("-") === -1) {
                                            itemNumber = itemNumber.substring(0, 3) + "-" + itemNumber.substring(3, 6);
                                        }
                                        else if (itemNumber.lastIndexOf("-") === 7) {
                                            itemNumber = itemNumber.substring(0, 7);
                                        }
                                        if (jsonData.Items[j].warrantyoptionno != undefined) {
                                            sku = itemNumber + "-" + jsonData.Items[j].warrantyoptionno;
                                        }
                                        else {
                                            sku = itemNumber + "-01";
                                        }
                                        products = products + "," + '{"prod_id": "' + itemNumber + '", "sku": "' + sku + '"}';
                                    }
                                }
                            }
                        }
                        var productsAdded = JSON.parse('[' + products + ']');
                        var bloomReachPixelEnabled = false;
                        var bloomReachSofaSku = "";
                        var bloomReachSofaId = "";
                        if (dataLayer != undefined && dataLayer.length > 0) {
                            for (var j = 0; j < dataLayer.length; j++) {
                                if (dataLayer[j].products_added_into_bag != undefined) {
                                    dataLayer.splice(j, 1);
                                }
                                if (dataLayer[j].br_pixel_enabled != undefined) {
                                    bloomReachPixelEnabled = dataLayer[j].br_pixel_enabled === "true";
                                }
                                if (dataLayer[j].br_sofa_sku != undefined && dataLayer[j].br_sofa_id != undefined) {
                                    bloomReachSofaSku = dataLayer[j].br_sofa_sku;
                                    bloomReachSofaId = dataLayer[j].br_sofa_id;
                                }
                            }
                            if (bloomReachPixelEnabled) {
                                var brProducts = products.replace(/-/g, "");
                                if (bloomReachSofaId !== "" && bloomReachSofaSku !== "") {
                                    brProducts = '{"prod_id": "' + bloomReachSofaId + '", "sku": "' + bloomReachSofaSku + '"}';
                                }
                                brProducts = JSON.parse('[' + brProducts + ']');
                                dataLayer.push({ "event": "BloomReachProductsAddedIntoBag", "br_products_added_into_bag": brProducts });
                            }
                            dataLayer.push({ "event": "ProductsAddedIntoBag", "products_added_into_bag": productsAdded });
                            if (Next.Settings.Channel.Promotions.Sampling && actionParams.actionPath === "bag/addSample") {
                                dataLayer.push({
                                    event: 'Sampling',
                                    Sampling: {
                                        Category: 'Sampling',
                                        Action: 'Banner',
                                        Label: 'Sampling_ribbon_add_to_bag'
                                    }
                                });
                            }
                        }
                    }
                    if (window.monetateQ && typeof monetateEnabled != 'undefined' && monetateEnabled) {
                        if (actionParams.actionType != undefined && (actionParams.actionType === "remove")) {
                            window.monetateQ.push(["addCategories", ['RemovedFromBag']]);
                        }
                    }
                }
            }
        };
        Basket.prototype.ItemRemove = function (itemID, customItemType) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/remove",
                postData: { id: itemID, customItemType: customItemType },
                actionType: "remove",
                loadBasketPage: false
            };
            this.AddBagAction(actionParams);
        };
        Basket.prototype.ItemReject = function (itemID) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/reject",
                postData: { id: itemID },
                actionType: "reject",
                loadBasketPage: false
            };
            this.AddBagAction(actionParams);
        };
        Basket.prototype.ItemAccept = function (itemID) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/accept",
                postData: { id: itemID },
                actionType: "accept",
                loadBasketPage: false
            };
            this.AddBagAction(actionParams);
        };
        Basket.prototype.ItemAddSample = function (items) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/addSample",
                postData: { items: items },
                actionType: "addSample",
                loadBasketPage: false
            };
            this.AddBagAction(actionParams);
        };
        Basket.prototype.ItemRemoveSample = function (itemID) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/removeSample",
                postData: { id: itemID },
                actionType: "removeSample",
                loadBasketPage: false
            };
            this.AddBagAction(actionParams);
        };
        Basket.prototype.CustomAction = function (data, customActionId) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "customAction",
                postData: {
                    customActionId: customActionId,
                    data: data
                },
                actionType: "customAction",
                loadBasketPage: false
            };
            this.AddBagAction(actionParams);
        };
        Basket.prototype.ItemAdd = function (itemID, optionNo, quantity, chain, loadBasketPage, callBack, SaleClearanceSofaImage, modalItemUrl, originatesFromQbtTray, basePagePdpItemNumber) {
            if (SaleClearanceSofaImage === void 0) { SaleClearanceSofaImage = ""; }
            if (modalItemUrl === void 0) { modalItemUrl = ""; }
            if (originatesFromQbtTray === void 0) { originatesFromQbtTray = false; }
            if (basePagePdpItemNumber === void 0) { basePagePdpItemNumber = ""; }
            RebuildDataLayer();
            //Build action paramters
            var actionParams = {
                actionPath: "bag/add",
                postData: { id: itemID, option: optionNo, chain: chain, quantity: quantity, modalItemUrl: modalItemUrl, SaleClearanceSofaImage: SaleClearanceSofaImage },
                actionType: "add",
                loadBasketPage: loadBasketPage,
                callBack: callBack
            };
            SaveCurrentLocation();
            itemNumberAdded = itemID;
            if (originatesFromQbtTray && basePagePdpItemNumber != "") {
                itemNumberAdded = basePagePdpItemNumber;
            }
            if (this.MobilePMeterAnimationEnabled) {
                this.TriggerMobilePMeterAnimation = true;
            }
            if (this.DesktopPMeterAnimationEnabled) {
                this.TriggerDesktopPMeterAnimation = true;
            }
            //Pass to AddBagAction method
            this.AddBagAction(actionParams);
        };
        Basket.prototype.ItemAddCist = function (itemID, optionNo, quantity, chain, loadBasketPage, callBack, branchId) {
            RebuildDataLayer();
            //Build action paramters
            var actionParams = {
                actionPath: "bag/AddCist",
                postData: { id: itemID, option: optionNo, chain: chain, quantity: quantity, ciststoreid: branchId },
                actionType: "add",
                loadBasketPage: loadBasketPage,
                callBack: callBack
            };
            SaveCurrentLocation();
            itemNumberAdded = itemID;
            //Pass to AddBagAction method
            this.AddBagAction(actionParams);
        };
        Basket.prototype.ItemAddMultiple = function (data, options, callBack, dataLoadCallback) {
            RebuildDataLayer();
            //Fallback in case some method calls are still sending a boolean (loadBasketPage) for 2nd parameter
            if (typeof options == "boolean") {
                options = {
                    loadBasketPage: options
                };
            }
            var postData = {
                data: $.toJSON(data),
                pageurl: null,
                deliveryweeks: null,
                grouped: false,
                groupType: null
            };
            if (options.pageurl
                && options.pageurl.length) {
                postData.pageurl = options.pageurl;
            }
            if (options.deliveryweeks != null
                && options.deliveryweeks.toString().length) {
                postData.deliveryweeks = options.deliveryweeks;
            }
            if (options.grouped
                && options.groupType != null
                && options.groupType.length) {
                postData.grouped = options.grouped;
                postData.groupType = options.groupType;
            }
            var actionParams = {
                actionPath: "bag/addmultiple",
                postData: postData,
                actionType: "add",
                loadBasketPage: options.loadBasketPage,
                callBack: callBack,
                dataLoadCallback: dataLoadCallback
            };
            SaveCurrentLocation();
            this.AddBagAction(actionParams);
        };
        Basket.prototype.ItemAddWarranty = function (itemID, optionNo, chain, warrantyID, warrantyOption, callBack) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/addwarranty",
                postData: { id: itemID, option: optionNo, warranty: warrantyID, warrantyoptionno: warrantyOption },
                actionType: "add",
                loadBasketPage: false,
                callBack: callBack
            };
            itemNumberAdded = itemID;
            //Pass to AddBagAction method
            this.AddBagAction(actionParams);
        };
        // used by sofas
        Basket.prototype.ItemAddLinkedItem = function (itemID, optionNo, linkedID, linkedOption, quantity, loadBasketPage, callBack, originatesFromQbtTray, basePagePdpItemNumber) {
            if (originatesFromQbtTray === void 0) { originatesFromQbtTray = false; }
            if (basePagePdpItemNumber === void 0) { basePagePdpItemNumber = ""; }
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/addlinkeditem",
                postData: { id: itemID, option: optionNo, linkeditem: linkedID, linkeditemoption: linkedOption },
                actionType: "add",
                loadBasketPage: loadBasketPage,
                callBack: callBack
            };
            itemNumberAdded = itemID;
            if (originatesFromQbtTray && basePagePdpItemNumber != "") {
                itemNumberAdded = basePagePdpItemNumber;
            }
            //Pass to AddBagAction method
            this.AddBagAction(actionParams);
        };
        Basket.prototype.ItemUpdateSize = function (itemID, optionNo, itemNumber) {
            var _this = this;
            RebuildDataLayer();
            var eventId = Date.now().toString();
            var updateSizeSubscription = w.subjects["$ SHOPPING_BAG_UPDATE_SIZE_CALLBACK"].subscribe(function (eventResponse) {
                if (eventId === eventResponse.eventId) {
                    var jqXHR = {
                        getResponseHeader: function () { return false; },
                        status: eventResponse.status
                    };
                    if (eventResponse.success) {
                        if (_this.MobilePMeterAnimationEnabled) {
                            _this.TriggerMobilePMeterAnimation = true;
                        }
                        _this.LoadSuccess(eventResponse.data, eventResponse.textStatus, jqXHR, 'addupdatesize');
                    }
                    else {
                        _this.LoadError(jqXHR, eventResponse.textStatus, null, 'updatesize');
                    }
                    updateSizeSubscription.unsubscribe();
                }
            });
            var updateSizeEventData = { eventId: eventId, id: itemID, optionNumber: optionNo, itemNumber: itemNumber };
            w.subjects["$ SHOPPING_BAG_UPDATE_SIZE"].next(updateSizeEventData);
        };
        Basket.prototype.ItemUpdateQuantity = function (itemID, quantity, loadBasketPage) {
            var _this = this;
            if (loadBasketPage === void 0) { loadBasketPage = true; }
            RebuildDataLayer();
            var eventId = Date.now().toString();
            var updateSizeSubscription = w.subjects["$ SHOPPING_BAG_UPDATE_QUANTITY_CALLBACK"].subscribe(function (eventResponse) {
                if (eventId === eventResponse.eventId) {
                    var jqXHR = {
                        getResponseHeader: function () { return false; },
                        status: eventResponse.status
                    };
                    if (eventResponse.success) {
                        if (_this.MobilePMeterAnimationEnabled) {
                            _this.TriggerMobilePMeterAnimation = true;
                        }
                        if (_this.DesktopPMeterAnimationEnabled) {
                            _this.TriggerDesktopPMeterAnimation = true;
                        }
                        _this.LoadSuccess(eventResponse.data, eventResponse.textStatus, jqXHR, 'updatequantity', loadBasketPage);
                    }
                    else {
                        _this.LoadError(jqXHR, eventResponse.textStatus, null, 'updatequantity');
                    }
                    updateSizeSubscription.unsubscribe();
                }
            });
            var updateSizeEventData = { eventId: eventId, id: itemID, quantity: quantity };
            w.subjects["$ SHOPPING_BAG_UPDATE_QUANTITY"].next(updateSizeEventData);
        };
        Basket.prototype.AddEVoucher = function (id, option, eVoucherTo, eVoucherFrom, eVoucherEmail, eVoucherMessage, ecardDeliveryDate) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/addevoucher",
                postData: { id: id, option: option, eVoucherTo: eVoucherTo, eVoucherFrom: eVoucherFrom, eVoucherEmail: eVoucherEmail, eVoucherMessage: eVoucherMessage, ecardDeliveryDate: ecardDeliveryDate },
                actionType: "addEvoucher",
                loadBasketPage: false
            };
            this.AddBagAction(actionParams);
        };
        Basket.prototype.AddEVoucherMobile = function (id, option, eVoucherTo, eVoucherFrom, eVoucherEmail, eVoucherMessage, ecardDeliveryDate, callBack) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/addevoucher",
                postData: { id: id, option: option, eVoucherTo: eVoucherTo, eVoucherFrom: eVoucherFrom, eVoucherEmail: eVoucherEmail, eVoucherMessage: eVoucherMessage, ecardDeliveryDate: ecardDeliveryDate },
                actionType: "addEvoucher",
                loadBasketPage: false,
                callBack: callBack
            };
            this.AddBagAction(actionParams);
        };
        //add gift card item to Shopping Bag
        Basket.prototype.AddGiftCard = function (id, amountOption, firstName, lastName, addressLine1, addressLine2, addressLine3, addressLine4, addressLine5, postCode, message, deliveryDate, deliveryOption, deliveryCharge, mediacode, callBack) {
            RebuildDataLayer();
            var actionParams = {
                actionPath: "bag/addgiftcard",
                postData: { id: id, amountOption: amountOption, firstName: firstName, lastName: lastName, addressLine1: addressLine1, addressLine2: addressLine2, addressLine3: addressLine3, addressLine4: addressLine4, addressLine5: addressLine5, postCode: postCode, message: message, deliveryDate: deliveryDate, deliveryOption: deliveryOption, deliveryCharge: deliveryCharge, mediacode: mediacode },
                actionType: "addgiftcard",
                loadBasketPage: false,
                callBack: callBack
            };
            this.AddBagAction(actionParams);
        };
        Basket.prototype.Load = function () {
            w.subjects["$ SHOPPING_BAG_GET"].next({ guestAccountConverted: guestAccountConverted });
        };
        Basket.prototype.NotifySuccess = function () {
            if (this.Loaded) {
                for (var i = 0; i < this.NotifyChange.length; i++) {
                    this.NotifyChange[i]();
                }
            }
            ;
        };
        Basket.prototype.AddItemNotify = function (resultItemArray, currentBag) {
            var eventResponse = {
                success: true,
                data: { ShoppingBag: currentBag },
                status: 200,
                textStatus: "OK",
                eventId: null
            };
            w.subjects["$ SHOPPING_BAG_ADD_CALLBACK"].next(eventResponse);
            this.AddItemNotifyInternal(resultItemArray, currentBag);
        };
        Basket.prototype.AddItemNotifyInternal = function (resultItemArray, currentBag) {
            var itemObj = {
                itemArray: resultItemArray,
                currentBag: currentBag
            };
            this.OutboundQueue.push(itemObj);
            if (!this.NotifyWaiting) {
                this.NotifyWaiting = true;
                // var nextNotifyItem = NextBasket.OutboundQueue.shift();
                var nextNotifyItem = this.OutboundQueue[0];
                // check if the item is a part of multibuy if so than call get multibuy
                //  if (NextBasket.OutboundQueue[0].itemArray[0].IsMultibuyItem)            
                if (this.DesktopPMeterAnimationEnabled) {
                    this.TriggerDesktopPMeterAnimation = true;
                }
                if (this.MobilePMeterAnimationEnabled) {
                    this.TriggerMobilePMeterAnimation = true;
                }
                this.NotifyItemAdded(nextNotifyItem);
            }
        };
        Basket.prototype.SetGAUp = function (SessionTransferVariables) {
            if (SessionTransferVariables != null) {
                this.SessionTransferVariables.IgnoreGA = SessionTransferVariables.IgnoreGA;
                this.SessionTransferVariables.GAAccount = SessionTransferVariables.GAAccount;
                this.SessionTransferVariables.GASessionId = SessionTransferVariables.GASessionId;
                this.SessionTransferVariables.HomeUrl = SessionTransferVariables.HomeUrl;
                this.SessionTransferVariables.SearchUrl = SessionTransferVariables.SearchUrl;
                this.SessionTransferVariables.ShoppingBagUrl = SessionTransferVariables.ShoppingBagUrl;
                this.SessionTransferVariables.GAEnabledForGTM = SessionTransferVariables.GAEnabledForGTM;
                this.SessionTransferVariables.GAAccountForGTM = SessionTransferVariables.GAAccountForGTM;
                this.NotifyGAAccount(this.SessionTransferVariables.GAAccount, this.SessionTransferVariables.GASessionId, !this.SessionTransferVariables.IgnoreGA);
                this.NotifyGAAccountForGTM(this.SessionTransferVariables.GAAccountForGTM, this.SessionTransferVariables.GASessionId, this.SessionTransferVariables.GAEnabledForGTM);
            }
            else {
                // Call GA with NOTHING so that defaults are resorted to.
                this.NotifyGAAccount(null, null, null);
                this.NotifyGAAccountForGTM(null, null, null);
            }
        };
        Basket.prototype.convertProductGender = function (gender) {
            if (gender) {
                if (gender.toLowerCase().indexOf("boy") != -1)
                    return "Men";
                if (gender.toLowerCase().indexOf("girl") != -1)
                    return "Women";
            }
            else {
                gender = '';
            }
            return gender;
        };
        // callback - this is more visual, it is triggered once the notification is shown
        // dataLoadCallback - this is triggered as soon as we have data
        Basket.prototype.LoadSuccess = function (data, textStatus, jqXHR, actionType, loadBasketPage, callBack, dataLoadCallback) {
            // Call the GA setup routine
            if (setUpGA) {
                if (data != null && data.ShoppingBag != null) {
                    this.SetGAUp(data.ShoppingBag.SessionTransferVariables);
                }
                else {
                    this.SetGAUp(null);
                }
            }
            checkAndRedirectForAjaxError(jqXHR, false, 'ShoppingBagCommon.js: ' + actionType);
            if (dataLoadCallback) {
                dataLoadCallback(true);
            }
            if (this.SessionID === '')
                this.SessionID = data.SessionID;
            if (this.VisitorID === '')
                this.VisitorID = data.VisitorID;
            if (this.RoamingProfileId === '')
                this.RoamingProfileId = data.RoamingProfileId;
            this.BrowseOnlyMode = data.BrowseOnlyMode;
            //Check if RedirectURL has a value, and HTTP redirect the user to that value
            if (data.Variables && data.Variables.RedirectURL) {
                window.location.replace(data.Variables.RedirectURL);
            }
            if (actionType === "load"
                && typeof CountryRedirect === 'object') {
                //Initalise CountryRedirect object and pass in data from response
                CountryRedirect.Init(data.CountryRedirect);
                $(document).trigger("NextBasket_Load");
            }
            if (actionType === "load" && typeof NextBasketState !== 'undefined')
                NextBasketState.SetNextBasketDataOnPageLoad(data.ShoppingBag);
            if (Next.Settings.Channel.IsNextUnlimitedEnabled) {
                if (((actionType === "remove") || (actionType === "removegroup") || (actionType === "updatequantity") || (actionType === "addupdatesize") || (Next.Settings.Mobile.IsShoppingbagDrawerEnabled && actionType === "load")) && typeof data.NextUnlimited === "object") {
                    this.NextUnlimited.Update(data.NextUnlimited);
                }
            }
            //First need to start the next action waiting to be sent (if one exists)
            if (this.InboundQueue.length) {
                //Get next action and send to be executed
                var nextAction = this.InboundQueue.shift();
                this.ExecuteBagAction(nextAction);
            }
            else {
                //Else - all items are processed
                this.ItemsWaiting = false;
                // Now we know we are on the last item, lets handle any errors
                this.NotifyErrors();
            }
            var hasOutOfStockItems = false;
            if (Next.Settings.Channel.Promotions.GWP && typeof gwpShoppingBagBanners !== 'undefined') {
                gwpShoppingBagBanners.refresh(data.ShoppingBag);
            }
            if (Next.Settings.Channel.Promotions.Sampling && window.location.href.indexOf("shoppingbag") > -1
                && typeof SamplingRibbon !== 'undefined' && typeof SamplingBanner !== 'undefined') {
                SamplingRibbon.create(data.ShoppingBag);
                SamplingBanner.create(data.ShoppingBag);
            }
            if (Next.Settings.Channel.EnableFlowers && window.location.href.indexOf("shoppingbag") > -1) {
                if (typeof data.ShoppingBag !== 'undefined' && typeof data.ShoppingBag.Items !== 'undefined' && !data.ShoppingBag.Items.some(function (i) { return i.FulfilmentType === 'F'; })) {
                    var flowersInfoBox = document.querySelectorAll('.flowersInfoBox');
                    flowersInfoBox.forEach(function (item) {
                        item.remove();
                    });
                }
            }
            if (Next.Settings.Channel.EnableFlowers && typeof FlowerItem !== 'undefined') {
                FlowerItem.ManageTimeoutForFlowerItem(data.ShoppingBag);
            }
            switch (actionType) {
                case "add":
                case "addEvoucher":
                case "addSample":
                case "addgiftcard":
                    //                this.Data = data.Bag;
                    (actionType == "addEvoucher" || actionType == "addgiftcard") ? this.Data = data.Bag : this.Data = data.ShoppingBag;
                    //this.Data = data.ShoppingBag;
                    this.Loaded = true;
                    var newItemArr = [];
                    // TODO: Filter out feet
                    if (data.ItemStates != null) {
                        for (var i = 0; i < data.ItemStates.length; i++) {
                            if (data.ItemStates[i].State === "A" || data.ItemStates[i].State === "R") {
                                newItemArr.push(data.ItemStates[i].Item);
                                //FB 162345 - this functionality is not currently required as we do not want subsequent redirect from Clearance
                                //if (data.ItemStates[i].Item.StockStatus === "soldout")
                                //    hasOutOfStockItems = true;
                            }
                        }
                    }
                    if (Next.Settings.Channel.Promotions.GWP && newItemArr.length > 1) {
                        var freeGift = newItemArr.find(function (item) { return item.IsFreeGiftItem; });
                        if (freeGift !== undefined) {
                            newItemArr[0].TriggeredFreeGift = true;
                            newItemArr[0].FreeGiftTitle = freeGift.Description;
                            if (dataLayer != null && Next.Settings.Channel.Promotions.GWP) {
                                dataLayer.push({
                                    event: 'GWP',
                                    GWP: {
                                        Label: 'gwp_pdp_add_to_bag',
                                        Action: 'PDP',
                                        Category: 'Gift With Purchase'
                                    }
                                });
                            }
                        }
                    }
                    this.Data.LatestItem = newItemArr;
                    if (actionType === "addEvoucher") {
                        hasOutOfStockItems = false;
                    }
                    //var curBag = data.Bag;
                    var curBag;
                    (actionType == "addEvoucher" || actionType == "addgiftcard") ? curBag = data.Bag : curBag = data.ShoppingBag;
                    // If we are displaying the basket page then we need to update the count and total summary in the header, otherwise we need to show the notification
                    if (loadBasketPage || hasOutOfStockItems)
                        this.PriceDial(curBag);
                    else
                        this.AddItemNotifyInternal(newItemArr, curBag);
                    if (this.Data.LowerLimitReached || this.Data.IsShoppingBagFull) {
                        // todo: this seems to be an error:
                        // the behaviour in this area seems to be broken in live - past a certain # of items (lowerlimit?) the notification stops and the shopping bag is only updated on loading a new page (and once per page after?) - the shopping bag page isn't loaded
                        //notifyItemAdded = true; // this forces the shopping bag page to be loaded - Raj
                        //todo: we're going to revisit this at a later date, but for now we'll load the shopping bag page
                        if (typeof NavigateToShoppingBag === 'function') {
                            NavigateToShoppingBag();
                        }
                        else {
                            window.location.href = Next.Settings.Channel.SiteUrl + "/shoppingbag";
                        }
                    }
                    break;
                default: // all other action types (remove, update etc) do not need to perform any specific action (currently) - Raj
                    var returnedData = null;
                    //                if (data.Bag != undefined)
                    //                    returnedData = data.Bag;
                    //                else
                    returnedData = data.ShoppingBag;
                    //var dataVersion = returnedData.Version;
                    this.Data = returnedData;
                    this.Loaded = true;
                    this.NotifySuccess(); // this should come first, to display total amount at the top of the page - Raj
                    var forcePageRefresh = false;
                    if (data.IgnoreBagVersion === true)
                        forcePageRefresh = true;
                    var url = window.location.pathname.toLowerCase();
                    if (typeof RefreshShoppingBag === 'function') {
                        RefreshShoppingBag(forcePageRefresh);
                    }
                    else if (Next.Settings.Channel.ResponsiveShoppingBagIsEnabled && url.indexOf("/shoppingbag") > -1) {
                        $(function () {
                            if (typeof RefreshShoppingBag === 'function') {
                                RefreshShoppingBag(forcePageRefresh);
                            }
                        });
                    }
                    //Signify if the shopping bag has been recreated from a previous session and the user has not been previously notified.
                    if (actionType === "load" && returnedData.RecreatedFromPreviousSession && !returnedData.UserNotifiedOfSessionRecreation && returnedData.Authenticated) {
                        //this.Notify(returnedData);
                        if (this.Data.IsShoppingBagFull) {
                            if (typeof NavigateToShoppingBag === 'function') {
                                NavigateToShoppingBag();
                            }
                            else {
                                window.location.href = Next.Settings.Channel.SiteUrl + "/shoppingbag";
                            }
                        }
                        else {
                            this.DisplayRebuildNotification(returnedData);
                        }
                    }
                    break;
            }
            if (callBack) {
                var callBackParam = !(Object(callBack).name == "removeFromSaveForLater" && this.Data.IsShoppingBagFull);
                /*
                    Protocol relative SiteUrl causes the page to load faster
                    Therefore the page is refreshed before the item is removed from save for later
                    So, Feature switch for HTTPS to remove setTimeout
                */
                if (Next.Settings.Channel.HttpsEnabled) {
                    callBack(callBackParam);
                }
                else {
                    setTimeout(function () {
                        callBack(callBackParam);
                    }, 500);
                }
            }
            this.UpdateBagUI(this);
            this.saveBagCookieForVIP();
            if (loadBasketPage || hasOutOfStockItems)
                if (typeof NavigateToShoppingBag === 'function') {
                    NavigateToShoppingBag();
                }
                else {
                    var loadHtmlContentUrl = Next.Settings.Channel.HttpsEnabled ? window.location.protocol + AjaxURL() : AjaxURL();
                    if (Next.Settings.Channel.IsTotalPlatformLiteClient && Next.Settings.Channel.MainSiteAbsolutePath && Next.Settings.Channel.MainSiteAbsolutePath !== "/") {
                        loadHtmlContentUrl = AjaxURL() + Next.Settings.Channel.MainSiteAbsolutePath.replace("/", "") + "/";
                    }
                    LoadHTMLContent(loadHtmlContentUrl + 'shoppingbag', 'Shopping Bag');
                }
            var cartRows = "";
            var products = "";
            var productList = "";
            var itemsData = "";
            var position = 0;
            var dataLayerCurrencyCode = "GBP";
            var isShoppingBagPage = false;
            var isDeliveryPage = false;
            var isPaymentPage = false;
            var isCompletePage = false;
            var pageType = "";
            var bloomReachPixelEnabled = false;
            var productsAddedIntoBag = false;
            var productSKUs = "";
            monetateEnabled = false;
            if (!Next.Settings.Channel.PlatModGoogleAnalyticsSDK) {
                if (rebuildDataLayer && dataLayer != undefined && dataLayer.length > 0) {
                    for (var j = 0; j < dataLayer.length; j++) {
                        if (dataLayer[j].page_type != undefined) {
                            pageType = dataLayer[j].page_type;
                        }
                        else if (dataLayer[j].monetate_enabled != undefined) {
                            monetateEnabled = dataLayer[j].monetate_enabled === "true";
                        }
                        else if (dataLayer[j].br_pixel_enabled != undefined) {
                            bloomReachPixelEnabled = dataLayer[j].br_pixel_enabled === "true";
                        }
                        else if (dataLayer[j].channel_currency_code != undefined) {
                            dataLayerCurrencyCode = dataLayer[j].channel_currency_code;
                        }
                        else if (dataLayer[j].is_shoppingbag_page != undefined) {
                            isShoppingBagPage = dataLayer[j].is_shoppingbag_page === "true";
                        }
                        else if (dataLayer[j].is_delivery_page != undefined) {
                            isDeliveryPage = dataLayer[j].is_delivery_page === "true";
                        }
                        else if (dataLayer[j].is_payment_page != undefined) {
                            isPaymentPage = dataLayer[j].is_payment_page === "true";
                        }
                        else if (dataLayer[j].is_complete_page != undefined) {
                            isCompletePage = dataLayer[j].is_complete_page === "true";
                        }
                        else if (dataLayer[j].event != undefined) {
                            productsAddedIntoBag = (dataLayer[j].event === "ProductsAddedIntoBag");
                        }
                        else if (dataLayer[j].monetateCartRows != undefined) {
                            dataLayer.splice(j, 1);
                        }
                        else if (dataLayer[j].itemsData != undefined) {
                            dataLayer.splice(j, 1);
                        }
                        else if (dataLayer[j].bloomreachBasketData != undefined) {
                            dataLayer.splice(j, 1);
                        }
                    }
                }
                if (rebuildDataLayer && NextBasket.Data.Items != null && NextBasket.Data.Items.length > 0) {
                    var bloomreachBasketData = itemsData;
                    for (var i = 0; i < NextBasket.Data.Items.length; i++) {
                        if (cartRows !== "") {
                            cartRows = cartRows + ",";
                        }
                        var friendlyItemNumber = NextBasket.Data.Items[i].ItemNumber.substring(0, 3) + '-' + NextBasket.Data.Items[i].ItemNumber.substring(3);
                        var itemNumber = NextBasket.Data.Items[i].ItemNumber;
                        var quantity = NextBasket.Data.Items[i].Quantity;
                        var price = NextBasket.Data.Items[i].Price;
                        var name = NextBasket.Data.Items[i].Description;
                        var variant = NextBasket.Data.Items[i].SizeDescription;
                        if (bloomReachPixelEnabled) {
                            if (bloomreachBasketData !== "") {
                                bloomreachBasketData = bloomreachBasketData + ",";
                            }
                            var brItemNumber = NextBasket.Data.Items[i].ItemNumber.substring(0, 3) +
                                NextBasket.Data.Items[i].ItemNumber.substring(3);
                            var productId = "";
                            var sku = "";
                            if (NextBasket.Data.Items[i].ItemCategory === "sofas" &&
                                NextBasket.Data.Items[i].AlternativeDescription.split("|").length > 0) {
                                var sofaStyleTitle = NextBasket.Data.Items[i].AlternativeDescription.split("|")[0].trim()
                                    .replace(/ /g, "").toLowerCase();
                                productId = sofaStyleTitle + "_" + NextBasket.Data.Items[i].OptionNo;
                                sku = productId + "_" + NextBasket.Data.Items[i].ItemNumber;
                            }
                            else {
                                productId = brItemNumber;
                                sku = brItemNumber + NextBasket.Data.Items[i].OptionNo;
                            }
                            bloomreachBasketData = bloomreachBasketData + '{"prod_id": "' + productId + '", "sku": "' + sku + '", "name": "' + name + '", "quantity": "' + quantity + '", "price": "' + price + '"}';
                        }
                        cartRows = cartRows + '{"productId": "' + friendlyItemNumber + '", "quantity": "' + quantity + '","unitPrice": "' + price + '","currency": "' + dataLayerCurrencyCode + '"}';
                        if (itemsData !== "") {
                            itemsData = itemsData + ",";
                        }
                        itemsData = itemsData + '{"prod_id": "' + friendlyItemNumber + '", "sku": "' + friendlyItemNumber + '-' + NextBasket.Data.Items[i].OptionNo + '", "name": "' + name + '", "quantity": "' + quantity + '", "price": "' + price + '"}';
                        friendlyItemNumber = friendlyItemNumber + '-';
                        if (products !== "") {
                            products = products + ",";
                        }
                        if (productList !== "") {
                            productList = productList + ",";
                        }
                        position = i + 1;
                        var ItemVariant = NextBasket.Data.Items[i].ItemNumber + '-' + NextBasket.Data.Items[i].OptionNo + ' | ' + NextBasket.Data.Items[i].SizeDescription;
                        var colour = NextBasket.Data.Items[i].Colour || "";
                        var markdownItem = NextBasket.Data.Items[i].IsDiscount ? "true" : "false";
                        var brand = NextBasket.Data.Items[i].ItemBrand || "";
                        products = products + '{"id": "' + friendlyItemNumber + '", "name": "' + name + '","price": "' + price + '","variant": "' + variant + '","position": ' + position + ', "quantity": "' + quantity + '","markdownItem":"' + markdownItem + '"}';
                        productList = productList + '{"id": "' + friendlyItemNumber + '", "name": "' + name + '","price": "' + price + '","brand":"' + brand + '" ,"category":"' + NextBasket.Data.Items[i].ItemCategory + '","variant": "' + ItemVariant + '","position": ' + position + ', "quantity": ' + quantity + ',"dimension21":"' + NextBasket.Data.Items[i].StockStatus + '","dimension22":"' + NextBasket.Data.Items[i].ItemCategory + '","dimension23":"' + NextBasket.Data.Items[i].Department + '","dimension24":"' + this.convertProductGender(NextBasket.Data.Items[i].Gender) + '","dimension25":"","dimension26":"' + brand + '","dimension27":"' + brand + '","dimension28":"' + colour + '","markdownItem":"' + markdownItem + '"}';
                        if (productSKUs !== "") {
                            productSKUs = productSKUs + ",";
                        }
                        productSKUs = productSKUs + friendlyItemNumber;
                        if (NextBasket.Data.Items[i].OptionNo != null) {
                            productSKUs = productSKUs + NextBasket.Data.Items[i].OptionNo;
                        }
                    }
                    cartRows = JSON.parse('[' + cartRows + ']');
                    products = JSON.parse('[' + products + ']');
                    itemsData = JSON.parse('[' + itemsData + ']');
                    productList = JSON.parse('[' + productList + ']');
                    if (bloomReachPixelEnabled) {
                        bloomreachBasketData = JSON.parse('[' + JSON.stringify(bloomreachBasketData) + ']');
                    }
                    if (firebase != undefined) {
                        firebase.push({ "event": "monetateCart", "monetateCartRows": cartRows });
                        var eeCheckoutValues;
                        if (isShoppingBagPage && dataLayer != undefined) {
                            dataLayer.push({ "event": "shoppingbag", "total_number_of_items": NextBasket.Data.Items.length, "order_total": NextBasket.Data.FinalOrderValue, "product_skus": productSKUs });
                            if (pageType == "shoppingBag") {
                                dataLayer.push({ "event": "checkout", "ecommerce": { "currencyCode": dataLayerCurrencyCode, "checkout": { "actionField": { "step": 1 }, "products": products } } });
                                eeCheckoutValues = { "event": "ee-checkout", "ecommerce": { "currencyCode": Next.Settings.Channel.CurrencyCode, "checkout": { "actionField": { "step": 1, "option": "" }, "products": productList } } };
                                EnhancedEcommerceHelper.checkAndPushtoDatalayer("ee-checkout", eeCheckoutValues);
                            }
                        }
                        else if (isDeliveryPage) {
                            firebase.push({ "event": "checkout", "ecommerce": { "currencyCode": dataLayerCurrencyCode, "checkout": { "actionField": { "step": 2 }, "products": productList } } });
                            // eeCheckoutValues = { "event": "ee-checkout", "ecommerce": { "currencyCode": Next.Settings.Channel.CurrencyCode, "checkout": { "actionField": { "step": 2 }, "products": productList } } };
                            // EnhancedEcommerceHelper.checkAndPushtoDatalayer("ee-checkout", eeCheckoutValues);
                        }
                        else if (isPaymentPage) {
                            firebase.push({ "event": "checkout", "ecommerce": { "currencyCode": dataLayerCurrencyCode, "checkout": { "actionField": { "step": 3 }, "products": products } } });
                            //  eeCheckoutValues = { "event": "ee-checkout", "ecommerce": { "currencyCode": Next.Settings.Channel.CurrencyCode, "checkout": { "actionField": { "step": 3 }, "products": productList } } };
                            // EnhancedEcommerceHelper.checkAndPushtoDatalayer("ee-checkout", eeCheckoutValues);
                        }
                        firebase.push({ "event": "basketData", "items": itemsData });
                        if (bloomReachPixelEnabled && bloomreachBasketData.length > 0) {
                            firebase.push({ "event": "BRBasketdata", "br_basket_data": bloomreachBasketData });
                        }
                    }
                }
                this.CheckPersonalisedItems(NextBasket.Data.Items);
                var pageTypeQry = (pageType === "productPage" || pageType === "BeautyproductPage" || pageType === "productPageModal" || pageType === "searchResults" || pageType === "productListPage" || pageType === "clearanceProductListPage" || pageType === "tabbedcontent" || pageType === "homeWarePDP");
                monetateEnabled = monetateEnabled && (!pageTypeQry || actionType === "add");
                if (rebuildDataLayer && (NextBasket.Data.Items == null || NextBasket.Data.Items.length === 0) && !isCompletePage) {
                    if (dataLayer != undefined) {
                        dataLayer.push({ "monetateCartRows": undefined });
                        if (isShoppingBagPage) {
                            dataLayer.push({ "items": undefined });
                            dataLayer.push({ "br_basket_data": undefined });
                            dataLayer.push({ "ecommerce": undefined });
                            dataLayer.push({ "event": "gtm.dom" });
                        }
                    }
                    if (monetateEnabled) {
                        window.monetateQ.push(["addCartRows", [{}]]);
                    }
                }
                else if (monetateEnabled && rebuildDataLayer && !isCompletePage) {
                    if (dataLayer != undefined && dataLayer.length > 0) {
                        for (var k = 0; k < dataLayer.length; k++) {
                            if (dataLayer[k].monetateCartRows != undefined) {
                                window.monetateQ.push(["addCartRows", dataLayer[k].monetateCartRows]);
                                if (productsAddedIntoBag) {
                                    window.monetateQ.push(["addCategories", ['addedToBag']]);
                                }
                                ;
                                break;
                            }
                        }
                    }
                }
                if (monetateEnabled && rebuildDataLayer) {
                    var deviceType = "desktop";
                    if (dataLayer != undefined && dataLayer.length > 0) {
                        if (isCompletePage) {
                            for (var i = 0; i < dataLayer.length; i++) {
                                if (dataLayer[i].monetatePurchaseRows != undefined) {
                                    window.monetateQ.push(["addPurchaseRows", dataLayer[i].monetatePurchaseRows]);
                                    break;
                                }
                            }
                        }
                        for (var i = 0; i < dataLayer.length; i++) {
                            if (dataLayer[i].device_type) {
                                deviceType = dataLayer[i].device_type;
                                break;
                            }
                            if (dataLayer[i].siteLayout) {
                                deviceType = dataLayer[i].siteLayout; //sometimes device-type isn't defined
                                break;
                            }
                        }
                    }
                    window.monetateQ.push(["setPageType", pageType]);
                    window.monetateQ.push(["addCategories", [deviceType]]);
                    window.monetateQ.push(["setCustomVariables", [{ name: "deviceType", value: deviceType }]]);
                    if (itemNumberAdded != "") {
                        var friendlyItemNumber = itemNumberAdded.substring(0, 3) + '-' + itemNumberAdded.substring(3);
                        window.monetateQ.push(["addProductDetails", JSON.parse('["' + friendlyItemNumber + '"]')]);
                        itemNumberAdded = "";
                    }
                    window.monetateQ.push(["trackData"]);
                }
            }
            else {
                this.CheckPersonalisedItems(NextBasket.Data.Items);
                if (itemNumberAdded != "") {
                    itemNumberAdded = "";
                }
            }
            rebuildDataLayer = false;
            if (Next.Settings.Channel.StateConvergence !== undefined && Next.Settings.Channel.StateConvergence.IsEnabled && typeof (NextStateConvergence) != "undefined") {
                NextStateConvergence.Execute();
            }
        };
        Basket.prototype.LoadError = function (jqXHR, textStatus, errorThrown, actionType, callBack, dataLoadCallback) {
            checkAndRedirectForAjaxError(jqXHR, false, 'ShoppingBagCommon.js: ' + actionType);
            this.SetGAUp(null); // Call GA with NOTHING so that defaults are resorted to.
            if (dataLoadCallback) {
                dataLoadCallback(false);
            }
            if (callBack) {
                callBack(false, jqXHR.status);
            }
            // First, push the error onto the NotifyError array as JSON
            this.NotifyError.push({ Data: jqXHR, TextStatus: textStatus, ErrorThrown: errorThrown, ActionType: actionType });
            //On error, there may be more items waiting to be added, move on to these items
            if (this.InboundQueue.length) {
                var nextAction = this.InboundQueue.shift();
                this.ExecuteBagAction(nextAction);
            }
            else {
                //Else - all items are processed
                this.ItemsWaiting = false;
                // Now we know we are on the last item, lets handle any errors
                this.NotifyErrors();
            }
        };
        Basket.prototype.CheckPersonalisedItems = function (items) {
            var personalisedGiftInBag = false;
            var isGiftItemInBag = false;
            if (items != null && items.length > 0) {
                for (var i = 0; i < items.length; i++) {
                    var currentItem = items[i];
                    if (currentItem.Personalisation && currentItem.Personalisation === "Y" && currentItem.FulfilmentType !== "F") {
                        if (Next.Settings.Channel.ResponsiveShoppingBagIsEnabled) {
                            if (currentItem.FulfilmentType === 'M') {
                                var IsCustomizableCustomItem = currentItem.CustomItemType && ["Curtain", "Blind"].indexOf(currentItem.CustomItemType.toString()) > -1;
                                if (IsCustomizableCustomItem) {
                                    personalisedGiftInBag = true;
                                }
                            }
                            else {
                                personalisedGiftInBag = true;
                            }
                        }
                        else {
                            personalisedGiftInBag = true;
                        }
                    }
                    if (Next.Settings.Channel.GiftCardMigration) {
                        var departmentType = currentItem.Department;
                        if (departmentType && departmentType == "GiftCard") {
                            isGiftItemInBag = true;
                        }
                    }
                }
            }
            if (this.isResponsiveShoppingBag() && (personalisedGiftInBag || isGiftItemInBag)) {
                $('[id=divShoppingBagPersonalisation]').css({ 'display': 'block' });
            }
            // hide top blue banner if there are no Personalised items
            if (!personalisedGiftInBag && !isGiftItemInBag) {
                $("#PersonalisedGiftsInBagMessage").hide();
                if (this.isResponsiveShoppingBag()) {
                    $('[id=divShoppingBagPersonalisation]').removeClass("show");
                }
            }
        };
        Basket.prototype.ConfirmRedirectModal = function (cancelUrl) {
            var newUrl = window.location.href;
            $('#ChannelRedirect_Background').trigger('show');
            $("#ChannelRedirect_url").val(newUrl);
            $("#ChannelRedirect_Cancel").attr("href", cancelUrl);
            $("#ChannelRedirect_Background").fadeIn("slow");
            $("#ChannelRedirect_Form").attr("action", Next.Settings.Channel.SiteUrl + "/ChannelRedirect/ConfirmChannelChange");
            $("#ChannelRedirect_Background").css("height", document.documentElement.scrollHeight); //make the height of the ChannelRedirect_Background fit the window
            this.ConfirmRedirectButtonInit();
        };
        Basket.prototype.ConfirmRedirectButtonInit = function () {
            $(document).on('click', '#ChannelRedirect_Confirm', function () {
                $("#ChannelRedirect_Background").css("height", "100%");
                $("#ChannelRedirect_Background").fadeOut("slow");
            });
        };
        Basket.prototype.RegisterChange = function (func) {
            this.NotifyChange.push(func);
        };
        Basket.prototype.RegisterError = function (func) {
            this.NotifyError.push(func);
        };
        Basket.prototype.NotifyErrors = function () {
            if (this.NotifyError.length) {
                ConsoleLog('Errors were detected when receiving a shopping bag response');
                // Loop through each error
                for (var i = 0; i < this.NotifyError.length; i++) {
                    var gaErrorString = "Shopping Bag Error";
                    // If we have a 513 status code then the session has been reset the maximum number of times, lets get the new bag and take the user to the error page
                    if (this.NotifyError[i].Data.status === 513) {
                        gaErrorString = "Shopping Bag Session Expiry Error";
                    }
                    // Log the error to GA
                    try {
                        ConsoleLog(gaErrorString + ": " + this.NotifyError[i].ActionType + " - " + this.NotifyError[i].TextStatus + " - " + this.NotifyError[i].ErrorThrown);
                        TrackGAEvent(gaErrorString, this.NotifyError[i].ActionType, this.NotifyError[i].TextStatus + " - " + this.NotifyError[i].ErrorThrown, 0);
                    }
                    catch (er) {
                        //ConsoleLog('Error Logging to GA');
                    }
                }
                // Empty the errors no we have dealt with them
                this.NotifyError = [];
            }
        };
        //used during vip to make sure customers are given the option to complete their order when moving between sale site and main site
        Basket.prototype.saveBagCookieForVIP = function () {
            if (this.Data.ItemCount > 0) { //update cookie if items in bag
                var cookieData = "MainSiteBag=Quantity=" + this.Data.ItemCount + "&TotalValue=" + this.Data.OrderGoodsValue + "&SaleSiteRead=False;path=/;";
                document.cookie = cookieData;
            }
            else {
                var nextMainSiteBagCookie = readCookie('MainSiteBag');
                if (nextMainSiteBagCookie) { //check if cookie exists before removing
                    document.cookie = "MainSiteBag=;expires=" + new Date().toGMTString() + ";path=/;";
                }
            }
        };
        Basket.prototype.isResponsiveShoppingBag = function () {
            var url = window.location.pathname.toLowerCase();
            return Next.Settings.Channel.ResponsiveShoppingBagIsEnabled &&
                url.indexOf("/shoppingbag") > -1 &&
                typeof RefreshShoppingBag !== 'function';
        };
        return Basket;
    }());
    platmodCommon.Basket = Basket;
    function SaveCurrentLocation() {
        //save the url in jstorage for the breadcumbs
        if ($.jStorage && $.jStorage.storageAvailable()) {
            $.jStorage.set("LastPageVisited", window.location.toString());
        }
    }
    function RebuildDataLayer() {
        rebuildDataLayer = true;
        setUpGA = false;
        if (!Next.Settings.Channel.PlatModGoogleAnalyticsSDK) {
            if (dataLayer != undefined && dataLayer.length > 0) {
                for (var j = 0; j < dataLayer.length; j++) {
                    if (dataLayer[j].is_shoppingbag_page != undefined) {
                        dataLayer.splice(j, 1);
                        break;
                    }
                }
                dataLayer.push({ "is_shoppingbag_page": "true" });
            }
        }
    }
    function ValueRange(value) {
        var s = "";
        if (isNaN(value) || value == 0)
            s = "0";
        else if (value <= 50)
            s = "Under £50";
        else if (value <= 100)
            s = "£50 - £100";
        else if (value <= 250)
            s = "£100 - £250";
        else if (value <= 500)
            s = "£250 - £500";
        else if (value <= 1000)
            s = "£500 - £1000";
        else if (value > 1000)
            s = "£1000+";
        return s;
    }
    platmodCommon.ValueRange = ValueRange;
})(platmodCommon || (platmodCommon = {}));
//# sourceMappingURL=ShoppingBagCommon.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var touchDevice = isIOS || isTouchEnabled;
var addedToBagTranSpeed = 400;
var multipleAddToBagHideTimer;
var msVersion = navigator.userAgent.match(/MSIE ([0-9]{1,}[\.0-9]{0,})/);
var msie = !!msVersion;
var bagIsAnimating = false;
var accountDialogIsAnimating = false;
var enablePlatModUserVariables = Next.Settings.Channel.PlatModUserVariables && Next.Settings.Channel.EnableModernisedHeader;
var platmod;
(function (platmod) {
    var DesktopBasket = /** @class */ (function (_super) {
        __extends(DesktopBasket, _super);
        function DesktopBasket() {
            "use strict";
            var _this = _super.call(this) || this;
            console.log("NEW HEADER DESKTOP/SHOPPINGBAG.TS");
            if (!enablePlatModUserVariables) {
                //This method registers the new basket total and sets the value on the homepage.
                _this.RegisterChange(function () {
                    SetSoftLoggedInState();
                });
            }
            _this.RegisterChange(function () {
                // Desktop Abandoned Basket Banner
                if (Next.Settings.Channel.AbandondedBagHomepage) {
                    var abbBannerShown = window.sessionStorage.getItem('abbBannerShownKey');
                    if (abbBannerShown === null) {
                        var abbInitialVisitBasket = window.sessionStorage.getItem('abbInitialVisitBasketKey');
                        if ((_this.Data.ItemCount > 0) && (abbInitialVisitBasket === null)) {
                            if ($('#abbPlaceHolder').length) {
                                var abbClosed = window.sessionStorage.getItem('abbClosedKey');
                                if (abbClosed === null) {
                                    BuildAbandonedBagBannerMH();
                                    $('#abbCloseLink').on("click", AbandonedBagBannerCloseLinkMH);
                                    window.sessionStorage.setItem('abbBannerShownKey', 'true');
                                }
                            }
                        }
                        else {
                            window.sessionStorage.setItem('abbInitialVisitBasketKey', 'true');
                        }
                    }
                }
                // Shopping Bag Dwell Prompt
                if (Next.Settings.Channel.ShoppingBagReEngagement != null && Next.Settings.Channel.ShoppingBagReEngagement.Enabled) {
                    var setShoppingBagDwellPrompt = function (Items) {
                        {
                            if (Items.length > 0) {
                                var pathname = window.location.pathname;
                                if (pathname.indexOf('shoppingbag') > -1) {
                                    var shoppingBagDwellPromptDisplayed = sessionStorage.getItem("shoppingBagDwellPromptDisplayed");
                                    if (shoppingBagDwellPromptDisplayed === null) {
                                        var dwellPromptTimeoutDuration = (Math.floor(Next.Settings.Channel.ShoppingBagReEngagement.DwellPromptTimeoutSecs)) * 1000;
                                        var inStockItems = Items.filter(function (x) { return !Next.Settings.Channel.NextUnlimitedItems.find(function (nu) { return nu.ItemNumberWithoutHyphen === x.ItemNumber; }) && x.StockStatus === 'instock' || x.StockStatus === 'delayed'; });
                                        if (inStockItems.length > 0) {
                                            TimerEventMH(dwellPromptTimeoutDuration);
                                        }
                                    }
                                }
                            }
                        }
                    };
                    if (Next.Settings.Channel.ResponsiveShoppingBagIsEnabled) {
                        setShoppingBagDwellPrompt(NextBasket.Data.Items);
                    }
                    else {
                        setShoppingBagDwellPrompt(_this.Data.Items);
                    }
                }
            });
            //free delivery with next unlimited modal popup
            if (Next.Settings.Channel.FreeDeliveryWithNextUnlimitedEnabled) {
                var isNUModalActive_1 = false;
                $(document).on("click", "#next-unlimited-delivery", function (e) {
                    event.preventDefault();
                    if (!isNUModalActive_1) {
                        isNUModalActive_1 = true;
                        $.ajax({
                            url: Next.Settings.Channel.SiteUrl + "/NextUnlimitedModal/desktop",
                            dataType: "HTML",
                            type: "GET",
                            cache: true,
                            success: function (data, textStatus, jqXHR) {
                                isNUModalActive_1 = false;
                                var desktopElemModal = $(document.createElement("div"));
                                desktopElemModal.html(data);
                                $(desktopElemModal).find(".nu-modal-TCs-apply").attr("href", Next.Settings.Channel.SiteUrl + "/Unlimited");
                                $(desktopElemModal).find(".nu-modal-add-to-bag").attr("href", Next.Settings.Channel.SiteUrl + "/addtobag/?itemnumbers=17562401");
                                if (NextBasket.Data.Items.some(function (p) { return p.IsNextUnlimitedItem; }) || NextBasket.NextUnlimited.IsExistingNUCustomer) {
                                    $(desktopElemModal).find(".nu-modal-add-to-bag").hide();
                                }
                                var $modal = ModalPopup.init({
                                    width: 600,
                                    height: "auto",
                                    fixedTopPosition: "25%",
                                    fullyLockBackgroundScroll: true,
                                    modalDataSet: []
                                });
                                $modal.html($(desktopElemModal).html());
                                ModalPopup.show();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                isNUModalActive_1 = false;
                                ConsoleLog("Desktop Partial for Next Unlimited on Shopping Bag Modal did not load: " + thrownError);
                            }
                        });
                    }
                });
            }
            return _this;
        } //Constructor
        DesktopBasket.prototype.NotifyItemAdded = function (itemObj) {
            this.OutboundQueue.shift();
            this.NotifyWaiting = false;
        };
        DesktopBasket.prototype.Notify = function (returnedData) {
            "use strict";
            TrackGAEvent("Saved Shopping Bag", "Bag Recovered", "Count", 0);
            TrackGAEvent("Saved Shopping Bag", "Bag Quantity", returnedData.ItemCount, 0);
            TrackGAEvent("Saved Shopping Bag", "Bag Age", returnedData.OldShoppingBagAge, 0);
            TrackGAEvent("Saved Shopping Bag", "Bag Value", platmodCommon != undefined ? platmodCommon.ValueRange(returnedData.FinalOrderValue) : ValueRange(returnedData.FinalOrderValue), 0);
        }; //Class Functions
        DesktopBasket.prototype.DisplayRebuildNotification = function (returnedData) {
            "use strict";
            TrackGAEvent("Saved Shopping Bag", "Bag Recovered", "Count", 0);
            TrackGAEvent("Saved Shopping Bag", "Bag Quantity", returnedData.ItemCount, 0);
            TrackGAEvent("Saved Shopping Bag", "Bag Age", returnedData.OldShoppingBagAge, 0);
            TrackGAEvent("Saved Shopping Bag", "Bag Value", platmodCommon != undefined ? platmodCommon.ValueRange(returnedData.FinalOrderValue) : ValueRange(returnedData.FinalOrderValue), 0);
        };
        return DesktopBasket;
    }(platmodCommon.Basket)); //Class
    platmod.DesktopBasket = DesktopBasket;
    if (!enablePlatModUserVariables) {
        // If true, PlatMod Header will take responsibility of this function making use of the bag/get call.
        function SetSoftLoggedInState() {
            //need to check if there is a soft login state
            var firstName = NextBasket.Data.FirstName;
            var userName = NextBasket.Data.Name;
            if (userName || firstName) {
                window.sessionStorage.removeItem("RPID");
                window.sessionStorage.removeItem("AcctType");
                window.sessionStorage.removeItem("unlimitedCustomer");
                window.sessionStorage.setItem("RPID", NextBasket.RoamingProfileId);
                if (NextBasket.Data.Authenticated) {
                    var NextUnlimitedStatus = NextBasket.Data.NextUnlimitedStatus == 0 ? false : true;
                    window.sessionStorage.setItem("AcctType", NextBasket.Data.AccountType);
                    window.sessionStorage.setItem("unlimitedCustomer", NextUnlimitedStatus.toString());
                    if (firebase != undefined) {
                        firebase.transferWebEventToApp("authenticated", NextBasket.Data.Authenticated.toString());
                    }
                }
            }
        }
    }
})(platmod || (platmod = {}));
//Helper methods
var NextBasket = new platmod.DesktopBasket();
function BuildAbandonedBagBannerMH() {
    var abbWrapper = $("<div />");
    $(abbWrapper).addClass("abb-wrapper");
    $(abbWrapper).attr('id', 'abbWrapper');
    var abbContainer = $("<div />");
    $(abbContainer).addClass("abb-container");
    var abbContainerContent = $("<div />");
    $(abbContainerContent).addClass("abb-container-content");
    var abbContentWrapper = $("<div />");
    $(abbContentWrapper).addClass("abb-content-wrapper");
    // Build Image Container
    var abbContentImgContainer = $("<div />");
    $(abbContentImgContainer).addClass("abb-content-img-container");
    var abbBagItems = NextBasket.Data["Items"];
    abbBagItems.sort(function (a, b) { return b.ItemID - a.ItemID; });
    var abbNumBagItems = 3;
    if (abbBagItems.length < 3) {
        abbNumBagItems = abbBagItems.length;
    }
    for (var j = 0; j < abbNumBagItems; j++) {
        var abbImage = BuildAbandonedBagImageElementMH(abbBagItems[j]);
        $(abbContentImgContainer).append(abbImage);
    }
    var abbContentInfoContainer = $("<div />");
    $(abbContentInfoContainer).addClass("abb-content-info-container");
    var abbContentInfoTop = $("<div />");
    $(abbContentInfoTop).addClass("abb-content-info-top");
    var abbIconBasket = $("<div />");
    $(abbIconBasket).addClass("abb-icon-basket");
    var abbIconBasketImage = $("<div />");
    $(abbIconBasketImage).addClass("abb-icon-basket-image");
    $(abbIconBasket).append(abbIconBasketImage);
    var abbIconText = $("<div />");
    $(abbIconText).addClass("abb-icon-text");
    var abbIconTextPara = $("<p />");
    var abbBagItemCount = NextBasket.Data["ItemCount"];
    var abbIconTextContent = ((abbBagItemCount !== 1) ?
        abbBagItemCount + " Items" :
        abbBagItemCount + " Item") + " in your ";
    var abbIconTextShopBagLinkText = "Shopping Bag";
    var abbIconTextShopBagLinkURL = Next.Settings.Channel.SiteUrl + "/shoppingbag";
    var abbIconTextShopBagLink = $("<a></a>")
        .text(abbIconTextShopBagLinkText)
        .attr("href", abbIconTextShopBagLinkURL);
    $(abbIconTextPara).append(abbIconTextContent);
    $(abbIconTextPara).append(abbIconTextShopBagLink);
    $(abbIconText).append(abbIconTextPara);
    $(abbContentInfoTop).append(abbIconBasket);
    $(abbContentInfoTop).append(abbIconText);
    var abbContentInfoBot = $("<div />");
    $(abbContentInfoBot).addClass("abb-content-info-bot");
    var abbContentInfoBotPara = $("<p />");
    var abbContentInfoBotText = "Complete your order now before it's too late...";
    $(abbContentInfoBotPara).text(abbContentInfoBotText);
    $(abbContentInfoBot).append(abbContentInfoBotPara);
    $(abbContentInfoContainer).append(abbContentInfoTop);
    $(abbContentInfoContainer).append(abbContentInfoBot);
    if (abbNumBagItems == 1) {
        $(abbContentImgContainer).addClass("abb-content-image-1");
        $(abbContentInfoContainer).addClass("abb-content-info-1");
    }
    else if (abbNumBagItems == 2) {
        $(abbContentImgContainer).addClass("abb-content-image-2");
        $(abbContentInfoContainer).addClass("abb-content-info-2");
    }
    $(abbContentWrapper).append(abbContentImgContainer);
    $(abbContentWrapper).append(abbContentInfoContainer);
    $(abbContainerContent).append(abbContentWrapper);
    var abbCloseLinkContainer = $("<div />");
    $(abbCloseLinkContainer).addClass("abb-close-link-container");
    $(abbCloseLinkContainer).attr('id', 'abbCloseLink');
    var abbCloseLinkWrapper = $("<div />");
    $(abbCloseLinkWrapper).addClass("abb-close-link-wrapper");
    $(abbCloseLinkWrapper).append(abbCloseLinkContainer);
    // abb checkout button
    var abbContainerCTA = $("<div />");
    $(abbContainerCTA).addClass("abb-container-cta");
    var abbCheckoutTxt = nxt.jstranslations.shoppingbagts.checkout;
    var abbCheckoutLinkURL = "/secure/checkout/transfer/checkoutcta";
    var abbCheckoutBtn = $("<a></a>").addClass("abb-btn-checkout")
        .text(abbCheckoutTxt)
        .attr("href", abbCheckoutLinkURL);
    $(abbContainerCTA).append(abbCloseLinkWrapper);
    $(abbContainerCTA).append(abbCheckoutBtn);
    $(abbContainer).append(abbContainerContent);
    $(abbContainer).append(abbContainerCTA);
    $(abbWrapper).append(abbContainer);
    $('#abbPlaceHolder').append(abbWrapper);
}
function BuildAbandonedBagImageElementMH(curItem) {
    var abbItemImage = $("<img />");
    var abbImgUrl;
    if (curItem.SaleClearanceSofaImage != "" && curItem.SaleClearanceSofaImage != null) {
        abbImgUrl = curItem.SaleClearanceSofaImage;
    }
    else {
        if (curItem.ItemCategory === "sofas" && curItem.LinkedItems != null) {
            abbImgUrl = cdnURL + "/SofaContent/Item_AddToBag/" + curItem.ItemNumber + '_' + curItem.OptionNo + (curItem.LinkedItems.length > 0 && curItem.LinkedItems[0].ItemNumber !== "" ? '_' + curItem.LinkedItems[0].ItemNumber : "") + ".jpg";
        }
        else if (curItem.ItemCategory === "diningchairs") {
            abbImgUrl = cdnURL + "/ChairContent/Item_AddToBag/" + curItem.ItemNumber + '_' + curItem.OptionNo;
            abbImgUrl += (curItem.LinkedItems.length > 0 && curItem.LinkedItems[0].ItemNumber !== "" ? '_' + curItem.LinkedItems[0].ItemNumber : "");
            abbImgUrl += ".jpg";
        }
        else if (curItem.ItemCategory === "beds") {
            abbImgUrl = cdnURL + "/BedContent/Item_AddToBag/" + curItem.ItemNumber + '_' + curItem.OptionNo;
            abbImgUrl += (curItem.LinkedItems.length > 0 && curItem.LinkedItems[0].ItemNumber !== "" ? '_' + curItem.LinkedItems[0].ItemNumber : "");
            abbImgUrl += ".jpg";
        }
        else if (curItem.Personalisation === "Y") {
            var abbItemContainsImage = false;
            // obtain personalised gifts image for shopping bag
            for (var i = 0; i < curItem.PersonalisationFields.length; i++) {
                if (curItem.PersonalisationFields[i].Field == "image") {
                    abbItemContainsImage = true;
                    abbImgUrl = curItem.PersonalisationFields[i].Value;
                    break;
                }
            }
            // obtain Custom item image for shopping bag
            for (var i = 0; i < curItem.CustomItemFields.length; i++) {
                if (curItem.CustomItemFields[i].Field == "image") {
                    abbItemContainsImage = true;
                    abbImgUrl = curItem.CustomItemFields[i].Value;
                    break;
                }
            }
            if (!abbItemContainsImage) {
                abbImgUrl = cdnURL + "/common/items/default/default/itemimages/altitembag/" + curItem.ItemNumber + ".jpg";
            }
        }
        else {
            abbImgUrl = cdnURL + "/common/items/default/default/itemimages/altitembag/" + curItem.ItemNumber + ".jpg";
        }
    }
    $(abbItemImage).attr('src', abbImgUrl);
    return abbItemImage;
}
function AbandonedBagBannerCloseLinkMH() {
    window.sessionStorage.setItem('abbClosedKey', 'true');
    $('#abbWrapper').remove();
    return false;
}
function TimerEventMH(dwellPromptTimeoutDuration) {
    // Set Dwell Prompt Session key
    sessionStorage.setItem("shoppingBagDwellPromptDisplayed", "true");
    // Load Dwell Prompt HTML Partial
    $.ajax({
        url: Next.Settings.Channel.SiteUrl + "/shoppingbagprompt/desktop",
        dataType: "HTML",
        type: "GET",
        cache: true,
        success: function (data, textStatus, jqXHR) {
            setTimeout(function () {
                // Get the shopping bag items again - just in case there have been changes since timeout initiation
                var inStockItems = NextBasket.Data.Items.filter(function (x) { return !Next.Settings.Channel.NextUnlimitedItems.find(function (nu) { return nu.ItemNumberWithoutHyphen === x.ItemNumber; }) && x.StockStatus === 'instock' || x.StockStatus === 'delayed'; });
                // If the Dwell Prompt Criteria are still met try to create Dwell Prompt modal
                if (inStockItems.length > 0) {
                    var inStockItem = inStockItems[0];
                    var description = null;
                    var formattedPrice = null;
                    var itemNumber = null;
                    var imageURL = null;
                    if (inStockItem.Description) {
                        description = inStockItem.Description;
                    }
                    if (inStockItem.PriceFormatted) {
                        formattedPrice = inStockItem.PriceFormatted;
                    }
                    if (inStockItem.ItemNumber) {
                        itemNumber = inStockItem.ItemNumber;
                    }
                    if (itemNumber != null && Next.Settings.Channel.ResponsiveShoppingBagIsEnabled) {
                        imageURL = $(".sbm-item[data-itemnumber=" + itemNumber + "]").find(".detailed-image-url").attr("data-detailed-image-url");
                    }
                    else if ($("tr[data-itemnumber=" + itemNumber + "] > td.imageColumn > a") && itemNumber != null) {
                        imageURL = $("tr[data-itemnumber=" + itemNumber + "] > td.imageColumn > a").attr("href");
                    }
                    // If all required Modal data available show Dwell Prompt Modal
                    if (description != null && formattedPrice != null && imageURL != null) {
                        // Get Monetate Key - used for testing
                        var shoppingBagDwellPromptMonetateKey = sessionStorage.getItem("shoppingBagDwellPromptMonetateKey");
                        // Monetate if active, toggles Dwell Prompt by setting key to "control" to suppress or "test" to show modal
                        if ((shoppingBagDwellPromptMonetateKey === null) || (shoppingBagDwellPromptMonetateKey === "test")) {
                            // Remove any previous modals on page
                            if ($('.ModalPopupWrapper').length > 0) {
                                $('.ModalPopupWrapper').remove();
                                $('.ModalPopupContainer').remove();
                            }
                            var desktopElemModal = $(document.createElement('div'));
                            desktopElemModal.html(data);
                            $(desktopElemModal).find(".sb-modal-text-product").text(description);
                            $(desktopElemModal).find(".sb-modal-text-price").text(formattedPrice);
                            $(desktopElemModal).find(".sb-modal-image-container").html('<img class="sb-modal-image" src="' + imageURL + '" alt="' + description + '">');
                            var $modal = ModalPopup.init({
                                width: 640,
                                height: "auto",
                                fixedTopPosition: "25%",
                                fullyLockBackgroundScroll: true,
                                modalDataSet: []
                            });
                            $modal.html($(desktopElemModal).html());
                            ModalPopup.show();
                        }
                    }
                }
            }, dwellPromptTimeoutDuration);
        },
        error: function (xhr, ajaxOptions, thrownError) {
            ConsoleLog('Desktop Partial for Dwell Prompt on Shopping Bag Modal did not load: ' + thrownError);
        }
    });
}
//# sourceMappingURL=ShoppingBag.js.map;

var SoftwareVersion = "";
var HeaderTrace = "";

// Enable support for CORS (Cross Origin Resource Sharing).
jQuery.support.cors = true;

var HidePrimaryNavigation = false;


function ShowBreadcrumbBar(Animation) {
    addToAnimation(Animation, '$(".PageHeader .BreadcrumbNavigation").fadeIn(250);', 250, true);

    return Animation;
}

function HideBreadcrumbBar(Animation) {
    addToAnimation(Animation, '$(".PageHeader .BreadcrumbNavigation").fadeIn(250);', 250, true);

    return Animation;
}

function UpdateBreadcrumbTrail(BCHTML) {
    $("section.Breadcrumbs").html(BCHTML);

    $("ul.Breadcrumbs li").last().addClass("lastBreadcrumb");

    BreadcrumbResize();
}

//Function determines the available space for the breadcrumb navigation, and sets a width dependant on this
//If there is not enough space for the full breadcrumb, then the overflow is hidden, and an ellipsis is displayed
function BreadcrumbResize() {

    //Static variables
    var bcrumbHolderWidth = 890; //bcrumbholderwidth set to the full available space for the breadcrumb, if no socialbookmarks are displayed
    var SocialBookmarkWidth = 160; //variable also includes additional spacing so that the breadcrumb and socialbookmarks have space between them

    //Element variables
    var $bcrumbHolder = $(".BreadcrumbsHolder");
    var $bcrumbList = $bcrumbHolder.find("ul.Breadcrumbs");
    var $bcrumbLi = $bcrumbList.find("li");
    var $bcrumbEllipsis = $(".BreadcrumbEllipsis");


    if (AddThisEnabled) {
        //AddThis is enabled, therefore reduced the bcrumbholder width by the width of the socialbookmarkwidth variable
        bcrumbHolderWidth = bcrumbHolderWidth - SocialBookmarkWidth;
    }

    $bcrumbHolder.width(bcrumbHolderWidth);

    //Following loop determines the total length of all the Li elements matching the $bcrumbLi variable selector.
    var totalLiLength = 0;
    $bcrumbLi.each(function (i, e) {
        totalLiLength += $(e).outerWidth(true) + 2; //+2 has been added as a fix for IE7. Without this, it seems the outerWidth() for IE7 can be too small.
    });


    //If the totalLiLength > $bcrumbholder width, then a width needs to be set on the $bcrumbList, and the ellipsis should be shown.
    if (totalLiLength >= $bcrumbHolder.width()) {
        $bcrumbList.width(totalLiLength);
        $bcrumbEllipsis.show();
    }
        //Else statements reverse changes made in the If statement
    else {
        $bcrumbEllipsis.hide();
    }

    if (dataLayer != undefined) {
        var department = "";
        var category = "";
        var spread = "";
        var bloomreachCategoryId = "";

        // TODO new platform mod way of tracking active department.

        var activeDepartment = $(".Department.currentDepartment .DepartmentLink");
        if (activeDepartment.length) {
            if (activeDepartment[0].pathname != undefined) {
                department = activeDepartment[0].pathname.replace(/\//gi, "");
            }
        }

        var collection = $(".spreadImageWrapper a");
        if (collection.length > 1) {
            spread = collection[1];
            if (spread != undefined) {
                var urlSplitData = spread.pathname.split("/");
                if (urlSplitData != undefined) {
                    if (urlSplitData.length > 1 && department === "") {
                        department = urlSplitData[1];
                    }
                    category = spread.innerText.replace(/"/gi, "");
                }
            }
        }

        var breadCrumb = $("section.Breadcrumbs");

        if (breadCrumb != undefined) {
            var breadCrumbList = breadCrumb.find("li");
            if (breadCrumbList != undefined) {
                breadCrumbList.each(function (i, e) {
                    if (i > 0) {
                        if (i === 1 && department === "") {
                            var firstLink = $(e).find("a");
                            department = $(e).text().replace(/"/gi, "");
                            if (firstLink.length) {
                                if (firstLink[0].pathname != undefined) {
                                    department = firstLink[0].pathname.replace(/\//gi, "");
                                }
                            }

                            if (department === "search") {
                                category = $(e).text().replace(/"/gi, "");
                            }
                        }
                        if (i === 2) {
                            var secondLink = $(e).find("a");
                            if (secondLink.length) {
                                if (secondLink[0].innerText != undefined) {
                                    category = secondLink[0].innerText.replace(/"/gi, "");
                                }
                            } else {
                                category = $(e).text().replace(/"/gi, "");
                            }
                        }
                    }
                });
            }
        }

        if (category === "") {
            category = department;
        }

        var pageType = "";
        var bloomReachPixelEnabled = false;
        for (var j = 0; j < dataLayer.length; j++) {
            if (dataLayer[j].page_type != undefined) {
                pageType = dataLayer[j].page_type;
            }
            if (dataLayer[j].br_pixel_enabled != undefined) {
                bloomReachPixelEnabled = dataLayer[j].br_pixel_enabled === "true";
            }
        }
        if (!Next.Settings.Channel.PlatModGoogleAnalyticsSDK) {
            if (pageType !== "") {
                if (pageType === department + "LandingPage" || pageType === "storefront") {
                    dataLayer.push({ "event": "storefront", "department": department.toLowerCase(), "category": category.toLowerCase() });

                    if (bloomReachPixelEnabled && category.toLowerCase() === "sofa collections") {
                        var sofaCategoryId, sofaCategory;

                        if ($(".br_data-taxonomy-enabled").val().toLowerCase() === "true") {
                            sofaCategoryId = $(".br_data-sofa-cat_id").val();
                            sofaCategory = $(".br_data-sofa-cat").val();
                        }
                        else {
                            sofaCategoryId = "homehomewaresofasandchairs";
                            sofaCategory = "home|homeware|sofasandchairs";
                        }

                        dataLayer.push({ "br_cat_id": sofaCategoryId, "br_cat": encodeURIComponent(sofaCategory) });
                    }

                } else if (pageType === "spread") {
                    dataLayer.push({ "event": "spread", "department": department.toLowerCase(), "category": category.toLowerCase() });
                } else if (pageType === "productListPage" || pageType === "searchResults") {

                    if (bloomReachPixelEnabled) {
                        var bloomreachCategoryId = $(".br_data-cat_id").val();
                        var bloomreachCategory = $(".br_data-cat").val();

                        if (typeof bloomreachCategoryId !== "undefined" && typeof bloomreachCategory !== "undefined") {
                            dataLayer.push({ "br_cat_id": bloomreachCategoryId, "br_cat": encodeURIComponent(bloomreachCategory) });
                        }
                    }

                    if (pageType === "searchResults") {
                        department = "search";
                    }
                    dataLayer.push({ "event": "searchlanding", "department": department.toLowerCase(), "category": category.toLowerCase() });
                } else if (pageType === "productPage" || pageType === "BeautyproductPage" || pageType === "productPageModal" || pageType === "homeWarePDP") {

                    if ($("article.Style").length > 0) {
                        var item = $("article.Style.Selected");
                        var pDepartment = $(item).data("department") || "";
                        var departmentForDataLayer = $(item).data("departmentfordatalayer");
                        if (pDepartment == "NOT_IN_USE" && (departmentForDataLayer != "" && departmentForDataLayer != undefined)) {
                            pDepartment = departmentForDataLayer;
                        }
                        var pcategory = $(item).data("category");
                        dataLayer.push({ "department": pDepartment.toLowerCase(), "category": pcategory.toLowerCase() });
                    }
                    else {

                        dataLayer.push({ "department": department.toLowerCase(), "category": category.toLowerCase() });
                    }
                  
                }
            }
        } else {
            if (window.subjects && window.subjects["$ GA_TRACK_PAGE_LOAD"]) {
                window.subjects["$ GA_TRACK_PAGE_LOAD"].next({ department: department, category: category })
            }
            else {
                console.log("Error Tracking GA Page Load")
            }
        }
    }
}


;
function CreateCarouselLoopTimer(CSelector, Direction, Interval) {
    return window.setTimeout('ChangePage("' + CSelector + '","' + Direction + '","",' + Interval + ')', Interval);
}

function ChangePage(CSelector, Direction, PageIndex, AutoScroll) {

    if (!$("body").hasClass("Focus") && AutoScroll != 0 || PageTransitionLock == true) {
        eval(CSelector.replace('#','') + 'Timer = CreateCarouselLoopTimer("' + CSelector + '", "+", ' + AutoScroll + ')');
        return false;
    }
    
    if (CSelector == "" || Direction == "" && PageIndex == "" ) {
        return false;
    }

    if (!$(CSelector).hasClass("Locked")) {
        var currentPageIndex;
        var PageDirection = Direction;
        var MovementDirection;

        $(CSelector + " .CControlPage").each(function (index) {
              
            if ($(CSelector + " .CControlPage:eq(" + index + ")").hasClass("Current")) {
                currentPageIndex = index;
            }
        });

      
        if (PageIndex != "") {
            //PageIndex = PageIndex - 1;
            if (PageIndex > currentPageIndex) {
                PageDirection = "+";
            } else {
                PageDirection = "-";
            }
        }

        switch (PageDirection) {
            case "+":
                MovementDirection = "-";
            break;
            case "-":
                MovementDirection = "+";
            break;
        }

        var nextPageIndex
        if (PageIndex == "") {
            nextPageIndex = eval(currentPageIndex + PageDirection + "1");
        } else {
            nextPageIndex = PageIndex;
        }

        if (nextPageIndex == currentPageIndex) {
            return false;
        } else {
            if (nextPageIndex < 0) {
                nextPageIndex = ($(CSelector + " .CControlPage").length -1)
                MovementDirection = "-";
            } else {
                if (nextPageIndex >= $(CSelector + " .CControlPage").length) {
                    nextPageIndex = 0;
                    MovementDirection = "+";
                }
            }
        }

        var numPagesToMove
        if (nextPageIndex > currentPageIndex) {
            numPagesToMove = nextPageIndex - currentPageIndex;
        } else {
            numPagesToMove = (currentPageIndex - nextPageIndex);
        }

        var Animation = createAnimation();
        addToAnimation(Animation, '$("' + CSelector + '").addClass("Locked");', 0, false);

        addToAnimation(Animation, '$("' + CSelector + ' .CControlPage.Current").removeClass("Current")', 0, false);
        addToAnimation(Animation, '$("' + CSelector + ' .CControlPage:eq(' + nextPageIndex + ')").addClass("Current")', 0, false);
        
        addToAnimation(Animation, '$("' + CSelector + ' .CContent").animate({"' + Next.Settings.CSS.left + '": "' + MovementDirection + '=' + ($(CSelector).width() * numPagesToMove) + '"},500)', 500, true);

        addToAnimation(Animation, '$("' + CSelector + '").removeClass("Locked");', 0, true);
        if (AutoScroll != 0) {
            addToAnimation(Animation, CSelector.replace('#','') + 'Timer = CreateCarouselLoopTimer("' + CSelector + '", "+", ' + AutoScroll + ')', 0, false);
        }
        runAnimation(Animation,true);
    }
}

function CarouselCreateLoopTimer(CSelector, Direction, Interval) {

    var options = {
        TargetElement: CSelector
    }
    CarouselTouch.Init(options);
    //AddTouch(CSelector);
    return window.setTimeout('CarouselChangePage("' + CSelector + '","' + Direction + '","",' + Interval + ')', Interval);

}

function CarouselChangePage(CSelector, Direction, PageIndex, AutoScroll) {
    //debugger;

    //ConsoleLog("Change Page");

    if (!$("body").hasClass("Focus") && AutoScroll != 0 || PageTransitionLock == true) {
        eval('Timer' + CSelector.replace('#', '') + ' = CarouselCreateLoopTimer("' + CSelector + '", "+", ' + AutoScroll + ')');
        //ConsoleLog(1);
        return false;
    }

    

    if (CSelector == "" || Direction == "" && PageIndex == "") {
        //ConsoleLog(2);
        return false;
    }
    if (!$(CSelector).hasClass("Locked")) {

        var currentPageIndex;
        var PageDirection = Direction;
        var MovementDirection;

        $(CSelector + " .PageButton").each(function (index) {
            if ($(CSelector + " .PageButton:eq(" + index + ")").hasClass("Current")) {
                currentPageIndex = index;
            }
        });

        if (PageIndex != "") {
            //PageIndex = PageIndex - 1;
            if (PageIndex > currentPageIndex) {
                PageDirection = "+";
            } else {
                PageDirection = "-";
            }
        }

        switch (PageDirection) {
            case "+":
                MovementDirection = "-";
                break;
            case "-":
                MovementDirection = "+";
                break;
        }

        var nextPageIndex
        if (PageIndex == "") {
            nextPageIndex = eval(currentPageIndex + PageDirection + "1");
        } else {
            nextPageIndex = PageIndex;
        }

        if (nextPageIndex == currentPageIndex) {
            return false;
        } else {
            if (nextPageIndex < 0) {
                nextPageIndex = ($(CSelector + " .PageButton").length - 1)
                MovementDirection = "-";
            } else {
                if (nextPageIndex >= $(CSelector + " .PageButton").length) {
                    nextPageIndex = 0;
                    MovementDirection = "+";
                }
            }
        }

        var numPagesToMove
        if (nextPageIndex > currentPageIndex) {
            numPagesToMove = nextPageIndex - currentPageIndex;
        } else {
            numPagesToMove = (currentPageIndex - nextPageIndex);
        }

        if (!$(CSelector).hasClass("Paused") || ($(CSelector).hasClass("Paused") && AutoScroll == 0)) {
            var Animation = createAnimation();
            addToAnimation(Animation, '$("' + CSelector + '").addClass("Locked");', 0, false);

            addToAnimation(Animation, '$("' + CSelector + ' .PageButton.Current").removeClass("Current")', 0, false);
            addToAnimation(Animation, '$("' + CSelector + ' .PageButton:eq(' + nextPageIndex + ')").addClass("Current")', 0, false);

            var NewPosition = $(CSelector).width() * nextPageIndex;

            addToAnimation(Animation, '$("' + CSelector + ' .Pages").animate({"' + Next.Settings.CSS.left + '": "-' + NewPosition + '"},500)', 500, true);

            addToAnimation(Animation, '$("' + CSelector + '").removeClass("Locked");', 0, true);
            if (AutoScroll != 0) {
                addToAnimation(Animation, 'Timer' + CSelector.replace('#', '') + ' = CarouselCreateLoopTimer("' + CSelector + '", "+", ' + AutoScroll + ')', 0, false);
            }
            runAnimation(Animation, true);
        }
        if ($(CSelector).hasClass("Paused") && AutoScroll != 0) {
            eval('Timer' + CSelector.replace('#', '') + ' = CarouselCreateLoopTimer("' + CSelector + '", "+", ' + AutoScroll + ')');
        }
    }
}

function PauseCarousel(carousel) {
    $(carousel).addClass("Paused");
}

function UnpauseCarousel(carousel) {
    $(carousel).removeClass("Paused");
}

var CarouselTouch  = function($,undefined){

    var _ = {
        Settings: {
            isMouseDown: false,
            startPosition: null,
            endPosition:null,
            TargetElement: null,
            TargetElementStart: null,
            Pages: null,
            PageWidth: null,
            Initialised:false
        },
        Init: function(options){
            if (_.Settings.Initialised) {
                return false;
            }
            _.Settings.Initialised = true;
            _.Settings.TargetElement = options.TargetElement;
            _.Settings.Pages = $(_.Settings.TargetElement).find("section.Pages");
            _.Settings.PageWidth = $(_.Settings.TargetElement).find("section.Pages .Page").width();
          
            _.AddTouch();

           // This is required to swipe the carousel with mouse on desktop to test, uncomment it to enable on desktop, comment it before checking in the code
           //$( _.Settings.TargetElement).find("a").each(function () { 
           //    $(this).removeAttr("onclick").click(function () {
           //        return false;
           //    });
           // });


        },
        AddTouch: function () {

            var config = { 
                touchStart: _.touchStart,
                touchMove: _.touchMove,
                touchEnd: _.touchEnd,
                useMouse: true
            }

            $(_.Settings.TargetElement).on("mouseleave", function () {_.touchEnd() }).NXTouch(config);

        },
        touchMove: function (e, NXTouchObj) {
            if (_.Settings.isMouseDown) {
                var targetLeft = _.Settings.TargetElementStart + NXTouchObj.DistanceX;
              
                if (targetLeft > 0) 
                    targetLeft = 0;

                if (targetLeft < -(_.Settings.Pages.width() - _.Settings.PageWidth))
                    targetLeft = -(_.Settings.Pages.width() - _.Settings.PageWidth);
                
                _.Settings.Pages.css("left", targetLeft);
                
            }
            
        },
        touchStart:function(e, NXTouchObj){        
            _.Settings.isMouseDown = true;
            _.Settings.startPosition = NXTouchObj.X;

            _.Settings.TargetElementStart = parseInt(_.Settings.Pages.css("left"));
            if (isNaN(_.Settings.TargetElementStart))
                _.Settings.TargetElementStart = 0;
        },
        touchEnd:function(){
        
            if (_.Settings.isMouseDown) {
                _.Settings.isMouseDown = false;
                
                _.Settings.endPosition = -Math.round((Math.abs(_.Settings.Pages.position().left) / _.Settings.PageWidth) * _.Settings.PageWidth);
                
                if (_.Settings.endPosition >= 0)
                    return false;

                if (_.Settings.endPosition <= -(_.Settings.Pages.width() - _.Settings.PageWidth)) {
                    return false;
                }

                var direction = '-';

                var distanceDragged = _.Settings.endPosition % _.Settings.PageWidth;

                //console.log('distanceDragged:'+distanceDragged)
                //console.log('pageWidth:' + _.Settings.PageWidth)
                //console.log('endPosition:' + _.Settings.endPosition)
                //console.log('target start:', _.Settings.TargetElementStart)

                if (_.Settings.endPosition < _.Settings.TargetElementStart) {
                    direction = '+';
                }
                else
                {
                    distanceDragged = _.Settings.PageWidth - Math.abs(distanceDragged);
                }

                if (Math.abs(distanceDragged) < (_.Settings.PageWidth / 4)) {                   
                    _.Settings.Pages.animate({ "left": _.Settings.endPosition - (distanceDragged) },300);
                }
                else {
                    CarouselChangePage(_.Settings.TargetElement, direction, 0, 0);
                }

                //CarouselChangePage(_.Settings.TargetElement,direction, 0, 0);

                _.Settings.isMouseDown = false;
            }        
        }    
    }


    return {
        Init: _.Init
    }


}(jQuery);




//$(function () {
//    AddTouch();
//});


;
var AddThisEnabled = false;

function appendAddThis() {
    var container = $("<div/>").attr("class", "addthis_toolbox addthis_default_style");
    var facebook = $("<a/>").attr("class", "addthis_button_facebook").html(" ");
    var twitter = $("<a/>").attr("class", "addthis_button_twitter");
    var email = $("<a/>").attr("class", "addthis_button_email");
    var google = $("<a/>").attr("class", "addthis_button_google_plusone_share");
    var addThisButton = $("<a/>").attr("class", "addthis_button_compact");
    var addThisCounter = $("<a/>").attr("class", "addthis_counter addthis_bubble_style");
    var clear = $("<div/>").attr("class", "ClearBoth").html(" ");
    container.append(facebook, twitter, email, google, addThisButton, addThisCounter);
    $(".SocialBookmarks").empty();
    $(".SocialBookmarks").append(container, clear);

    $.ajax({
        url: "https://s7.addthis.com/js/250/addthis_widget.js#domready=1&async=1",
        dataType: "script",
        success: function (d, txtStatus, xhr) {
            socialSuccess(d, txtStatus, xhr);
        },
        error: function (d, txtStatus, xhr) {
            socialError(d, txtStatus, xhr);
        },
        cache: false
    });
}


function socialError(d, txtStatus, xhr) {
    var data = d;
}

function socialSuccess(d, txtStatus, xhr) {
    if (xhr.status == 200) {
        addthis.toolbox('#toolbox');
        addthis.counter('.addthis_counter');
        addthis.addEventListener('addthis.menu.open', AddThisMenuOpen);
    }
}

function updateSocialMediaButtons(path) {

    window.addthis_share = { url: "//" + window.location.host + path };

    $("#at20mc").remove();
    window.addThisLoaded = false;
    window.addthis = null;
    window._atc = null;
    window._atd = null;
    window._ate = null;
    window._atr = null;
    window._atw = null;
    window._at_plusonecallback = null;
    appendAddThis();
}

function AddThisMenuOpen() {
    //Set menu popup to fixed position so that scrolling the page persists the visibility of the popup
    $("#at20mc #at15s").css("position", "fixed");
};
//Recenty viewed object contains service call methods and plugin initialisation methods
var RecentlyViewed = {
    //Initialise the scroller plugin
    initScroller: function (selector, loadOnVisible) {
        //make sure we have a visitor id
        if (typeof NextBasket == "undefined" || NextBasket.VisitorID == "") {
            setTimeout(function () {
                RecentlyViewed.initScroller(selector, loadOnVisible);
            }, 100);
            return false;
        }
        $(selector).ItemScroller("init", NextBasket.VisitorID, loadOnVisible);
    },
    //Initialise the view all plugin
    initViewAll: function (selector) {
        //make sure we have a visitor id
        if (typeof NextBasket == "undefined" || NextBasket.VisitorID == "") {
            setTimeout(function () {
                RecentlyViewed.initViewAll(selector);
            }, 100);
            return false;
        }

        $(selector).viewAllRecentlyViewed("init", NextBasket.VisitorID);

    },
    //Get ListsURL or SecureListsURL based on protocol or HTTPS feature
    getListsURLOrSecureListsURL: function () {
        if (window.location.protocol === "https:" || Next.Settings.Channel.HttpsEnabled)
            return SecureListsURL;
        else
            return ListsURL;
    },
    getRecentlyViewed: function (visitorID, callback, errorCallBack) {


        //Check if recently viewed data has already been loaded - if it has, just pas that into the callback rather than making another call
        if (typeof recentlyViewedGlobal != "undefined" && recentlyViewedGlobal != null) {
            if (callback) {
                callback(recentlyViewedGlobal);
            }
            return;
        }

        //make sure we have a visitor id
        if (typeof NextBasket == "undefined" || NextBasket.VisitorID == null) {
            setTimeout(function () {
                RecentlyViewed.getRecentlyViewed(visitorID, callback);
            }, 100);
            return false;
        }

        var profileClientId = Next.Settings.Channel.ProfileClientId;

        $.ajax({
            url: RecentlyViewed.getListsURLOrSecureListsURL() + "/recentlyviewed/get/" + visitorID,
            type: "POST",
            dataType: "json",
            data: { ProfileClientId: profileClientId },
            xhrFields: { withCredentials: true },
            crossDomain: true,
            success: function (data, textStatus, jqXHR) {

                //Uncomment this to test the error message
                //                setTimeout(function () {
                //                    errorCallBack();
                //                }, 2000);

                //                return false;

                // data = [{ "Path": "/g38330s3", "SpreadPage": "330", "DateAdded": "2013-06-11T15:06:39.39" }, { "Path": "/g38330s4", "ItemNumber": "780-632-G38", "Size": "07", "DateAdded": "2013-06-11T15:06:21.517" }, { "Path": "/g38330s7", "SpreadPage": "330", "DateAdded": "2013-06-11T15:06:05.733"}]

                if (callback) {

                    if (!Next.Settings.Channel.IsMobileSite) {
                        data = RecentlyViewed.filterRecentlyViewedBySingleSegment(data);
                    }

                    callback(data);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                if (errorCallBack) {
                    errorCallBack();
                }
            },
            complete: function () {
                RecentlyViewed.updateRecentlyViewedFooterLink(null);
            }
        });
    },
    updateRecentlyViewedFooterLink: function (element) {

        // find the recently viewed wrapper that is generated on the page (not the pop up footer)


        element = element || $(".RecentlyViewedWrapper.inPage");


        // return if there are no in page wrappers

        if ($(element).length === 0 || !$(element).hasClass("inPage")) {
            return false;
        }

        var scrollTop = $(window).scrollTop();
        var grabPoint = $(element).offset().top - scrollTop;

        var url = window.location.pathname.toLowerCase();
        if (Next.Settings.Channel.ResponsiveShoppingBagIsEnabled && url.indexOf("/shoppingbag") > -1 && grabPoint == 0) {//fix grab point through css, "display:none"" removes element from layout, so we bring RV into view for split second, but set it's size to 0 so no flickering, then we grab point and remove the class.
            $(element).addClass("grabPoint");
            grabPoint = $(element).offset().top - scrollTop;
            $(element).removeClass("grabPoint")
        }

        var wHeight = window.innerHeight; //$(window).height() doesn't take into account initial resizing that would happen when content would fall below min width, 1024px on desktop.
        var intermediateBottom = wHeight - 50;
        var intermediateTop = wHeight - 250;
        var bind = false;
        // The grabPoint initially calculates to zero due to browser/speed issues with rendering

        if (grabPoint >= 0) {

            // find the link in the footer
            var recentlyViewedFooterLink = $("a.recentlyViewedFooterLink");

            // if there is a link in the footer decide how it should behave

            if ($(recentlyViewedFooterLink).length > 0) {

                if ((grabPoint < intermediateBottom) && (Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayInPage)) {
                    $(recentlyViewedFooterLink).addClass("disabled");
                    bind = true;
                } else {
                    if (!$(recentlyViewedFooterLink).hasClass("disableForPage")) {
                        $(recentlyViewedFooterLink).removeClass("disabled");
                    }
                }

                if (grabPoint < intermediateBottom && grabPoint > intermediateTop) {
                    $(recentlyViewedFooterLink).addClass("intermediate");
                    bind = true;
                } else {
                    $(recentlyViewedFooterLink).removeClass("intermediate");
                }

            }

            if ((grabPoint < intermediateBottom) && (Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayInPage)) {
                $(element).addClass("BINDME");
            }

        }

        if (!$(element).hasClass("loadedInWindow")) {
            $(element).addClass("loadedInWindow");
        }



        return bind;

    },
    getItem: function (path, callback) {

        $.get(path, function (data) {

            if (callback) {
                callback(data);
            }
        });
    },
    addItem: function (item, callback) {
        if (!Next.FeatureManager.FeatureSettings.RecentlyViewed.EnableAdditions) {
            return false;
        }

        if (!Next.Settings.Channel.RvDisplayInPage) {
            return false;
        }

        //make sure we have a visitor id
        if (typeof NextBasket == "undefined" || NextBasket.VisitorID == "") {
            setTimeout(function () {
                RecentlyViewed.addItem(item, callback);
            }, 100);
            return false;
        }

        var homewareIndxStartPos = item.path.indexOf('/homeware/');
        var styleIndxStartPos = item.path.indexOf('/style/');
        var lastSlashIndxStartPos = item.path.lastIndexOf('/');

        //handle furniture url's different to url with publication_book_shot
        if (homewareIndxStartPos > -1) {
            item.path = item.path.substring(homewareIndxStartPos);
        }
        //handle style items properly (we need to keep /style in the URL)
        else if (styleIndxStartPos > -1) {
            item.path = item.path.substring(styleIndxStartPos);
        }
        else if (!Next.Settings.Channel.EnhancedStyleWithRibbonEnabled || !item.isStyleWith) {
            //New URL check
            item.path = !ModularPDPHelper.isUrlInNewFormat()
                ? item.path.substring(lastSlashIndxStartPos)
                : ModularPDPHelper.getNewUrlWithoutHash({ includeOrigin: false, includeStyle: false, itemNumber: item.itemNumber || null, replaceLastSegment: true });
        }

        //Build target url
        var targetURL = RecentlyViewed.getListsURLOrSecureListsURL() + "/recentlyviewed/add/" + NextBasket.VisitorID;
        var postParams = { Path: item.path };
        if (item.itemNumber) {
            //targetURL += "&itemNumber=" + item.itemNumber;
            postParams.ItemNumber = item.itemNumber;
        }

        //If a page number was supplied, add it to the querystring
        if (item.pageNumber) {
            //targetURL += "&SpreadPage=" + item.pageNumber;
            postParams.SpreadPage = item.pageNumber;
        }

        if (item.Size) {
            //targetURL += "&size=" + item.Size;
            postParams.Size = item.Size;
        }

        var profileClientId = Next.Settings.Channel.ProfileClientId;
        if (profileClientId) {
            postParams.ProfileClientId = profileClientId;
        }

        $.ajax({
            url: targetURL,
            type: "POST",
            dataType: "json",
            data: postParams,
            xhrFields: { withCredentials: true },
            crossDomain: true,
            success: function (data, textStatus, jqXHR) {
                if (callback) {
                    callback(data);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {

            }
        });

        // Set the ShowRecentlyViewed flag to true
        setSplitCookie("NextSessionVariables", "ShowRecentlyViewed", "true", 30);
    },
    clearList: function (path, callback) {

        var profileClientId = Next.Settings.Channel.ProfileClientId;

        $.ajax({
            url: path,
            type: "GET",
            dataType: "json",
            xhrFields: { withCredentials: true },
            data: { ProfileClientId: profileClientId },
            crossDomain: true,
            success: function (data, textStatus, jqXHR) {
                if (callback) {
                    callback(data);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {

            }
        });

        // Set the ShowRecentlyViewed flag to true
        setSplitCookie("NextSessionVariables", "ShowRecentlyViewed", "false", 30);

        // Disable the Recently Viewed Link in the Footer
        if (!$("a.recentlyViewedFooterLink").hasClass("active")) {
            $("a.recentlyViewedFooterLink").addClass("disabled");
        }

        $("a.recentlyViewedFooterLink").addClass("disableForPage");
    },
    filterRecentlyViewedBySingleSegment: function (items) {
        for (var i = 0; i < items.length; i++) {
            var currentItem = items[i];

            if (currentItem.Path.split("/").length == 2) {
                items.splice(i, 1);
            }
        }
        return items;
    }
};


function SetRecentlyViewedDisplay() {

    checkForRecentlyViewedCookie();


    if (Next.FeatureManager.FeatureSettings.RecentlyViewed.IsEnabled) {
        //Added flagselector check to display RecentlyViewed in Footer when HTTPS is turned ON
        if (Next.Settings.Channel.HttpsEnabled) {
            if ((window.location.protocol.indexOf("https:") === 0) && (!Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayInSecureFooter) && $(".PageFooter .flagSelectorContainer").length == 0) {
                $(".recentlyViewedFooterLink").hide();
            }
        } else {
            if ((window.location.protocol.indexOf("https:") === 0) && (!Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayInSecureFooter)) {
                $(".recentlyViewedFooterLink").hide();
            }
        }

        if (Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayCounter) {
            $(".RVDisplayCounter").show();
        }

        if (Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayViewAllLink) {
            $(".RVDisplayViewAllLink").show();
        }

        if (!Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayInPage) {
            $(".RVDisplayInPage").hide();
            $(".RecentlyViewedWrapper.inPage").hide();
        } else {
            $(".RVDisplayInPage").show();
            $(".RecentlyViewedWrapper.inPage").show();
        }

        if (!Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayInFooter) {
            $(".RVDisplayInFooter").hide();
        } else {
            $(".RVDisplayInFooter").show();
        }
    } else {

        $(".recentlyViewedFooterLink").hide();

        $(".RecentlyViewed").each(function () {
            $(this).hide();
        });
        $(".RVDisplayInPage").each(function () {
            $(this).hide();
        });
        $(".RVDisplayCounter").each(function () {
            $(this).hide();
        });
        $(".RVDisplayViewAllLink").each(function () {
            $(this).hide();
        });
        $(".RecentlyViewedWrapper").each(function () {
            $(this).hide();
        });
        $(".RVDisplayInFooter").each(function () {
            $(this).hide();
        });
    }
};

//Check if any components need initialising
function checkForRecentlyViewedCookie() {
    // Check whether the ShowRecentlyViewed flag is set to true, if it is then initScroller, otherwise remove the wrapper from the DOM

    var showInPage = true;
    var showFooterLink = true;
    var showCoachTip = true;

    // Get the ShowRecentlyViewed flag
    var showRVCookie = readSplitCookie("NextSessionVariables", "ShowRecentlyViewed");
    if (showRVCookie == null || showRVCookie === "false") {
        showInPage = false;
        showFooterLink = false;
    }

    // Disable the Footer Link if the global config says to do so
    if (typeof disableRecentlyViewedFooterLink != "undefined") {
        showFooterLink = false;
    }


    // Check the list of PageTypes and update the flags accordingly
    var disabledInPageList = Next.FeatureManager.FeatureSettings.RecentlyViewed.InPageDisabledPageTypes;
    var currentPageType = PageType;

    if (typeof currentPageType === "undefined") {
        currentPageType = "undefined";
    }

    if (currentPageType.toLowerCase() == "sale") {
        showInPage = false;
    }
    if (currentPageType.toLowerCase() == "socialplp") {
        showInPage = false;
    }

    //Check current page type against list of disabled page types for in-page display
    if (typeof disabledInPageList != "undefined") {
        for (var i = 0; i < disabledInPageList.length; i++) {
            if (currentPageType.toLowerCase() == disabledInPageList[i].toLowerCase()) {
                showInPage = false;
            }
        }
    }

    //Same for toolbar
    var disabledToolBarList = Next.FeatureManager.FeatureSettings.RecentlyViewed.ToolbarDisabledPageTypes;
    //Check current page type against list of disabled page types for ToolBar display
    if (typeof currentPageType != "undefined" && typeof disabledToolBarList != "undefined") {
        for (var i = 0; i < disabledToolBarList.length; i++) {
            if (currentPageType.toLowerCase() == disabledToolBarList[i].toLowerCase()) {
                showFooterLink = false;
            }
        }
    }


    if ($(".HomeFooter").length) {
        showFooterLink = false;
    }


    // Disable the Coach Tip if required
    if (showFooterLink) {
        var showRVCTCookie = readSplitCookie("NextSessionVariables", "ShowRVCoachTip");
        if (showRVCTCookie != null && showRVCTCookie === "false") {
            showCoachTip = false;
        }

        $(".PageFooter").hide();
        $(".PageFooter.ToolBar").show();

    } else {
        showCoachTip = false;
    }
    if (showInPage) {
        // Init the In-Page components
        if ($(".RecentlyViewedWrapper").length) {
            $(".RecentlyViewedWrapper").each(function () {
                var wrapper = $(this);

                if (wrapper.hasClass("LoadNow") && !wrapper.hasClass("inFooter")) {
                    if (!wrapper.hasClass("CustomPosition")) {
                        if ($(".CurrentContent").length) {
                            $(".CurrentContent").append(wrapper);
                        } else if ($("#ct").length) {
                            $("#ct").append(wrapper);
                        }
                    }

                    RecentlyViewed.initScroller(wrapper, false);

                }

                if (wrapper.hasClass("loadOnVisible") && !wrapper.hasClass("inFooter")) {
                    if (!wrapper.hasClass("CustomPosition")) {
                        if ($(".CurrentContent").length) {
                            $(".CurrentContent").append(wrapper);
                        } else if ($("#ct").length) {
                            $("#ct").append(wrapper);
                        }
                    }

                    RecentlyViewed.initScroller(wrapper, true);

                }

            });
        }
    } else {
        // Remove the In-Page component from the DOM
        $(".RecentlyViewedWrapper.inPage").remove();
    }

    if (!showFooterLink) {
        // Disable the Recently Viewed Link in the Footer
        $(".recentlyViewedFooterLink").addClass("disabled").addClass("disableForPage");
    }

    if (showFooterLink && showCoachTip) {
        setTimeout("openCoachTip()", 1000);
    }
}

function openCoachTip() {
    // Display the coach tip
    $(".coachTip").addClass("open").animate({
        top: -120,
        opacity: 1
    }, 1000, "easeOutExpo");

    // Update the cookie to say the coach tip has been shown
    setSplitCookie("NextSessionVariables", "ShowRVCoachTip", "false", 30);
}

function closeCoachTip() {

    var $coachTip = $(".coachTip");

    if ($coachTip.length == 0 || !$coachTip.hasClass("open") || $coachTip.hasClass("locked")) {
        return false;
    }

    $coachTip.addClass("locked");

    $(".coachTip").animate({
        top: 40,
        opacity: 0
    }, 500, "easeInCirc", function () {

        $(".coachTip").removeClass("open").removeClass("locked");

    });

}


///Helper functions/////////////////////////////////////////////////

//Return the list of recently viewed items grouped by day
function groupByDate(objArray) {

    var previousDay = null;
    var groupedArray = new Array();
    var currentGroup = null;
    var path = window.location.pathname;
    var createOlderItemsGroup = true;
    var now = new Date();
    now.setDate(now.getDate() - 15);

    var isRTL = Next.Settings.Channel.DirectionRTL ? true : false;

    // If RTL, then process the list from back to front as thats how we wish to display it
    var i = 0;
    if (isRTL) i = objArray.length - 1;
    while (i >= 0 && i < objArray.length) {

        //Uncomment below to enable interaction list
        // var skipEntry = false;
        //        if (typeof interactionList != 'undefined') {
        //

        //            if (objArray[i].ItemNumber == null && objArray[i].Path == path) {
        //                skipEntry = true;
        //            }

        //            for (var interactionObject = 0; interactionObject < interactionList.length; interactionObject++) {
        //                if (objArray[i].ItemNumber == interactionList[interactionObject]) {
        //                    skipEntry = true;
        //                }
        //            }


        //        }

        // if (skipEntry) continue;
        //Get current day
        var thisDay = new Date(objArray[i].DateAdded);

        if (isNaN(thisDay)) {
            var dateString = objArray[i].DateAdded.split("T")[0];
            var dateArray = dateString.split("-");
            var formattedDateString = dateArray[1] + "/" + dateArray[2] + "/" + dateArray[0];
            thisDay = new Date(formattedDateString);
        }

        //Check if we're on the first day or if this date is different to previous
        if ((previousDay == null || formatViewedDate(thisDay, "nn mm yy") != formatViewedDate(previousDay, "nn mm yy")) // All items under 14 days old
            && ((thisDay > now) || createOlderItemsGroup)) // All older items
        {
            //if it is - create a new currentGroup object and set its date to current item


            var groupDate = formatViewedDate(thisDay, "", true);
            currentGroup = {
                rawDate: objArray[i].DateAdded,
                date: groupDate,
                itemArray: new Array()
            }; //Add this group object to the parent array
            groupedArray.push(currentGroup);

            if (thisDay < now) // All older items
                createOlderItemsGroup = false;
        }
        //Add this day to the current group
        currentGroup.itemArray.push(objArray[i]);
        //Reset previous day
        previousDay = thisDay;

        if (isRTL) i--;
        else i++;
    }

    return groupedArray;
}


//Custom date formatting function
function formatViewedDate(date, format, displayFriendyDates) {


    //If we're displaying friendly names e.g. Today, Yesterday etc. check that condition first
    if (displayFriendyDates) {

        var matchFound = false;

        for (var i = 0; i < 15; i++) {

            var loopDay = new Date();

            loopDay.setDate(loopDay.getDate() - i);

            if (loopDay.getDate() == date.getDate() &&
                loopDay.getMonth() == date.getMonth() &&
                loopDay.getYear() == date.getYear()) {
                matchFound = true;

                switch (i) {
                    case 0:
                        return "Today";
                        break;
                    case 1:
                        return "Yesterday";
                        break;
                    default:
                        return i + " Days Ago";
                }
            }

        }

        if (!matchFound) {
            return "Older";
        }

    }

    var monthNames = [
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    ];

    var dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

    var dDay = dayNames[date.getDay()];
    var dayNumber = date.getDate();
    var dMonth = monthNames[date.getMonth()];
    var dYear = date.getYear() + 1900;

    var ordinalString = "th";

    if (dayNumber == 1 || dayNumber == 11 || dayNumber == 21 || dayNumber == 21) {
        ordinalString = "st";
    }

    if (dayNumber == 2 || dayNumber == 12 || dayNumber == 22) {
        ordinalString = "nd";
    }

    if (dayNumber == 3 || dayNumber == 13 || dayNumber == 23) {
        ordinalString = "rd";
    }

    switch (format) {

        case "nn mm yy":
            return dayNumber + " " + dMonth + " " + dYear;
            break;
        case "nn/mm/yy":
            return dayNumber + "/" + (date.getMonth() + 1) + "/" + dYear;
            break;
        default:
            return dDay + ", " + dayNumber + ordinalString + " " + (dMonth) + ", " + dYear;

    }

}

function roundToHalf(value) {
    var converted = parseFloat(value); // Make sure we have a number
    var decimal = (converted - parseInt(converted, 10));
    //Set to Math.floor to match value returned by search provider
    decimal = Math.floor(decimal * 10);
    if (decimal == 5) {
        return (parseInt(converted, 10) + 0.5);
    }
    if ((decimal < 3) || (decimal > 7)) {
        return Math.round(converted);
    } else {
        return (parseInt(converted, 10) + 0.5);
    }
}


/////////////Plugins/////////////////////////////////////

///viewAllRecentlyViewed Plugin////////

(function ($) {

    var methods = {
        init: function (visitorId) {
            //Create copy of element we're intialising as this plugin - use in nested/callback functions
            var $this = this;
            //Set scroll hanfler
            $(window).scroll(function () {
                methods.loadItemsInviewport($this);
            });
            //Call getRecentlyViewed and pass callback
            RecentlyViewed.getRecentlyViewed(visitorId, function (itemList) {


                //If no elements in recently viewed, stop here
                if (itemList.length == 0)
                    return false;

                //Get formated array of items - grouped by date
                var groupedArray = groupByDate(itemList);
                //Loop through each group/day
                for (var i = 0; i < groupedArray.length; i++) {

                    var thisGroup = groupedArray[i];
                    //Create wrapper element for this day of recently viewed items
                    var dayWrapper = $("<div />");
                    dayWrapper.addClass("dayWrapper");
                    //Heading for this day
                    var heading = $("<h2 />");
                    heading.text(thisGroup.date);
                    //Add heading to wrapper
                    dayWrapper.append(heading);
                    //Create list to display all recently viewed items for this day
                    var dayList = $("<ul />");
                    //Add the list to the wrapper
                    dayWrapper.append(dayList);

                    //Loops through each recently viewed item in this list
                    for (var j = 0; j < thisGroup.itemArray.length; j++) {

                        var thisDay = thisGroup.itemArray[j];
                        //Create li element to display item
                        var itemDay = $("<li />");
                        //Build path to item component/display
                        var path = siteAssetsUrl + "/singleitemview/viewall" + thisDay.Path;
                        //If an item number was included, add it to the querystring
                        if (thisDay.ItemNumber != null) {
                            path += "/" + thisDay.ItemNumber;
                        }

                        //Set data attribute on LI
                        itemDay.attr("data-itempath", path);
                        //Set item path
                        var itemTargetPath = thisDay.Path;

                        //If we're targeting a specific item
                        if (thisDay.ItemNumber != null) {
                            itemTargetPath += "#" + thisDay.ItemNumber.replace(/-/g, "");
                        }
                        //If a size was selected
                        if (thisDay.Size != null) {
                            itemTargetPath += "?o=" + thisDay.Size;
                        }
                        //Add the target path
                        itemDay.attr("data-itemURL", itemTargetPath);
                        //Check if item we're addng is in the shopping bag
                        if (NextBasket.Data.Items != null) {
                            for (var k = 0; k < NextBasket.Data.Items.length; k++) {
                                if (thisDay.ItemNumber != null && NextBasket.Data.Items[k].ItemNumber == thisDay.ItemNumber.replace(/-/g, "").substring(0, 6)) {
                                    //If it is in the shopping bag, add appropriate class
                                    itemDay.addClass("inBag");
                                }
                            }
                        }
                        //Add the item to the list for this day
                        dayList.append(itemDay);

                    }
                    //Add the wrapper for this current day/item group
                    $this.append(dayWrapper);

                }
                //Load items currently visible
                methods.loadItemsInviewport($this);

            });

        },
        //This method loads the data/component for any list item currently visible in the viewport
        loadItemsInviewport: function (element) {

            //Get height of window and scroll position of page
            var wHeight = $(window).height();
            var scrollTop = $(window).scrollTop();
            //Loop through each list item in the recently viewed wrapper
            $(element).find("li").each(function () {
                //If we haven't previously bound data to it and it's not a heading item
                if (!$(this).hasClass("newDay") && !$(this).hasClass("visible")) {
                    //Check position of list item - is it visible?
                    if (($(this).offset().top - scrollTop) > 100 && ($(this).offset().top - scrollTop < wHeight)) {
                        $(this).addClass("visible");
                        //If so - get the item data
                        methods.getItemData(this);
                    }

                }
            });

        },
        getItemData: function (li) {

            var $li = $(li);

            var path = $li.attr("data-itempath");
            var url = $li.attr("data-itemURL");


            RecentlyViewed.getItem(path, function (data) {

                var d = $(data);
                var img = d.find("img");

                //This assumes the first element returned is an <a>
                $(d[0]).attr("href", url);

                img.css("opacity", 0);
                $li.prepend(d);
                img.animate({ opacity: 1 }, 300);
                $li.addClass("databound");

            });

        }
    };

    $.fn.viewAllRecentlyViewed = function (method) {

        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === "object" || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error("Method " + method + " does not exist on jQuery.viewAllRecentlyViewed");
        }

    };

})(jQuery);;


/////////////Item Scroller plug-in//////////////////////

var RVInitialized = false;

(function ($) {

    var _visitorId;
    var isTouchDown = false;
    var isRTL = Next.Settings.Channel.DirectionRTL ? true : false;
    const rvItemWidthWithMargins = 102;
    var maxItemsOnPage = 9;
    var url = window.location.pathname.toLowerCase();
    if (Next.Settings.Channel.ResponsiveShoppingBagIsEnabled && url.indexOf("/shoppingbag") > -1) {
        maxItemsOnPage = 8;
    }


    var methods = {
        //Initialize
        init: function (visitorId, loadOnVisible) {
            //Store visitor id
            _visitorId = visitorId;


            //If we're only loading the data when the element becomes visible (scrolls into view)
            //pass to initOnVisible and exit
            if (loadOnVisible) {
                methods.initOnVisible(this);
                return;
            }

            //Otherwise, call the bindData method
            methods.bindData(this);


        },
        //Get ListsURL or SecureListsURL based on protocol or HTTPS feature
        getListsURLOrSecureListsURL: function () {
            if (window.location.protocol === "https:" || Next.Settings.Channel.HttpsEnabled)
                return SecureListsURL;
            else
                return ListsURL;
        },
        windowEvents: function (element) {
            RecentlyViewed.updateRecentlyViewedFooterLink(element);
        },
        initOnVisible: function (element) {
            if (RVInitialized) {
                return;
            }
            //wait for recentlyviewed to finish loading
            var bindRecentlyViewed = setInterval(function () {
                if (element.hasClass("BINDME")) {
                    methods.bindData(element);
                    clearInterval(bindRecentlyViewed);                    
                }
            }, 400);

            //for home page
            setTimeout(function () {
                RecentlyViewed.updateRecentlyViewedFooterLink(element);
            }, 1000);

            //Scroll handler
            $(window).scroll(function () {
                methods.windowEvents(element);
            });

            //Resize handler
            $(window).resize(function () {
                methods.windowEvents(element);
            });

            RVInitialized = true;
        },
        bindData: function (element) {

            //Local copy of the element
            var $this = element;

            //Add click handler for reload button in the error message
            $this.find("a.reload").click(function () { methods.reload($this); return false; });


            //getRecentlyViewed - shared service call in recentlyViewed.js
            RecentlyViewed.getRecentlyViewed(_visitorId, function (data) {

                //Remove the ajax loader


                $this.find(".loader").remove();

                var itemList = data;
                var vLength = itemList.length;
                var totalWidth = 0;

                //Get formatted array of items - grouped by date
                var groupedArray = groupByDate(itemList);

                var recentlyViewedGroupWrapper = $("<div />");

                //Loop through each group/day
                for (var i = 0; i < groupedArray.length; i++) {

                    var thisGroup = groupedArray[i];
                    //Create wrapper element for this day of recently viewed items
                    var dayWrapper = $("<div />");
                    dayWrapper.addClass("dayWrapper");
                    if (isRTL) dayWrapper.addClass("RTL");
                    //Heading for this day
                    var headingText = thisGroup.date;
                    if (thisGroup.itemArray.length == 1) {
                        // headingText = formatViewedDate(new Date(thisGroup.rawDate), "nn/mm/yy", true);
                        headingText = thisGroup.date;
                    }

                    var heading = $("<h2 />");
                    heading.text(headingText);
                    // Amend arrow direction if RTL
                    if (isRTL) heading.addClass("RTL");
                    //Add heading to wrapper
                    dayWrapper.append(heading);
                    //Create list to display all recently viewed items for this day
                    var dayList = $("<ul />");
                    //Add the list to the wrapper
                    dayWrapper.append(dayList);


                    //Force the width of the wrapper
                    if (Next.Settings.Channel.ResponsiveShoppingBagIsEnabled && url.indexOf("/shoppingbag") > -1) {
                        dayWrapper.width(thisGroup.itemArray.length * rvItemWidthWithMargins - 5);
                        dayList.width(thisGroup.itemArray.length * rvItemWidthWithMargins - 4);
                        totalWidth += thisGroup.itemArray.length * rvItemWidthWithMargins - 5;
                    }
                    else {
                        dayWrapper.width((thisGroup.itemArray.length * 95));
                        dayList.width(thisGroup.itemArray.length * 95);
                        totalWidth += thisGroup.itemArray.length * 95;
                    }

                    //Loops through each recently viewwed item in this list
                    for (var j = 0; j < thisGroup.itemArray.length; j++) {

                        var thisDay = thisGroup.itemArray[j];

                        //Create li element to display item
                        var itemDay = $("<li />");

                        if (i == 0 && j == 0) {
                            itemDay.addClass("lastViewed");
                        }

                        var isTabbedPageItem = false;
                        if (thisDay.Path.indexOf(thisDay.ItemNumber) > -1) {
                            isTabbedPageItem = true;
                            itemDay.data("type", "tabbedItem");
                        }

                        //Build path to item component/display
                        //var path = "/singleitemview" + thisDay.Path + "?itemView=true";

                        if (thisDay.Path.indexOf("/style") === -1 && (thisDay.Path.substring(0, 3).toLowerCase() == '/st' || thisDay.Path.substring(0, 3).toLowerCase() == '/es')) {
                            thisDay.Path = '/style' + thisDay.Path;
                        }

                        //Store the correct path before modifying it
                        var currentItemPath = thisDay.Path;

                        //New URL check
                        var urlSegments = ModularPDPHelper.getSegmentOptions(thisDay.Path);
                        if (ModularPDPHelper.isUrlPathNameInNewFormat(thisDay.Path, urlSegments.segmentsCount)) {
                            //Eg: /style/g8316s12/649138 or /g8316s12/649138
                            urlSegments.segments.pop();
                            thisDay.Path = urlSegments.segments.join('/');
                        }

                        var path = siteAssetsUrl + "/singleitemview/rvscroller";

                        var seqStartIndex = thisDay.Path.indexOf("seq");
                        var nonSeqPath = "";

                        if (seqStartIndex > 0) {
                            nonSeqPath = thisDay.Path;
                            var textToReplace = nonSeqPath.substring(seqStartIndex, 20);
                            nonSeqPath = nonSeqPath.replace(textToReplace, '');
                            path = path + nonSeqPath;
                        }
                        else {
                            path = path + thisDay.Path;
                        }


                        //If an item number was included, add it to the querystring
                        if (thisDay.ItemNumber != null && !isTabbedPageItem) {
                            path += "/" + thisDay.ItemNumber;
                        }

                        //Set data attribute on LI
                        itemDay.attr("data-itempath", path);

                        //Set item path
                        var itemTargetPath = currentItemPath;
                        if (thisDay.ItemNumber != null && Next.Settings.UI.ModularPDPNewUrlFormatEnabled && ModularPDPHelper.isUrlPathNameInOldFormat(itemTargetPath, itemTargetPath.split('/').length)) {
                            itemTargetPath = ModularPDPHelper.getNewUrlPathName(itemTargetPath, thisDay.ItemNumber.replace(/-/g, ''));
                        }

                        if (thisDay.ItemNumber != null && !isTabbedPageItem) {
                            itemTargetPath += "#" + thisDay.ItemNumber.replace(/-/g, '');
                        }

                        if (thisDay.Size != null) {
                            itemTargetPath += "?o=" + thisDay.Size;
                        }

                        itemDay.attr("data-itemURL", siteBaseUrl + itemTargetPath);

                        //Check if item we're addng is in the shopping bag
                        if (NextBasket.Data.Items != null) {
                            for (var k = 0; k < NextBasket.Data.Items.length; k++) {

                                if (thisDay.ItemNumber) {

                                    var inBag = false;

                                    if (isTabbedPageItem) {
                                        if (thisDay.Path.indexOf(NextBasket.Data.Items[k].ItemNumber + "-" + NextBasket.Data.Items[k].OptionNo) > -1) {
                                            inBag = true;
                                        }
                                    }
                                    else if (NextBasket.Data.Items[k].ItemNumber == thisDay.ItemNumber.replace(/-/g, '').substring(0, 6)) {
                                        inBag = true;
                                    }

                                    if (inBag == true) {
                                        itemDay.addClass("inBag");
                                    }

                                }
                            }
                        }

                        //Add the item to the list for this day
                        dayList.append(itemDay);

                    }
                    //Add the wrapper for this current day/item group
                    //setTimeout(function () {
                    recentlyViewedGroupWrapper.append(dayWrapper).width(totalWidth);
                    // }, 5000);


                }

                //Clear out any existing data - we may be reloading a newer set of data
                $this.find(".recentlyViewedGroupWrapper").empty();
                var temp = recentlyViewedGroupWrapper.find(".dayWrapper");
                $this.find(".recentlyViewedGroupWrapper").append(temp).width(totalWidth);

                //More than 9 - fix width
                if (vLength > maxItemsOnPage) {
                    // $this.width(976);
                    // $this.find(".clip").width(855)
                    if (isRTL) {
                        $this.find("a.scrollNav.previous").removeClass("disabled");
                        $this.find("a.scrollNav.next").addClass("disabled");
                    } else {
                        $this.find("a.scrollNav.next").removeClass("disabled");
                        $this.find("a.scrollNav.previous").addClass("disabled");
                    }
                    $this.find(".clip").addClass("noBackground");
                    //$this.find(".scrollControl").show();                    
                    methods.enableTouchEvents($this.find(".clip"));
                } else {

                    //if (resize) {
                    //Less than 10 - calculate width and disable both scroll buttons
                    // $this.width(vLength * 97);
                    $this.find("a.scrollNav.previous").addClass("disabled");
                    $this.find("a.scrollNav.next").addClass("disabled");
                    // $this.find(".scrollControl").hide();
                    // $this.find(".clip").width(vLength * 97);
                    // }
                }

                if (groupedArray.length == 0) {
                    $this.find(".emptyMessage").fadeIn(500);
                }


                //Set counter text if enabled
                if (Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayCounter) {
                    $this.find(".viewCounter").text(vLength);
                }


                //Set class on parent element to indicate content has loaded
                $this.addClass("contentLoaded");
                methods.loadVisibleItems($this.find(".recentlyViewedGroupWrapper"));
                $this.find("a.scrollNav.previous").click(function () { methods.scroll(1, this, $this); return false; });
                $this.find("a.scrollNav.next").click(function () { methods.scroll(-1, this, $this); return false; });

            },
                //This is the error callback
                function () {

                    $this.find(".recentlyViewedGroupWrapper").fadeOut(500);
                    $this.find(".loader").hide();
                    $this.find(".errorMessageBlock").fadeIn(500);

                });

        },
        reload: function (element) {

            var $this = $(element);

            $this.find(".recentlyViewedGroupWrapper").fadeIn(500);

            $this.find(".errorMessageBlock").fadeOut(300, function () {
                $this.find(".loader").fadeIn(300);
            });

            methods.bindData($this);

        },
        addItem: function (item) {

            //Add to recently viewed
            RecentlyViewed.addItem(item);

        },
        scroll: function (direction, element, parent) {

            var listWrapper = parent.find(".recentlyViewedGroupWrapper");

            if ($(element).hasClass("disabled")
                || listWrapper.hasClass("locked")
                || listWrapper.position().left >= 0 && direction == 1
                || listWrapper.find("li").length <= maxItemsOnPage) {
                return false;
            }

            var liCount = listWrapper.find("li").length;

            var currentOffset = listWrapper.css("left").replace('px', '');

            var pageSize = 95 * 9;
            var listLen = liCount * 95;
            var distance = pageSize * direction;

            if (Next.Settings.Channel.ResponsiveShoppingBagIsEnabled && url.indexOf("/shoppingbag") > -1) {
                pageSize = rvItemWidthWithMargins * 8;
                listLen = liCount * rvItemWidthWithMargins;
                distance = pageSize * direction;
            }

            //The following checks are there to prevent the scroller getting out of sync when touch enabled scrolling is enabled.
            //When a user uses touch-scroll, the paging will become irrelevant so need a check to make sure we don't scroll beyond the limit of the list
            var newOffset = parseInt(currentOffset) + parseInt(distance);
            var maxOffset = (listLen - pageSize) * direction;

            if (!isRTL) {
                if ((newOffset < maxOffset) && direction == -1) {
                    distance = maxOffset - parseInt(currentOffset);
                }

                if ((newOffset > 0) && direction == 1) {
                    distance = 0 - parseInt(currentOffset);
                }
            }
            else {
                if ((newOffset > maxOffset) && direction == 1) {
                    distance = maxOffset - parseInt(currentOffset);
                }

                if ((newOffset < 0) && direction == -1) {
                    distance = 0 - parseInt(currentOffset);
                }
            }

            //Safety check
            if (distance > pageSize) {
                distance = pageSize;
            }

            if (distance < -pageSize) {
                distance = -pageSize;
            }

            //ie8 and below don't like animating from one css class to another - so, set the animation time to 0
            var transitionSpeed = 200;
            if (!Modernizr.csstransitions) {
                transitionSpeed = 0;
            }


            listWrapper.addClass("locked").animate({
                left: "+=" + distance
            }, 500, function () {

                if (direction == -1) {
                    parent.find("a.scrollNav.previous").removeClass("disabled", transitionSpeed);
                }

                if (listWrapper.position().left >= 0) {
                    parent.find("a.scrollNav.previous").addClass("disabled", transitionSpeed);
                }

                if (parent.find("li").length * rvItemWidthWithMargins < listWrapper.width()) { 
                    parent.find("a.scrollNav.next").addClass("disabled", transitionSpeed);
                } else {
                    parent.find("a.scrollNav.next").removeClass("disabled", transitionSpeed);
                }

                listWrapper.removeClass("locked");

                methods.loadVisibleItems(listWrapper);

            });

        },
        clearList: function () {

            //Clears the full list of recently viewed items
            preventCollapse = true;

            //Build target url
            var targetURL = methods.getListsURLOrSecureListsURL() + "/recentlyviewed/clear/" + _visitorId;

            //Clear recently viewed data
            RecentlyViewed.clearList(targetURL);

            //And update the UI
            var _this = this;

            _this.find(".recentlyViewedGroupWrapper").fadeOut(500, function () {
                //Fade in message
                _this.find(".emptyMessage").fadeIn(500);
            });

            //Disable clear link
            _this.find("a.clearAll").addClass("disabled");

            //Disable scroll buttons
            $("a.scrollNav.previous").addClass("disabled", 200);
            $("a.scrollNav.next").addClass("disabled", 200);

            //Make sure clip background is visible
            $(".clip").removeClass("noBackground");


            //Update display count
            if (Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayCounter) {
                _this.find(".viewCounter").text("0");
            }
        },
        loadVisibleItems: function (wrapper) {
            //Load items as they appear in view
            if (wrapper.length > 0) {
                var allowance = Next.Settings.UI.IsInnovationDesktopResponsiveEnabled ? 1100 : 1000; //change this value to add more buffer/tune performance)

                var itemDataPromises = [];

                wrapper.find("ul").each(function () {
                    if ($(this).length > 0) {
                        var ulOffset = $(this).position().left + wrapper.position().left;

                        $(this).find("li").each(function () {
                            if (!$(this).hasClass("databound")) { // Check if already loaded
                                var liOffset = $(this).position().left + ulOffset;
                                if (liOffset >= 0 && liOffset < allowance) {
                                    itemDataPromises.push(methods.getItemDataPromise(this));
                                }
                            }
                        });
                    }
                });

                var allItemsLoaded = Promise.all(itemDataPromises);
                var itemCount = wrapper.find("li").length;

                allItemsLoaded.then(() => {
                    var prices = wrapper.find("span");

                    if (prices.length != itemCount) {
                        return;
                    }

                    var prices = wrapper.find("span");
                    $(".RecentlyViewedWrapper").removeClass("price-range");

                    for (var i = 0; i < prices.length; i++) {
                        var price = prices[i];

                        if (price.innerText.includes("-")) {
                            $(".RecentlyViewedWrapper").addClass("price-range");

                            if (price.innerText.includes("-") && Next.Settings.Channel.ResponsiveShoppingBagIsEnabled && url.indexOf("/shoppingbag") > -1) {
                                var splitedPrice = price.innerText.split("-");
                                var nicelyBrokenText = `<span>${splitedPrice[0]} -</span><span class="price-second-part"> ${splitedPrice[1]}</span>`;
                                price.innerHTML = nicelyBrokenText;
                            }
                        }
                    }
                });
            }
        },
        getItemData: function (li, callback) {
            //Loads the item component for a given list-item with provided data-attributes
            var $li = $(li);
            $li.addClass("databound");
            var path = $li.attr("data-itempath");
            var url = $li.attr("data-itemURL");

            RecentlyViewed.getItem(path, function (data) {
                if (data !== undefined && data !== null && data.indexOf("<a") > -1) {
                    var d = $(data);
                    var img = d.find("img");

                    if ($li.data("type") != "tabbedItem") {
                        d.attr("href", url);
                    }
                    img.css("opacity", 0);
                    $li.prepend(d);
                    img.animate({ opacity: 1 }, 300);
                }
                else {
                    var siblings = $li.siblings().length;
                    $li.remove();
                    if (siblings === 0) {
                        methods.displayClearDataUI();
                    }
                }

                if (callback) {
                    callback();
                }
            });
        },
        getItemDataPromise: function (li) {
            return new Promise((resolve, reject) => {
                this.getItemData(li, () => {
                    resolve();
                });
            });
        }, 
        enableTouchEvents: function (element) {

            var config = {
                touchStart: methods.touchStart,
                touchMove: methods.touchMove,
                touchEnd: methods.touchEnd,
                useMouse: true
            }

            $(element).NXTouch(config);

            var maxScroll = -(($(element).find("li").length * 95) - 855);

            $(element).attr("data-maxscroll", maxScroll)

        },
        touchStart: function (e, NXTouchObj) {
            isTouchDown = true;

            var targetEl = $(e.currentTarget).find(".recentlyViewedGroupWrapper");
            var currentX = parseInt(targetEl.css("left").replace("px"));

            if (!currentX) {
                currentX = 0;
            }

            targetEl.attr("data-startx", currentX);
        },
        touchMove: function (e, NXTouchObj) {

            if (isTouchDown) {
                var maxScroll = parseInt($(e.currentTarget).attr("data-maxscroll"));

                var targetEl = $(e.currentTarget).find(".recentlyViewedGroupWrapper");

                var targetX = parseInt(targetEl.attr("data-startx")) + NXTouchObj.DistanceX;


                if (targetX >= 0) {

                    targetX = 0;

                    $(e.currentTarget).closest(".scrollRowWrapper").find("a.scrollNav.previous").addClass("disabled");

                } else {
                    $(e.currentTarget).closest(".scrollRowWrapper").find("a.scrollNav.previous").removeClass("disabled");
                }

                if (targetX <= maxScroll) {
                    targetX = maxScroll;
                    $(e.currentTarget).closest(".scrollRowWrapper").find("a.scrollNav.next").addClass("disabled");
                } else {
                    $(e.currentTarget).closest(".scrollRowWrapper").find("a.scrollNav.next").removeClass("disabled");
                }

                targetEl.css("left", targetX);

                methods.loadVisibleItems(targetEl);
            }
        },
        touchEnd: function (e, NXTouchObj) {
            isTouchDown = false;
            var targetEl = $(e.currentTarget).find(".recentlyViewedGroupWrapper");
            var currentX = parseInt(targetEl.css("left").replace('px', ''));

            var snapTo = (Math.round(currentX / 95)) * 95;
            var maxScroll = parseInt($(e.currentTarget).attr("data-maxscroll"));
            targetEl.animate({ left: snapTo + "px" }, 300, function () {

                if (snapTo == 0) {

                    $(e.currentTarget).closest(".scrollRowWrapper").find("a.scrollNav.previous").addClass("disabled");

                } else {
                    $(e.currentTarget).closest(".scrollRowWrapper").find("a.scrollNav.previous").removeClass("disabled");
                }

                if (snapTo == maxScroll) {

                    $(e.currentTarget).closest(".scrollRowWrapper").find("a.scrollNav.next").addClass("disabled");
                } else {
                    $(e.currentTarget).closest(".scrollRowWrapper").find("a.scrollNav.next").removeClass("disabled");
                }
            });

        },
        displayClearDataUI: function () {

            $(".recentlyViewedGroupWrapper").fadeOut(500);

            //Fade in message
            $(".emptyMessage").fadeIn(500);

            //Disable clear link
            $("a.clearAll").addClass("disabled");

            //Disable scroll buttons
            $("a.scrollNav.previous").addClass("disabled", 200);
            $("a.scrollNav.next").addClass("disabled", 200);

            //Make sure clip background is visible
            $(".clip").removeClass("noBackground");

            //Update display count
            if (Next.FeatureManager.FeatureSettings.RecentlyViewed.DisplayCounter) {
                $(".viewCounter").text("0");
            }
        }
    };

    $.fn.ItemScroller = function (method) {

        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.ItemScroller');
        }
    };

})(jQuery);

;
// ------------------------------------------------------------------------------------------ //
// Name: NXTouch - Touch Event Layer Plug-in
// Authors: John Loydall
// Copyright: Next PLC
// Description: Abstracts the touch events from different vendors/devices
//              into a common set of touch events with custom, device-independent touch objects
//
// ------------------------------------------------------------------------------------------ //

/*

//Usage////////////////////////////////////////

Initialise the component to be touch-enabled. Pass in config object defining function calls for touch events
along with other initialisation paramaters

//Parameters////////////////////////////////////

touchStart - named function to handle touch start
touchMove -  named function to handle touch move
touchEnd -  named function to handle touch end
useMouse - boolean to indicate whether to map mouse events to the touch event handers (useful for testing)

e.g.
var config = { 
touchStart: touchStart,
touchMove: touchMove,
touchEnd: touchEnd,
useMouse: true
}
 
Then initialise:

$(element).NXTouch(config);

And - make sure you define each function with the signature (e, NXTouchObj)
e.g.

function touchMove(e, NXTouchObj) {

}

...where e will be the original event and NXTouchObj is the custom client touch point object

The custom object exposes a number of properties of the current client point regardless of device

e.g.
{
DistanceX: 28,
DistanceY: 2,
SpeedX: 1,
SpeedY: 0,
X: 68,
Y: 28
}

e.g. 

function touchMove(e, NXTouchObj) {
console.log(NXTouchObj.DistanceX);
}

 
*/







(function ($) {
    var startX = 0;
    var startY = 0;
    var currentX = 0;
    var currentY = 0;
    var previousX = 0;
    var previousY = 0;
    var movedX = 0;
    var movedY = 0;
    var speedX = 0;
    var speedY = 0;
    var currentClientPoint = {};
    var isMouseDown = false;
    var useMouse = false;
    var elementOffsetX = 0;
    var elementOffsetY = 0;
    var methods = {
        init: function (config) {

            //If device isn't touch enabled and mouse input isn't set, return false
            if (!isTouchEnabled && !config.useMouse) {
                return false;
            }


            elementOffsetX = this.offset().left;
            elementOffsetY = this.offset().top;



            //If using mouse, set plug-in variable
            if (config.useMouse) {
                useMouse = true;
            }

            //If a touchstart event handler has been defined, bind to the corresponding device events
            if (config.touchStart) {

                if (isTouchEnabled) {
                    this.bind('touchstart', function (e) { $(this).NXTouch('tStart', e, config.touchStart); })
                }
                if (isMSPointerDevice) {
                    this[0].addEventListener('MSPointerDown', function (e) { $(this).NXTouch('tStart', e, config.touchStart); })
                }
                //                if (useMouse) {
                //                    this.bind('mousedown', function (e) { $(this).NXTouch('tStart', e, config.touchStart); })
                //                }
            }
            //If a touchMove event handler has been defined, bind to the corresponding device events
            if (config.touchMove) {

                if (isTouchEnabled) {
                    this.bind('touchmove', function (e) { $(this).NXTouch('tMove', e, config.touchMove); })
                }
                if (isMSPointerDevice) {
                    this[0].addEventListener('MSPointerMove', function (e) { $(this).NXTouch('tMove', e, config.touchMove); })
                }
                //                if (useMouse) {
                //                    this.bind('mousemove', function (e) { $(this).NXTouch('tMove', e, config.touchMove); })
                //                }
            }
            //If a touchEnd event handler has been defined, bind to the corresponding device events
            if (config.touchEnd) {

                if (isTouchEnabled) {
                    this.bind('touchend', function (e) { $(this).NXTouch('tEnd', e, config.touchEnd); })
                }
                if (isMSPointerDevice) {
                    this[0].addEventListener('MSPointerUp', function (e) { $(this).NXTouch('tEnd', e, config.touchEnd); })
                }
                //                if (useMouse) {
                //                    this.bind('mouseup', function (e) { $(this).NXTouch('tEnd', e, config.touchEnd); })
                //                }
            }

        },
        tStart: function (e, targetFunction) {

            //touchStart wrapper - creates a standard client point object from the different device touch event properties
            var clientPoint = {};


            //Get client X & Y from different devices


            if (event.touches != null) {
                clientPoint.X = event.touches[0].pageX - elementOffsetX;
                clientPoint.Y = event.touches[0].pageY - elementOffsetY;
            }
            else if (e.pageX != null) {
                clientPoint.X = e.pageX - elementOffsetX;
                clientPoint.Y = e.pageY - elementOffsetY;
            }


            //            if (useMouse) {
            //                isMouseDown = true;
            //                clientPoint.X = e.clientX - elementOffsetX;
            //                clientPoint.Y = e.clientY - elementOffsetY;
            //            }

            //Store client location
            startX = clientPoint.X;
            startY = clientPoint.Y;

            currentX = clientPoint.X;
            currentY = clientPoint.Y;

            currentClientPoint = clientPoint;

            //Pass custom client object to function defined in plugin config 
            targetFunction(e, clientPoint);

        },
        tMove: function (e, targetFunction) {

            e.preventDefault();



            if (useMouse && !isMouseDown) {

                // return false;
            }

            var clientPoint = {};



            if (event.touches != null) {
                clientPoint.X = event.touches[0].pageX - elementOffsetX;
                clientPoint.Y = event.touches[0].pageY - elementOffsetY;
            }
            else if (e.pageX != null) {

                switch (e.pointerType) {
                    case e.MSPOINTER_TYPE_TOUCH:
                        //console.log("touch");
                        break;
                    case e.MSPOINTER_TYPE_PEN:
                        return false;
                        break;
                    case e.MSPOINTER_TYPE_MOUSE:
                        return false;
                        break;
                }

                clientPoint.X = e.pageX - elementOffsetX;
                clientPoint.Y = e.pageY - elementOffsetY;
                rvScrollOffset = currentX - startX; //this will be useful in Footer.js to identify item scrolling has taken place or not
            }


            //            if (useMouse) {
            //                clientPoint.X = e.clientX - elementOffsetX;
            //                clientPoint.Y = e.clientY - elementOffsetY;
            //            }

            previousX = currentX;
            previousY = currentY;

            currentX = clientPoint.X;
            currentY = clientPoint.Y;

            movedX = currentX - startX;
            movedY = currentY - startY;

            speedX = currentX - previousX;
            speedY = currentY - previousY;

            clientPoint.DistanceX = movedX;
            clientPoint.DistanceY = movedY;

            clientPoint.SpeedX = speedX;
            clientPoint.SpeedY = speedY;

            currentClientPoint = clientPoint;

            targetFunction(e, clientPoint);

        },
        tEnd: function (e, targetFunction) {

            isMouseDown = false;
            var clientPoint = currentClientPoint;
            targetFunction(e, clientPoint);
        }
    };

    $.fn.NXTouch = function (method) {

        //Method calling 
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.NXTouch');
        }

    };

})(jQuery);;
/*!
* Modal Popup
* Version: 2014.5.9.0
* Original author: Curtis Timson
*/

var ModalPopup = {
    options: null,
    vars: {
        showMidClass: "show-mid",
        showClass: "show",
        modalPopupClass: "ModalPopup",
        modalPopupContainerClass: "ModalPopupContainer",
        modalPopupContainerOverlayClass: "overlay",
        modalPopupWrapperClass: "ModalPopupWrapper",
        $modalPopupContainer: null,
        $modalPopupWrapper: null,
        $modalPopup: null,
        isActive: false,
        modalDataSet: null
    },
    constants: {
        scrollLockEvents: "mousewheel.modalscroll DOMMouseScroll.modalscroll MozMousePixelScroll.modalscroll"
    },
    init: function (options) {
        var _this = this;

        //Plugin Name and Default values
        var pluginName = 'ModalPopup',
		defaults = {
		    closeClass: 'closemodal',
		    scrollClass: 'ModalScroll',
		    overlay: true,
		    width: null,
		    height: null,
		    onPreClose: null,
		    onClose: null,
		    lockBackgroundScroll: false,
		    closeOnContainerClick: true,
		    fixedTopPosition: null,//these variables are used by Secci responsive design
		    fixedLeftPosition: null,
		    fullyLockBackgroundScroll: false, //this is used for Find in Store modal on Desktop PDP, this will override lockBackgroundScroll
            isPersonalisedGift: false
		};

        _this.options = $.extend({}, defaults, options);

        if (_this.options && _this.options.fullyLockBackgroundScroll && _this.vars.$modalPopup) {
            _this.vars.$modalPopup.remove();
        }

        _this.vars.$modalPopup = $("." + _this.vars.modalPopupClass);
        if (!_this.vars.$modalPopup.length) {
            _this.vars.$modalPopup = $("<div/>");
            _this.vars.$modalPopup.addClass(_this.vars.modalPopupClass);
            if (_this.options.isPersonalisedGift) {
                _this.vars.$modalPopup.addClass("PersonalisedModal");
            }

            if (_this.options && _this.options.fullyLockBackgroundScroll) {
                _this.vars.$modalPopup.css("position", "relative");
                _this.vars.$modalPopupWrapper = $("<div/>");
                _this.vars.$modalPopupWrapper.addClass(_this.vars.modalPopupWrapperClass);
                $("body").append(_this.vars.$modalPopupWrapper.append(_this.vars.$modalPopup));
            } else {
                $("body").append(_this.vars.$modalPopup);
            }
        }


        _this.addContainer();

        if (_this.options.isPersonalisedGift){
            this.CalculateScreenSpaceForPersonalisedGiftModal();
        }

        if(!_this.vars.$modalPopup.hasClass("ZoomedModal")){
            if (_this.options.width) {
                _this.vars.$modalPopup.width(_this.options.width);
            }

            if (_this.options.height) {
                _this.vars.$modalPopup.height(_this.options.height);
            }
        }
        else    {
             _this.vars.$modalPopup.removeAttr("style");
        }

        //close binding
        _this.vars.$modalPopup.on("click", "." + _this.options.closeClass, function (e) {
            _this.close(e);
        });

        //window resize
        $(window).resize(function () {
            _this.setModalPosition();
        });

        if (_this.options && _this.options.fullyLockBackgroundScroll) {
            this.LockBackgroundScroll();
        }
        else if (_this.options.lockBackgroundScroll) {
            this.EnableScrollLock();
        }

        if (_this.options.modalDataSet) {
            _this.vars.modalDataSet = this.options.modalDataSet;
        }


        return _this.vars.$modalPopup;
    },
    addContainer: function () {
        var _this = this;
        _this.vars.$modalPopupContainer = $("<div/>");
        _this.vars.$modalPopupContainer.addClass(_this.vars.modalPopupContainerClass);
        if (_this.options.overlay) {
            _this.vars.$modalPopupContainer.addClass(_this.vars.modalPopupContainerOverlayClass);
        }

        if (_this.options && _this.options.fullyLockBackgroundScroll) {
            _this.vars.$modalPopupWrapper.before(_this.vars.$modalPopupContainer);
        } else {
            _this.vars.$modalPopup.before(_this.vars.$modalPopupContainer);
        }

        _this.vars.$modalPopupContainer = $("." + _this.vars.modalPopupContainerClass);
        _this.vars.$modalPopupContainer.click(function (e) {
            if (_this.options.closeOnContainerClick) {
                _this.close(e);
            }
        });
    },
    show: function () {
        var _this = this;

        if ($("." + _this.vars.modalPopupContainerClass).length < 1) {
            _this.addContainer();
        }

        _this.setModalPosition();

        if (_this.options && _this.options.fullyLockBackgroundScroll) {
            _this.vars.$modalPopupWrapper.addClass(_this.vars.showClass);
        }

        _this.vars.$modalPopup.addClass(_this.vars.showMidClass);
        setTimeout(function () {
            _this.vars.$modalPopup.addClass(_this.vars.showClass);
            document.dispatchEvent(new CustomEvent("PopUpDisplayed", this));
        }, 1);

        _this.vars.isActive = true;
    },
    close: function (e) {

        var _this = this;

        if (_this.options && _this.options.fullyLockBackgroundScroll) {
            $("body").css("overflow", "");
        }

        if (_this.vars.isActive) {
            if (e) {
                e.preventDefault();
            }

            if (_this.options.onPreClose) {
                _this.options.onPreClose();
            }

            //Remove container element
            if (_this.vars.$modalPopupContainer) {

                if (_this.options && !_this.options.fullyLockBackgroundScroll) {
                    _this.vars.$modalPopupContainer.off(_this.constants.scrollLockEvents);
                }

                _this.vars.$modalPopupContainer.replaceWith(_this.vars.$modalPopupContainer.contents());
            }

            if (_this.options && _this.options.fullyLockBackgroundScroll) {
                _this.vars.$modalPopupWrapper.remove();
            } else {
                _this.vars.$modalPopup.off(_this.constants.scrollLockEvents);
            }

            _this.vars.$modalPopup.removeClass(_this.vars.showClass);
            setTimeout(function () {
                _this.vars.$modalPopup.removeClass(_this.vars.showMidClass);
            }, 100);

            if (_this.options && !_this.options.fullyLockBackgroundScroll) {
                $(document).off(_this.constants.scrollLockEvents);
            }

            _this.vars.isActive = false;
            if (_this.options.onClose) {
                _this.options.onClose();
            }
        }
    },
    setModalPosition: function () {
        var _this = this;
        if(_this.options.isPersonalisedGift){
            this.CalculateScreenSpaceForPersonalisedGiftModal();
        }
        if(!_this.vars.$modalPopup.hasClass("ZoomedModal")){
            //Adjust position of modal popup
            var modalPopupTop = parseInt(($(window).height() / 2) - (_this.vars.$modalPopup.outerHeight() / 2), 10);
            var modalPopupLeft = parseInt(($(window).width() / 2) - (_this.vars.$modalPopup.outerWidth() / 2), 10);

            if (_this.options.fixedTopPosition != null) {
                modalPopupTop = _this.options.fixedTopPosition;
            }

            if (_this.options.fixedLeftPosition != null) {
                modalPopupLeft = _this.options.fixedLeftPosition;
            }       

            _this.vars.$modalPopup.css("top", modalPopupTop);
            _this.vars.$modalPopup.css("left", modalPopupLeft);
        }
        else{
            _this.vars.$modalPopup.removeAttr("style");
        }
    },
    EnableScrollLock: function () {
        var _this = this;

        $(document).on(_this.constants.scrollLockEvents, function (e) {
            return false;
        });

        _this.vars.$modalPopupContainer.on(_this.constants.scrollLockEvents, function (e) {
            e.preventDefault();
        });
        _this.vars.$modalPopup.on(_this.constants.scrollLockEvents, function (e) {
            e.preventDefault();

            var $target = $(e.target);
            var $scrollableElement = _this.vars.$modalPopup.find("." + _this.options.scrollClass);
            var $targetScrollable = $target.closest($scrollableElement);

            if ($targetScrollable.length) {
                var scrollTo = null;

                if (e.type == 'mousewheel') {
                    scrollTo = (e.originalEvent.wheelDelta * -1);
                }
                else if (e.type == 'DOMMouseScroll') {
                    scrollTo = 40 * e.originalEvent.detail;
                }

                if (scrollTo) {
                    $targetScrollable.scrollTop(scrollTo + $targetScrollable.scrollTop());
                }
            }

        });
    },
    LockBackgroundScroll: function () {
        $("body").css("overflow", "hidden");
    },
    GetModalDataSet: function() {
        return this.vars.modalDataSet;
    },

    CalculateScreenSpaceForPersonalisedGiftModal: function(){
        var _this = this;        
        if(window.innerHeight <= 625){
            _this.vars.$modalPopup.addClass("ZoomedModal");
        }
        else{
            _this.vars.$modalPopup.removeClass("ZoomedModal");
        }
    }
};;
/*
 * June 2015
 * This code is written to support search suggestions in departments.
 * However the departments have been removed from the SLI feed, so much of the code is
 * redundant. This might change in the future.
 *
 * October 2019
 * The search auto complete has been updated to include an enriched view with product list
 */
var Search;
(function (Search) {
    var Keys;
    (function (Keys) {
        Keys[Keys["UpArrow"] = 38] = "UpArrow";
        Keys[Keys["DownArrow"] = 40] = "DownArrow";
        Keys[Keys["Tab"] = 9] = "Tab";
        Keys[Keys["Enter"] = 13] = "Enter";
        Keys[Keys["Escape"] = 27] = "Escape";
    })(Keys || (Keys = {}));
    var DomSelector;
    (function (DomSelector) {
        DomSelector["Input"] = "sli_search_1";
        DomSelector["Form"] = "#newsearch";
        DomSelector["StateIsEnriched"] = "is-enriched";
        DomSelector["StateIsLoading"] = "is-loading";
        DomSelector["StateHideIfNoResults"] = "hide-if-no-results";
        DomSelector["StateShowRecent"] = "show-recent";
        DomSelector["StateNoRecent"] = "no-recent";
        DomSelector["StateSelected"] = "selected";
        DomSelector["StateNoResults"] = "no-results";
        DomSelector["SearchDropdownCover"] = "search-dropdown-content-cover";
        DomSelector["RecentHeading"] = "recent-heading";
        DomSelector["ClearRecent"] = "clear-recent";
        DomSelector["SearchItem"] = "search-item";
        DomSelector["Open"] = "open";
        DomSelector["Divider"] = "divider";
        DomSelector["Title"] = "title";
        DomSelector["CurrentSearchTerm"] = "freeTextSearchTerm";
    })(DomSelector || (DomSelector = {}));
    var AutoComplete = /** @class */ (function () {
        function AutoComplete(baseAddress, recentSearchesSaved, suggestionsEnabled, autoCompleteUrl) {
            var _this = this;
            this.recentSearches = new KeyCookies(recentSearchesSaved);
            this.input = document.getElementById(DomSelector.Input);
            this.filter = document.getElementById('search-af');
            this.$form = $('#newsearch');
            this.$dropdownContainer = this.$form.find('.search-dropdown-container');
            this.$dropdown = this.$form.find('.search');
            if (baseAddress.length > 0 && baseAddress.charAt(baseAddress.length - 1) !== "/") {
                baseAddress += "/";
            }
            this.url = baseAddress + autoCompleteUrl;
            this.$form.submit(function (e) { return _this.searchSubmit(); });
            var $input = $(this.input);
            $input.on('focus, click', function (e) {
                _this.openDropdown();
            });
            $input.on('blur', function (e) {
                _this.delayCloseDropdown();
            });
            $('#MainNavigation').hover(function (e) { return _this.delayCloseDropdown(); });
            this.setLastSearch();
            this.initClearSearchTextButton();
            this.initSelectionEvents();
            if (suggestionsEnabled) {
                this.initSuggestions();
            }
            else {
                this.initNoSuggestions();
            }
        }
        /**
         * Use this to unload this class and all associated DOM items
         */
        AutoComplete.prototype.destroy = function () {
            // Remove all events on input field
            $('#' + DomSelector.Input).off('click blur focus keyup keydown');
            // Remove items added to the DOM
            this.$dropdown.empty();
        };
        /**
         * Initialise when suggestions are turned off
         */
        AutoComplete.prototype.initNoSuggestions = function () {
            var _this = this;
            var inputText = this.input.value;
            $(this.input).keyup(function (e) {
                // No change so return
                if (_this.input.value === inputText)
                    return;
                inputText = _this.input.value;
                // Ignore keys that can change the content but shouldn't close the dropdown
                if (_this.IgnoreKey(e.keyCode))
                    return;
                _this.clearDropdown();
                if (inputText.length == 0)
                    _this.loadRecentSearches();
                _this.refresh();
            });
        };
        /**
         * Set up button to clear the search text.
         */
        AutoComplete.prototype.initClearSearchTextButton = function () {
            var _this = this;
            var btn = this.$form.find('.clear-search-text');
            this.showOrHideClearSearchTextButton();
            btn.click(function (e) {
                _this.input.value = '';
                _this.showOrHideClearSearchTextButton();
                _this.clearDropdown();
                _this.loadRecentSearches();
                setTimeout(function () { return _this.input.focus(); }, 500);
            });
        };
        AutoComplete.prototype.showOrHideClearSearchTextButton = function () {
            var btn = this.$form.find('.clear-search-text');
            var show = this.input.value !== '';
            show ? btn.addClass("visible") : btn.removeClass("visible");
        };
        /**
         * Initialise the suggestion searches
         */
        AutoComplete.prototype.initSuggestions = function () {
            var _this = this;
            var inputText;
            var timeoutId = 0;
            $(this.input).keyup(function (e) {
                // If no change in input return
                if (_this.input.value === inputText)
                    return;
                inputText = _this.input.value;
                _this.showOrHideClearSearchTextButton();
                // Ignore keys that can change the content but don't need to invoke a search
                if (_this.IgnoreKey(e.keyCode))
                    return;
                // Input changed so clear any selection
                _this.clearSelected();
                // Restart timer
                clearTimeout(timeoutId);
                timeoutId = setTimeout(function () {
                    if (inputText.length == 0) {
                        _this.clearDropdown();
                        _this.loadRecentSearches();
                        _this.refresh();
                    }
                    else {
                        if (Next.Settings.Channel.BloomReachSearchOverrideEnabled) {
                            _this.brsearch(inputText)
                                .done(function (result) {
                                _this.clearDropdown();
                                _this.brProcessResponse(result);
                                _this.refresh();
                            })
                                .fail(function (xhr, status, error) {
                                ConsoleLog("Auto-complete feed error: " + status);
                                _this.clearDropdown();
                                _this.refresh();
                            });
                        }
                        //start: to remove
                        else if (Next.Settings.Channel.BloomReachSearchEnabled &&
                            typeof _this.recentSearches.monetateSearchCookie != 'undefined' &&
                            _this.recentSearches.monetateSearchCookie.indexOf(Next.Settings.Cookie.MonetateCookieBloomReachValue) === 0) {
                            _this.brsearch(inputText)
                                .done(function (result) {
                                _this.clearDropdown();
                                _this.brProcessResponse(result);
                                _this.refresh();
                            })
                                .fail(function (xhr, status, error) {
                                ConsoleLog("Auto-complete feed error: " + status);
                                _this.clearDropdown();
                                _this.refresh();
                            });
                        }
                    }
                }, 500);
            });
            this.initialSuggestions();
        };
        AutoComplete.prototype.initSelectionEvents = function () {
            var _this = this;
            $(this.input).keydown(function (e) {
                switch (e.keyCode) {
                    case Keys.UpArrow:
                    case Keys.DownArrow:
                        e.preventDefault();
                        _this.keyUpDown(e.keyCode);
                        break;
                    case Keys.Enter:
                        return _this.selectItem();
                }
            });
        };
        /**
         * Initialise the suggestions
         */
        AutoComplete.prototype.initialSuggestions = function () {
            var _this = this;
            if (this.input.value && Next.Settings.Channel.BloomReachSearchOverrideEnabled) {
                this.brsearch(this.input.value)
                    .done(function (result) {
                    _this.clearDropdown();
                    _this.brProcessResponse(result);
                    _this.refresh();
                })
                    .fail(function (xhr, status, error) {
                    if ('abort' !== status) {
                        // If ajax request fails then it could be due to adblocker
                        _this.clearDropdown();
                        _this.refresh();
                    }
                });
            }
        };
        /**
         * Which keys to ignore when search input has focus.
         */
        AutoComplete.prototype.IgnoreKey = function (keyCode) {
            if (keyCode == Keys.UpArrow)
                return true;
            if (keyCode == Keys.DownArrow)
                return true;
            return false;
        };
        /**
         * Invoke the Ajax search for suggestions
         */
        AutoComplete.prototype.search = function (term) {
            var ajaxSettings = {
                url: this.url,
                dataType: "json",
                cache: true,
                data: {
                    word: term
                }
            };
            return $.ajax(ajaxSettings);
        };
        /**
         * Parse the SLI response and return the suggestions array.
         */
        AutoComplete.prototype.processResponse = function (response) {
            var _this = this;
            var ss = response.results.search_suggestions;
            if (!ss)
                return null;
            if (ss.department_suggestions)
                $.each(ss.department_suggestions, function (index, item) { return _this.addDepartment(item); });
            if (ss.suggestions) {
                if (this.haveItemsInList()) {
                    this.addDivider();
                    this.addSearchesTitle();
                }
                $.each(ss.suggestions, function (index, text) { return _this.addSuggestion(text); });
            }
        };
        //bloomreach
        /**
         * Invoke the Ajax search for suggestions
         */
        AutoComplete.prototype.brsearch = function (term) {
            var bruid = this.recentSearches.brUIDCookie;
            var requestID = new Date().getTime();
            var viewId = Next.Settings.Channel.BloomReachAutoSuggestViewIdEnabled ? (Next.Settings.Channel.BloomReachCountryCode ? "&view_id=" + Next.Settings.Channel.BloomReachCountryCode : "") : ""; // View_id is a parameter that needs to be present for Intl but not for UK
            var url = Next.Settings.Channel.BloomReachAutosuggestDomain +
                "?account_id=" + Next.Settings.Channel.BloomReachAccountID +
                "&auth_key=" +
                "&domain_key=" + Next.Settings.Channel.BloomReachDomainKey +
                viewId +
                "&request_id=" + requestID +
                "&_br_uid_2=" + bruid +
                "&request_type=suggest" +
                "&q=" + term;
            var ajaxSettings = {
                url: url,
                dataType: "json"
            };
            return $.ajax(ajaxSettings);
        };
        /**
         */
        AutoComplete.prototype.brProcessResponse = function (response) {
            var _this = this;
            var ss = response.response;
            if (!ss)
                return null;
            if (ss.suggestions) {
                if (this.haveItemsInList()) {
                    this.addDivider();
                    this.addSearchesTitle();
                }
                ss.suggestions = ss.suggestions.slice(0, 10);
                $.each(ss.suggestions, function (index, s) { return _this.addSuggestion(s.q); });
            }
        };
        /**
         * Simulate a click on the currently selected item
         */
        AutoComplete.prototype.selectItem = function () {
            var $selected = this.$dropdown.find('li.selected');
            if (!$selected.length)
                return true;
            $selected.click();
            return false;
        };
        AutoComplete.prototype.keyUpDown = function (keyCode) {
            var $list = this.$dropdown.find('li.search-item');
            var listLength = $list.length;
            if (listLength == 0)
                return;
            if (listLength == 1) {
                $list.first().addClass('selected');
                return;
            }
            var $selected = $list.filter('.selected');
            var index = $list.index($selected);
            $selected.removeClass('selected');
            if (keyCode == Keys.UpArrow) {
                if (index-- < 0)
                    index = listLength - 1;
            }
            if (keyCode == Keys.DownArrow) {
                if (++index == listLength)
                    index = 0;
            }
            var $li = $list.eq(index);
            $li.addClass('selected');
            this.input.value = $li.data("term");
        };
        /**
         * Clear the selected list item
         */
        AutoComplete.prototype.clearSelected = function () {
            var $item = this.$dropdown.find('li.selected');
            $item.removeClass("selected");
        };
        /**
         * Add the heading in the list for the recently searched
         */
        AutoComplete.prototype.addRecentHeading = function () {
            var _this = this;
            var $li = $("<li>")
                .addClass("recent-heading")
                .text(nxt.jstranslations.autocomplete.recentsearches || "Your Recent Searches...")
                .append("<a>")
                .find("a")
                .addClass("clear-recent")
                .attr("href", "#")
                .click(function () { return _this.deleteRecent(); })
                .text(nxt.jstranslations.common.clear || "Clear")
                .end();
            this.$dropdown.append($li);
        };
        /**
         * Add the divider in the list
         */
        AutoComplete.prototype.addDivider = function () {
            var $li = $("<li>")
                .addClass("divider");
            this.$dropdown.append($li);
        };
        /**
         * Add the title of the search section in the list
         */
        AutoComplete.prototype.addSearchesTitle = function () {
            var $li = $("<li>")
                .addClass("title")
                .text(nxt.jstranslations.autocomplete.populasearches || "Popular Searches");
            this.$dropdown.append($li);
        };
        /**
         * Get the recently searched cookies and add them to the dropdown list
         */
        AutoComplete.prototype.loadRecentSearches = function () {
            var _this = this;
            this.addRecentHeading();
            var kc = this.recentSearches.load();
            $.each(kc, function (i, s) {
                if (i < Next.FeatureManager.FeatureSettings.Search.RecentSearchesSaved) {
                    _this.addRecent(s);
                }
            });
        };
        /**
         * Refresh the state of the search drop down
         */
        AutoComplete.prototype.refresh = function () {
            if (this.haveItemsInList())
                this.showDropdown();
            else
                this.hideDropdown();
        };
        AutoComplete.prototype.openDropdown = function () {
            this.refresh();
        };
        AutoComplete.prototype.delayCloseDropdown = function () {
            var _this = this;
            // delay is visually better but also necessary to make sure the "clear" event is not squashed
            setTimeout(function () { return _this.hideDropdown(100); }, 150);
        };
        AutoComplete.prototype.hideDropdown = function (duration) {
            duration ? this.$dropdownContainer.hide(duration, 'swing') : this.$dropdownContainer.hide();
            $(this.input).removeClass('open');
        };
        AutoComplete.prototype.showDropdown = function () {
            this.$dropdownContainer.show();
            $(this.input).addClass('open');
        };
        /**
         * Remove leading, trailing and double spaces.
         */
        AutoComplete.prototype.clean = function (term) {
            term = term.replace(/^[\s]*/, '').replace(/[\s]*$/, '').replace(/ +/, ' ');
            return term;
        };
        /**
         * The form is being submitted
         */
        AutoComplete.prototype.searchSubmit = function () {
            this.input.value = this.clean(this.input.value);
            if (!this.input.value)
                return;
            // If filter is set recent searches have already been added.
            if (this.filter.value)
                return;
            var suggestion = {
                term: this.input.value,
                af: '',
                name: ''
            };
            this.recentSearches.add(suggestion);
        };
        /**
         * Set the search input control to the last searched term if on a search page.
         */
        AutoComplete.prototype.setLastSearch = function () {
            var lastSearch = this.recentSearches.getLastSearch();
            if (!lastSearch) {
                this.loadRecentSearches();
                return;
            }
            if (this.onResultsPage()) {
                this.input.value = lastSearch;
                return;
            }
            this.recentSearches.clearLastSearch();
            this.loadRecentSearches();
        };
        /**
         * return true if this is the search results page.
         */
        AutoComplete.prototype.onResultsPage = function () {
            // To do when we can determine if we are a search results page.
            return false;
        };
        /**
         * Remove all items from the list
         */
        AutoComplete.prototype.clearDropdown = function () {
            this.$dropdown.empty();
        };
        AutoComplete.prototype.deleteRecent = function () {
            this.recentSearches.clear();
            this.clearDropdown();
        };
        AutoComplete.prototype.dropdownItemSelected = function (item) {
            this.input.value = item;
            this.$form.submit();
        };
        AutoComplete.prototype.dropdownDepartmentItemSelected = function (item) {
            this.input.value = item.term;
            this.filter.value = item.af;
            this.recentSearches.add(item);
            this.$form.submit();
        };
        /**
         * Add a department suggestion into the dropdown list.
         */
        AutoComplete.prototype.addDepartment = function (item) {
            var _this = this;
            var display = this.surroundTextThatMatchesInput(item.term);
            display += "<span class='dept-name'>" + nxt.stringFormat(nxt.jstranslations.autocomplete.autocompleteIn || "in", item.name) + "</span>";
            var $li = $("<li/>", { "html": display, "class": "search-item" })
                .click(function (e) {
                _this.dropdownDepartmentItemSelected(item);
            });
            $li.data("term", item.term);
            this.$dropdown.append($li);
        };
        /**
         * Add a search suggestion into the dropdown list.
         */
        AutoComplete.prototype.addSuggestion = function (text) {
            var _this = this;
            var display = this.surroundTextThatMatchesInput(text);
            var $li = $("<li/>", { "html": display, "class": "search-item" })
                .click(function (e) {
                _this.dropdownItemSelected(text);
            });
            $li.data("term", text);
            this.$dropdown.append($li);
        };
        /**
         * Add a recent search item into the dropdown list
         */
        AutoComplete.prototype.addRecent = function (item) {
            if (item.name) {
                this.addDepartment(item);
            }
            else if (item.term) {
                this.addSuggestion(item.term);
            }
        };
        /**
            * Surround the portion of the text that matches the input with a span
            */
        AutoComplete.prototype.surroundTextThatMatchesInput = function (suggestion) {
            var input = this.clean(this.input.value);
            var term = input.replace(/ /g, "|");
            var re = new RegExp(term, 'ig');
            var display = suggestion.replace(re, "<span class='typed-text'>$&</span>");
            return display;
        };
        AutoComplete.prototype.haveRecentSearches = function () {
            return this.recentSearches.any();
        };
        AutoComplete.prototype.haveItemsInList = function () {
            return this.$dropdown.find('li.search-item').length > 0;
        };
        AutoComplete.prototype.haveInput = function () {
            return this.input.value.length > 0;
        };
        return AutoComplete;
    }());
    var EnrichedAutoComplete = /** @class */ (function () {
        function EnrichedAutoComplete(baseAddress, recentSearchesSaved, suggestionsEnabled, autoCompleteCharCountTrigger, autoCompleteUrl, hideIfNoResults) {
            var _this = this;
            this.searchTimeoutId = 0;
            this.recentSearches = new KeyCookies(recentSearchesSaved);
            this.eventLogger = new EventLogger();
            this.input = document.getElementById(DomSelector.Input);
            this.filter = document.getElementById('search-af');
            this.$form = $(DomSelector.Form);
            this.$dropdownContainer = this.$form.find('.search-dropdown-container');
            this.$currentSearchHeading = this.$form.find('.search-dropdown-products__heading');
            this.$dropdown = this.$form.find('.search');
            this.$dropdownProducts = this.$form.find('.search-dropdown-products__list');
            this.searchCache = {};
            this.isOpening = false;
            this.autoCompleteTermLimit = 10;
            this.autoCompleteCharCountTrigger = autoCompleteCharCountTrigger;
            this.hideIfNoResults = hideIfNoResults;
            this.currentSearchTerm = document.getElementById(DomSelector.CurrentSearchTerm) ? document.getElementById(DomSelector.CurrentSearchTerm).value : '';
            if (baseAddress.length > 0 && baseAddress.charAt(baseAddress.length - 1) !== "/")
                baseAddress += "/";
            this.url = baseAddress + autoCompleteUrl;
            this.$form.submit(function (e) { return _this.searchSubmit(); });
            var $input = $(this.input);
            $input.on('focus', function (e) {
                if (!_this.isOpening) {
                    _this.openDropdown();
                }
            });
            // In case have focus but dropdown closed e.g. by hover over main navigation
            $input.on('click', function (e) {
                _this.isOpening = true;
                _this.openDropdown();
            });
            // Hide autosuggest if user clicks anywhere other than the input field or enriched auto complete dropdown
            $(document).click(function (e) {
                var $target = $(e.target);
                if (_this.input !== document.activeElement && 0 == $target.closest(DomSelector.Form).length) {
                    _this.hideDropdown(100);
                }
                else {
                    // If user has clicked on the cover
                    if ($target.hasClass('search-dropdown-content-cover')) {
                        _this.hideDropdown(100);
                    }
                }
            });
            // Hide autosuggest if user presses escape
            $(document).keyup(function (e) {
                if (Keys.Escape == e.keyCode) {
                    _this.hideDropdown(100);
                }
            });
            this.setLastSearch();
            this.initClearSearchTextButton();
            this.initSelectionEvents();
            if (suggestionsEnabled) {
                this.initSuggestions();
            }
            else {
                this.initNoSuggestions();
            }
            this.manageEnrichedSuggestionsEnabledState();
        }
        /**
         * Use this to unload this class and all associated DOM items
         */
        EnrichedAutoComplete.prototype.destroy = function () {
            // Remove all events on input field
            $('#' + DomSelector.Input).off('click blur focus keyup keydown');
            // Remove items added to the DOM
            this.$dropdown.empty();
            this.$dropdownContainer.find($('.' + DomSelector.SearchDropdownCover)).remove();
            // Remove CSS Classes
            this.$dropdownContainer.removeClass(DomSelector.StateIsEnriched);
            this.$form.removeClass(DomSelector.StateIsEnriched);
        };
        /**
         * Initialise when suggestions are turned off
         */
        EnrichedAutoComplete.prototype.initNoSuggestions = function () {
            var _this = this;
            var inputText = this.clean(this.input.value);
            $(this.input).keyup(function (e) {
                // No change so return
                if (_this.clean(_this.input.value) === _this.clean(inputText)) {
                    return;
                }
                inputText = _this.clean(_this.input.value);
                // Ignore keys that can change the content but shouldn't close the dropdown
                if (_this.IgnoreKey(e.keyCode)) {
                    return;
                }
                _this.clearDropdown();
                if (!_this.canSearch(inputText) && !_this.isRecentMenu()) {
                    _this.loadRecentSearches();
                }
                _this.checkRecentView();
                _this.refresh();
            });
        };
        /**
         * Set up button to clear the search text.
         */
        EnrichedAutoComplete.prototype.initClearSearchTextButton = function () {
            var _this = this;
            var btn = this.$form.find('.clear-search-text');
            this.showOrHideClearSearchTextButton();
            btn.click(function (e) {
                _this.input.value = '';
                _this.showOrHideClearSearchTextButton();
                _this.clearDropdown();
                _this.loadRecentSearches();
                setTimeout(function () { return _this.input.focus(); }, 500);
            });
        };
        EnrichedAutoComplete.prototype.showOrHideClearSearchTextButton = function () {
            var btn = this.$form.find('.clear-search-text');
            var show = this.clean(this.input.value) !== '';
            show ? btn.addClass("visible") : btn.removeClass("visible");
        };
        /**
         * Initialise the suggestion searches
         */
        EnrichedAutoComplete.prototype.initSuggestions = function () {
            var _this = this;
            $(this.input).keyup(function (e) {
                var inputText = _this.clean(_this.input.value);
                // Ignore keys that can change the content but don't need to invoke a search
                if (_this.IgnoreKey(e.keyCode)) {
                    return;
                }
                _this.checkRecentView();
                if (!_this.canSearch(inputText)) {
                    clearTimeout(_this.searchTimeoutId);
                    _this.clearDropdown();
                    _this.loadRecentSearches();
                    _this.refresh();
                    return;
                }
                else {
                    // If we've exceeded the minimum character count trigger number then continue
                    _this.searchTerm(inputText, false);
                }
            });
            this.checkRecentView();
        };
        EnrichedAutoComplete.prototype.checkRecentView = function () {
            var inputText = this.clean($(this.input).val()), canSearch = this.canSearch(inputText);
            if (!canSearch) {
                this.$dropdownContainer.addClass(DomSelector.StateShowRecent);
                this.$dropdownContainer.removeClass(DomSelector.StateIsLoading);
                // If no recent then hide the dropdown
                var kc = this.recentSearches.load();
                if (0 === kc.length) {
                    this.$dropdownContainer.addClass(DomSelector.StateNoRecent);
                }
                else {
                    this.$dropdownContainer.removeClass(DomSelector.StateNoRecent);
                }
            }
            else {
                this.$dropdownContainer.removeClass(DomSelector.StateShowRecent);
                this.$dropdownContainer.removeClass(DomSelector.StateNoRecent);
            }
        };
        EnrichedAutoComplete.prototype.canSearch = function (term) {
            // Decides if a search should be performed or not
            return term.length > this.autoCompleteCharCountTrigger;
        };
        EnrichedAutoComplete.prototype.searchTerm = function (term, productsOnly, clearSelected) {
            var _this = this;
            if (clearSelected === void 0) { clearSelected = true; }
            this.searchInputText = term;
            this.showOrHideClearSearchTextButton();
            // Input changed so clear any selection
            if (clearSelected) {
                this.clearSelected();
            }
            this.resetCurrentSearchTitle();
            if (this.isRecentMenu()) {
                this.clearDropdown();
            }
            this.checkRecentView();
            // Restart timer
            clearTimeout(this.searchTimeoutId);
            // Cancel original ajax request
            if (this.searchAjaxRequest && this.searchAjaxRequest.readyState != 4) {
                this.searchAjaxRequest.abort();
            }
            if (this.searchCache[this.searchInputText]) {
                this.clearDropdown(productsOnly);
                this.brProcessResponse(this.searchCache[this.searchInputText], productsOnly);
                this.refresh();
            }
            else {
                if (!this.canSearch(this.searchInputText)) {
                    this.clearDropdown();
                    this.loadRecentSearches();
                    this.refresh();
                }
                else {
                    this.searchTimeoutId = setTimeout(function () {
                        _this.checkRecentView();
                        if (!_this.canSearch(_this.searchInputText)) {
                            _this.clearDropdown();
                            _this.loadRecentSearches();
                            _this.refresh();
                        }
                        else {
                            // If search has already been performed for this term then use cached results
                            if (Next.Settings.Channel.BloomReachSearchOverrideEnabled || (Next.Settings.Channel.BloomReachSearchEnabled &&
                                typeof _this.recentSearches.monetateSearchCookie != 'undefined' &&
                                _this.recentSearches.monetateSearchCookie.indexOf(Next.Settings.Cookie.MonetateCookieBloomReachValue) === 0)) {
                                _this.searchAjaxRequest = _this.brsearch(_this.searchInputText)
                                    .done(function (result) {
                                    _this.clearDropdown(productsOnly);
                                    // Save search to cache to prevent duplicate ajax queries
                                    _this.searchCache[_this.searchInputText] = result;
                                    _this.brProcessResponse(result, productsOnly);
                                    _this.refresh();
                                })
                                    .fail(function (xhr, status, error) {
                                    if ('abort' !== status) {
                                        // If ajax request fails then it could be due to adblocker
                                        _this.clearDropdown();
                                        _this.refresh();
                                    }
                                });
                            }
                        }
                    }, 100);
                }
            }
        };
        EnrichedAutoComplete.prototype.initSelectionEvents = function () {
            var _this = this;
            $(this.input).keydown(function (e) {
                switch (e.keyCode) {
                    case Keys.UpArrow:
                    case Keys.DownArrow:
                        e.preventDefault();
                        _this.keyUpDown(e.keyCode);
                        break;
                    case Keys.Enter:
                        return _this.selectItem();
                }
            });
        };
        /**
         * Which keys to ignore when search input has focus.
         */
        EnrichedAutoComplete.prototype.IgnoreKey = function (keyCode) {
            if (keyCode == Keys.UpArrow)
                return true;
            if (keyCode == Keys.DownArrow)
                return true;
            if (keyCode == Keys.Escape)
                return true;
            return false;
        };
        /**
         * Invoke the Ajax search for suggestions
         */
        EnrichedAutoComplete.prototype.search = function (term) {
            var ajaxSettings = {
                url: this.url,
                dataType: "json",
                cache: true,
                data: {
                    word: term
                }
            };
            return $.ajax(ajaxSettings);
        };
        /**
         * Parse the SLI response and return the suggestions array.
         */
        EnrichedAutoComplete.prototype.processResponse = function (response, productsOnly) {
            var _this = this;
            var ss = response.results.search_suggestions;
            if (!ss)
                return null;
            if (ss.department_suggestions) {
                $.each(ss.department_suggestions, function (index, item) { return _this.addDepartment(item); });
            }
            if (ss.suggestions) {
                // Add text suggestions
                $.each(ss.suggestions, function (index, text) { return _this.addSuggestion(text); });
            }
        };
        //bloomreach
        /**
         * Invoke the Ajax search for suggestions
         */
        EnrichedAutoComplete.prototype.brsearch = function (term) {
            var bruid = this.recentSearches.brUIDCookie;
            var requestID = new Date().getTime();
            var viewId = Next.Settings.Channel.BloomReachAutoSuggestViewIdEnabled ? (Next.Settings.Channel.BloomReachCountryCode ? "&view_id=" + Next.Settings.Channel.BloomReachCountryCode : "") : ""; // View_id is a parameter that needs to be present for Intl but not for UK
            var url = Next.Settings.Channel.BloomReachAutosuggestDomain +
                "?account_id=" + Next.Settings.Channel.BloomReachAccountID +
                "&auth_key=" +
                "&domain_key=" + Next.Settings.Channel.BloomReachDomainKey +
                viewId +
                "&request_id=" + requestID +
                "&_br_uid_2=" + bruid +
                "&request_type=suggest" +
                "&q=" + term;
            var ajaxSettings = {
                url: url,
                dataType: "json"
            };
            return $.ajax(ajaxSettings);
        };
        /**
         * Parse the BR response and return the suggestions array.
         */
        EnrichedAutoComplete.prototype.brProcessResponse = function (response, productsOnly) {
            var _this = this;
            var ss = response.response;
            var resultsCount = 0;
            if (!ss)
                return null;
            if (ss.suggestions) {
                resultsCount = ss.suggestions.length;
                if (resultsCount > 0) {
                    // Add suggestions to list
                    if (!productsOnly) {
                        ss.suggestions = ss.suggestions.slice(0, this.autoCompleteTermLimit);
                        $.each(ss.suggestions, function (index, s) { return _this.addSuggestion(s.q); });
                    }
                    if (ss.products) {
                        // Add product suggestions
                        $.each(ss.products, function (index, product) { return _this.addProductSuggestion(product); });
                    }
                    this.addProductsSeeAllLink(ss.q);
                }
            }
            this.addCurrentSearchTitle(this.searchInputText, resultsCount);
        };
        /**
         * Simulate a click on the currently selected item
         */
        EnrichedAutoComplete.prototype.selectItem = function () {
            var $selected = this.$dropdown.find('li.selected');
            if (!$selected.length)
                return true;
            this.input.value = $selected.text();
            return false;
        };
        EnrichedAutoComplete.prototype.keyUpDown = function (keyCode) {
            var $list = this.$dropdown.find('li.' + DomSelector.SearchItem);
            var listLength = $list.length;
            if (listLength == 0)
                return;
            if (listLength == 1) {
                $list.first().addClass(DomSelector.StateSelected);
                if (!this.isRecentMenu()) {
                    this.searchTerm($li.first().text(), true, false);
                }
                return;
            }
            var $selected = $list.filter('.selected');
            var index = $list.index($selected);
            $selected.removeClass(DomSelector.StateSelected);
            if (keyCode == Keys.UpArrow) {
                if (index-- < 0)
                    index = listLength - 1;
            }
            if (keyCode == Keys.DownArrow) {
                if (++index == listLength)
                    index = 0;
            }
            var $li = $list.eq(index);
            $li.addClass(DomSelector.StateSelected);
            if (!this.isRecentMenu()) {
                this.searchTerm($li.text(), true, false);
            }
        };
        /**
         * Clear the selected list item
         */
        EnrichedAutoComplete.prototype.clearSelected = function () {
            var $item = this.$dropdown.find('li.selected');
            $item.removeClass(DomSelector.StateSelected);
        };
        /**
         * Add the heading in the list for the recently searched
         */
        EnrichedAutoComplete.prototype.addRecentHeading = function () {
            var _this = this;
            var $li = $("<li>")
                .addClass(DomSelector.RecentHeading)
                .text(nxt.jstranslations.autocomplete.recentsearches || "Your Recent Searches...")
                .append("<a>")
                .find("a")
                .addClass(DomSelector.ClearRecent)
                .attr("href", "#")
                .click(function () { return _this.deleteRecent(); })
                .text(nxt.jstranslations.common.clear || "Clear")
                .end();
            this.$dropdown.append($li);
        };
        /**
         * Add the divider in the list
         */
        EnrichedAutoComplete.prototype.addDivider = function () {
            var $li = $("<li>")
                .addClass(DomSelector.Divider);
            this.$dropdown.append($li);
        };
        /**
         * Add the title of the search section in the list
         */
        EnrichedAutoComplete.prototype.addSearchesTitle = function () {
            var $li = $("<li>")
                .addClass(DomSelector.Title)
                .text(nxt.jstranslations.autocomplete.populasearches || "Popular Searches");
            this.$dropdown.append($li);
        };
        /**
         * Add the title of the search in the products list header
         */
        EnrichedAutoComplete.prototype.addCurrentSearchTitle = function (query, resultsCount) {
            this.$dropdownContainer.removeClass(DomSelector.StateIsLoading);
            if (resultsCount > 0) {
                this.$currentSearchHeading.html(nxt.stringFormat(nxt.jstranslations.autocomplete.topResultsFor || "Top results for '{0}'", '<strong>' + query + '</strong>'));
            }
            else {
                this.$currentSearchHeading.html(nxt.stringFormat(nxt.jstranslations.autocomplete.noResultsFor || "No results found for '{0}'", '<strong>' + query + '</strong>'));
            }
        };
        /**
         * Add the title of the search in the products list header
         */
        EnrichedAutoComplete.prototype.resetCurrentSearchTitle = function () {
            this.$dropdownContainer.addClass(DomSelector.StateIsLoading);
            this.$currentSearchHeading.html(nxt.jstranslations.autocomplete.loading || "Loading..");
        };
        /**
         * Get the recently searched cookies and add them to the dropdown list
         */
        EnrichedAutoComplete.prototype.loadRecentSearches = function () {
            var _this = this;
            var kc = this.recentSearches.load();
            if (kc.length > 0) {
                this.addRecentHeading();
                $.each(kc, function (i, s) { return _this.addRecent(s); });
            }
        };
        /**
         * Refresh the state of the search drop down
         */
        EnrichedAutoComplete.prototype.refresh = function () {
            var _this = this;
            this.manageEnrichedSuggestionsEnabledState();
            if (this.haveItemsInList()) {
                this.$dropdownContainer.show();
                this.$dropdownContainer.addClass(DomSelector.Open);
                $(this.input).addClass(DomSelector.Open);
                this.$dropdownContainer.removeClass(DomSelector.StateNoResults);
            }
            else {
                this.$dropdownContainer.addClass(DomSelector.StateNoResults);
            }
            // To prevent double openings
            setTimeout(function () { return _this.isOpening = false; }, 10);
            this.checkRecentView();
        };
        EnrichedAutoComplete.prototype.manageEnrichedSuggestionsEnabledState = function () {
            this.$dropdownContainer.addClass(DomSelector.StateIsEnriched);
            this.$form.addClass(DomSelector.StateIsEnriched);
            if (this.hideIfNoResults) {
                this.$dropdownContainer.addClass(DomSelector.StateHideIfNoResults);
            }
            if (0 === this.$dropdownContainer.find('.' + DomSelector.SearchDropdownCover).length) {
                this.$dropdownContainer.append($('<div class="' + DomSelector.SearchDropdownCover + '"></div>'));
            }
        };
        EnrichedAutoComplete.prototype.openDropdown = function () {
            this.refresh();
        };
        EnrichedAutoComplete.prototype.hideDropdown = function (duration) {
            duration ? this.$dropdownContainer.hide(duration, 'swing') : this.$dropdownContainer.hide();
            this.$dropdownContainer.removeClass(DomSelector.Open);
            $(this.input).removeClass(DomSelector.Open);
        };
        /**
         * Remove leading, trailing and double spaces.
         */
        EnrichedAutoComplete.prototype.clean = function (term) {
            term = term.replace(/^[\s]*/, '').replace(/[\s]*$/, '').replace(/ +/, ' ').replace(/<[^>]*>?/gm, '');
            return term;
        };
        /**
         * The form is being submitted
         */
        EnrichedAutoComplete.prototype.searchSubmit = function () {
            var inputText = this.clean(this.input.value);
            if (!inputText || 0 === inputText.length) {
                return;
            }
            // If filter is set recent searches have already been added.
            if (this.filter.value) {
                return;
            }
            var suggestion = {
                term: inputText,
                af: '',
                name: ''
            };
            this.recentSearches.add(suggestion);
        };
        /**
         * Set the search input control to the last searched term if on a search page.
         */
        EnrichedAutoComplete.prototype.setLastSearch = function () {
            var lastSearch = this.recentSearches.getLastSearch();
            if (!lastSearch) {
                this.loadRecentSearches();
                return;
            }
            if (this.onResultsPage()) {
                this.input.value = lastSearch;
                return;
            }
            this.recentSearches.clearLastSearch();
            this.loadRecentSearches();
        };
        /**
         * return true if this is the search results page.
         */
        EnrichedAutoComplete.prototype.onResultsPage = function () {
            // To do when we can determine if we are a search results page.
            return false;
        };
        /**
         * Remove all items from the list
         */
        EnrichedAutoComplete.prototype.clearDropdown = function (productsOnly) {
            if (productsOnly === void 0) { productsOnly = false; }
            if (!productsOnly) {
                this.$dropdown.empty();
            }
            this.$dropdownProducts.empty();
        };
        EnrichedAutoComplete.prototype.deleteRecent = function () {
            this.recentSearches.clear();
            this.clearDropdown();
            this.hideDropdown();
            return false;
        };
        EnrichedAutoComplete.prototype.dropdownItemSelected = function (item) {
            // If text in input box is the same as current search then simply
            // hide the overlay (https://next-tfs.next-uk.next.loc/Directory/NextOnline/_workitems/edit/398050)
            if (item.toLowerCase() === this.currentSearchTerm.toLowerCase()) {
                this.hideDropdown(100);
                return;
            }
            this.input.value = item;
            this.$form.submit();
        };
        EnrichedAutoComplete.prototype.dropdownDepartmentItemSelected = function (item) {
            this.input.value = item.term;
            this.filter.value = item.af;
            this.recentSearches.add(item);
            this.$form.submit();
        };
        /**
         * Add a department suggestion into the dropdown list.
         */
        EnrichedAutoComplete.prototype.addDepartment = function (item) {
            var _this = this;
            var display = this.surroundTextThatMatchesInput(item.term);
            display += "<span class='dept-name'>" + nxt.stringFormat(nxt.jstranslations.autocomplete.autocompleteIn || "in", item.name) + "</span>";
            var $li = $("<li/>", { "html": display, "class": DomSelector.SearchItem })
                .click(function (e) {
                _this.dropdownDepartmentItemSelected(item);
            });
            this.$dropdown.append($li);
        };
        /**
         * Add a search suggestion into the dropdown list.
         */
        EnrichedAutoComplete.prototype.addSuggestion = function (text) {
            var _this = this;
            var display = this.surroundTextThatMatchesInput(text);
            var $li = $("<li/>", { "html": display, "class": DomSelector.SearchItem })
                .click(function (e) {
                _this.eventLogger.log(_this.input.value, text, 'List');
                _this.dropdownItemSelected(text);
            });
            $li.hover(function (e) {
                if (!_this.isRecentMenu()) {
                    _this.searchTerm(text, true);
                }
            });
            this.$dropdown.append($li);
        };
        /**
         * Add a search suggestion into the dropdown list.
         */
        EnrichedAutoComplete.prototype.addProductSuggestion = function (product) {
            var _this = this;
            var productPrice = product.sale_price;
            var formattedProductPrice = '';
            // Rules
            // 1) If number is 0.01 conver to 0 (free) - this is due to a limitation of BloomReach - it doesn't allow zero numbers
            // 2) If number has decimal point ensure it's always 2 fixed points
            // 3) If number is a round number then ensure no decimal points are used
            // 4) If number is greater than 999 ensure it has a comma
            if (0.01 == productPrice) {
                formattedProductPrice = '0';
            }
            else {
                if (Math.ceil(parseFloat(productPrice.toString())).toFixed(2) > Math.floor(parseFloat(productPrice.toString())).toFixed(2)) {
                    formattedProductPrice = this.numberWithCommas(parseFloat(productPrice.toString()).toFixed(2));
                }
                else {
                    formattedProductPrice = this.numberWithCommas(Math.floor(parseFloat(productPrice.toString())).toFixed(0));
                }
            }
            var $productTemplate = "\t\t<a class=\"search-dropdown-products__product\" href=\"" + product.url + "\"> \t\t    <span class=\"search-dropdown-products__product-inner\"> \t\t    <span class=\"search-dropdown-products__product-img\"> \t\t    <img alt=\"" + product.title + "\" src=\"" + product.thumb_image.replace('AltItemZoom', 'search/224x336') + "\" /> \t\t    </span> \t\t    <p class=\"search-dropdown-products__product-title\">" + product.title + "</p> \t\t    <span class=\"search-dropdown-products__product-price\">" + Next.Settings.Channel.CurrencySymbol + formattedProductPrice + "</span> \t\t    </span> \t\t</a> \t    ";
            var $product = $($productTemplate).click(function (e) {
                var currentSearch = _this.$currentSearchHeading.find('strong').text();
                _this.eventLogger.log(_this.input.value, currentSearch, 'Image');
            });
            this.$dropdownProducts.append($product);
        };
        EnrichedAutoComplete.prototype.numberWithCommas = function (price) {
            return price.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        };
        /**
         * Add a link to "See all results" beneath the product lists
         */
        EnrichedAutoComplete.prototype.addProductsSeeAllLink = function (query) {
            var _this = this;
            var $link = $("<a/>", { "html": (nxt.jstranslations.autocomplete.seeAllResultsLink || "See All Results"), "class": "search-dropdown-products__see-all", "href": "#" })
                .click(function (e) {
                e.preventDefault();
                _this.dropdownItemSelected(query);
            });
            this.$dropdownProducts.append($link);
        };
        /**
         * Add a recent search item into the dropdown list
         */
        EnrichedAutoComplete.prototype.addRecent = function (item) {
            if (item.name)
                this.addDepartment(item);
            else
                this.addSuggestion(item.term);
        };
        /**
            * Surround the portion of the text that matches the input with a span
            */
        EnrichedAutoComplete.prototype.surroundTextThatMatchesInput = function (suggestion) {
            var input = this.clean(this.input.value);
            var term = input.replace(/ /g, "|");
            var re = new RegExp(term, 'ig');
            var display = suggestion.replace(re, "<span class='typed-text'>$&</span>");
            return display;
        };
        EnrichedAutoComplete.prototype.isRecentMenu = function () {
            return this.$dropdown.find('.' + DomSelector.RecentHeading).length > 0;
        };
        EnrichedAutoComplete.prototype.haveItemsInList = function () {
            return this.$dropdown.find('li.' + DomSelector.SearchItem).length > 0;
        };
        return EnrichedAutoComplete;
    }());
    var EventLogger = /** @class */ (function () {
        function EventLogger() {
        }
        EventLogger.prototype.log = function (eTerm, eSelected, eType) {
            // Safety checks
            if ('undefined' !== typeof dataLayer && dataLayer.length > 0) {
                var logDetail = {
                    'autoSearchTerm': eTerm,
                    'autoSearchSelected': eSelected,
                    'autoSearchType': eType // 'List' or 'Image'
                };
                dataLayer.push({
                    'event': 'enriched-auto-complete-search',
                    'detail': logDetail
                });
            }
            else {
                return;
            }
        };
        return EventLogger;
    }());
    var KeyCookies = /** @class */ (function () {
        function KeyCookies(maxSave) {
            this.recentSearches = [];
            this.maxSave = maxSave;
            this.initCookies();
        }
        KeyCookies.prototype.initCookies = function () {
            if (!this.maxSave)
                return;
            var cookie = this.getCookie('recentSearches');
            if (cookie)
                this.recentSearches = JSON.parse(cookie);
            var searchCookie = this.getCookie(Next.Settings.Cookie.MonetateCookieName);
            if (searchCookie)
                this.monetateSearchCookie = searchCookie;
            var bruidCookie = this.getCookie('_br_uid_2');
            if (bruidCookie)
                this.brUIDCookie = bruidCookie;
            var backToNextBagCookie = Next.Settings.Cookie.BackToNextCookieName;
            if (backToNextBagCookie)
                this.backToNextBagCookieName = backToNextBagCookie;
            var backToNextUrlCookieName = Next.Settings.Cookie.BackToNextURLCookieName;
            if (backToNextUrlCookieName)
                this.backToNextUrlCookieName = Next.Settings.Cookie.BackToNextURLCookieName;
        };
        KeyCookies.prototype.getCookie = function (value) {
            var cookie = '';
            var c = document.cookie.split('; ');
            $.each(c, function (i, s) {
                var kv = s.split('=');
                if (kv[0] == value)
                    cookie = kv[1];
            });
            return decodeURIComponent(cookie);
        };
        KeyCookies.prototype.load = function () {
            return this.recentSearches;
        };
        KeyCookies.prototype.any = function () {
            return this.recentSearches.length > 0;
        };
        /**
         * Add a new search term to the recent search list or if existing term move to top of list
         */
        KeyCookies.prototype.add = function (suggestion) {
            this.setLastSearch(suggestion.term);
            var name = suggestion.name; // department
            var af = suggestion.af;
            var term = suggestion.term.toLowerCase();
            var list = [suggestion];
            $.each(this.recentSearches, function (index, item) {
                if (item.term.toLowerCase() != term || item.name != name)
                    list.push(item);
            });
            this.recentSearches = list.slice(0, this.maxSave);
            var cookie = JSON.stringify(this.recentSearches);
            var dt = new Date();
            dt.setMonth(dt.getMonth() + 1);
            var expires = "; expires=" + dt.toUTCString();
            document.cookie = "recentSearches=" + encodeURIComponent(cookie) + "; path=/" + expires;
        };
        /**
         * Cache the last searched term.
         */
        KeyCookies.prototype.setLastSearch = function (term) {
            document.cookie = "lastSearch=" + encodeURIComponent(term) + "; path=/";
        };
        KeyCookies.prototype.getLastSearch = function () {
            return this.getCookie('lastSearch');
        };
        KeyCookies.prototype.clearLastSearch = function () {
            document.cookie = "lastSearch=; path=/; expires = Thu, 01 Jan 1970 00:00:00 GMT";
        };
        KeyCookies.prototype.clear = function () {
            document.cookie = "recentSearches=; path=/; expires = Thu, 01 Jan 1970 00:00:00 GMT";
            this.recentSearches.length = 0;
        };
        return KeyCookies;
    }());
    var Manager = /** @class */ (function () {
        function Manager() {
            var enabled = false, enrichedSuggestionsEnabled = false, autoCompleteCharCountTrigger = 0, autoSearchRecentCount = 12, hideIfNoResults = false, autoCompleteUrl = 'v1/gb/en-gb/autocomplete';
            try {
                var searchFeature = Next.FeatureManager.FeatureSettings.Search;
                var baseAddress = searchFeature.BaseAddress;
                var suggestionsEnabled = Next.Settings.Channel.SearchAutoComplete;
                var recentSearchesSaved = searchFeature.RecentSearchesSaved;
                var autoCompleteOverrideSwitch = Next.Settings.Channel.AutoCompleteDisabledOverride;
                enabled = suggestionsEnabled || recentSearchesSaved > 0;
                if (autoCompleteOverrideSwitch && enabled)
                    enabled = false;
                enrichedSuggestionsEnabled = Next.Settings.Channel.BloomReachEnrichedAutoSearchEnabled || enrichedSuggestionsEnabled;
                autoCompleteCharCountTrigger = Next.Settings.Channel.BloomReachEnrichedAutoSearchCharCountTrigger || autoCompleteCharCountTrigger;
                autoSearchRecentCount = Next.Settings.Channel.BloomReachEnrichedAutoSearchRecentCount || autoSearchRecentCount;
                autoCompleteUrl = Next.Settings.Channel.BloomReachAutoCompleteUrl || autoCompleteUrl;
                hideIfNoResults = Next.Settings.Channel.BloomReachEnrichedAutoSearchHideIfNoResults || hideIfNoResults;
                recentSearchesSaved = recentSearchesSaved;
            }
            catch (e) {
                ConsoleLog("'Feature Manager' search features not configured. ");
            }
            if (enabled && Manager.isSearchOnPage()) {
                if (enrichedSuggestionsEnabled) {
                    this.enrichedAutoComplete = new EnrichedAutoComplete(baseAddress, autoSearchRecentCount, suggestionsEnabled, autoCompleteCharCountTrigger, autoCompleteUrl, hideIfNoResults);
                }
                else {
                    this.autoComplete = new AutoComplete(baseAddress, recentSearchesSaved, suggestionsEnabled, autoCompleteUrl);
                }
            }
            this.setupEnhanced();
        }
        Manager.isSearchOnPage = function () {
            return $(DomSelector.Form).length !== 0;
        };
        Manager.prototype.setupEnhanced = function () {
            var _this = this;
            // - In order to trigger
            //   $(document).trigger('autocomplete.enableEnhanced');
            $(document).on('autocomplete.enableEnhanced', function (e) {
                if (!Next.Settings.Channel.BloomReachEnrichedAutoSearchEnabled) {
                    if (_this.autoComplete) {
                        _this.autoComplete.destroy();
                        delete _this.autoComplete;
                        Next.Settings.Channel.BloomReachEnrichedAutoSearchCharCountTrigger = 2;
                        Next.Settings.Channel.BloomReachEnrichedAutoSearchRecentCount = 12;
                        Next.Settings.Channel.BloomReachEnrichedAutoSearchEnabled = true;
                        Next.SearchManager = new Search.Manager();
                    }
                }
            });
            // - In order to trigger
            //   $(document).trigger('autocomplete.disableEnhanced');
            $(document).on('autocomplete.disableEnhanced', function (e) {
                if (Next.Settings.Channel.BloomReachEnrichedAutoSearchEnabled) {
                    if (_this.enrichedAutoComplete) {
                        _this.enrichedAutoComplete.destroy();
                        delete _this.enrichedAutoComplete;
                        Next.Settings.Channel.BloomReachEnrichedAutoSearchEnabled = false;
                        Next.SearchManager = new Search.Manager();
                    }
                }
            });
        };
        return Manager;
    }());
    Search.Manager = Manager;
})(Search || (Search = {}));
$(document).on("featureSettingsReady", function () {
    Next.SearchManager = new Search.Manager();
});
//# sourceMappingURL=autocomplete.js.map;
$(document).on("featureSettingsReady", function () {
    SetRecentlyViewedDisplay();
 });;
;(function(factory) {
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    }
    else if (typeof exports === 'object') {
        module.exports = factory(require("jquery"));
    }
    else {
        //factory(jQuery);
    }
}
(function($) {
    "use strict";

    var pluginName = "tinyscrollbar"
    ,   defaults = {
            axis : 'y'//axis
        ,   wheel : true
        ,   wheelSpeed : 20//wheel
        ,   wheelLock : true//lockscroll
        ,   touchLock : true
        ,   trackSize : false//size
        ,   thumbSize : false//sizethumb
        ,   thumbSizeMin : 20
        }
    ;

    function Plugin($container, options) {
        

        /**
         * The options of the carousel extend with the defaults.
         *
         * @property options
         * @type Object
         */
        this.options = $.extend({}, defaults, options);
        
        /**
         * @property _defaults
         * @type Object
         * @private
         * @default defaults
         */
        this._defaults = defaults;

        /**
         * @property _name
         * @type String
         * @private
         * @final
         * @default 'tinyscrollbar'
         */
        this._name = pluginName;

        var self = this
        ,   $viewport = $container.find(".viewport")
        ,   $overview = $container.find(".overview")
        ,   $scrollbar = $container.find(".scrollbar")
        ,   $track = $scrollbar.find(".track")
        ,   $thumb = $scrollbar.find(".thumb")

        ,   hasTouchEvents = ("ontouchstart" in document.documentElement)
        ,   wheelEvent = "onwheel" in document.createElement("div") ? "wheel" : // Modern browsers support "wheel"
                         document.onmousewheel !== undefined ? "mousewheel" : // Webkit and IE support at least "mousewheel"
                         "DOMMouseScroll" // let's assume that remaining browsers are older Firefox
        ,   isHorizontal = this.options.axis === 'x'
        ,   sizeLabel = isHorizontal ? "width" : "height"
        ,   posiLabel = isHorizontal ? "left" : "top"

        ,   mousePosition = 0
        ;

        /**
         * The position of the content relative to the viewport.
         *
         * @property contentPosition
         * @type Number
         */
        this.contentPosition = 0;

        /**
         * The height or width of the viewport.
         *
         * @property viewportSize
         * @type Number
         */
        this.viewportSize = 0;

        /**
         * The height or width of the content.
         *
         * @property contentSize
         * @type Number
         */
        this.contentSize = 0;

        /**
         * The ratio of the content size relative to the viewport size.
         *
         * @property contentRatio
         * @type Number
         */
        this.contentRatio = 0;

        /**
         * The height or width of the content.
         *
         * @property trackSize
         * @type Number
         */
        this.trackSize = 0;

        /**
         * The size of the track relative to the size of the content.
         *
         * @property trackRatio
         * @type Number
         */
        this.trackRatio = 0;

        /**
         * The height or width of the thumb.
         *
         * @property thumbSize
         * @type Number
         */
        this.thumbSize = 0;

        /**
         * The position of the thumb relative to the track.
         *
         * @property thumbPosition
         * @type Number
         */
        this.thumbPosition = 0;

        /**
         * Will be true if there is content to scroll.
         *
         * @property hasContentToSroll
         * @type Boolean
         */
        this.hasContentToSroll = false;

        /**
         * @method _initialize
         * @private
         */
        function _initialize() {
            self.update();
            _setEvents();

            return self;
        }

        /**
         * You can use the update method to adjust the scrollbar to new content or to move the scrollbar to a certain point.
         *
         * @method update
         * @chainable
         * @param {Number|String} [scrollTo] Number in pixels or the values "relative" or "bottom". If you dont specify a parameter it will default to top
         */
        this.update = function(scrollTo) {
            var sizeLabelCap = sizeLabel.charAt(0).toUpperCase() + sizeLabel.slice(1).toLowerCase();
            this.viewportSize = $viewport[0]['offset'+ sizeLabelCap];
            this.contentSize = $overview[0]['scroll'+ sizeLabelCap];
            this.contentRatio = this.viewportSize / this.contentSize;
            this.trackSize = this.options.trackSize || this.viewportSize;
            this.thumbSize = Math.min(this.trackSize, Math.max(this.options.thumbSizeMin, (this.options.thumbSize || (this.trackSize * this.contentRatio))));
            this.trackRatio = (this.contentSize - this.viewportSize) / (this.trackSize - this.thumbSize);
            this.hasContentToSroll = this.contentRatio < 1;

            $scrollbar.toggleClass("disable", !this.hasContentToSroll);

            switch (scrollTo) {
                case "bottom":
                    this.contentPosition = Math.max(this.contentSize - this.viewportSize, 0);
                    break;

                case "relative":
                    this.contentPosition = Math.min(Math.max(this.contentSize - this.viewportSize, 0), Math.max(0, this.contentPosition));
                    break;

                default:
                    this.contentPosition = parseInt(scrollTo, 10) || 0;
            }

            this.thumbPosition = this.contentPosition / this.trackRatio;

            _setCss();

            return self;
        };

        /**
         * @method _setCss
         * @private
         */
        function _setCss() {
            $thumb.css(posiLabel, self.thumbPosition);
            $overview.css(posiLabel, -self.contentPosition);
            $scrollbar.css(sizeLabel, self.trackSize);
            $track.css(sizeLabel, self.trackSize);
            $thumb.css(sizeLabel, self.thumbSize);
        }

        /**
         * @method _setEvents
         * @private
         */
        function _setEvents() {
            if(hasTouchEvents) {
                $viewport[0].ontouchstart = function(event) {
                    if(1 === event.touches.length) {
                        event.stopPropagation();

                        _start(event.touches[0]);
                    }
                };
            }
            else {
                $thumb.bind("mousedown", function(event){
                    event.stopPropagation();
                    _start(event);
                });
                $track.bind("mousedown", function(event){
                    _start(event, true);
                });
            }

            $(window).resize(function() {
                self.update("relative");
            });

            if(self.options.wheel && window.addEventListener) {
                $container[0].addEventListener(wheelEvent, _wheel, false);
            }
            else if(self.options.wheel) {
                $container[0].onmousewheel = _wheel;
            }
        }

        /**
         * @method _isAtBegin
         * @private
         */
        function _isAtBegin() {
            return self.contentPosition > 0;
        }

        /**
         * @method _isAtEnd
         * @private
         */
        function _isAtEnd() {
            return self.contentPosition <= (self.contentSize - self.viewportSize) - 5;
        }

        /**
         * @method _start
         * @private
         */
        function _start(event, gotoMouse) {
            if(self.hasContentToSroll) {
                $("body").addClass("noSelect");

                mousePosition = gotoMouse ? $thumb.offset()[posiLabel] : (isHorizontal ? event.pageX : event.pageY);

                if(hasTouchEvents) {
                    document.ontouchmove = function(event) {
                        if(self.options.touchLock || _isAtBegin() && _isAtEnd()) {
                            event.preventDefault();
                        }
                        _drag(event.touches[0]);
                    };
                    document.ontouchend = _end;
                }
                else {
                    $(document).bind("mousemove", _drag);
                    $(document).bind("mouseup", _end);
                    $thumb.bind("mouseup", _end);
                    $track.bind("mouseup", _end);
                }

                _drag(event);
            }
        }

        /**
         * @method _wheel
         * @private
         */
        function _wheel(event) {
            if(self.hasContentToSroll) {
                // Trying to make sense of all the different wheel event implementations..
                //
                var evntObj = event || window.event
                ,   wheelDelta = -(evntObj.deltaY || evntObj.detail || (-1 / 3 * evntObj.wheelDelta)) / 40
                ,   multiply = (evntObj.deltaMode === 1) ? self.options.wheelSpeed : 1
                ;

                self.contentPosition -= wheelDelta * multiply * self.options.wheelSpeed;
                self.contentPosition = Math.min((self.contentSize - self.viewportSize), Math.max(0, self.contentPosition));
                self.thumbPosition = self.contentPosition / self.trackRatio;

                /**
                 * The move event will trigger when the carousel slides to a new slide.
                 *
                 * @event move
                 */
                $container.trigger("move");

                $thumb.css(posiLabel, self.thumbPosition);
                $overview.css(posiLabel, -self.contentPosition);

                if(self.options.wheelLock || _isAtBegin() && _isAtEnd()) {
                    evntObj = $.event.fix(evntObj);
                    evntObj.preventDefault();
                }
            }
        }

        /**
         * @method _drag
         * @private
         */
        function _drag(event) {
            if(self.hasContentToSroll) {
                var mousePositionNew = isHorizontal ? event.pageX : event.pageY
                ,   thumbPositionDelta = hasTouchEvents ? (mousePosition - mousePositionNew) : (mousePositionNew - mousePosition)
                ,   thumbPositionNew = Math.min((self.trackSize - self.thumbSize), Math.max(0, self.thumbPosition + thumbPositionDelta))
                ;

                self.contentPosition = thumbPositionNew * self.trackRatio;

                $container.trigger("move");

                $thumb.css(posiLabel, thumbPositionNew);
                $overview.css(posiLabel, -self.contentPosition);
            }
        }

        /**
         * @method _end
         * @private
         */
        function _end() {
            self.thumbPosition = parseInt($thumb.css(posiLabel), 10) || 0;

            $("body").removeClass("noSelect");
            $(document).unbind("mousemove", _drag);
            $(document).unbind("mouseup", _end);
            $thumb.unbind("mouseup", _end);
            $track.unbind("mouseup", _end);
            document.ontouchmove = document.ontouchend = null;
        }

        return _initialize();
    }

    /**
    * @class tinyscrollbar
    * @constructor
    * @param {Object} options
        @param {String} [options.axis='y'] Vertical or horizontal scroller? ( x || y ).
        @param {Boolean} [options.wheel=true] Enable or disable the mousewheel.
        @param {Boolean} [options.wheelSpeed=40] How many pixels must the mouswheel scroll at a time.
        @param {Boolean} [options.wheelLock=true] Lock default window wheel scrolling when there is no more content to scroll.
        @param {Number} [options.touchLock=true] Lock default window touch scrolling when there is no more content to scroll.
        @param {Boolean|Number} [options.trackSize=false] Set the size of the scrollbar to auto(false) or a fixed number.
        @param {Boolean|Number} [options.thumbSize=false] Set the size of the thumb to auto(false) or a fixed number
        @param {Boolean} [options.thumbSizeMin=20] Minimum thumb size.
    */
    $.fn[pluginName] = function(options) {
        return this.each(function() {
            if(!$.data(this, "plugin_" + pluginName)) {
                $.data(this, "plugin_" + pluginName, new Plugin($(this), options));
            }
        });
    };
}(jQuery)));
;
;
(function($) {
    "use strict";

    var methods = {};

    methods.update = function () {
        var $scrollbar_plugin = this.data("plugin_tinyscrollbar");//get the plugin
        var hasContent = false;
        var $newContent = $(this);//get the new modified html content
        var viewportSize = $newContent.find('.viewport')[0].offsetHeight;
        var overviewSize = $newContent.find('.overview')[0].scrollHeight;
        var contentRatio = viewportSize / overviewSize;
        var trackSize = viewportSize;
        var thumbSize = trackSize * contentRatio;
        var trackRatio = (overviewSize - viewportSize) / (trackSize - thumbSize);

        if (contentRatio < 1) {
            hasContent = true;
        }
        if (hasContent) {
            var maxPos = (trackSize - thumbSize) * trackRatio;
            var newPos = $scrollbar_plugin.contentPosition <= maxPos ? $scrollbar_plugin.contentPosition : maxPos;
            
            $scrollbar_plugin.update(newPos);
        }
        else {
            $scrollbar_plugin.update();
        };
    };

    methods.init = function (options) {
        /*Bespoke code to wrap the scrollbar div, which is needed for tinyscrollbar to work!*/
        this.children().wrapAll('<div class="viewport"><div class="overview"></div></div>');
        this.prepend('<div class="scrollbar"><div class="track"><div class="thumb"><div class="end"></div></div></div></div>');
        this.tinyscrollbar(this, options);
        //get the height of the bagDetail and add this to the parent as a data attribute
        //var totalHeight = 0;
        //$('.itemWrapper').each(function (i, elem) {
        //    totalHeight = totalHeight
        //        + $(elem).height()
        //        + parseInt($(elem).css('padding-top').toString().replace('px', ''))
        //        + parseInt($(elem).css('padding-bottom').toString().replace('px', ''))
        //        + parseInt($(elem).css('margin-top').toString().replace('px', ''))
        //        + parseInt($(elem).css('margin-bottom').toString().replace('px', ''));
        //});//each itemWrapper's height, padding and margin must be added together to obtain the height as padding isn't rendered in time!
            
        //$(this).attr('data-bagDetailHeight', totalHeight+20);
    };

    /**
    * @class tinyscrollbar
    * @constructor
    * @param {Object} options
        @param {String} [options.axis='y'] Vertical or horizontal scroller? ( x || y ).
        @param {Boolean} [options.wheel=true] Enable or disable the mousewheel.
        @param {Boolean} [options.wheelSpeed=40] How many pixels must the mouswheel scroll at a time.
        @param {Boolean} [options.wheelLock=true] Lock default window wheel scrolling when there is no more content to scroll.
        @param {Number} [options.touchLock=true] Lock default window touch scrolling when there is no more content to scroll.
        @param {Boolean|Number} [options.trackSize=false] Set the size of the scrollbar to auto(false) or a fixed number.
        @param {Boolean|Number} [options.thumbSize=false] Set the size of the thumb to auto(false) or a fixed number
        @param {Boolean} [options.thumbSizeMin=20] Minimum thumb size.
    */
    $.fn.NXtinyscrollbar = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        }
        if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        }
    };
}(jQuery));
;
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== 'function') {
                throw new TypeError('predicate must be a function');
            }
            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];
            // 5. Let k be 0.
            var k = 0;
            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return kValue.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return kValue;
                }
                // e. Increase k by 1.
                k++;
            }
            // 7. Return undefined.
            return undefined;
        },
        configurable: true,
        writable: true
    });
}
//# sourceMappingURL=Find.js.map;
if (!String.prototype.endsWith) {
    String.prototype.endsWith = function (search, this_len) {
        if (this_len === undefined || this_len > this.length) {
            this_len = this.length;
        }
        return this.substring(this_len - search.length, this_len) === search;
    };
}
//# sourceMappingURL=EndsWith.js.map;
(function () {
    if (typeof window.CustomEvent === "function")
        return false;
    function CustomEvent(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
    }
    CustomEvent.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent;
})();
//# sourceMappingURL=CustomEvent.js.map;
var ModalProductPageHelper;
(function (ModalProductPageHelper) {
    var modalModeArgs = "modalMode=true&SinglePDPModalMode=true";
    var headerClass = "singlePDPModalHeader";
    var contentClass = "singlePDPModalContents";
    var footerClass = "singlePDPModalFooter";
    var modalWrapperClass = "modalWrapper";
    var pageWrapperClass = "singlePDPPageWrapper";
    var Config = {
        Contents: "",
        FullUrl: "",
        HeadingText: "PRODUCT QUICKVIEW",
        ChildHeading: "",
        Height: 563,
        Width: 819,
        onPreClose: null,
        onClose: function () {
            $('body').css('overflow', '');
            $("body").css("position", '');
        }
    };
    function ShowProductPageModal(url, fullUrl) {
        var config = $.extend({}, Config);
        var urlParts = url.split("#");
        var iframeUrl = urlParts[0];
        var separator = iframeUrl.indexOf('?') !== -1 ? "&" : "?";
        iframeUrl = iframeUrl + separator + modalModeArgs;
        if (urlParts.length > 0)
            iframeUrl += "#" + urlParts[1];
        var pageContents = $("<div />").addClass(pageWrapperClass);
        var loadingSpinner = $("<div/>").addClass("singlePDPModalLoading");
        var iFrame = $("<iframe />")
            .attr("src", iframeUrl)
            .attr("id", "relatedProductFrame")
            .attr("onload", "ModalProductPageHelper.FrameLoaded(this);")
            .attr("style", "opacity:0;");
        pageContents.append(loadingSpinner);
        pageContents.append(iFrame);
        config.Contents = pageContents;
        config.FullUrl = fullUrl;
        ShowModal(config);
    }
    ModalProductPageHelper.ShowProductPageModal = ShowProductPageModal;
    function ModalAddToBag(itemID, optionNo, chain, quantity, pdpLocation) {
        NextBasket.ItemAdd(itemID, optionNo, quantity, chain, false, function () { }, "", pdpLocation.pathname);
        ModalPopup.close(null);
        if ($(window).scrollTop() != 0 && $('html').hasClass('touch')) {
            $(window).scrollTop(0);
        }
    }
    ModalProductPageHelper.ModalAddToBag = ModalAddToBag;
    function FrameLoaded(iframeObject) {
        try {
            var innerDoc = iframeObject.contentDocument || iframeObject.contentWindow.document;
            var $innerDoc = $(innerDoc);
            var fadeOutOverlay = true;
            if ($innerDoc.find(".ProductPage").length == 0) {
                if ($innerDoc.find(".Error404").length == 0 && $innerDoc.find(".Error500").length == 0) {
                    fadeOutOverlay = false;
                    var iframeUrl = iframeObject.src;
                    var iframeUrlwithoutHash = iframeUrl.substr(0, iframeUrl.indexOf('#'));
                    window.location = iframeUrlwithoutHash;
                }
            }
            else {
                var $continueShoppingLink = $("a.continueShopping");
                var $articleStyle_1 = $innerDoc.find("article.Style");
                if ($articleStyle_1.length == 1) {
                    $continueShoppingLink.on("click", function (e) {
                        var mpItemNo = $articleStyle_1.find(".StyleMeta .ItemNumber").text();
                        if (mpItemNo) {
                            mpItemNo = mpItemNo.replace("-", "").toLowerCase().substring(0, 6);
                            var tplUrl = (Next.Settings.Channel.IsTotalPlatformLiteClient) ? Next.Settings.Channel.SiteUrl : "";
                            window.location.href = tplUrl + "/search?w=" + mpItemNo;
                            return false;
                        }
                    });
                }
            }
            $innerDoc.on('click', '.loginPopoverLink, .favourites-sign-out-link', function () {
                window.location.href = $(this).attr('href');
            });
            if (fadeOutOverlay) {
                $('.singlePDPModalLoading').fadeOut('fast');
                $(iframeObject).attr("style", "opacity:1;");
            }
            setTimeout(function () {
                iframeObject.contentWindow.focus();
            }, 100);
        }
        catch (e) {
            window.location.href = iframeObject.src;
        }
    }
    ModalProductPageHelper.FrameLoaded = FrameLoaded;
    function ShowModal(config) {
        var contents = config.Contents;
        var headingWrapper = $("<div />").addClass(headerClass);
        var closeButton = $("<a />").addClass("closeButton").text("Close");
        var footerWrapper = $("<div />").addClass(footerClass);
        var pUrl = config.FullUrl;
        var urlArr = config.FullUrl.split('#');
        if (urlArr.length > 1) {
            var pid = urlArr[1];
            pUrl = '';
            pUrl = Next.Settings.Channel.SiteUrl + "/search?w=" + pid;
        }
        var continueShopping = $("<a />").addClass("continueShopping").text("View Full Product Page").attr("href", pUrl);
        closeButton.click(function (e) {
            $('body').removeAttr('style');
            ModalPopup.close(e);
        });
        var heading = $("<h2 />").text(config.HeadingText);
        headingWrapper.append(heading);
        headingWrapper.append(closeButton);
        footerWrapper.append(continueShopping);
        var modalContents = $("<div />").addClass(contentClass);
        modalContents.append(headingWrapper);
        modalContents.append(contents);
        modalContents.append(footerWrapper);
        var $modal = ModalPopup.init({
            overlay: true,
            width: config.Width,
            height: config.Height,
            onPreClose: config.onPreClose,
            onClose: config.onClose,
            lockBackgroundScroll: false,
            fullyLockBackgroundScroll: true
        });
        if (isIOS) {
            $('body').css({
                'overflow': 'hidden',
                'position': 'fixed'
            });
        }
        else {
            $('body').css({
                'overflow': 'hidden'
            });
        }
        $modal.addClass(modalWrapperClass);
        $modal.empty();
        $modal.append(modalContents);
        ModalPopup.show();
    }
    function ModularPDPAddToBag(itemID, optionNo, chain, quantity, pdpPathname) {
        NextBasket.ItemAdd(itemID, optionNo, quantity, chain, false, function () { }, "", pdpPathname);
        ModalPopup.close(null);
        if ($(window).scrollTop() != 0 && $('html').hasClass('touch')) {
            $(window).scrollTop(0);
        }
    }
    ModalProductPageHelper.ModularPDPAddToBag = ModularPDPAddToBag;
})(ModalProductPageHelper || (ModalProductPageHelper = {}));
//# sourceMappingURL=ModalProductPageHelper.js.map;
/*
 * @preserve dataset polyfill for IE < 11. See https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset and http://caniuse.com/#search=dataset
 *
 * @author ShirtlessKirk copyright 2015
 * @license WTFPL (http://www.wtfpl.net/txt/copying)
 */
/*global define: false, module: false */
/*jslint nomen: true, regexp: true, unparam: true */
(function datasetModule(global, definition) { // non-exporting module magic dance
    'use strict';

    var
        amd = 'amd',
        exports = 'exports'; // keeps the method names for CommonJS / AMD from being compiled to single character variable

    if (typeof define === 'function' && define[amd]) {
        define(function definer() {
            return definition(global);
        });
    } else if (typeof module === 'function' && module[exports]) {
        module[exports] = definition(global);
    } else {
        definition(global);
    }
}(this, function datasetPolyfill(global) {
    'use strict';

    var
        attribute,
        attributes,
        counter,
        dash,
        dataRegEx,
        document = global.document,
        hasEventListener,
        length,
        match,
        mutationSupport,
        test = document.createElement('_'),
        DOMAttrModified = 'DOMAttrModified';

    function clearDataset(event) {
        delete event.target._datasetCache;
    }

    function toCamelCase(string) {
        return string.replace(dash, function (m, letter) {
            return letter.toUpperCase();
        });
    }

    function getDataset() {
        var
            dataset = {};

        attributes = this.attributes;
        for (counter = 0, length = attributes.length; counter < length; counter += 1) {
            attribute = attributes[counter];
            match = attribute.name.match(dataRegEx);
            if (match) {
                dataset[toCamelCase(match[1])] = attribute.value;
            }
        }

        return dataset;
    }

    function mutation() {
        if (hasEventListener) {
            test.removeEventListener(DOMAttrModified, mutation, false);
        } else {
            test.detachEvent('on' + DOMAttrModified, mutation);
        }

        mutationSupport = true;
    }

    if (test.dataset !== undefined) {
        return;
    }

    dash = /\-([a-z])/ig;
    dataRegEx = /^data\-(.+)/;
    hasEventListener = !!document.addEventListener;
    mutationSupport = false;

    if (hasEventListener) {
        test.addEventListener(DOMAttrModified, mutation, false);
    } else {
        test.attachEvent('on' + DOMAttrModified, mutation);
    }

    // trigger event (if supported)
    test.setAttribute('foo', 'bar');

    Object.defineProperty(global.Element.prototype, 'dataset', {
        get: mutationSupport
            ? function get() {
                if (!this._datasetCache) {
                    this._datasetCache = getDataset.call(this);
                }

                return this._datasetCache;
            } : getDataset
    });

    if (mutationSupport && hasEventListener) { // < IE9 supports neither
        document.addEventListener(DOMAttrModified, clearDataset, false);
    }
}));;
/// <reference path="typings/jquery/jquery.d.ts" />
var BloomReachSEOWidgets = /** @class */ (function () {
    function BloomReachSEOWidgets() {
        $('document').ready(function () {
            var urlpath = window.location.href.toLowerCase();
            var plpHeader = "View Related Items";
            // Parse document for data
            if (window.widgetObject) {
                var defaultDataLimits = {
                    items: 8,
                    products: 10,
                    categories: 10
                };
                var dataLimits = {
                    items: (Next.Settings.Channel.BRSEOWidgetsItemsMax ? Next.Settings.Channel.BRSEOWidgetsItemsMax : defaultDataLimits.items),
                    products: (Next.Settings.Channel.BRSEOWidgetsProductsMax ? Next.Settings.Channel.BRSEOWidgetsProductsMax : defaultDataLimits.products),
                    categories: (Next.Settings.Channel.BRSEOWidgetsCategoriesMax ? Next.Settings.Channel.BRSEOWidgetsCategoriesMax : defaultDataLimits.categories)
                };
                var theData = {
                    // Trim products based on config
                    // --------------------------------------
                    // View Related Items
                    moreResults: (Array.isArray(window.widgetObject['more-results']) ? window.widgetObject['more-results'].slice(0, dataLimits.items) : window.widgetObject['more-results']),
                    //
                    // More Related Products
                    relatedItem: (Array.isArray(window.widgetObject['related-item']) ? window.widgetObject['related-item'].slice(0, dataLimits.products) : window.widgetObject['related-item']),
                    // 
                    // Categories
                    relatedCategory: (Array.isArray(window.widgetObject['related-category']) ? window.widgetObject['related-category'].slice(0, dataLimits.categories) : window.widgetObject['related-category']),
                };
                // Replace data lists with newly trimmed versions
                window.widgetObject['more-results'] = theData.moreResults;
                window.widgetObject['related-item'] = theData.relatedItem;
                window.widgetObject['related-category'] = theData.relatedCategory;
            }
            //display only View Related Items
            if (!Next.Settings.Channel.EnableBRSEOWidgetsDisplayAllRows) {
                if (document.getElementById("br-related-items-widget")) {
                    document.getElementById("br-related-items-widget").style.display = "none";
                }
            }
            //ensure bottom two rows of widgets are in mixed case
            var camelCaseRc = "";
            $(".br_widget_wrapper .br-ri-link").each(function (i, obj) {
                camelCaseRc = $(this).text().toLowerCase();
                $(this).text(camelCaseRc);
            });
            $(".br_widget_wrapper .br-rc-link").each(function (i, obj) {
                camelCaseRc = $(this).text().toLowerCase();
                $(this).text(camelCaseRc);
            });
            $(".br_widget_wrapper .br-ri-link").addClass('CamelCase');
            $(".br_widget_wrapper .br-rc-link").addClass('CamelCase');
            //change header & reset left margin on plp
            if (urlpath.indexOf("shop") > -1 || urlpath.indexOf("search") > -1) {
                $(".br_widget_wrapper .br-found-heading span").text(plpHeader);
                $(".br_widget_wrapper .br-sf-widget-merchant-popup-maincont").addClass('PLPSEOAlterations');
            }
            else {
                //Reset left margin on pdp
                $(".br_widget_wrapper .br-sf-widget-merchant-popup-maincont").removeClass('PLPSEOAlterations').removeClass('PLPSEOAlterationsNoFlash');
                //Append pop up to parent container  
                var seoPopupDivs = $('#br-more-results-widget .br-rp-qv-hide');
                seoPopupDivs.each(function (index, v) {
                    $("#br-more-results-widget").append(v);
                });
            }
            //alter styling for IE and edge
            if (document.documentMode || /Edge/.test(navigator.userAgent) || (navigator.userAgent.indexOf("MSIE") != -1) || navigator.appVersion.indexOf('Trident/') > -1) {
                $(".br_widget_wrapper .br-sf-widget-merchant-popup-view").addClass('InternetExplorer');
            }
            //shorten string lengths for the widgets
            StringLengthsFunction(".br_widget_wrapper .br-sf-widget-merchant-title a", 30);
            StringLengthsFunction(".br_widget_wrapper .br-sf-widget-merchant-desc", 105);
            StringLengthsFunction(".br_widget_wrapper .br-sf-widget-merchant-popup-title a", 105);
            StringLengthsFunction(".br_widget_wrapper .br-sf-widget-merchant-popup-desc", 400);
            StringLengthsFunction(".br_widget_wrapper .br-ri-link", 40);
            StringLengthsFunction(".br_widget_wrapper .br-rc-link", 40);
            function StringLengthsFunction(className, stringLength) {
                $(className).each(function (i) {
                    var thisText = $(this).text().trim();
                    if (thisText.length > stringLength) {
                        $(this).text(thisText.substring(0, stringLength).trim() + "…");
                    }
                });
            }
            window.isModalVisible || false;
            function hideBrRpQv() {
                var elems = document.querySelectorAll(".br-rp-qv-show");
                for (var i = 0; i < elems.length; i++) {
                    var classStr = elems[i].getAttribute('class') + ' ';
                    classStr = classStr.replace('br-rp-qv-show ', 'br-rp-qv-hide ');
                    elems[i].setAttribute('class', classStr);
                    window.isModalVisible = false;
                }
            }
            ;
            function showBrRpQv(id) {
                hideBrRpQv();
                var classStr = document.getElementById(id).getAttribute('class') + ' ';
                classStr = classStr.replace('br-rp-qv-hide ', 'br-rp-qv-show ');
                document.getElementById(id).setAttribute('class', classStr);
                setTimeout(function () {
                    window.isModalVisible = true;
                }, 100);
            }
            ;
            // Add event handler for clicking outside the modal
            $(document).click(function (e) {
                var $target = $(e.target), isModalClick = $target.parents('.br-sf-widget-merchant-popup-cont').length > 0 || $target.hasClass('br-sf-widget-merchant-popup-cont');
                if (!isModalClick && window.isModalVisible) {
                    hideBrRpQv();
                }
            });
            // Add event handler for pressing the escape key
            $(document).keyup(function (e) {
                if (27 === e.keyCode) {
                    hideBrRpQv();
                }
            });
            // Show popup
            $('.js-br-sf-widget-btn').on('click', function (e) {
                e.preventDefault();
                var brId = $(this).data('br-id');
                showBrRpQv(brId);
            });
            // Close popups
            $('.br-sf-widget-merchant-popup-close').on('click', function (e) {
                e.preventDefault();
                hideBrRpQv();
            });
            //dataLayer for seo search pills
            $('#ResultBanner a').on('click', function (e) {
                if (dataLayer != null) {
                    dataLayer.push({
                        event: 'seoPills',
                        link_category: 'seoPills',
                        link_id: 'click',
                        link_name: this.innerText,
                        link_value: ''
                    });
                }
            });
        });
    }
    return BloomReachSEOWidgets;
}());
new BloomReachSEOWidgets();
//# sourceMappingURL=BloomReachSEOWidgets.js.map;
var NumOfItemsInRow = 0;
var Orientation = 'Portrait';
var $article;
var $scrollRowWrapper;
var imageSize = 174.5;
var maxPossibleWidth = 880;
var stdScreenWidth = 1280;
var itemWidth = 175;
var rhsContheight = 0;

var FindSimilar = {
    
    getSimilarItems: function (item) {

        $article = $(item).parents("article.Item").first();
        var $page = $article.parents("div.Page").first();
        var position = $article.attr('data-itemposition');
        var $findSimilarDiv = $(item).parents("div.find-similar").first();
        var productNo = $findSimilarDiv.attr('data-mltId');
        var responsiveLargeClass = Next.Settings.UI.HorizontalFiltersEnabled ? "responsiveLarge hf" : "responsiveLarge";
        this.hideElements();
        rhsContheight = $("#rhs").css("min-height");

        $('.showMore').not($(item)).removeClass('Hide');
        
        Orientation = $page.hasClass('Landscape') ? 'Landscape' : 'Portrait';
        getNumberOfColumns();
        
        var targetUrl = "/mlt?w=" + productNo;

        var hasColors = $article.find(".ColourExpander").length > 0;

        if (!hasColors) {
            $findSimilarDiv.find('.arrow_box').addClass('colorway');
        }
        
        var totalWidth = 0;

        setTimeout(function() {
            $.ajax({
                url: targetUrl,
                type: "GET",
                cache: true,
                dataType: "json",
                success: function (data) {
                   var mltContainer = "<div class='mltContainer'>" + "<div class='mainWrapper'>" + "<div class='mltClose'>" +
                        "<svg width='20px' height='15px' viewBox='0 0 22 20' version='1.1'><g><g transform='translate(-964.000000, -789.000000)' stroke='#525252' stroke-width='2.3'>" +
                        "<g  transform='translate(965.000000, 789.000000)'><path d='M0,0 L20,20'></path>" +
                        "<path d='M20,0 L0,20'></path></g></g></g></svg></div> <div class='scrollRowWrapper'>" +
                        "<div class='scrollControl left'><a href='#' class='scrollNav previous disabled'>&lt;</a></div>" +
                        "<div class='clip'>" + "<div class='mltItemContainer'><ul class='mlt_animate'></ul></div></div>" +
                        "<div class='scrollControl right'><a href='#' class='scrollNav next'>&gt;</a></div></div></div>";

                    var itemPosition = parseInt(position);
                    var numberOfSiblingsInRow = getNumberOfSiblingsInCurrentRow();
                    var $endOfRow = (numberOfSiblingsInRow > 0) ? $article.nextAll('#i' + (itemPosition + numberOfSiblingsInRow) +
                        ", #campaignArticleWide, #campaignArticleNarrow").filter(function () {
                            if ($(this).css("display") == "none") {
                                return false;
                            }
                            return true;
                        }).first() : $article;

                    $(mltContainer).insertAfter($endOfRow);

                    switch (Orientation) {
                        case 'Landscape':
                            $('.mltContainer').addClass('Landscape');
                            switch (NumOfItemsInRow) {
                                case 2:
                                    $('.mltContainer').addClass('responsiveSmall');
                                    break;
                                case 3:
                                    $('.mltContainer').addClass(responsiveLargeClass);
                                    break;
                                case 4:
                                    $('.mltContainer').addClass('responsiveXL');
                                    break;
                            }
                            break;
                        case 'Portrait':
                            $('.mltContainer').addClass('Portrait');
                            switch (NumOfItemsInRow) {
                                case 3:
                                    $('.mltContainer').addClass('responsiveSmall');
                                    break;
                                case 4:
                                    $('.mltContainer').addClass(responsiveLargeClass);
                                    break;
                                case 5:
                                    $('.mltContainer').addClass('responsiveXL');
                                    break;
                            }
                            break;
                    }

                    var $ul = $(".mlt_animate");

                    $.each(data.MltSearchResults, function (i, mltItem) {
                        $("<li/>").attr('class', 'mlt_item').attr("data-image", mltItem.SearchImage).attr("data-itemURL", mltItem.Url).attr("data-price", mltItem.Price).appendTo($ul);
                    });

                    $ul.find("li.mlt_item").last().addClass("noPaddingRight");

                    $findSimilarDiv.find('.arrow_box').css('display', 'block');
                    $findSimilarDiv.find('.showLess').removeClass('Hide');
                    $findSimilarDiv.find('.showMore').addClass('Hide');

                    totalWidth += data.MltSearchResults.length * imageSize;
                    
                    $('.mltItemContainer').width(totalWidth);

                    if (Next.Settings.UI.HorizontalFiltersEnabled && $(".mltContainer .clip").length > 0) {
                        maxPossibleWidth = $(".mltContainer .clip").outerWidth();
                        totalWidth = Math.floor(totalWidth);
                    }
                    if (totalWidth <= maxPossibleWidth) {
                        $("a.next").addClass("disabled");
                    }

                    if ($('.mlt_animate').length > 0) {

                        $('.mlt_animate').find("li").each(function (i) {
                            if (i < (NumOfItemsInRow + 1) * 2) {
                                var $li = $(this);
                                $li.addClass("databound");
                                var url = $li.attr("data-itemURL");
                                var imageUrl = $li.attr("data-image");
                                var price = $li.attr("data-price");
                                var $itemDiv = $("<div/>").appendTo($li);
                                var $pdp = $("<a/>").attr('href', url).appendTo($itemDiv);
                                $("<img />").attr('src', imageUrl).attr('class', 'mlt_image').appendTo($pdp);
                                $("<div class='mlt_price'></div>").html(price).appendTo($pdp);
                            }
                        });
                    }

                    $scrollRowWrapper = $(".scrollRowWrapper").first();
                    $scrollRowWrapper.css({"border-bottom": "1px solid #c7c5c5"});

                    Results.MltBusy = false;

                    //function to fix the gap that appears between MLT box and arrow when there is a longer article element in the same row
                    FindSimilar.arrowGapFix();

                    //check if MLT panel is out of view port if so scroll into view
                    var isInViewport = $('.mltItemContainer').isVisibleInViewPort();
                    if (!isInViewport) {
                        var elementHeight = $findSimilarDiv.height();
                        var viewportHeight = $(window).height();
                        $([document.documentElement, document.body]).animate({
                            scrollTop: $findSimilarDiv.offset().top - ((viewportHeight - elementHeight) / 2)
                        }, 1000);
                    }
                    if (Next.Settings.UI.HorizontalFiltersEnabled && $("#ContentArea").outerHeight() < $(window).height()) {
                        $("#rhs").css("min-height", $(window).height());
                        if ($("body").hasClass("touchMode")) {
                            $("body").css("overflow-y", "hidden");
                        }
                    }
                    $("a.scrollNav.previous").click(function () {
                        FindSimilar.scroll(1, this, $('.scrollRowWrapper'));
                        if (!$(this).hasClass("disabled")) {
                            TrackGAEvent("Desktop MLT", "Clicked on the 'previous' scroll control arrow", "Clicked on the 'previous' scroll control arrow for Item Number " + productNo, "ID: " + productNo + " - Previous");
                        }
                        return false;
                    });
                    $("a.scrollNav.next").click(function () {
                        FindSimilar.scroll(-1, this, $('.scrollRowWrapper'));
                        if (!$(this).hasClass("disabled")) {
                            TrackGAEvent("Desktop MLT", "Clicked on the 'next' scroll control arrow", "Clicked on the 'next' scroll control arrow for Item Number " + productNo, "ID: " + productNo + " - Next");
                        }
                        return false;
                    });
                    $(".mltClose").click(function () { FindSimilar.closeMltContainer(this); return false; });
                },
                error: function() {
                    Results.MltBusy = false;
                }

            });
        }, 0);
        TrackGAEvent("Desktop MLT", "Click on 'More Like This' link", "Clicked on 'More Like This' link for Item Number " + productNo, "ID: " + productNo + " - Open MLT");
       
    },
    closeMltContainer: function() {
        FindSimilar.hideElements();
        $('.showMore').removeClass('Hide');
        if (Next.Settings.UI.HorizontalFiltersEnabled && $("#ContentArea").outerHeight() < $(window).height()) {
            $("#rhs").css("min-height", $(window).height());
            if ($("body").hasClass("touchMode")) {
                $("body").css("overflow-y", "hidden");
            }
        }
        if (Next.Settings.UI.HorizontalFiltersEnabled) {
            $("#rhs").css("min-height", rhsContheight);
            if ($("body").hasClass("touchMode")) {
                $("body").css("overflow-y", "scroll");
            }
        }
     },
    hideElements: function() {
        $('.mltContainer').remove();
        $('.showLess').addClass("Hide");
        $('.arrow_box').css('display', 'none');
        $(".mltClose").addClass("Hide");
    },
    scroll: function(direction, element, parent) {

        var mltContainer = parent.find(".mltItemContainer");

        if ($(element).hasClass("disabled") ||
            mltContainer.hasClass("locked") ||
            mltContainer.position().left === 0 && direction === 1 ||
            mltContainer.find("li").length < NumOfItemsInRow) {
            return false;
        }

        var liCount = mltContainer.find("li").length;

        var currentOffset = mltContainer.css("margin-left").replace('px', '');

        var mltItems = (Orientation == 'Landscape') ? (parseInt(NumOfItemsInRow) + 2) : (parseInt(NumOfItemsInRow) + 1);

        var pageSize = itemWidth * mltItems;
        var listLen = liCount * itemWidth;
        var distance = pageSize * direction;

        var newOffset = parseInt(currentOffset) + parseInt(distance);
        var maxOffset = (listLen - pageSize) * direction;
        
        if ((newOffset < maxOffset) && direction === -1) {
                distance = maxOffset - parseInt(currentOffset);
                }

        if ((newOffset > 0) && direction === 1) {
            distance = 0 - parseInt(currentOffset);
        }
        
        //Safety check
        if (distance > pageSize) {
            distance = pageSize;
        }

        if (distance < -pageSize) {
            distance = -pageSize;
        }

        //ie8 and below don't like animating from one css class to another - so, set the animation time to 0
        var transitionSpeed = 200;

        mltContainer.addClass("locked").stop().animate({ marginLeft: "+=" + distance },500,function() {

            if (direction === -1) {
                $('.scrollRowWrapper').find("a.scrollNav.previous").removeClass("disabled", transitionSpeed);
            }
            
            var left = parseInt($(mltContainer).css('margin-left'));

            if (left === 0) {
                $('.scrollRowWrapper').find("a.scrollNav.previous").addClass("disabled", transitionSpeed);
            }

            if ((left + mltContainer.width()) < pageSize) {
                $('.scrollRowWrapper').find("a.scrollNav.next").addClass("disabled", transitionSpeed);
            } else {
                $('.scrollRowWrapper').find("a.scrollNav.next").removeClass("disabled", transitionSpeed);
            }

            mltContainer.removeClass("locked");
                    
             $('.mlt_animate').find("li").each(function () {
                     var i = 0;
                     if (!$(this).hasClass("databound")) { // Check if image is already loaded
                            if (i < (NumOfItemsInRow + 1) * 2) {
                                var $li = $(this);
                                $li.addClass("databound");
                                var url = $li.attr("data-itemURL");
                                var imageUrl = $li.attr("data-image");
                                var price = $li.attr("data-price");

                                var $itemDiv = $("<div/>").appendTo($li);
                                var $pdp = $("<a/>").attr('href', url).appendTo($itemDiv);
                                $("<img />").attr('src', imageUrl).attr('class', 'mlt_image').appendTo($pdp);
                                $("<div class='mlt_price'></div>").html(price).appendTo($pdp);
                                i++;
                            }
                     }
            });
        });
        return false;
    },
    arrowGapFix: function () {
        var $arrow = $article.find(".arrow_box").first();
       
        var scrollRowWrapperTop = $scrollRowWrapper.offset().top;
        
        $arrow.offset({ top: (scrollRowWrapperTop + 1) });
    }
};
$(function () {
    if (Next.Settings.Channel.EnableFindSimilar) {
        window.onresize = function() {
            var rows = (Orientation !== 'Landscape' ? 3 : 2);
            if (Next.Settings.UI.HorizontalFiltersEnabled) {
                rows = 4;//Number of items in row.
            }
            if ((NumOfItemsInRow > rows && window.innerWidth < stdScreenWidth) ||
                (NumOfItemsInRow <= rows && window.innerWidth > stdScreenWidth)) {
                FindSimilar.hideElements();
                $('.showMore').removeClass('Hide');
            }
        }
        $.fn.isVisibleInViewPort = function () {
            var $t = $(this),
                $w = $(window),
                viewTop = $w.scrollTop(),
                viewBottom = viewTop + $w.height(),
                top = $t.offset().top,
                bottom = top + $t.height();
              
            return ((bottom <= viewBottom) && (top >= viewTop));
        };
    }

});

function getNumberOfSiblingsInCurrentRow() {
    var i = 0;
    var $articleSiblings = $article.nextAll("article");
    $articleSiblings.each(function () {
        if ($(this).css("display") == "none") {
            return true;
        }
        if ($(this).offset().top > $article.offset().top) {
            return false;
        }
        else {
            i++;
        }
    });
    return i;
}

function getNumberOfColumns() {
    if (window.innerWidth >= stdScreenWidth) {
        if (Orientation === 'Landscape') {
            NumOfItemsInRow = Next.Settings.UI.HorizontalFiltersEnabled ? 4 : 3;
        }
        else {
            NumOfItemsInRow = Next.Settings.UI.HorizontalFiltersEnabled ? 5 : 4;
        }
    }
    else {
        if (Orientation === 'Landscape') {
            NumOfItemsInRow = Next.Settings.UI.HorizontalFiltersEnabled ? 3 : 2;
        }
        else {
            NumOfItemsInRow = Next.Settings.UI.HorizontalFiltersEnabled ? 4 : 3;
        }
    }
};
var nextBagCookieName = Next.Settings.Cookie.BackToNextCookieName;
var fromNextURLCookieName = Next.Settings.Cookie.BackToNextURLCookieName;
var shortCompanyName = Next.Settings.Channel.ShortCompanyName;
var currentUrl = window.location.href.toLowerCase();
var isEntry = currentUrl.indexOf('?fromnext') > 0;
var bagTextShowName = "showb2nBagText";
var nextBagCookieVal = readCookie(nextBagCookieName);
var nextBagUrlVal = readCookie(fromNextURLCookieName);
var userDeviceType = (dataLayer.length >= 2 && dataLayer[1].device_type) ? (dataLayer[1].device_type).toLowerCase() : "";
var url = "//www.next.co.uk";
if ((isEntry || nextBagCookieVal == "True") && (Next.Settings.Channel.ChannelTheme != "")) {
    if (Next.Settings.Channel.EnableBackToNextBanner) {
        if (Next.Settings.Channel.BackToNextURL)
            url = Next.Settings.Channel.BackToNextURL;
        switch (userDeviceType) {
            case "desktop":
                insertBannerToHTMLDesktop();
                break;
            case "mobile":
                insertBannerToHTMLMobile();
                break;
        }
        if (nextBagCookieVal != "True")
            createCookie(nextBagCookieName, "True", null, location.host);
        if (nextBagUrlVal == null) {
            if (Next.Settings.Channel.StateConvergence != null && Next.Settings.Channel.StateConvergence.Domains != null && Next.Settings.Channel.StateConvergence.Domains.some(function (x) { return x > 0; }))
                url = Next.Settings.Channel.StateConvergence.Domains.find(function (x) { return !x.includes("mobile.") || !x.includes("m."); });
            createCookie(fromNextURLCookieName, url, null, location.host);
        }
        ;
    }
}
if (isEntry) {
    var bagCheck = setInterval(function () {
        if (NextBasket.Loaded) {
            if (nextBagCookieVal == "True") {
                if (NextBasket.Data["ItemCount"] > 0 && Next.Settings.Channel.StateConvergence.IsEnabled) {
                    sessionStorage.setItem(bagTextShowName, "true");
                    displayBackToNextBagText();
                }
                clearInterval(bagCheck);
            }
        }
    }, 200);
}
else if (sessionStorage.getItem(bagTextShowName) == "true") {
    displayBackToNextBagText();
}
function displayBackToNextBagText() {
    $("#backToNext-shoppingBagText").css("display", "inline-block");
}
var backToNextBanner = $("#backToNextBanner");
//Only run code if the banner has been added to the DOM
if (backToNextBanner.length) {
    var btnbHeight = backToNextBanner.height();
    //DESKTOP - Initial setup of the margin adjustments for elements across different pages
    $(".PageHeader").ready(function () {
        //Used across the site
        var height = $(".PageHeader").height();
        if (nextBagCookieVal == "True") {
            height += btnbHeight;
        }
        $(".HeaderSpacer").height(height + "px");
        //Tablet 2.0 Header
        var headerHeight = parseInt($("#header_upper-nav_nav").css("height")) + parseInt($("#header_lower-nav_nav").css("height"));
        $("#nav-headers-spacer").height(headerHeight);
        //Used on PLP Page
        $(".filterControls").css("margin-top", (parseInt($(".filterControls").css("margin-top")) + btnbHeight) + "px");
        $(".ResultCount").css("margin-top", (parseInt($(".ResultCount").css("margin-top")) + btnbHeight) + "px");
        $(".ResultCount").attr("data-btnb", "true");
        if (!Next.Settings.UI.HorizontalFiltersEnabled) {
            $("#ResultHeader").css("margin-top", (parseInt($("#ResultHeader").css("margin-top")) + btnbHeight) + "px");
        }
        //Tablet 2.0
        // horizontal brands page
        $(".bp-wrapper").addClass("backToNextActive");
    });
    //MOBILE
    var filterHeader = parseInt($("#filter-header").css("top"));
    var filterHeaderwithBtnb = filterHeader + btnbHeight;
    var plp_filterWrapperHeader = parseInt($("#filter-wrapper").css("top"));
    var plp_filterWrapperHeaderwithBtnb = plp_filterWrapperHeader + btnbHeight;
    var plp_sortMoreWrapperHeader = parseInt($("#sort-wrapper").css("margin-top"));
    var plp_sortMoreWrapperHeaderwithBtnb = plp_sortMoreWrapperHeader + btnbHeight;
    var plp_moreViewsWrapperHeader = parseInt($("#more-wrapper").css("margin-top"));
    var plp_moreViewsWrapperHeaderwithBtnb = plp_moreViewsWrapperHeader + btnbHeight;
    var tablet_upperHeader = $("#header_upper-nav_nav");
    var tablet_lowerNav = $("#header_lower-nav_nav");
    var tablet_baseNav = $(".navbar");
    var tablet_headerSpacer = $("#nav-headers-spacer");
    var origNavHeadersSpacer = $("#nav-headers-spacer").height();
    var newNavHeadersSpacer = origNavHeadersSpacer + btnbHeight;
    $("#filter-header").css('top', filterHeaderwithBtnb + "px");
    $("#filter-wrapper").css('top', plp_filterWrapperHeaderwithBtnb + "px");
    $("#sort-wrapper").css('margin-top', plp_sortMoreWrapperHeaderwithBtnb + "px");
    $("#more-wrapper").css('margin-top', plp_moreViewsWrapperHeaderwithBtnb + "px");
    tablet_lowerNav.addClass("backToNextActive");
    tablet_upperHeader.addClass("backToNextActive");
    tablet_baseNav.addClass("backToNextActive");
    tablet_headerSpacer.addClass("backToNextActive");
    //Store Locator
    $("#searchTextField, #viewToggleButton").attr('style', "top: " + ($("#nav-headers").height() + 6) + "px !important");
    //CLOSE BANNER
    $("#backToNextClose").click(function (e) {
        e.preventDefault();
        var btnbHeight = backToNextBanner.height();
        if (dataLayer[1].device_type == "mobile") {
            TrackGTMEvent("back_to_next", "tap", "Banner_backtonextclosed");
        }
        else if (dataLayer[1].device_type == "desktop") {
            TrackGAEvent("back_to_next", "click", "Banner_backtonextclosed");
        }
        backToNextBanner.remove();
        $(".HeaderSpacer").height($(".PageHeader").height() + "px");
        document.cookie = fromNextURLCookieName + "=; path=/; domain=" + location.host + "; expires = Thu, 01 Jan 1970 00:00:00 GMT";
        document.cookie = nextBagCookieName + "=; path=/; domain=" + location.host + "; expires = Thu, 01 Jan 1970 00:00:00 GMT";
        sessionStorage.removeItem(bagTextShowName);
        //DESKTOP
        //Used on PLP Page
        $(".filterControls").css("margin-top", (parseInt($(".filterControls").css("margin-top")) - btnbHeight) + "px");
        $(".ResultCount").css("margin-top", (parseInt($(".ResultCount").css("margin-top")) - btnbHeight) + "px");
        $(".ResultCount").attr("data-btnb", "false");
        if (!Next.Settings.UI.HorizontalFiltersEnabled) {
            $("#ResultHeader").css("margin-top", (parseInt($("#ResultHeader").css("margin-top")) - btnbHeight) + "px");
        }
        // horizontal brands page
        $(".bp-wrapper").removeClass("backToNextActive");
        //MOBILE
        //Tablet 2.0
        tablet_lowerNav.removeClass("backToNextActive");
        tablet_upperHeader.removeClass("backToNextActive");
        tablet_baseNav.removeClass("backToNextActive");
        tablet_headerSpacer.removeClass("backToNextActive");
        //Site wide for header
        $("#nav-headers-spacer").css('height', $("#nav-headers").height() + 'px');
        //PLP
        $("#filter-header").css('top', filterHeader + "px");
        $("#filter-wrapper").css('top', plp_filterWrapperHeader + "px");
        $("#sort-wrapper").css('margin-top', plp_sortMoreWrapperHeader + "px");
        $("#more-wrapper").css('margin-top', plp_moreViewsWrapperHeader + "px");
        //Store Locator
        $("#searchTextField, #viewToggleButton").attr('style', "top: " + ($("#nav-headers").height() + 6) + "px !important");
    });
    //SELECT 'BACK TO NEXT'
    $("#backToNextLink").on("click", function (e) {
        document.cookie = fromNextURLCookieName + "=; path=/; domain=" + location.host + "; expires = Thu, 01 Jan 1970 00:00:00 GMT";
        document.cookie = nextBagCookieName + "=; path=/; domain=" + location.host + "; expires = Thu, 01 Jan 1970 00:00:00 GMT";
        sessionStorage.removeItem(bagTextShowName);
        if (dataLayer[1].device_type == "mobile") {
            TrackGTMEvent("back_to_next", "tap", "Banner_backtonextclicked");
        }
        else if (dataLayer[1].device_type == "desktop") {
            TrackGAEvent("back_to_next", "click", "Banner_backtonextclicked");
        }
    });
}
function insertBannerToHTMLDesktop() {
    var insertString = '<div id="backToNextBanner"><span id="backToNext">';
    insertString += '<a id="backToNextLink" href="' + url + '" data-link-id="back_to_next" data-link-name="Banner_backtonextclicked">';
    insertString += '<img id="backToNextArrow" src="/Images/Childsplay/back_arrow_black.svg"><p>Back to</p><img id="backToNextIcon" src="/Images/LittleLabel/Next-Logo.svg"></a></span><div id="backToNext-shoppingBagText"><div class="backToNextHeartIcon"><img src="/Images/Childsplay/brands-heart.svg"></div><span class="backToNext-Text">Luxury Kids Brands from BOSS to Versace</span></div>';
    insertString += '<span id="backToNextClose" data-link-id="back_to_next" data-link-name="Banner_backtonextclosed"><img class="backToNextCloseIcon" src="/Images/Childsplay/close_icon_black.svg"></span></div>';
    $(".PageHeader").prepend(insertString);
}
function insertBannerToHTMLMobile() {
    var colxsname = Next.Settings.Channel.EnableUpgradedBootstrap ? "col" : "col-xs";
    var insertString = '<div class="' + colxsname + '-12" id="backToNextBanner">';
    insertString += '<div class="backToNext"><div id="backToNext-left"><a id="backToNextLink" href="' + url + '" data-link-id="back_to_next" data-link-name="Banner_backtonextclicked"><span id="backToNextLogo-arrowImg"></span><span id="backToNextLogo-backtoText">Back to</span><span id="backToNextLogo-nextLogo"></span></a></div>';
    insertString += '<div id="backToNext-shoppingBagText"><div class="backToNextHeartIcon"><img src="/Images/Childsplay/brands-heart.svg"></div><span class="backToNext-Text">Luxury Kids Brands from BOSS to Versace</span></div><span id="backToNextClose" data-link-id="back_to_next" data-link-name="Banner_backtonextclosed"><img class="backToNextCloseIcon" src="/Images/Childsplay/close_icon_black.svg"/></span></div></div>';
    $("#navigationheader").prepend(insertString);
    $("#header_upper-nav_nav").prepend(insertString);
}
//# sourceMappingURL=BackToNext.js.map;
/* 
 * Search A/B Testing within Cache
 *
 * Created:January 2020
 *
 * A cookie is generated based on the value of the Bloomreach ID (BRUID),
 * this allows for the switching between different cached pages on the Akamai servers.
 *
 * For further information, please consult the following document,
 * "Search AB Testing Cache Implementation v_2_0.docx"
 */

const PartsLength = 4;
const UidParts = 2;
const UidLength = 2;
const FullRange = 100;

try {    
    var useCloudHeader = Next.Settings.Channel.EnableModernisedHeader;
    var isEnabled = (Next.Settings.Channel.BloomReachCachingEnabled && !useCloudHeader);
    var bruidCookie = readCookie(Next.Settings.Channel.BloomReachCachingIdentifier);
    var cookieJar = Next.Settings.Channel.BloomReachCachingCookieList.split(',');
    var cookieName = Next.Settings.Channel.BloomReachCachingCookieName;
    var numberOfDays = Next.Settings.Channel.BloomReachCachingCookieLifetime;

    if (isEnabled && bruidCookie !== null && bruidCookie !== undefined && cookieJar !== null && cookieJar !== undefined && cookieJar.length > 1 && cookieName !== null && cookieName !== undefined && cookieName.length > 1) {
        
        var parts = decodeURIComponent(bruidCookie).split(':');

        // Extract the Bloomreach user identifier (uid).
        if (parts !== null && parts !== undefined && parts.length == PartsLength) {

            var uid = parts[0].split('=');
            if (uid !== null && uid !== undefined && uid.length == UidParts && uid[1].length > UidLength) {
                // Check the last 2 digits of the UID and select the appropriate cookie.
                var check = parseInt(uid[1].substr(uid[1].length - UidLength));
                var segment = Math.floor(FullRange / cookieJar.length);
                var index = Math.floor(check / segment);

                if (index <= 0 || index >= cookieJar.length) index = 0;

                createCookie(cookieName, cookieJar[index], numberOfDays, '');               
            }

        }
    }
    else if (!useCloudHeader) {
        eraseCookie(cookieName);
    }
} catch (e) {
    console.log(e);
};
var GAFirebase;
(function (GAFirebase) {
    var GAFirebaseAnalytics = /** @class */ (function () {
        function GAFirebaseAnalytics() {
        }
        GAFirebaseAnalytics.prototype.ga = function (command, hitType, eventCategory, eventAction, eventLabel, eventValue, fieldsObject) {
            var win = window;
            if (win.AnalyticsWebInterface) {
                // Call Android interface
                if (typeof hitType === "string") {
                    win.AnalyticsWebInterface.logEvent(command, hitType, eventCategory, eventAction, eventLabel, eventValue, JSON.stringify(fieldsObject));
                }
                else {
                    win.AnalyticsWebInterface.logEvent(command, null, null, null, null, null, JSON.stringify(fieldsObject));
                }
            }
            else if (win.webkit
                && win.webkit.messageHandlers
                && win.webkit.messageHandlers.firebase) {
                // Call iOS interface
                if (typeof hitType === "string") {
                    var message = {
                        command: command,
                        hitType: hitType,
                        eventCategory: eventCategory,
                        eventAction: eventAction,
                        eventLabel: eventLabel,
                        eventValue: eventValue,
                        fieldsObject: fieldsObject
                    };
                    win.webkit.messageHandlers.firebase.postMessage(JSON.stringify(message));
                }
                else {
                    var altMessage = {
                        command: command,
                        fieldsObject: hitType
                    };
                    win.webkit.messageHandlers.firebase.postMessage(JSON.stringify(altMessage));
                }
            }
            else {
                ga(command, hitType, eventCategory, eventAction, eventLabel, eventValue, fieldsObject);
                console.log(ga.q);
            }
        };
        GAFirebaseAnalytics.prototype.push = function (gtmParams) {
            var win = window;
            if (win.AnalyticsWebInterface) {
                // Call Android interface
                win.AnalyticsWebInterface.push(JSON.stringify(gtmParams));
            }
            else if (win.webkit
                && win.webkit.messageHandlers
                && win.webkit.messageHandlers.firebase) {
                win.webkit.messageHandlers.firebase.postMessage(JSON.stringify(gtmParams));
            }
            else {
                if (win.dataLayer !== undefined) {
                    win.dataLayer.push(gtmParams);
                }
            }
        };
        GAFirebaseAnalytics.prototype.updateFirebasePushNotificationIdentifier = function (firebasePushNotificationIdentifier) {
            var win = window;
            if (win.AnalyticsWebInterface) {
                // Call Android interface
                win.AnalyticsWebInterface.updateFirebasePushNotificationIdentifier(firebasePushNotificationIdentifier);
            }
            else if (win.webkit
                && win.webkit.messageHandlers
                && win.webkit.messageHandlers.firebase) {
                var message = {
                    pushNotificationIdentifier: firebasePushNotificationIdentifier
                };
                win.webkit.messageHandlers.firebase.postMessage(JSON.stringify(message));
            }
            else {
            }
        };
        GAFirebaseAnalytics.prototype.updateLoginStatus = function (loginstatus) {
            var win = window;
            if (win.AnalyticsWebInterface) {
                // Call Android interface
                win.AnalyticsWebInterface.updateLoginStatus(loginstatus);
            }
            else if (win.webkit
                && win.webkit.messageHandlers
                && win.webkit.messageHandlers.firebase) {
                var message = {
                    LoginStatus: loginstatus
                };
                win.webkit.messageHandlers.firebase.postMessage(JSON.stringify(message));
            }
            else {
            }
        };
        GAFirebaseAnalytics.prototype.exponeaTrack = function (exponea, eventname, parameters) {
            var win = window;
            if (win.AnalyticsWebInterface) {
                // Call Android interface
                win.AnalyticsWebInterface.track(eventname, parameters);
            }
            else if (win.webkit
                && win.webkit.messageHandlers
                && win.webkit.messageHandlers.exponea) {
                var message = {
                    eventName: eventname,
                    eventParameters: parameters
                };
                win.webkit.messageHandlers.exponea.postMessage(JSON.stringify(message));
            }
            else {
                if (exponea !== undefined) {
                    exponea.track(eventname, parameters);
                }
            }
        };
        GAFirebaseAnalytics.prototype.exponeaIdentify = function (exponea, identifier) {
            var win = window;
            if (win.AnalyticsWebInterface) {
                // Call Android interface
                win.AnalyticsWebInterface.identify(identifier);
            }
            else if (win.webkit
                && win.webkit.messageHandlers
                && win.webkit.messageHandlers.exponea) {
                var message = {
                    eventName: 'identify',
                    eventParameters: identifier
                };
                win.webkit.messageHandlers.exponea.postMessage(JSON.stringify(message));
            }
            else if (exponea !== undefined) {
                exponea.identify('registered', identifier);
            }
        };
        GAFirebaseAnalytics.prototype.transferWebEventToApp = function (eventName, messageContent) {
            var win = window;
            if (win.AnalyticsWebInterface && win.AnalyticsWebInterface.transferWebEventToApp) {
                // Call Android interface
                win.AnalyticsWebInterface.transferWebEventToApp(eventName, JSON.stringify(messageContent));
            }
            else if (win.webkit
                && win.webkit.messageHandlers
                && win.webkit.messageHandlers.webEventBridge) {
                var message = {
                    eventName: eventName,
                    messageContent: JSON.stringify(messageContent)
                };
                win.webkit.messageHandlers.webEventBridge.postMessage(message);
            }
        };
        return GAFirebaseAnalytics;
    }());
    GAFirebase.GAFirebaseAnalytics = GAFirebaseAnalytics;
})(GAFirebase || (GAFirebase = {}));
var firebase = new GAFirebase.GAFirebaseAnalytics();
function firebaseEvent(event, category, id, name, value) {
    if (value === void 0) { value = 0; }
    if (firebase != undefined) {
        firebase.push({
            "event": event,
            "link_category": category,
            "link_id": id,
            "link_name": name,
            "link_value": value
        });
    }
}
//# sourceMappingURL=GAFirebase.js.map;
