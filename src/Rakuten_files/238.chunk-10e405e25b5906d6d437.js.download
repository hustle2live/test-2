this["LazyLoad_iso"] =
(window["webpackJsonp_name_iso"] = window["webpackJsonp_name_iso"] || []).push([[238],{

/***/ 1613:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var _regenerator = __webpack_require__(1614);
var _regenerator2 = _interopRequireDefault(_regenerator);
var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
var _fastdom = __webpack_require__(1617);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _asyncToGenerator(fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new Promise(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }
        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }
      return step("next");
    });
  };
}

// Finds element's position relative to the whole document,
// rather than to the viewport as it is the case with .getBoundingClientRect().
var getElementPosition = function getElementPosition(elementClientRect, windowProps) {
  var top = elementClientRect.top,
    left = elementClientRect.left;
  var pageXOffset = windowProps.pageXOffset,
    pageYOffset = windowProps.pageYOffset;
  return {
    top: top + pageYOffset,
    left: left + pageXOffset
  };
};
exports.default = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(element, container, customOffset) {
    var _ref2, _ref3, elementClientRect, elementBox, windowProps, top, bottom, left, right, _ref4, _ref5, containerClientRect, containerBox, containerPosition, elementPosition;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return Promise.all([(0, _fastdom.getBoundingClientRect)(element), (0, _fastdom.getElementBox)(element), (0, _fastdom.getWindowProps)()]);
          case 2:
            _ref2 = _context.sent;
            _ref3 = _slicedToArray(_ref2, 3);
            elementClientRect = _ref3[0];
            elementBox = _ref3[1];
            windowProps = _ref3[2];
            if (!(!element || elementBox.offsetParent === null)) {
              _context.next = 9;
              break;
            }
            return _context.abrupt('return', false);
          case 9:
            top = void 0;
            bottom = void 0;
            left = void 0;
            right = void 0;
            if (!(typeof container === 'undefined' || container === window)) {
              _context.next = 20;
              break;
            }
            top = windowProps.pageYOffset;
            left = windowProps.pageXOffset;
            bottom = top + windowProps.innerHeight;
            right = left + windowProps.innerWidth;
            _context.next = 31;
            break;
          case 20:
            _context.next = 22;
            return Promise.all([(0, _fastdom.getBoundingClientRect)(container), (0, _fastdom.getElementBox)(container)]);
          case 22:
            _ref4 = _context.sent;
            _ref5 = _slicedToArray(_ref4, 2);
            containerClientRect = _ref5[0];
            containerBox = _ref5[1];
            containerPosition = getElementPosition(containerClientRect, windowProps);
            top = containerPosition.top;
            left = containerPosition.left;
            bottom = top + containerBox.offsetHeight;
            right = left + containerBox.offsetWidth;
          case 31:
            elementPosition = getElementPosition(elementClientRect, windowProps);
            return _context.abrupt('return', top <= elementPosition.top + elementBox.offsetHeight + customOffset.top && bottom >= elementPosition.top - customOffset.bottom && left <= elementPosition.left + elementBox.offsetWidth + customOffset.left && right >= elementPosition.left - customOffset.right);
          case 33:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  function inViewport(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  }
  return inViewport;
}();

/***/ }),

/***/ 1614:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1615);


/***/ }),

/***/ 1615:
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(1616);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),

/***/ 1616:
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),

/***/ 1617:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOverflowValues = exports.getWindowProps = exports.getElementBox = exports.getBoundingClientRect = undefined;
var _fastdom = __webpack_require__(1618);
var _fastdom2 = _interopRequireDefault(_fastdom);
var _fastdomPromised = __webpack_require__(1619);
var _fastdomPromised2 = _interopRequireDefault(_fastdomPromised);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var fastdomPromised = _fastdom2.default.extend(_fastdomPromised2.default);
var getBoundingClientRect = exports.getBoundingClientRect = function getBoundingClientRect(element) {
  return fastdomPromised.measure(function () {
    return element.getBoundingClientRect();
  });
};
var getElementBox = exports.getElementBox = function getElementBox(element) {
  return fastdomPromised.measure(function () {
    var offsetWidth = element.offsetWidth,
      offsetHeight = element.offsetHeight,
      offsetParent = element.offsetParent;
    return {
      offsetWidth: offsetWidth,
      offsetHeight: offsetHeight,
      offsetParent: offsetParent
    };
  });
};
var getWindowProps = exports.getWindowProps = function getWindowProps() {
  return fastdomPromised.measure(function () {
    var _window = window,
      pageXOffset = _window.pageXOffset,
      pageYOffset = _window.pageYOffset,
      innerWidth = _window.innerWidth,
      innerHeight = _window.innerHeight;
    return {
      pageXOffset: pageXOffset,
      pageYOffset: pageYOffset,
      innerWidth: innerWidth,
      innerHeight: innerHeight
    };
  });
};
var getOverflowValues = exports.getOverflowValues = function getOverflowValues(element) {
  return fastdomPromised.measure(function () {
    var _window$getComputedSt = window.getComputedStyle(element),
      overflow = _window$getComputedSt.overflow,
      overflowX = _window$getComputedSt.overflowX,
      overflowY = _window$getComputedSt.overflowY;
    return {
      overflow: overflow,
      overflowX: overflowX,
      overflowY: overflowY
    };
  });
};

/***/ }),

/***/ 1618:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!function (win) {
  /**
   * FastDom
   *
   * Eliminates layout thrashing
   * by batching DOM read/write
   * interactions.
   *
   * @author Wilson Page <wilsonpage@me.com>
   * @author Kornel Lesinski <kornel.lesinski@ft.com>
   */

  'use strict';

  /**
   * Mini logger
   *
   * @return {Function}
   */
  var debug = 0 ? undefined : function () {};

  /**
   * Normalized rAF
   *
   * @type {Function}
   */
  var raf = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.msRequestAnimationFrame || function (cb) {
    return setTimeout(cb, 16);
  };

  /**
   * Initialize a `FastDom`.
   *
   * @constructor
   */
  function FastDom() {
    var self = this;
    self.reads = [];
    self.writes = [];
    self.raf = raf.bind(win); // test hook
    debug('initialized', self);
  }
  FastDom.prototype = {
    constructor: FastDom,
    /**
     * We run this inside a try catch
     * so that if any jobs error, we
     * are able to recover and continue
     * to flush the batch until it's empty.
     *
     * @param {Array} tasks
     */
    runTasks: function runTasks(tasks) {
      debug('run tasks');
      var task;
      while (task = tasks.shift()) task();
    },
    /**
     * Adds a job to the read batch and
     * schedules a new frame if need be.
     *
     * @param  {Function} fn
     * @param  {Object} ctx the context to be bound to `fn` (optional).
     * @public
     */
    measure: function measure(fn, ctx) {
      debug('measure');
      var task = !ctx ? fn : fn.bind(ctx);
      this.reads.push(task);
      scheduleFlush(this);
      return task;
    },
    /**
     * Adds a job to the
     * write batch and schedules
     * a new frame if need be.
     *
     * @param  {Function} fn
     * @param  {Object} ctx the context to be bound to `fn` (optional).
     * @public
     */
    mutate: function mutate(fn, ctx) {
      debug('mutate');
      var task = !ctx ? fn : fn.bind(ctx);
      this.writes.push(task);
      scheduleFlush(this);
      return task;
    },
    /**
     * Clears a scheduled 'read' or 'write' task.
     *
     * @param {Object} task
     * @return {Boolean} success
     * @public
     */
    clear: function clear(task) {
      debug('clear', task);
      return remove(this.reads, task) || remove(this.writes, task);
    },
    /**
     * Extend this FastDom with some
     * custom functionality.
     *
     * Because fastdom must *always* be a
     * singleton, we're actually extending
     * the fastdom instance. This means tasks
     * scheduled by an extension still enter
     * fastdom's global task queue.
     *
     * The 'super' instance can be accessed
     * from `this.fastdom`.
     *
     * @example
     *
     * var myFastdom = fastdom.extend({
     *   initialize: function() {
     *     // runs on creation
     *   },
     *
     *   // override a method
     *   measure: function(fn) {
     *     // do extra stuff ...
     *
     *     // then call the original
     *     return this.fastdom.measure(fn);
     *   },
     *
     *   ...
     * });
     *
     * @param  {Object} props  properties to mixin
     * @return {FastDom}
     */
    extend: function extend(props) {
      debug('extend', props);
      if (typeof props != 'object') throw new Error('expected object');
      var child = Object.create(this);
      mixin(child, props);
      child.fastdom = this;

      // run optional creation hook
      if (child.initialize) child.initialize();
      return child;
    },
    // override this with a function
    // to prevent Errors in console
    // when tasks throw
    catch: null
  };

  /**
   * Schedules a new read/write
   * batch if one isn't pending.
   *
   * @private
   */
  function scheduleFlush(fastdom) {
    if (!fastdom.scheduled) {
      fastdom.scheduled = true;
      fastdom.raf(flush.bind(null, fastdom));
      debug('flush scheduled');
    }
  }

  /**
   * Runs queued `read` and `write` tasks.
   *
   * Errors are caught and thrown by default.
   * If a `.catch` function has been defined
   * it is called instead.
   *
   * @private
   */
  function flush(fastdom) {
    debug('flush');
    var writes = fastdom.writes;
    var reads = fastdom.reads;
    var error;
    try {
      debug('flushing reads', reads.length);
      fastdom.runTasks(reads);
      debug('flushing writes', writes.length);
      fastdom.runTasks(writes);
    } catch (e) {
      error = e;
    }
    fastdom.scheduled = false;

    // If the batch errored we may still have tasks queued
    if (reads.length || writes.length) scheduleFlush(fastdom);
    if (error) {
      debug('task errored', error.message);
      if (fastdom.catch) fastdom.catch(error);else throw error;
    }
  }

  /**
   * Remove an item from an Array.
   *
   * @param  {Array} array
   * @param  {*} item
   * @return {Boolean}
   */
  function remove(array, item) {
    var index = array.indexOf(item);
    return !!~index && !!array.splice(index, 1);
  }

  /**
   * Mixin own properties of source
   * object into the target.
   *
   * @param  {Object} target
   * @param  {Object} source
   */
  function mixin(target, source) {
    for (var key in source) {
      if (source.hasOwnProperty(key)) target[key] = source[key];
    }
  }

  // There should never be more than
  // one instance of `FastDom` in an app
  var exports = win.fastdom = win.fastdom || new FastDom(); // jshint ignore:line

  // Expose to CJS & AMD
  if (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return exports;
  }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
}(typeof window !== 'undefined' ? window : typeof this != 'undefined' ? this : globalThis);

/***/ }),

/***/ 1619:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!function () {
  /**
   * Wraps fastdom in a Promise API
   * for improved control-flow.
   *
   * @example
   *
   * // returning a result
   * fastdom.measure(() => el.clientWidth)
   *   .then(result => ...);
   *
   * // returning promises from tasks
   * fastdom.measure(() => {
   *   var w = el1.clientWidth;
   *   return fastdom.mutate(() => el2.style.width = w + 'px');
   * }).then(() => console.log('all done'));
   *
   * // clearing pending tasks
   * var promise = fastdom.measure(...)
   * fastdom.clear(promise);
   *
   * @type {Object}
   */
  var exports = {
    initialize: function initialize() {
      this._tasks = new Map();
    },
    mutate: function mutate(fn, ctx) {
      return create(this, 'mutate', fn, ctx);
    },
    measure: function measure(fn, ctx) {
      return create(this, 'measure', fn, ctx);
    },
    clear: function clear(promise) {
      var tasks = this._tasks;
      var task = tasks.get(promise);
      this.fastdom.clear(task);
      tasks.delete(promise);
    }
  };

  /**
   * Create a fastdom task wrapped in
   * a 'cancellable' Promise.
   *
   * @param  {FastDom}  fastdom
   * @param  {String}   type - 'measure'|'mutate'
   * @param  {Function} fn
   * @return {Promise}
   */
  function create(promised, type, fn, ctx) {
    var tasks = promised._tasks;
    var fastdom = promised.fastdom;
    var task;
    var promise = new Promise(function (resolve, reject) {
      task = fastdom[type](function () {
        tasks.delete(promise);
        try {
          resolve(ctx ? fn.call(ctx) : fn());
        } catch (e) {
          reject(e);
        }
      }, ctx);
    });
    tasks.set(promise, task);
    return promise;
  }

  // Expose to CJS, AMD or global
  if (("function")[0] == 'f') !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return exports;
  }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof module)[0] == 'o') module.exports = exports;else window.fastdomPromised = exports;
}();

/***/ }),

/***/ 1641:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "images", function() { return /* binding */ index_iso_images; });
__webpack_require__.d(__webpack_exports__, "onVisible", function() { return /* binding */ onVisible; });

// EXTERNAL MODULE: ./node_modules/.pnpm/debug@3.1.0/node_modules/debug/src/browser.js
var browser = __webpack_require__(44);
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);

// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/shared/iso.js + 100 modules
var iso = __webpack_require__(32);

// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/shared/env.js
var env = __webpack_require__(30);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/extends.js
var esm_extends = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
var objectWithoutProperties = __webpack_require__(25);

// EXTERNAL MODULE: ./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js
var react = __webpack_require__(0);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/classCallCheck.js
var classCallCheck = __webpack_require__(13);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/createClass.js
var createClass = __webpack_require__(12);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/get.js + 1 modules
var get = __webpack_require__(547);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/inherits.js
var inherits = __webpack_require__(21);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(23);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(14);

// EXTERNAL MODULE: ./node_modules/.pnpm/react-lazy-fastdom@4.1.0_react-dom@17.0.2_react@16.14.0/node_modules/react-lazy-fastdom/lib/LazyLoad.js
var LazyLoad = __webpack_require__(799);
var LazyLoad_default = /*#__PURE__*/__webpack_require__.n(LazyLoad);

// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/LazyLoad/components/LazyLoadFix/lazyLoadFix.js






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(getPrototypeOf["a" /* default */])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(getPrototypeOf["a" /* default */])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(possibleConstructorReturn["a" /* default */])(this, result); }; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }

var lazyLoadFix_LazyLoadFix = /*#__PURE__*/function (_LazyLoad) {
  Object(inherits["a" /* default */])(LazyLoadFix, _LazyLoad);
  var _super = _createSuper(LazyLoadFix);
  function LazyLoadFix() {
    Object(classCallCheck["a" /* default */])(this, LazyLoadFix);
    return _super.apply(this, arguments);
  }
  Object(createClass["a" /* default */])(LazyLoadFix, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      Object(get["a" /* default */])(Object(getPrototypeOf["a" /* default */])(LazyLoadFix.prototype), "componentDidMount", this).call(this);
      this.checkVisibility();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      try {
        Object(get["a" /* default */])(Object(getPrototypeOf["a" /* default */])(LazyLoadFix.prototype), "componentWillUnmount", this).call(this);
      } catch (err) {
        // RIEN - EN ATTENTE DU FIXE
      }
    }
  }]);
  return LazyLoadFix;
}(LazyLoad_default.a);
/* harmony default export */ var lazyLoadFix = (lazyLoadFix_LazyLoadFix);
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/LazyLoad/components/LazyLoadFix/index.js


// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/shared/breakpoints.js
// import breakpoints from '../../assets/stylesheets/breakpoints.css'

var breakpoints = {
  phone: 320,
  landscape: 576,
  tablet: 768,
  desktop: 992,
  max: 1200
};
var breakpoints_isBelowPhone = function isBelowPhone() {
  return !env["a" /* default */].isNode() && window.innerWidth <= breakpoints.phone;
};
var breakpoints_isBelowLandscape = function isBelowLandscape() {
  return !env["a" /* default */].isNode() && window.innerWidth <= breakpoints.landscape;
};
var breakpoints_isBelowTablet = function isBelowTablet() {
  return !env["a" /* default */].isNode() && window.innerWidth <= breakpoints.tablet;
};
var breakpoints_isBelowDesktop = function isBelowDesktop() {
  return !env["a" /* default */].isNode() && window.innerWidth <= breakpoints.desktop;
};
var breakpoints_isBelowMax = function isBelowMax() {
  return !env["a" /* default */].isNode() && window.innerWidth <= breakpoints.max;
};
var breakpoints_isAboveLandscape = function isAboveLandscape(breakpoint) {
  if (breakpoint) {
    return breakpoint !== 'phone' && breakpoint !== 'landscape';
  }
  return !env["a" /* default */].isNode() && window.innerWidth > breakpoints.landscape;
};
var breakpoints_isAbovePhone = function isAbovePhone() {
  return !env["a" /* default */].isNode() && window.innerWidth > breakpoints.phone;
};
var breakpoints_isAboveTablet = function isAboveTablet() {
  return !env["a" /* default */].isNode() && window.innerWidth > breakpoints.tablet;
};
var breakpoints_isAboveDesktop = function isAboveDesktop() {
  return !env["a" /* default */].isNode() && window.innerWidth > breakpoints.desktop;
};
var breakpoints_isAboveMax = function isAboveMax() {
  return !env["a" /* default */].isNode() && window.innerWidth > breakpoints.max;
};
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/LazyLoad/components/util.js


function customize(props) {
  if (!env["a" /* default */].isNode() && window.CONF_MANIFEST) {
    // eslint-disable-next-line prefer-destructuring
    // const offset = window.CONF_MANIFEST.offset;
    var _window$CONF_MANIFEST = window.CONF_MANIFEST,
      lazyOffsetMobile = _window$CONF_MANIFEST.lazyOffsetMobile,
      lazyOffsetDesktop = _window$CONF_MANIFEST.lazyOffsetDesktop;
    var isMobile = breakpoints_isBelowTablet();
    var offset = isMobile ? lazyOffsetMobile : lazyOffsetDesktop;
    var newProps = Object.assign({}, props);
    newProps.offsetTop = offset || props.offsetTop;
    newProps.offsetBottom = offset || props.offsetBottom;
    newProps.offsetRight = offset || props.offsetRight;
    newProps.offsetLeft = offset || props.offsetLeft;
    return newProps;
  }
  return props;
}

// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/LazyLoad/components/LazyLoadOnVisible/lazyLoadOnVisible.js


var _excluded = ["offsetTop", "offsetBottom", "offsetRight", "offsetLeft", "onContentVisible"];
var __jsx = react_default.a.createElement;




// eslint-disable react/no-danger
var lazyLoadOnVisible_LazyLoadOnVisible = function LazyLoadOnVisible(props) {
  var _customize = customize(props),
    offsetTop = _customize.offsetTop,
    offsetBottom = _customize.offsetBottom,
    offsetRight = _customize.offsetRight,
    offsetLeft = _customize.offsetLeft,
    onContentVisible = _customize.onContentVisible,
    others = Object(objectWithoutProperties["a" /* default */])(_customize, _excluded);
  return __jsx(lazyLoadFix, Object(esm_extends["a" /* default */])({
    offsetTop: offsetTop,
    offsetBottom: offsetBottom,
    offsetRight: offsetRight,
    offsetLeft: offsetLeft
  }, others, {
    onContentVisible: onContentVisible
  }), __jsx("div", null));
};
lazyLoadOnVisible_LazyLoadOnVisible.defaultProps = {
  className: '',
  offsetTop: 300,
  offsetBottom: 300,
  offsetRight: 300,
  offsetLeft: 300,
  onContentVisible: function onContentVisible() {}
};
/* harmony default export */ var lazyLoadOnVisible = (lazyLoadOnVisible_LazyLoadOnVisible);
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/LazyLoad/components/LazyLoadOnVisible/index.js


// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/LazyLoad/components/LazyLoadImg/lazyLoadImg.js


var lazyLoadImg_excluded = ["img"];
var lazyLoadImg_jsx = react_default.a.createElement;


function setAttribute(elem, newAttr, oldAttr) {
  if (elem && elem.hasAttribute(oldAttr)) {
    elem.setAttribute(newAttr, elem.getAttribute(oldAttr));
  }
}
function lazyLoadImg_onContentVisible(imgId) {
  return function () {
    var elemList = document.querySelectorAll("[id='".concat(imgId, "']"));
    for (var i = 0; i < elemList.length; i += 1) {
      var elem = elemList[i];
      if (elem) {
        if (elem.hasAttribute('data-src')) {
          setAttribute(elem, 'src', 'data-src');
          setAttribute(elem, 'srcset', 'data-srcset');
        }
      }
    }
  };
}
// eslint-disable react/no-danger
var lazyLoadImg_LazyLoadImg = function LazyLoadImg(props) {
  var img = props.img,
    others = Object(objectWithoutProperties["a" /* default */])(props, lazyLoadImg_excluded);
  return lazyLoadImg_jsx(lazyLoadOnVisible, Object(esm_extends["a" /* default */])({}, others, {
    onContentVisible: lazyLoadImg_onContentVisible(img)
  }));
};
lazyLoadImg_LazyLoadImg.defaultProps = {
  img: ''
};
/* harmony default export */ var lazyLoadImg = (lazyLoadImg_LazyLoadImg);
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/LazyLoad/components/LazyLoadImg/index.js


// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/LazyLoad/index-iso.js






// eslint-disable-next-line import/prefer-default-export
var renderImages = Object(iso["b" /* isomorphicRendering */])({
  LazyLoadImg: lazyLoadImg
});
var renderOnVisible = Object(iso["b" /* isomorphicRendering */])({
  LazyLoadOnVisible: lazyLoadOnVisible
});
var debug = browser_default()('canopy:lazy');
var index_iso_images = function images(id, props) {
  debug("lazyload image id= ".concat(id, " props=").concat(JSON.stringify(props)));
  try {
    renderImages({
      elementId: id,
      bundleName: 'LazyLoadImg',
      data: props
    });
  } catch (err) {
    debug("lazyload image id= ".concat(id, " props=").concat(JSON.stringify(props), " err=").concat(JSON.stringify(err)));
  }
};
var onVisible = function onVisible(id, props) {
  debug("lazyload on visible id= ".concat(id, " props=").concat(JSON.stringify(props)));
  try {
    renderOnVisible({
      elementId: id,
      bundleName: 'LazyLoadOnVisible',
      data: props
    });
  } catch (err) {
    debug("lazyload on visible id= ".concat(id, " props=").concat(JSON.stringify(props), " err=").concat(JSON.stringify(err)));
  }
};

// with webpack 4, bundles are loaded dynamically being potentially incomplete when loaded
// on client call rendering
if (!env["a" /* default */].isNode()) {
  window.rktDefer('lazyimg', index_iso_images);
}

/***/ }),

/***/ 799:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
var _react = __webpack_require__(0);
var _react2 = _interopRequireDefault(_react);
var _propTypes = __webpack_require__(10);
var _propTypes2 = _interopRequireDefault(_propTypes);
var _lodash = __webpack_require__(740);
var _lodash2 = _interopRequireDefault(_lodash);
var _lodash3 = __webpack_require__(703);
var _lodash4 = _interopRequireDefault(_lodash3);
var _inViewport = __webpack_require__(1613);
var _inViewport2 = _interopRequireDefault(_inViewport);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
var LazyLoad = function (_Component) {
  _inherits(LazyLoad, _Component);
  _createClass(LazyLoad, null, [{
    key: 'createHandler',
    value: function createHandler(container, key, th, db) {
      if (th <= 0) return;
      var handleAttached = function handleAttached() {
        var attached = LazyLoad.lazyMap.get(container)[key].attached;
        attached.forEach(function (lazy) {
          return lazy.checkVisibility();
        });
      };
      var handler = (db ? _lodash2.default : _lodash4.default)(handleAttached, th);
      var attached = [];
      var object = {
        handler: handler,
        attached: attached
      };
      if (!LazyLoad.lazyMap.has(container)) LazyLoad.lazyMap.set(container, {});
      LazyLoad.lazyMap.get(container)[key] = object;
      window.addEventListener('resize', handler);
      container.addEventListener('scroll', handler);
      container.addEventListener('touchmove', handler);
      container.addEventListener('transitionend', handler);
    }
  }, {
    key: 'removeHandler',
    value: function removeHandler(container, key) {
      var handler = LazyLoad.lazyMap.get(container)[key].handler;
      handler.cancel();
      window.removeEventListener('resize', handler);
      container.removeEventListener('scroll', handler);
      container.removeEventListener('touchmove', handler);
      container.removeEventListener('transitionend', handler);
      delete LazyLoad.lazyMap.get(container)[key];
    }
  }, {
    key: 'getKey',
    value: function getKey(lazy) {
      var _lazy$props = lazy.props,
        th = _lazy$props.throttle,
        db = _lazy$props.debounce;
      return th + '_' + db;
    }
  }, {
    key: 'attachLazyLoad',
    value: function attachLazyLoad(lazy) {
      var _lazy$props2 = lazy.props,
        th = _lazy$props2.throttle,
        db = _lazy$props2.debounce;
      var key = LazyLoad.getKey(lazy);
      var container = lazy.getEventNode();
      if (!LazyLoad.lazyMap.has(container) || !LazyLoad.lazyMap.get(container)[key]) {
        LazyLoad.createHandler(container, key, th, db);
      }
      LazyLoad.lazyMap.get(container)[key].attached.push(lazy);
    }
  }, {
    key: 'detachLazyLoad',
    value: function detachLazyLoad(lazy) {
      var key = LazyLoad.getKey(lazy);
      var container = lazy.getEventNode();
      var obj = LazyLoad.lazyMap.get(container)[key];
      obj.attached = obj.attached.filter(function (a) {
        return a !== lazy;
      });
      if (obj.attached.length === 0) LazyLoad.removeHandler(container, key);
    }
  }]);
  function LazyLoad(props) {
    _classCallCheck(this, LazyLoad);
    var _this = _possibleConstructorReturn(this, (LazyLoad.__proto__ || Object.getPrototypeOf(LazyLoad)).call(this, props));
    _this.handleVisibility = _this.handleVisibility.bind(_this);
    _this.checkingVisibility = false;
    _this.visible = false;
    _this.state = {
      visible: false
    };
    return _this;
  }
  _createClass(LazyLoad, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.mounted = true;
      LazyLoad.attachLazyLoad(this);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(_nextProps, nextState) {
      return nextState.visible;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.mounted = false;
      LazyLoad.detachLazyLoad(this);
    }
  }, {
    key: 'getEventNode',
    value: function getEventNode() {
      return this.props.container || window; // parentScroll(this.node);
    }
  }, {
    key: 'getOffset',
    value: function getOffset() {
      var _props = this.props,
        offset = _props.offset,
        offsetVertical = _props.offsetVertical,
        offsetHorizontal = _props.offsetHorizontal,
        offsetTop = _props.offsetTop,
        offsetBottom = _props.offsetBottom,
        offsetLeft = _props.offsetLeft,
        offsetRight = _props.offsetRight,
        threshold = _props.threshold;
      var offsetAll = threshold || offset;
      return {
        top: offsetTop || offsetVertical || offsetAll,
        bottom: offsetBottom || offsetVertical || offsetAll,
        left: offsetLeft || offsetHorizontal || offsetAll,
        right: offsetRight || offsetHorizontal || offsetAll
      };
    }
  }, {
    key: 'checkVisibility',
    value: function checkVisibility() {
      if (!this.mounted || this.checkingVisibility) return;
      var offset = this.getOffset();
      var eventNode = this.getEventNode();
      this.checkingVisibility = true;
      (0, _inViewport2.default)(this.node, eventNode, offset).then(this.handleVisibility);
    }
  }, {
    key: 'handleVisibility',
    value: function handleVisibility(visible) {
      var onContentVisible = this.props.onContentVisible;
      this.checkingVisibility = false;
      if (!visible || this.visible) return;
      this.visible = true;
      this.setState({
        visible: true
      }, function () {
        return onContentVisible && onContentVisible();
      });
      LazyLoad.detachLazyLoad(this);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;
      var _props2 = this.props,
        children = _props2.children,
        className = _props2.className,
        height = _props2.height,
        width = _props2.width,
        Element = _props2.elementType;
      var visible = this.state.visible;
      var elStyles = {
        height: height,
        width: width
      };
      var elClasses = 'LazyLoad' + (visible ? ' is-visible' : '') + (className ? ' ' + className : '');
      return _react2.default.createElement(Element, {
        className: elClasses,
        ref: function ref(node) {
          _this2.node = node;
        },
        style: elStyles
      }, visible && _react.Children.only(children));
    }
  }]);
  return LazyLoad;
}(_react.Component);
LazyLoad.lazyMap = new Map();
exports.default = LazyLoad;
LazyLoad.propTypes = {
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  container: _propTypes2.default.any,
  debounce: _propTypes2.default.bool,
  elementType: _propTypes2.default.string,
  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  offset: _propTypes2.default.number,
  offsetBottom: _propTypes2.default.number,
  offsetHorizontal: _propTypes2.default.number,
  offsetLeft: _propTypes2.default.number,
  offsetRight: _propTypes2.default.number,
  offsetTop: _propTypes2.default.number,
  offsetVertical: _propTypes2.default.number,
  threshold: _propTypes2.default.number,
  throttle: _propTypes2.default.number,
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  onContentVisible: _propTypes2.default.func
};
LazyLoad.defaultProps = {
  className: null,
  container: null,
  height: null,
  width: null,
  threshold: 0,
  onContentVisible: null,
  elementType: 'div',
  debounce: true,
  offset: 0,
  offsetBottom: 0,
  offsetHorizontal: 0,
  offsetLeft: 0,
  offsetRight: 0,
  offsetTop: 0,
  offsetVertical: 0,
  throttle: 250
};

/***/ })

},[[1641,1,0,2]]]);