(window["webpackJsonp_name_iso"] = window["webpackJsonp_name_iso"] || []).push([
    [258], {

        /***/
        1680:
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return requirePropFactory;
                });

                function requirePropFactory(componentNameInError) {
                    if (true) {
                        return function() {
                            return null;
                        };
                    }

                    var requireProp = function requireProp(requiredProp) {
                        return function(props, propName, componentName, location, propFullName) {
                            var propFullNameSafe = propFullName || propName;

                            if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
                                return new Error("The prop `".concat(propFullNameSafe, "` of ") + "`".concat(componentNameInError, "` must be used on `").concat(requiredProp, "`."));
                            }

                            return null;
                        };
                    };

                    return requireProp;
                }

                /***/
            }),

        /***/
        1821:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                'use client';

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "default", {
                    enumerable: true,
                    get: function() {
                        return _utils.createSvgIcon;
                    }
                });
                var _utils = __webpack_require__(580);

                /***/
            }),

        /***/
        1822:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // a duplex stream is just a stream that is both readable and writable.
                // Since JS doesn't have multiple prototypal inheritance, this class
                // prototypally inherits from Readable, and then parasitically from
                // Writable.



                /*<replacement>*/

                var pna = __webpack_require__(1834);
                /*</replacement>*/

                /*<replacement>*/
                var objectKeys = Object.keys || function(obj) {
                    var keys = [];
                    for (var key in obj) {
                        keys.push(key);
                    }
                    return keys;
                };
                /*</replacement>*/

                module.exports = Duplex;

                /*<replacement>*/
                var util = Object.create(__webpack_require__(1827));
                util.inherits = __webpack_require__(1824);
                /*</replacement>*/

                var Readable = __webpack_require__(1889);
                var Writable = __webpack_require__(1851);

                util.inherits(Duplex, Readable);

                {
                    // avoid scope creep, the keys array can then be collected
                    var keys = objectKeys(Writable.prototype);
                    for (var v = 0; v < keys.length; v++) {
                        var method = keys[v];
                        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
                    }
                }

                function Duplex(options) {
                    if (!(this instanceof Duplex)) return new Duplex(options);

                    Readable.call(this, options);
                    Writable.call(this, options);

                    if (options && options.readable === false) this.readable = false;

                    if (options && options.writable === false) this.writable = false;

                    this.allowHalfOpen = true;
                    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

                    this.once('end', onend);
                }

                Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
                    // making it explicit this property is not enumerable
                    // because otherwise some prototype manipulation in
                    // userland will fail
                    enumerable: false,
                    get: function() {
                        return this._writableState.highWaterMark;
                    }
                });

                // the no-half-open enforcer
                function onend() {
                    // if we allow half-open state, or if the writable side ended,
                    // then we're ok.
                    if (this.allowHalfOpen || this._writableState.ended) return;

                    // no more data can be written.
                    // But allow more writes to happen in this tick.
                    pna.nextTick(onEndNT, this);
                }

                function onEndNT(self) {
                    self.end();
                }

                Object.defineProperty(Duplex.prototype, 'destroyed', {
                    get: function() {
                        if (this._readableState === undefined || this._writableState === undefined) {
                            return false;
                        }
                        return this._readableState.destroyed && this._writableState.destroyed;
                    },
                    set: function(value) {
                        // we ignore the value if the stream
                        // has not been initialized yet
                        if (this._readableState === undefined || this._writableState === undefined) {
                            return;
                        }

                        // backward compatibility, the user is explicitly
                        // managing destroyed
                        this._readableState.destroyed = value;
                        this._writableState.destroyed = value;
                    }
                });

                Duplex.prototype._destroy = function(err, cb) {
                    this.push(null);
                    this.end();

                    pna.nextTick(cb, err);
                };

                /***/
            }),

        /***/
        1823:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /**
                 * Given a path this function will find the pathname, query and hash and return
                 * them. This is useful to parse full paths on the client side.
                 * @param path A path to parse e.g. /foo/bar?id=1#hash
                 */
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "parsePath", {
                    enumerable: true,
                    get: function() {
                        return parsePath;
                    }
                });

                function parsePath(path) {
                    const hashIndex = path.indexOf("#");
                    const queryIndex = path.indexOf("?");
                    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);
                    if (hasQuery || hashIndex > -1) {
                        return {
                            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),
                            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : "",
                            hash: hashIndex > -1 ? path.slice(hashIndex) : ""
                        };
                    }
                    return {
                        pathname: path,
                        query: "",
                        hash: ""
                    };
                }

                //# sourceMappingURL=parse-path.js.map

                /***/
            }),

        /***/
        1824:
            /***/
            (function(module, exports) {

                if (typeof Object.create === 'function') {
                    // implementation from standard node.js 'util' module
                    module.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor
                            ctor.prototype = Object.create(superCtor.prototype, {
                                constructor: {
                                    value: ctor,
                                    enumerable: false,
                                    writable: true,
                                    configurable: true
                                }
                            })
                        }
                    };
                } else {
                    // old school shim for old browsers
                    module.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor
                            var TempCtor = function() {}
                            TempCtor.prototype = superCtor.prototype
                            ctor.prototype = new TempCtor()
                            ctor.prototype.constructor = ctor
                        }
                    }
                }


                /***/
            }),

        /***/
        1825:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /**
                 * Removes the trailing slash for a given route or page path. Preserves the
                 * root page. Examples:
                 *   - `/foo/bar/` -> `/foo/bar`
                 *   - `/foo/bar` -> `/foo/bar`
                 *   - `/` -> `/`
                 */
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "removeTrailingSlash", {
                    enumerable: true,
                    get: function() {
                        return removeTrailingSlash;
                    }
                });

                function removeTrailingSlash(route) {
                    return route.replace(/\/$/, "") || "/";
                }

                //# sourceMappingURL=remove-trailing-slash.js.map

                /***/
            }),

        /***/
        1826:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    DecodeError: function() {
                        return DecodeError;
                    },
                    MiddlewareNotFoundError: function() {
                        return MiddlewareNotFoundError;
                    },
                    MissingStaticPage: function() {
                        return MissingStaticPage;
                    },
                    NormalizeError: function() {
                        return NormalizeError;
                    },
                    PageNotFoundError: function() {
                        return PageNotFoundError;
                    },
                    SP: function() {
                        return SP;
                    },
                    ST: function() {
                        return ST;
                    },
                    WEB_VITALS: function() {
                        return WEB_VITALS;
                    },
                    execOnce: function() {
                        return execOnce;
                    },
                    getDisplayName: function() {
                        return getDisplayName;
                    },
                    getLocationOrigin: function() {
                        return getLocationOrigin;
                    },
                    getURL: function() {
                        return getURL;
                    },
                    isAbsoluteUrl: function() {
                        return isAbsoluteUrl;
                    },
                    isResSent: function() {
                        return isResSent;
                    },
                    loadGetInitialProps: function() {
                        return loadGetInitialProps;
                    },
                    normalizeRepeatedSlashes: function() {
                        return normalizeRepeatedSlashes;
                    },
                    stringifyError: function() {
                        return stringifyError;
                    }
                });
                const WEB_VITALS = [
                    "CLS",
                    "FCP",
                    "FID",
                    "INP",
                    "LCP",
                    "TTFB"
                ];

                function execOnce(fn) {
                    let used = false;
                    let result;
                    return function() {
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }
                        if (!used) {
                            used = true;
                            result = fn(...args);
                        }
                        return result;
                    };
                }
                // Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
                // Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
                const ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\d+\-.]*?:/;
                const isAbsoluteUrl = (url) => ABSOLUTE_URL_REGEX.test(url);

                function getLocationOrigin() {
                    const {
                        protocol,
                        hostname,
                        port
                    } = window.location;
                    return protocol + "//" + hostname + (port ? ":" + port : "");
                }

                function getURL() {
                    const {
                        href
                    } = window.location;
                    const origin = getLocationOrigin();
                    return href.substring(origin.length);
                }

                function getDisplayName(Component) {
                    return typeof Component === "string" ? Component : Component.displayName || Component.name || "Unknown";
                }

                function isResSent(res) {
                    return res.finished || res.headersSent;
                }

                function normalizeRepeatedSlashes(url) {
                    const urlParts = url.split("?");
                    const urlNoQuery = urlParts[0];
                    return urlNoQuery // first we replace any non-encoded backslashes with forward
                        // then normalize repeated forward slashes
                        .replace(/\\/g, "/").replace(/\/\/+/g, "/") + (urlParts[1] ? "?" + urlParts.slice(1).join("?") : "");
                }
                async function loadGetInitialProps(App, ctx) {
                    if (false) {
                        var _App_prototype;
                    }
                    // when called from _app `ctx` is nested in `ctx`
                    const res = ctx.res || ctx.ctx && ctx.ctx.res;
                    if (!App.getInitialProps) {
                        if (ctx.ctx && ctx.Component) {
                            // @ts-ignore pageProps default
                            return {
                                pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)
                            };
                        }
                        return {};
                    }
                    const props = await App.getInitialProps(ctx);
                    if (res && isResSent(res)) {
                        return props;
                    }
                    if (!props) {
                        const message = '"' + getDisplayName(App) + '.getInitialProps()" should resolve to an object. But found "' + props + '" instead.';
                        throw new Error(message);
                    }
                    if (false) {}
                    return props;
                }
                const SP = typeof performance !== "undefined";
                const ST = SP && [
                    "mark",
                    "measure",
                    "getEntriesByName"
                ].every((method) => typeof performance[method] === "function");
                class DecodeError extends Error {}
                class NormalizeError extends Error {}
                class PageNotFoundError extends Error {
                    constructor(page) {
                        super();
                        this.code = "ENOENT";
                        this.name = "PageNotFoundError";
                        this.message = "Cannot find module for page: " + page;
                    }
                }
                class MissingStaticPage extends Error {
                    constructor(page, message) {
                        super();
                        this.message = "Failed to load static file for page: " + page + " " + message;
                    }
                }
                class MiddlewareNotFoundError extends Error {
                    constructor() {
                        super();
                        this.code = "ENOENT";
                        this.message = "Cannot find the middleware module";
                    }
                }

                function stringifyError(error) {
                    return JSON.stringify({
                        message: error.message,
                        stack: error.stack
                    });
                }

                //# sourceMappingURL=utils.js.map

                /***/
            }),

        /***/
        1827:
            /***/
            (function(module, exports, __webpack_require__) {

                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.

                function isArray(arg) {
                    if (Array.isArray) {
                        return Array.isArray(arg);
                    }
                    return objectToString(arg) === '[object Array]';
                }
                exports.isArray = isArray;

                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }
                exports.isBoolean = isBoolean;

                function isNull(arg) {
                    return arg === null;
                }
                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                exports.isNumber = isNumber;

                function isString(arg) {
                    return typeof arg === 'string';
                }
                exports.isString = isString;

                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }
                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                    return objectToString(re) === '[object RegExp]';
                }
                exports.isRegExp = isRegExp;

                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                exports.isObject = isObject;

                function isDate(d) {
                    return objectToString(d) === '[object Date]';
                }
                exports.isDate = isDate;

                function isError(e) {
                    return (objectToString(e) === '[object Error]' || e instanceof Error);
                }
                exports.isError = isError;

                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                    return arg === null ||
                        typeof arg === 'boolean' ||
                        typeof arg === 'number' ||
                        typeof arg === 'string' ||
                        typeof arg === 'symbol' || // ES6 symbol
                        typeof arg === 'undefined';
                }
                exports.isPrimitive = isPrimitive;

                exports.isBuffer = __webpack_require__(1676).Buffer.isBuffer;

                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }


                /***/
            }),

        /***/
        1828:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var undefined;

                var $Error = __webpack_require__(2000);
                var $EvalError = __webpack_require__(2001);
                var $RangeError = __webpack_require__(2002);
                var $ReferenceError = __webpack_require__(2003);
                var $SyntaxError = __webpack_require__(1897);
                var $TypeError = __webpack_require__(1835);
                var $URIError = __webpack_require__(2004);

                var $Function = Function;

                // eslint-disable-next-line consistent-return
                var getEvalledConstructor = function(expressionSyntax) {
                    try {
                        return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
                    } catch (e) {}
                };

                var $gOPD = Object.getOwnPropertyDescriptor;
                if ($gOPD) {
                    try {
                        $gOPD({}, '');
                    } catch (e) {
                        $gOPD = null; // this is IE 8, which has a broken gOPD
                    }
                }

                var throwTypeError = function() {
                    throw new $TypeError();
                };
                var ThrowTypeError = $gOPD ?
                    (function() {
                        try {
                            // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
                            arguments.callee; // IE 8 does not throw here
                            return throwTypeError;
                        } catch (calleeThrows) {
                            try {
                                // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
                                return $gOPD(arguments, 'callee').get;
                            } catch (gOPDthrows) {
                                return throwTypeError;
                            }
                        }
                    }()) :
                    throwTypeError;

                var hasSymbols = __webpack_require__(2005)();
                var hasProto = __webpack_require__(2006)();

                var getProto = Object.getPrototypeOf || (
                    hasProto ?
                    function(x) {
                        return x.__proto__;
                    } // eslint-disable-line no-proto
                    :
                    null
                );

                var needsEval = {};

                var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

                var INTRINSICS = {
                    __proto__: null,
                    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
                    '%Array%': Array,
                    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
                    '%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
                    '%AsyncFromSyncIteratorPrototype%': undefined,
                    '%AsyncFunction%': needsEval,
                    '%AsyncGenerator%': needsEval,
                    '%AsyncGeneratorFunction%': needsEval,
                    '%AsyncIteratorPrototype%': needsEval,
                    '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
                    '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
                    '%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
                    '%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
                    '%Boolean%': Boolean,
                    '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
                    '%Date%': Date,
                    '%decodeURI%': decodeURI,
                    '%decodeURIComponent%': decodeURIComponent,
                    '%encodeURI%': encodeURI,
                    '%encodeURIComponent%': encodeURIComponent,
                    '%Error%': $Error,
                    '%eval%': eval, // eslint-disable-line no-eval
                    '%EvalError%': $EvalError,
                    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
                    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
                    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
                    '%Function%': $Function,
                    '%GeneratorFunction%': needsEval,
                    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
                    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
                    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
                    '%isFinite%': isFinite,
                    '%isNaN%': isNaN,
                    '%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
                    '%JSON%': typeof JSON === 'object' ? JSON : undefined,
                    '%Map%': typeof Map === 'undefined' ? undefined : Map,
                    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
                    '%Math%': Math,
                    '%Number%': Number,
                    '%Object%': Object,
                    '%parseFloat%': parseFloat,
                    '%parseInt%': parseInt,
                    '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
                    '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
                    '%RangeError%': $RangeError,
                    '%ReferenceError%': $ReferenceError,
                    '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
                    '%RegExp%': RegExp,
                    '%Set%': typeof Set === 'undefined' ? undefined : Set,
                    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
                    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
                    '%String%': String,
                    '%StringIteratorPrototype%': hasSymbols && getProto ? getProto('' [Symbol.iterator]()) : undefined,
                    '%Symbol%': hasSymbols ? Symbol : undefined,
                    '%SyntaxError%': $SyntaxError,
                    '%ThrowTypeError%': ThrowTypeError,
                    '%TypedArray%': TypedArray,
                    '%TypeError%': $TypeError,
                    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
                    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
                    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
                    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
                    '%URIError%': $URIError,
                    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
                    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
                    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
                };

                if (getProto) {
                    try {
                        null.error; // eslint-disable-line no-unused-expressions
                    } catch (e) {
                        // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
                        var errorProto = getProto(getProto(e));
                        INTRINSICS['%Error.prototype%'] = errorProto;
                    }
                }

                var doEval = function doEval(name) {
                    var value;
                    if (name === '%AsyncFunction%') {
                        value = getEvalledConstructor('async function () {}');
                    } else if (name === '%GeneratorFunction%') {
                        value = getEvalledConstructor('function* () {}');
                    } else if (name === '%AsyncGeneratorFunction%') {
                        value = getEvalledConstructor('async function* () {}');
                    } else if (name === '%AsyncGenerator%') {
                        var fn = doEval('%AsyncGeneratorFunction%');
                        if (fn) {
                            value = fn.prototype;
                        }
                    } else if (name === '%AsyncIteratorPrototype%') {
                        var gen = doEval('%AsyncGenerator%');
                        if (gen && getProto) {
                            value = getProto(gen.prototype);
                        }
                    }

                    INTRINSICS[name] = value;

                    return value;
                };

                var LEGACY_ALIASES = {
                    __proto__: null,
                    '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
                    '%ArrayPrototype%': ['Array', 'prototype'],
                    '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
                    '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
                    '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
                    '%ArrayProto_values%': ['Array', 'prototype', 'values'],
                    '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
                    '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
                    '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
                    '%BooleanPrototype%': ['Boolean', 'prototype'],
                    '%DataViewPrototype%': ['DataView', 'prototype'],
                    '%DatePrototype%': ['Date', 'prototype'],
                    '%ErrorPrototype%': ['Error', 'prototype'],
                    '%EvalErrorPrototype%': ['EvalError', 'prototype'],
                    '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
                    '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
                    '%FunctionPrototype%': ['Function', 'prototype'],
                    '%Generator%': ['GeneratorFunction', 'prototype'],
                    '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
                    '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
                    '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
                    '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
                    '%JSONParse%': ['JSON', 'parse'],
                    '%JSONStringify%': ['JSON', 'stringify'],
                    '%MapPrototype%': ['Map', 'prototype'],
                    '%NumberPrototype%': ['Number', 'prototype'],
                    '%ObjectPrototype%': ['Object', 'prototype'],
                    '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
                    '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
                    '%PromisePrototype%': ['Promise', 'prototype'],
                    '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
                    '%Promise_all%': ['Promise', 'all'],
                    '%Promise_reject%': ['Promise', 'reject'],
                    '%Promise_resolve%': ['Promise', 'resolve'],
                    '%RangeErrorPrototype%': ['RangeError', 'prototype'],
                    '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
                    '%RegExpPrototype%': ['RegExp', 'prototype'],
                    '%SetPrototype%': ['Set', 'prototype'],
                    '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
                    '%StringPrototype%': ['String', 'prototype'],
                    '%SymbolPrototype%': ['Symbol', 'prototype'],
                    '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
                    '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
                    '%TypeErrorPrototype%': ['TypeError', 'prototype'],
                    '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
                    '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
                    '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
                    '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
                    '%URIErrorPrototype%': ['URIError', 'prototype'],
                    '%WeakMapPrototype%': ['WeakMap', 'prototype'],
                    '%WeakSetPrototype%': ['WeakSet', 'prototype']
                };

                var bind = __webpack_require__(1852);
                var hasOwn = __webpack_require__(2008);
                var $concat = bind.call(Function.call, Array.prototype.concat);
                var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
                var $replace = bind.call(Function.call, String.prototype.replace);
                var $strSlice = bind.call(Function.call, String.prototype.slice);
                var $exec = bind.call(Function.call, RegExp.prototype.exec);

                /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
                var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
                var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
                var stringToPath = function stringToPath(string) {
                    var first = $strSlice(string, 0, 1);
                    var last = $strSlice(string, -1);
                    if (first === '%' && last !== '%') {
                        throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
                    } else if (last === '%' && first !== '%') {
                        throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
                    }
                    var result = [];
                    $replace(string, rePropName, function(match, number, quote, subString) {
                        result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
                    });
                    return result;
                };
                /* end adaptation */

                var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
                    var intrinsicName = name;
                    var alias;
                    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
                        alias = LEGACY_ALIASES[intrinsicName];
                        intrinsicName = '%' + alias[0] + '%';
                    }

                    if (hasOwn(INTRINSICS, intrinsicName)) {
                        var value = INTRINSICS[intrinsicName];
                        if (value === needsEval) {
                            value = doEval(intrinsicName);
                        }
                        if (typeof value === 'undefined' && !allowMissing) {
                            throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
                        }

                        return {
                            alias: alias,
                            name: intrinsicName,
                            value: value
                        };
                    }

                    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
                };

                module.exports = function GetIntrinsic(name, allowMissing) {
                    if (typeof name !== 'string' || name.length === 0) {
                        throw new $TypeError('intrinsic name must be a non-empty string');
                    }
                    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
                        throw new $TypeError('"allowMissing" argument must be a boolean');
                    }

                    if ($exec(/^%?[^%]*%?$/, name) === null) {
                        throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
                    }
                    var parts = stringToPath(name);
                    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

                    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
                    var intrinsicRealName = intrinsic.name;
                    var value = intrinsic.value;
                    var skipFurtherCaching = false;

                    var alias = intrinsic.alias;
                    if (alias) {
                        intrinsicBaseName = alias[0];
                        $spliceApply(parts, $concat([0, 1], alias));
                    }

                    for (var i = 1, isOwn = true; i < parts.length; i += 1) {
                        var part = parts[i];
                        var first = $strSlice(part, 0, 1);
                        var last = $strSlice(part, -1);
                        if (
                            (
                                (first === '"' || first === "'" || first === '`') ||
                                (last === '"' || last === "'" || last === '`')
                            ) &&
                            first !== last
                        ) {
                            throw new $SyntaxError('property names with quotes must have matching quotes');
                        }
                        if (part === 'constructor' || !isOwn) {
                            skipFurtherCaching = true;
                        }

                        intrinsicBaseName += '.' + part;
                        intrinsicRealName = '%' + intrinsicBaseName + '%';

                        if (hasOwn(INTRINSICS, intrinsicRealName)) {
                            value = INTRINSICS[intrinsicRealName];
                        } else if (value != null) {
                            if (!(part in value)) {
                                if (!allowMissing) {
                                    throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                                }
                                return void undefined;
                            }
                            if ($gOPD && (i + 1) >= parts.length) {
                                var desc = $gOPD(value, part);
                                isOwn = !!desc;

                                // By convention, when a data property is converted to an accessor
                                // property to emulate a data property that does not suffer from
                                // the override mistake, that accessor's getter is marked with
                                // an `originalValue` property. Here, when we detect this, we
                                // uphold the illusion by pretending to see that original data
                                // property, i.e., returning the value rather than the getter
                                // itself.
                                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
                                    value = desc.get;
                                } else {
                                    value = value[part];
                                }
                            } else {
                                isOwn = hasOwn(value, part);
                                value = value[part];
                            }

                            if (isOwn && !skipFurtherCaching) {
                                INTRINSICS[intrinsicRealName] = value;
                            }
                        }
                    }
                    return value;
                };


                /***/
            }),

        /***/
        1832:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    assign: function() {
                        return assign;
                    },
                    searchParamsToUrlQuery: function() {
                        return searchParamsToUrlQuery;
                    },
                    urlQueryToSearchParams: function() {
                        return urlQueryToSearchParams;
                    }
                });

                function searchParamsToUrlQuery(searchParams) {
                    const query = {};
                    searchParams.forEach((value, key) => {
                        if (typeof query[key] === "undefined") {
                            query[key] = value;
                        } else if (Array.isArray(query[key])) {
                            query[key].push(value);
                        } else {
                            query[key] = [
                                query[key],
                                value
                            ];
                        }
                    });
                    return query;
                }

                function stringifyUrlQueryParam(param) {
                    if (typeof param === "string" || typeof param === "number" && !isNaN(param) || typeof param === "boolean") {
                        return String(param);
                    } else {
                        return "";
                    }
                }

                function urlQueryToSearchParams(urlQuery) {
                    const result = new URLSearchParams();
                    Object.entries(urlQuery).forEach((param) => {
                        let [key, value] = param;
                        if (Array.isArray(value)) {
                            value.forEach((item) => result.append(key, stringifyUrlQueryParam(item)));
                        } else {
                            result.set(key, stringifyUrlQueryParam(value));
                        }
                    });
                    return result;
                }

                function assign(target) {
                    for (var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        searchParamsList[_key - 1] = arguments[_key];
                    }
                    searchParamsList.forEach((searchParams) => {
                        Array.from(searchParams.keys()).forEach((key) => target.delete(key));
                        searchParams.forEach((value, key) => target.append(key, value));
                    });
                    return target;
                }

                //# sourceMappingURL=querystring.js.map

                /***/
            }),

        /***/
        1833:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "pathHasPrefix", {
                    enumerable: true,
                    get: function() {
                        return pathHasPrefix;
                    }
                });
                const _parsepath = __webpack_require__(1823);

                function pathHasPrefix(path, prefix) {
                    if (typeof path !== "string") {
                        return false;
                    }
                    const {
                        pathname
                    } = (0, _parsepath.parsePath)(path);
                    return pathname === prefix || pathname.startsWith(prefix + "/");
                }

                //# sourceMappingURL=path-has-prefix.js.map

                /***/
            }),

        /***/
        1834:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /* WEBPACK VAR INJECTION */
                (function(process) {

                    if (typeof process === 'undefined' ||
                        !process.version ||
                        process.version.indexOf('v0.') === 0 ||
                        process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                        module.exports = {
                            nextTick: nextTick
                        };
                    } else {
                        module.exports = process
                    }

                    function nextTick(fn, arg1, arg2, arg3) {
                        if (typeof fn !== 'function') {
                            throw new TypeError('"callback" argument must be a function');
                        }
                        var len = arguments.length;
                        var args, i;
                        switch (len) {
                            case 0:
                            case 1:
                                return process.nextTick(fn);
                            case 2:
                                return process.nextTick(function afterTickOne() {
                                    fn.call(null, arg1);
                                });
                            case 3:
                                return process.nextTick(function afterTickTwo() {
                                    fn.call(null, arg1, arg2);
                                });
                            case 4:
                                return process.nextTick(function afterTickThree() {
                                    fn.call(null, arg1, arg2, arg3);
                                });
                            default:
                                args = new Array(len - 1);
                                i = 0;
                                while (i < args.length) {
                                    args[i++] = arguments[i];
                                }
                                return process.nextTick(function afterTick() {
                                    fn.apply(null, args);
                                });
                        }
                    }


                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(123)))

                /***/
            }),

        /***/
        1835:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /** @type {import('./type')} */
                module.exports = TypeError;


                /***/
            }),

        /***/
        1836:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";



                var TYPED_OK = (typeof Uint8Array !== 'undefined') &&
                    (typeof Uint16Array !== 'undefined') &&
                    (typeof Int32Array !== 'undefined');

                function _has(obj, key) {
                    return Object.prototype.hasOwnProperty.call(obj, key);
                }

                exports.assign = function(obj /*from1, from2, from3, ...*/ ) {
                    var sources = Array.prototype.slice.call(arguments, 1);
                    while (sources.length) {
                        var source = sources.shift();
                        if (!source) {
                            continue;
                        }

                        if (typeof source !== 'object') {
                            throw new TypeError(source + 'must be non-object');
                        }

                        for (var p in source) {
                            if (_has(source, p)) {
                                obj[p] = source[p];
                            }
                        }
                    }

                    return obj;
                };


                // reduce buffer size, avoiding mem copy
                exports.shrinkBuf = function(buf, size) {
                    if (buf.length === size) {
                        return buf;
                    }
                    if (buf.subarray) {
                        return buf.subarray(0, size);
                    }
                    buf.length = size;
                    return buf;
                };


                var fnTyped = {
                    arraySet: function(dest, src, src_offs, len, dest_offs) {
                        if (src.subarray && dest.subarray) {
                            dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
                            return;
                        }
                        // Fallback to ordinary array
                        for (var i = 0; i < len; i++) {
                            dest[dest_offs + i] = src[src_offs + i];
                        }
                    },
                    // Join array of chunks to single array.
                    flattenChunks: function(chunks) {
                        var i, l, len, pos, chunk, result;

                        // calculate data length
                        len = 0;
                        for (i = 0, l = chunks.length; i < l; i++) {
                            len += chunks[i].length;
                        }

                        // join chunks
                        result = new Uint8Array(len);
                        pos = 0;
                        for (i = 0, l = chunks.length; i < l; i++) {
                            chunk = chunks[i];
                            result.set(chunk, pos);
                            pos += chunk.length;
                        }

                        return result;
                    }
                };

                var fnUntyped = {
                    arraySet: function(dest, src, src_offs, len, dest_offs) {
                        for (var i = 0; i < len; i++) {
                            dest[dest_offs + i] = src[src_offs + i];
                        }
                    },
                    // Join array of chunks to single array.
                    flattenChunks: function(chunks) {
                        return [].concat.apply([], chunks);
                    }
                };


                // Enable/Disable typed arrays use, for testing
                //
                exports.setTyped = function(on) {
                    if (on) {
                        exports.Buf8 = Uint8Array;
                        exports.Buf16 = Uint16Array;
                        exports.Buf32 = Int32Array;
                        exports.assign(exports, fnTyped);
                    } else {
                        exports.Buf8 = Array;
                        exports.Buf16 = Array;
                        exports.Buf32 = Array;
                        exports.assign(exports, fnUntyped);
                    }
                };

                exports.setTyped(TYPED_OK);


                /***/
            }),

        /***/
        1841:
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                __webpack_require__.r(__webpack_exports__);
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "_interop_require_wildcard", function() {
                    return _interop_require_wildcard;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "_", function() {
                    return _interop_require_wildcard;
                });

                function _getRequireWildcardCache(nodeInterop) {
                    if (typeof WeakMap !== "function") return null;

                    var cacheBabelInterop = new WeakMap();
                    var cacheNodeInterop = new WeakMap();

                    return (_getRequireWildcardCache = function(nodeInterop) {
                        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
                    })(nodeInterop);
                }

                function _interop_require_wildcard(obj, nodeInterop) {
                    if (!nodeInterop && obj && obj.__esModule) return obj;
                    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
                        default: obj
                    };

                    var cache = _getRequireWildcardCache(nodeInterop);

                    if (cache && cache.has(obj)) return cache.get(obj);

                    var newObj = {
                        __proto__: null
                    };
                    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

                    for (var key in obj) {
                        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
                            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                            if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
                            else newObj[key] = obj[key];
                        }
                    }

                    newObj.default = obj;

                    if (cache) cache.set(obj, newObj);

                    return newObj;
                }



                /***/
            }),

        /***/
        1842:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    INTERCEPTION_ROUTE_MARKERS: function() {
                        return INTERCEPTION_ROUTE_MARKERS;
                    },
                    extractInterceptionRouteInformation: function() {
                        return extractInterceptionRouteInformation;
                    },
                    isInterceptionRouteAppPath: function() {
                        return isInterceptionRouteAppPath;
                    }
                });
                const _apppaths = __webpack_require__(1954);
                const INTERCEPTION_ROUTE_MARKERS = [
                    "(..)(..)",
                    "(.)",
                    "(..)",
                    "(...)"
                ];

                function isInterceptionRouteAppPath(path) {
                    // TODO-APP: add more serious validation
                    return path.split("/").find((segment) => INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m))) !== undefined;
                }

                function extractInterceptionRouteInformation(path) {
                    let interceptingRoute, marker, interceptedRoute;
                    for (const segment of path.split("/")) {
                        marker = INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m));
                        if (marker) {
                            [interceptingRoute, interceptedRoute] = path.split(marker, 2);
                            break;
                        }
                    }
                    if (!interceptingRoute || !marker || !interceptedRoute) {
                        throw new Error(`Invalid interception route: ${path}. Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>`);
                    }
                    interceptingRoute = (0, _apppaths.normalizeAppPath)(interceptingRoute) // normalize the path, e.g. /(blog)/feed -> /feed
                    ;
                    switch (marker) {
                        case "(.)":
                            // (.) indicates that we should match with sibling routes, so we just need to append the intercepted route to the intercepting route
                            if (interceptingRoute === "/") {
                                interceptedRoute = `/${interceptedRoute}`;
                            } else {
                                interceptedRoute = interceptingRoute + "/" + interceptedRoute;
                            }
                            break;
                        case "(..)":
                            // (..) indicates that we should match at one level up, so we need to remove the last segment of the intercepting route
                            if (interceptingRoute === "/") {
                                throw new Error(`Invalid interception route: ${path}. Cannot use (..) marker at the root level, use (.) instead.`);
                            }
                            interceptedRoute = interceptingRoute.split("/").slice(0, -1).concat(interceptedRoute).join("/");
                            break;
                        case "(...)":
                            // (...) will match the route segment in the root directory, so we need to use the root directory to prepend the intercepted route
                            interceptedRoute = "/" + interceptedRoute;
                            break;
                        case "(..)(..)":
                            // (..)(..) indicates that we should match at two levels up, so we need to remove the last two segments of the intercepting route
                            const splitInterceptingRoute = interceptingRoute.split("/");
                            if (splitInterceptingRoute.length <= 2) {
                                throw new Error(`Invalid interception route: ${path}. Cannot use (..)(..) marker at the root level or one level up.`);
                            }
                            interceptedRoute = splitInterceptingRoute.slice(0, -2).concat(interceptedRoute).join("/");
                            break;
                        default:
                            throw new Error("Invariant: unexpected marker");
                    }
                    return {
                        interceptingRoute,
                        interceptedRoute
                    };
                }

                //# sourceMappingURL=interception-routes.js.map

                /***/
            }),

        /***/
        1843:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "normalizeLocalePath", {
                    enumerable: true,
                    get: function() {
                        return normalizeLocalePath;
                    }
                });

                function normalizeLocalePath(pathname, locales) {
                    let detectedLocale;
                    // first item will be empty string from splitting at first char
                    const pathnameParts = pathname.split("/");
                    (locales || []).some((locale) => {
                        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {
                            detectedLocale = locale;
                            pathnameParts.splice(1, 1);
                            pathname = pathnameParts.join("/") || "/";
                            return true;
                        }
                        return false;
                    });
                    return {
                        pathname,
                        detectedLocale
                    };
                }

                //# sourceMappingURL=normalize-locale-path.js.map

                /***/
            }),

        /***/
        1844:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "parseRelativeUrl", {
                    enumerable: true,
                    get: function() {
                        return parseRelativeUrl;
                    }
                });
                const _utils = __webpack_require__(1826);
                const _querystring = __webpack_require__(1832);

                function parseRelativeUrl(url, base) {
                    const globalBase = new URL(typeof window === "undefined" ? "http://n" : (0, _utils.getLocationOrigin)());
                    const resolvedBase = base ? new URL(base, globalBase) : url.startsWith(".") ? new URL(typeof window === "undefined" ? "http://n" : window.location.href) : globalBase;
                    const {
                        pathname,
                        searchParams,
                        search,
                        hash,
                        href,
                        origin
                    } = new URL(url, resolvedBase);
                    if (origin !== globalBase.origin) {
                        throw new Error("invariant: invalid relative URL, router received " + url);
                    }
                    return {
                        pathname,
                        query: (0, _querystring.searchParamsToUrlQuery)(searchParams),
                        search,
                        hash,
                        href: href.slice(globalBase.origin.length)
                    };
                }

                //# sourceMappingURL=parse-relative-url.js.map

                /***/
            }),

        /***/
        1845:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "hasBasePath", {
                    enumerable: true,
                    get: function() {
                        return hasBasePath;
                    }
                });
                const _pathhasprefix = __webpack_require__(1833);
                const basePath = Object({
                    "NODE_ENV": "production"
                }).__NEXT_ROUTER_BASEPATH || "";

                function hasBasePath(path) {
                    return (0, _pathhasprefix.pathHasPrefix)(path, basePath);
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=has-base-path.js.map

                /***/
            }),

        /***/
        1846:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "normalizePathTrailingSlash", {
                    enumerable: true,
                    get: function() {
                        return normalizePathTrailingSlash;
                    }
                });
                const _removetrailingslash = __webpack_require__(1825);
                const _parsepath = __webpack_require__(1823);
                const normalizePathTrailingSlash = (path) => {
                    if (!path.startsWith("/") || Object({
                            "NODE_ENV": "production"
                        }).__NEXT_MANUAL_TRAILING_SLASH) {
                        return path;
                    }
                    const {
                        pathname,
                        query,
                        hash
                    } = (0, _parsepath.parsePath)(path);
                    if (Object({
                            "NODE_ENV": "production"
                        }).__NEXT_TRAILING_SLASH) {
                        if (/\.[^/]+\/?$/.test(pathname)) {
                            return "" + (0, _removetrailingslash.removeTrailingSlash)(pathname) + query + hash;
                        } else if (pathname.endsWith("/")) {
                            return "" + pathname + query + hash;
                        } else {
                            return pathname + "/" + query + hash;
                        }
                    }
                    return "" + (0, _removetrailingslash.removeTrailingSlash)(pathname) + query + hash;
                };

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=normalize-trailing-slash.js.map

                /***/
            }),

        /***/
        1847:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "addPathPrefix", {
                    enumerable: true,
                    get: function() {
                        return addPathPrefix;
                    }
                });
                const _parsepath = __webpack_require__(1823);

                function addPathPrefix(path, prefix) {
                    if (!path.startsWith("/") || !prefix) {
                        return path;
                    }
                    const {
                        pathname,
                        query,
                        hash
                    } = (0, _parsepath.parsePath)(path);
                    return "" + prefix + pathname + query + hash;
                }

                //# sourceMappingURL=add-path-prefix.js.map

                /***/
            }),

        /***/
        1848:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.



                var R = typeof Reflect === 'object' ? Reflect : null
                var ReflectApply = R && typeof R.apply === 'function' ?
                    R.apply :
                    function ReflectApply(target, receiver, args) {
                        return Function.prototype.apply.call(target, receiver, args);
                    }

                var ReflectOwnKeys
                if (R && typeof R.ownKeys === 'function') {
                    ReflectOwnKeys = R.ownKeys
                } else if (Object.getOwnPropertySymbols) {
                    ReflectOwnKeys = function ReflectOwnKeys(target) {
                        return Object.getOwnPropertyNames(target)
                            .concat(Object.getOwnPropertySymbols(target));
                    };
                } else {
                    ReflectOwnKeys = function ReflectOwnKeys(target) {
                        return Object.getOwnPropertyNames(target);
                    };
                }

                function ProcessEmitWarning(warning) {
                    if (console && console.warn) console.warn(warning);
                }

                var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
                    return value !== value;
                }

                function EventEmitter() {
                    EventEmitter.init.call(this);
                }
                module.exports = EventEmitter;
                module.exports.once = once;

                // Backwards-compat with node 0.10.x
                EventEmitter.EventEmitter = EventEmitter;

                EventEmitter.prototype._events = undefined;
                EventEmitter.prototype._eventsCount = 0;
                EventEmitter.prototype._maxListeners = undefined;

                // By default EventEmitters will print a warning if more than 10 listeners are
                // added to it. This is a useful default which helps finding memory leaks.
                var defaultMaxListeners = 10;

                function checkListener(listener) {
                    if (typeof listener !== 'function') {
                        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
                    }
                }

                Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                    enumerable: true,
                    get: function() {
                        return defaultMaxListeners;
                    },
                    set: function(arg) {
                        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
                            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
                        }
                        defaultMaxListeners = arg;
                    }
                });

                EventEmitter.init = function() {

                    if (this._events === undefined ||
                        this._events === Object.getPrototypeOf(this)._events) {
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                    }

                    this._maxListeners = this._maxListeners || undefined;
                };

                // Obviously not all Emitters should be limited to 10. This function allows
                // that to be increased. Set to zero for unlimited.
                EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
                        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
                    }
                    this._maxListeners = n;
                    return this;
                };

                function _getMaxListeners(that) {
                    if (that._maxListeners === undefined)
                        return EventEmitter.defaultMaxListeners;
                    return that._maxListeners;
                }

                EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                    return _getMaxListeners(this);
                };

                EventEmitter.prototype.emit = function emit(type) {
                    var args = [];
                    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
                    var doError = (type === 'error');

                    var events = this._events;
                    if (events !== undefined)
                        doError = (doError && events.error === undefined);
                    else if (!doError)
                        return false;

                    // If there is no 'error' event listener then throw.
                    if (doError) {
                        var er;
                        if (args.length > 0)
                            er = args[0];
                        if (er instanceof Error) {
                            // Note: The comments on the `throw` lines are intentional, they show
                            // up in Node's output if this results in an unhandled exception.
                            throw er; // Unhandled 'error' event
                        }
                        // At least give some kind of context to the user
                        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
                        err.context = er;
                        throw err; // Unhandled 'error' event
                    }

                    var handler = events[type];

                    if (handler === undefined)
                        return false;

                    if (typeof handler === 'function') {
                        ReflectApply(handler, this, args);
                    } else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for (var i = 0; i < len; ++i)
                            ReflectApply(listeners[i], this, args);
                    }

                    return true;
                };

                function _addListener(target, type, listener, prepend) {
                    var m;
                    var events;
                    var existing;

                    checkListener(listener);

                    events = target._events;
                    if (events === undefined) {
                        events = target._events = Object.create(null);
                        target._eventsCount = 0;
                    } else {
                        // To avoid recursion in the case that type === "newListener"! Before
                        // adding it to the listeners, first emit "newListener".
                        if (events.newListener !== undefined) {
                            target.emit('newListener', type,
                                listener.listener ? listener.listener : listener);

                            // Re-assign `events` because a newListener handler could have caused the
                            // this._events to be assigned to a new object
                            events = target._events;
                        }
                        existing = events[type];
                    }

                    if (existing === undefined) {
                        // Optimize the case of one listener. Don't need the extra array object.
                        existing = events[type] = listener;
                        ++target._eventsCount;
                    } else {
                        if (typeof existing === 'function') {
                            // Adding the second element, need to change to array.
                            existing = events[type] =
                                prepend ? [listener, existing] : [existing, listener];
                            // If we've already got an array, just append.
                        } else if (prepend) {
                            existing.unshift(listener);
                        } else {
                            existing.push(listener);
                        }

                        // Check for listener leak
                        m = _getMaxListeners(target);
                        if (m > 0 && existing.length > m && !existing.warned) {
                            existing.warned = true;
                            // No error code for this since it is a Warning
                            // eslint-disable-next-line no-restricted-syntax
                            var w = new Error('Possible EventEmitter memory leak detected. ' +
                                existing.length + ' ' + String(type) + ' listeners ' +
                                'added. Use emitter.setMaxListeners() to ' +
                                'increase limit');
                            w.name = 'MaxListenersExceededWarning';
                            w.emitter = target;
                            w.type = type;
                            w.count = existing.length;
                            ProcessEmitWarning(w);
                        }
                    }

                    return target;
                }

                EventEmitter.prototype.addListener = function addListener(type, listener) {
                    return _addListener(this, type, listener, false);
                };

                EventEmitter.prototype.on = EventEmitter.prototype.addListener;

                EventEmitter.prototype.prependListener =
                    function prependListener(type, listener) {
                        return _addListener(this, type, listener, true);
                    };

                function onceWrapper() {
                    if (!this.fired) {
                        this.target.removeListener(this.type, this.wrapFn);
                        this.fired = true;
                        if (arguments.length === 0)
                            return this.listener.call(this.target);
                        return this.listener.apply(this.target, arguments);
                    }
                }

                function _onceWrap(target, type, listener) {
                    var state = {
                        fired: false,
                        wrapFn: undefined,
                        target: target,
                        type: type,
                        listener: listener
                    };
                    var wrapped = onceWrapper.bind(state);
                    wrapped.listener = listener;
                    state.wrapFn = wrapped;
                    return wrapped;
                }

                EventEmitter.prototype.once = function once(type, listener) {
                    checkListener(listener);
                    this.on(type, _onceWrap(this, type, listener));
                    return this;
                };

                EventEmitter.prototype.prependOnceListener =
                    function prependOnceListener(type, listener) {
                        checkListener(listener);
                        this.prependListener(type, _onceWrap(this, type, listener));
                        return this;
                    };

                // Emits a 'removeListener' event if and only if the listener was removed.
                EventEmitter.prototype.removeListener =
                    function removeListener(type, listener) {
                        var list, events, position, i, originalListener;

                        checkListener(listener);

                        events = this._events;
                        if (events === undefined)
                            return this;

                        list = events[type];
                        if (list === undefined)
                            return this;

                        if (list === listener || list.listener === listener) {
                            if (--this._eventsCount === 0)
                                this._events = Object.create(null);
                            else {
                                delete events[type];
                                if (events.removeListener)
                                    this.emit('removeListener', type, list.listener || listener);
                            }
                        } else if (typeof list !== 'function') {
                            position = -1;

                            for (i = list.length - 1; i >= 0; i--) {
                                if (list[i] === listener || list[i].listener === listener) {
                                    originalListener = list[i].listener;
                                    position = i;
                                    break;
                                }
                            }

                            if (position < 0)
                                return this;

                            if (position === 0)
                                list.shift();
                            else {
                                spliceOne(list, position);
                            }

                            if (list.length === 1)
                                events[type] = list[0];

                            if (events.removeListener !== undefined)
                                this.emit('removeListener', type, originalListener || listener);
                        }

                        return this;
                    };

                EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

                EventEmitter.prototype.removeAllListeners =
                    function removeAllListeners(type) {
                        var listeners, events, i;

                        events = this._events;
                        if (events === undefined)
                            return this;

                        // not listening for removeListener, no need to emit
                        if (events.removeListener === undefined) {
                            if (arguments.length === 0) {
                                this._events = Object.create(null);
                                this._eventsCount = 0;
                            } else if (events[type] !== undefined) {
                                if (--this._eventsCount === 0)
                                    this._events = Object.create(null);
                                else
                                    delete events[type];
                            }
                            return this;
                        }

                        // emit removeListener for all listeners on all events
                        if (arguments.length === 0) {
                            var keys = Object.keys(events);
                            var key;
                            for (i = 0; i < keys.length; ++i) {
                                key = keys[i];
                                if (key === 'removeListener') continue;
                                this.removeAllListeners(key);
                            }
                            this.removeAllListeners('removeListener');
                            this._events = Object.create(null);
                            this._eventsCount = 0;
                            return this;
                        }

                        listeners = events[type];

                        if (typeof listeners === 'function') {
                            this.removeListener(type, listeners);
                        } else if (listeners !== undefined) {
                            // LIFO order
                            for (i = listeners.length - 1; i >= 0; i--) {
                                this.removeListener(type, listeners[i]);
                            }
                        }

                        return this;
                    };

                function _listeners(target, type, unwrap) {
                    var events = target._events;

                    if (events === undefined)
                        return [];

                    var evlistener = events[type];
                    if (evlistener === undefined)
                        return [];

                    if (typeof evlistener === 'function')
                        return unwrap ? [evlistener.listener || evlistener] : [evlistener];

                    return unwrap ?
                        unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
                }

                EventEmitter.prototype.listeners = function listeners(type) {
                    return _listeners(this, type, true);
                };

                EventEmitter.prototype.rawListeners = function rawListeners(type) {
                    return _listeners(this, type, false);
                };

                EventEmitter.listenerCount = function(emitter, type) {
                    if (typeof emitter.listenerCount === 'function') {
                        return emitter.listenerCount(type);
                    } else {
                        return listenerCount.call(emitter, type);
                    }
                };

                EventEmitter.prototype.listenerCount = listenerCount;

                function listenerCount(type) {
                    var events = this._events;

                    if (events !== undefined) {
                        var evlistener = events[type];

                        if (typeof evlistener === 'function') {
                            return 1;
                        } else if (evlistener !== undefined) {
                            return evlistener.length;
                        }
                    }

                    return 0;
                }

                EventEmitter.prototype.eventNames = function eventNames() {
                    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
                };

                function arrayClone(arr, n) {
                    var copy = new Array(n);
                    for (var i = 0; i < n; ++i)
                        copy[i] = arr[i];
                    return copy;
                }

                function spliceOne(list, index) {
                    for (; index + 1 < list.length; index++)
                        list[index] = list[index + 1];
                    list.pop();
                }

                function unwrapListeners(arr) {
                    var ret = new Array(arr.length);
                    for (var i = 0; i < ret.length; ++i) {
                        ret[i] = arr[i].listener || arr[i];
                    }
                    return ret;
                }

                function once(emitter, name) {
                    return new Promise(function(resolve, reject) {
                        function errorListener(err) {
                            emitter.removeListener(name, resolver);
                            reject(err);
                        }

                        function resolver() {
                            if (typeof emitter.removeListener === 'function') {
                                emitter.removeListener('error', errorListener);
                            }
                            resolve([].slice.call(arguments));
                        };

                        eventTargetAgnosticAddListener(emitter, name, resolver, {
                            once: true
                        });
                        if (name !== 'error') {
                            addErrorHandlerIfEventEmitter(emitter, errorListener, {
                                once: true
                            });
                        }
                    });
                }

                function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
                    if (typeof emitter.on === 'function') {
                        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
                    }
                }

                function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
                    if (typeof emitter.on === 'function') {
                        if (flags.once) {
                            emitter.once(name, listener);
                        } else {
                            emitter.on(name, listener);
                        }
                    } else if (typeof emitter.addEventListener === 'function') {
                        // EventTarget does not have `error` event semantics like Node
                        // EventEmitters, we do not listen for `error` events here.
                        emitter.addEventListener(name, function wrapListener(arg) {
                            // IE does not have builtin `{ once: true }` support so we
                            // have to do it manually.
                            if (flags.once) {
                                emitter.removeEventListener(name, wrapListener);
                            }
                            listener(arg);
                        });
                    } else {
                        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
                    }
                }


                /***/
            }),

        /***/
        1849:
            /***/
            (function(module, exports, __webpack_require__) {

                exports = module.exports = __webpack_require__(1889);
                exports.Stream = exports;
                exports.Readable = exports;
                exports.Writable = __webpack_require__(1851);
                exports.Duplex = __webpack_require__(1822);
                exports.Transform = __webpack_require__(1893);
                exports.PassThrough = __webpack_require__(1988);


                /***/
            }),

        /***/
        1850:
            /***/
            (function(module, exports, __webpack_require__) {

                /* eslint-disable node/no-deprecated-api */
                var buffer = __webpack_require__(1676)
                var Buffer = buffer.Buffer

                // alternative to using Object.keys for old browsers
                function copyProps(src, dst) {
                    for (var key in src) {
                        dst[key] = src[key]
                    }
                }
                if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
                    module.exports = buffer
                } else {
                    // Copy properties from require('buffer')
                    copyProps(buffer, exports)
                    exports.Buffer = SafeBuffer
                }

                function SafeBuffer(arg, encodingOrOffset, length) {
                    return Buffer(arg, encodingOrOffset, length)
                }

                // Copy static methods from Buffer
                copyProps(Buffer, SafeBuffer)

                SafeBuffer.from = function(arg, encodingOrOffset, length) {
                    if (typeof arg === 'number') {
                        throw new TypeError('Argument must not be a number')
                    }
                    return Buffer(arg, encodingOrOffset, length)
                }

                SafeBuffer.alloc = function(size, fill, encoding) {
                    if (typeof size !== 'number') {
                        throw new TypeError('Argument must be a number')
                    }
                    var buf = Buffer(size)
                    if (fill !== undefined) {
                        if (typeof encoding === 'string') {
                            buf.fill(fill, encoding)
                        } else {
                            buf.fill(fill)
                        }
                    } else {
                        buf.fill(0)
                    }
                    return buf
                }

                SafeBuffer.allocUnsafe = function(size) {
                    if (typeof size !== 'number') {
                        throw new TypeError('Argument must be a number')
                    }
                    return Buffer(size)
                }

                SafeBuffer.allocUnsafeSlow = function(size) {
                    if (typeof size !== 'number') {
                        throw new TypeError('Argument must be a number')
                    }
                    return buffer.SlowBuffer(size)
                }


                /***/
            }),

        /***/
        1851:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /* WEBPACK VAR INJECTION */
                (function(process, setImmediate, global) { // Copyright Joyent, Inc. and other Node contributors.
                    //
                    // Permission is hereby granted, free of charge, to any person obtaining a
                    // copy of this software and associated documentation files (the
                    // "Software"), to deal in the Software without restriction, including
                    // without limitation the rights to use, copy, modify, merge, publish,
                    // distribute, sublicense, and/or sell copies of the Software, and to permit
                    // persons to whom the Software is furnished to do so, subject to the
                    // following conditions:
                    //
                    // The above copyright notice and this permission notice shall be included
                    // in all copies or substantial portions of the Software.
                    //
                    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                    // USE OR OTHER DEALINGS IN THE SOFTWARE.

                    // A bit simpler than readable streams.
                    // Implement an async ._write(chunk, encoding, cb), and it'll handle all
                    // the drain event emission and buffering.



                    /*<replacement>*/

                    var pna = __webpack_require__(1834);
                    /*</replacement>*/

                    module.exports = Writable;

                    /* <replacement> */
                    function WriteReq(chunk, encoding, cb) {
                        this.chunk = chunk;
                        this.encoding = encoding;
                        this.callback = cb;
                        this.next = null;
                    }

                    // It seems a linked list but it is not
                    // there will be only 2 of these for each stream
                    function CorkedRequest(state) {
                        var _this = this;

                        this.next = null;
                        this.entry = null;
                        this.finish = function() {
                            onCorkedFinish(_this, state);
                        };
                    }
                    /* </replacement> */

                    /*<replacement>*/
                    var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
                    /*</replacement>*/

                    /*<replacement>*/
                    var Duplex;
                    /*</replacement>*/

                    Writable.WritableState = WritableState;

                    /*<replacement>*/
                    var util = Object.create(__webpack_require__(1827));
                    util.inherits = __webpack_require__(1824);
                    /*</replacement>*/

                    /*<replacement>*/
                    var internalUtil = {
                        deprecate: __webpack_require__(1986)
                    };
                    /*</replacement>*/

                    /*<replacement>*/
                    var Stream = __webpack_require__(1890);
                    /*</replacement>*/

                    /*<replacement>*/

                    var Buffer = __webpack_require__(1850).Buffer;
                    var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function() {};

                    function _uint8ArrayToBuffer(chunk) {
                        return Buffer.from(chunk);
                    }

                    function _isUint8Array(obj) {
                        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                    }

                    /*</replacement>*/

                    var destroyImpl = __webpack_require__(1891);

                    util.inherits(Writable, Stream);

                    function nop() {}

                    function WritableState(options, stream) {
                        Duplex = Duplex || __webpack_require__(1822);

                        options = options || {};

                        // Duplex streams are both readable and writable, but share
                        // the same options object.
                        // However, some cases require setting options to different
                        // values for the readable and the writable sides of the duplex stream.
                        // These options can be provided separately as readableXXX and writableXXX.
                        var isDuplex = stream instanceof Duplex;

                        // object stream flag to indicate whether or not this stream
                        // contains buffers or objects.
                        this.objectMode = !!options.objectMode;

                        if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

                        // the point at which write() starts returning false
                        // Note: 0 is a valid value, means that we always return false if
                        // the entire buffer is not flushed immediately on write()
                        var hwm = options.highWaterMark;
                        var writableHwm = options.writableHighWaterMark;
                        var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                        if (hwm || hwm === 0) this.highWaterMark = hwm;
                        else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
                        else this.highWaterMark = defaultHwm;

                        // cast to ints.
                        this.highWaterMark = Math.floor(this.highWaterMark);

                        // if _final has been called
                        this.finalCalled = false;

                        // drain event flag.
                        this.needDrain = false;
                        // at the start of calling end()
                        this.ending = false;
                        // when end() has been called, and returned
                        this.ended = false;
                        // when 'finish' is emitted
                        this.finished = false;

                        // has it been destroyed
                        this.destroyed = false;

                        // should we decode strings into buffers before passing to _write?
                        // this is here so that some node-core streams can optimize string
                        // handling at a lower level.
                        var noDecode = options.decodeStrings === false;
                        this.decodeStrings = !noDecode;

                        // Crypto is kind of old and crusty.  Historically, its default string
                        // encoding is 'binary' so we have to make this configurable.
                        // Everything else in the universe uses 'utf8', though.
                        this.defaultEncoding = options.defaultEncoding || 'utf8';

                        // not an actual buffer we keep track of, but a measurement
                        // of how much we're waiting to get pushed to some underlying
                        // socket or file.
                        this.length = 0;

                        // a flag to see when we're in the middle of a write.
                        this.writing = false;

                        // when true all writes will be buffered until .uncork() call
                        this.corked = 0;

                        // a flag to be able to tell if the onwrite cb is called immediately,
                        // or on a later tick.  We set this to true at first, because any
                        // actions that shouldn't happen until "later" should generally also
                        // not happen before the first write call.
                        this.sync = true;

                        // a flag to know if we're processing previously buffered items, which
                        // may call the _write() callback in the same tick, so that we don't
                        // end up in an overlapped onwrite situation.
                        this.bufferProcessing = false;

                        // the callback that's passed to _write(chunk,cb)
                        this.onwrite = function(er) {
                            onwrite(stream, er);
                        };

                        // the callback that the user supplies to write(chunk,encoding,cb)
                        this.writecb = null;

                        // the amount that is being written when _write is called.
                        this.writelen = 0;

                        this.bufferedRequest = null;
                        this.lastBufferedRequest = null;

                        // number of pending user-supplied write callbacks
                        // this must be 0 before 'finish' can be emitted
                        this.pendingcb = 0;

                        // emit prefinish if the only thing we're waiting for is _write cbs
                        // This is relevant for synchronous Transform streams
                        this.prefinished = false;

                        // True if the error was already emitted and should not be thrown again
                        this.errorEmitted = false;

                        // count buffered requests
                        this.bufferedRequestCount = 0;

                        // allocate the first CorkedRequest, there is always
                        // one allocated and free to use, and we maintain at most two
                        this.corkedRequestsFree = new CorkedRequest(this);
                    }

                    WritableState.prototype.getBuffer = function getBuffer() {
                        var current = this.bufferedRequest;
                        var out = [];
                        while (current) {
                            out.push(current);
                            current = current.next;
                        }
                        return out;
                    };

                    (function() {
                        try {
                            Object.defineProperty(WritableState.prototype, 'buffer', {
                                get: internalUtil.deprecate(function() {
                                    return this.getBuffer();
                                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                            });
                        } catch (_) {}
                    })();

                    // Test _writableState for inheritance to account for Duplex streams,
                    // whose prototype chain only points to Readable.
                    var realHasInstance;
                    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                        realHasInstance = Function.prototype[Symbol.hasInstance];
                        Object.defineProperty(Writable, Symbol.hasInstance, {
                            value: function(object) {
                                if (realHasInstance.call(this, object)) return true;
                                if (this !== Writable) return false;

                                return object && object._writableState instanceof WritableState;
                            }
                        });
                    } else {
                        realHasInstance = function(object) {
                            return object instanceof this;
                        };
                    }

                    function Writable(options) {
                        Duplex = Duplex || __webpack_require__(1822);

                        // Writable ctor is applied to Duplexes, too.
                        // `realHasInstance` is necessary because using plain `instanceof`
                        // would return false, as no `_writableState` property is attached.

                        // Trying to use the custom `instanceof` for Writable here will also break the
                        // Node.js LazyTransform implementation, which has a non-trivial getter for
                        // `_writableState` that would lead to infinite recursion.
                        if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                            return new Writable(options);
                        }

                        this._writableState = new WritableState(options, this);

                        // legacy.
                        this.writable = true;

                        if (options) {
                            if (typeof options.write === 'function') this._write = options.write;

                            if (typeof options.writev === 'function') this._writev = options.writev;

                            if (typeof options.destroy === 'function') this._destroy = options.destroy;

                            if (typeof options.final === 'function') this._final = options.final;
                        }

                        Stream.call(this);
                    }

                    // Otherwise people can pipe Writable streams, which is just wrong.
                    Writable.prototype.pipe = function() {
                        this.emit('error', new Error('Cannot pipe, not readable'));
                    };

                    function writeAfterEnd(stream, cb) {
                        var er = new Error('write after end');
                        // TODO: defer error events consistently everywhere, not just the cb
                        stream.emit('error', er);
                        pna.nextTick(cb, er);
                    }

                    // Checks that a user-supplied chunk is valid, especially for the particular
                    // mode the stream is in. Currently this means that `null` is never accepted
                    // and undefined/non-string values are only allowed in object mode.
                    function validChunk(stream, state, chunk, cb) {
                        var valid = true;
                        var er = false;

                        if (chunk === null) {
                            er = new TypeError('May not write null values to stream');
                        } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                            er = new TypeError('Invalid non-string/buffer chunk');
                        }
                        if (er) {
                            stream.emit('error', er);
                            pna.nextTick(cb, er);
                            valid = false;
                        }
                        return valid;
                    }

                    Writable.prototype.write = function(chunk, encoding, cb) {
                        var state = this._writableState;
                        var ret = false;
                        var isBuf = !state.objectMode && _isUint8Array(chunk);

                        if (isBuf && !Buffer.isBuffer(chunk)) {
                            chunk = _uint8ArrayToBuffer(chunk);
                        }

                        if (typeof encoding === 'function') {
                            cb = encoding;
                            encoding = null;
                        }

                        if (isBuf) encoding = 'buffer';
                        else if (!encoding) encoding = state.defaultEncoding;

                        if (typeof cb !== 'function') cb = nop;

                        if (state.ended) writeAfterEnd(this, cb);
                        else if (isBuf || validChunk(this, state, chunk, cb)) {
                            state.pendingcb++;
                            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                        }

                        return ret;
                    };

                    Writable.prototype.cork = function() {
                        var state = this._writableState;

                        state.corked++;
                    };

                    Writable.prototype.uncork = function() {
                        var state = this._writableState;

                        if (state.corked) {
                            state.corked--;

                            if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                        }
                    };

                    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                        // node::ParseEncoding() requires lower case.
                        if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                        if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
                        this._writableState.defaultEncoding = encoding;
                        return this;
                    };

                    function decodeChunk(state, chunk, encoding) {
                        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                            chunk = Buffer.from(chunk, encoding);
                        }
                        return chunk;
                    }

                    Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
                        // making it explicit this property is not enumerable
                        // because otherwise some prototype manipulation in
                        // userland will fail
                        enumerable: false,
                        get: function() {
                            return this._writableState.highWaterMark;
                        }
                    });

                    // if we're already writing something, then just put this
                    // in the queue, and wait our turn.  Otherwise, call _write
                    // If we return false, then we need a drain event, so set that flag.
                    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                        if (!isBuf) {
                            var newChunk = decodeChunk(state, chunk, encoding);
                            if (chunk !== newChunk) {
                                isBuf = true;
                                encoding = 'buffer';
                                chunk = newChunk;
                            }
                        }
                        var len = state.objectMode ? 1 : chunk.length;

                        state.length += len;

                        var ret = state.length < state.highWaterMark;
                        // we must ensure that previous needDrain will not be reset to false.
                        if (!ret) state.needDrain = true;

                        if (state.writing || state.corked) {
                            var last = state.lastBufferedRequest;
                            state.lastBufferedRequest = {
                                chunk: chunk,
                                encoding: encoding,
                                isBuf: isBuf,
                                callback: cb,
                                next: null
                            };
                            if (last) {
                                last.next = state.lastBufferedRequest;
                            } else {
                                state.bufferedRequest = state.lastBufferedRequest;
                            }
                            state.bufferedRequestCount += 1;
                        } else {
                            doWrite(stream, state, false, len, chunk, encoding, cb);
                        }

                        return ret;
                    }

                    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                        state.writelen = len;
                        state.writecb = cb;
                        state.writing = true;
                        state.sync = true;
                        if (writev) stream._writev(chunk, state.onwrite);
                        else stream._write(chunk, encoding, state.onwrite);
                        state.sync = false;
                    }

                    function onwriteError(stream, state, sync, er, cb) {
                        --state.pendingcb;

                        if (sync) {
                            // defer the callback if we are being called synchronously
                            // to avoid piling up things on the stack
                            pna.nextTick(cb, er);
                            // this can emit finish, and it will always happen
                            // after error
                            pna.nextTick(finishMaybe, stream, state);
                            stream._writableState.errorEmitted = true;
                            stream.emit('error', er);
                        } else {
                            // the caller expect this to happen before if
                            // it is async
                            cb(er);
                            stream._writableState.errorEmitted = true;
                            stream.emit('error', er);
                            // this can emit finish, but finish must
                            // always follow error
                            finishMaybe(stream, state);
                        }
                    }

                    function onwriteStateUpdate(state) {
                        state.writing = false;
                        state.writecb = null;
                        state.length -= state.writelen;
                        state.writelen = 0;
                    }

                    function onwrite(stream, er) {
                        var state = stream._writableState;
                        var sync = state.sync;
                        var cb = state.writecb;

                        onwriteStateUpdate(state);

                        if (er) onwriteError(stream, state, sync, er, cb);
                        else {
                            // Check if we're actually ready to finish, but don't emit yet
                            var finished = needFinish(state);

                            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                                clearBuffer(stream, state);
                            }

                            if (sync) {
                                /*<replacement>*/
                                asyncWrite(afterWrite, stream, state, finished, cb);
                                /*</replacement>*/
                            } else {
                                afterWrite(stream, state, finished, cb);
                            }
                        }
                    }

                    function afterWrite(stream, state, finished, cb) {
                        if (!finished) onwriteDrain(stream, state);
                        state.pendingcb--;
                        cb();
                        finishMaybe(stream, state);
                    }

                    // Must force callback to be called on nextTick, so that we don't
                    // emit 'drain' before the write() consumer gets the 'false' return
                    // value, and has a chance to attach a 'drain' listener.
                    function onwriteDrain(stream, state) {
                        if (state.length === 0 && state.needDrain) {
                            state.needDrain = false;
                            stream.emit('drain');
                        }
                    }

                    // if there's something in the buffer waiting, then process it
                    function clearBuffer(stream, state) {
                        state.bufferProcessing = true;
                        var entry = state.bufferedRequest;

                        if (stream._writev && entry && entry.next) {
                            // Fast case, write everything using _writev()
                            var l = state.bufferedRequestCount;
                            var buffer = new Array(l);
                            var holder = state.corkedRequestsFree;
                            holder.entry = entry;

                            var count = 0;
                            var allBuffers = true;
                            while (entry) {
                                buffer[count] = entry;
                                if (!entry.isBuf) allBuffers = false;
                                entry = entry.next;
                                count += 1;
                            }
                            buffer.allBuffers = allBuffers;

                            doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                            // doWrite is almost always async, defer these to save a bit of time
                            // as the hot path ends with doWrite
                            state.pendingcb++;
                            state.lastBufferedRequest = null;
                            if (holder.next) {
                                state.corkedRequestsFree = holder.next;
                                holder.next = null;
                            } else {
                                state.corkedRequestsFree = new CorkedRequest(state);
                            }
                            state.bufferedRequestCount = 0;
                        } else {
                            // Slow case, write chunks one-by-one
                            while (entry) {
                                var chunk = entry.chunk;
                                var encoding = entry.encoding;
                                var cb = entry.callback;
                                var len = state.objectMode ? 1 : chunk.length;

                                doWrite(stream, state, false, len, chunk, encoding, cb);
                                entry = entry.next;
                                state.bufferedRequestCount--;
                                // if we didn't call the onwrite immediately, then
                                // it means that we need to wait until it does.
                                // also, that means that the chunk and cb are currently
                                // being processed, so move the buffer counter past them.
                                if (state.writing) {
                                    break;
                                }
                            }

                            if (entry === null) state.lastBufferedRequest = null;
                        }

                        state.bufferedRequest = entry;
                        state.bufferProcessing = false;
                    }

                    Writable.prototype._write = function(chunk, encoding, cb) {
                        cb(new Error('_write() is not implemented'));
                    };

                    Writable.prototype._writev = null;

                    Writable.prototype.end = function(chunk, encoding, cb) {
                        var state = this._writableState;

                        if (typeof chunk === 'function') {
                            cb = chunk;
                            chunk = null;
                            encoding = null;
                        } else if (typeof encoding === 'function') {
                            cb = encoding;
                            encoding = null;
                        }

                        if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

                        // .end() fully uncorks
                        if (state.corked) {
                            state.corked = 1;
                            this.uncork();
                        }

                        // ignore unnecessary end() calls.
                        if (!state.ending) endWritable(this, state, cb);
                    };

                    function needFinish(state) {
                        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                    }

                    function callFinal(stream, state) {
                        stream._final(function(err) {
                            state.pendingcb--;
                            if (err) {
                                stream.emit('error', err);
                            }
                            state.prefinished = true;
                            stream.emit('prefinish');
                            finishMaybe(stream, state);
                        });
                    }

                    function prefinish(stream, state) {
                        if (!state.prefinished && !state.finalCalled) {
                            if (typeof stream._final === 'function') {
                                state.pendingcb++;
                                state.finalCalled = true;
                                pna.nextTick(callFinal, stream, state);
                            } else {
                                state.prefinished = true;
                                stream.emit('prefinish');
                            }
                        }
                    }

                    function finishMaybe(stream, state) {
                        var need = needFinish(state);
                        if (need) {
                            prefinish(stream, state);
                            if (state.pendingcb === 0) {
                                state.finished = true;
                                stream.emit('finish');
                            }
                        }
                        return need;
                    }

                    function endWritable(stream, state, cb) {
                        state.ending = true;
                        finishMaybe(stream, state);
                        if (cb) {
                            if (state.finished) pna.nextTick(cb);
                            else stream.once('finish', cb);
                        }
                        state.ended = true;
                        stream.writable = false;
                    }

                    function onCorkedFinish(corkReq, state, err) {
                        var entry = corkReq.entry;
                        corkReq.entry = null;
                        while (entry) {
                            var cb = entry.callback;
                            state.pendingcb--;
                            cb(err);
                            entry = entry.next;
                        }

                        // reuse the free corkReq.
                        state.corkedRequestsFree.next = corkReq;
                    }

                    Object.defineProperty(Writable.prototype, 'destroyed', {
                        get: function() {
                            if (this._writableState === undefined) {
                                return false;
                            }
                            return this._writableState.destroyed;
                        },
                        set: function(value) {
                            // we ignore the value if the stream
                            // has not been initialized yet
                            if (!this._writableState) {
                                return;
                            }

                            // backward compatibility, the user is explicitly
                            // managing destroyed
                            this._writableState.destroyed = value;
                        }
                    });

                    Writable.prototype.destroy = destroyImpl.destroy;
                    Writable.prototype._undestroy = destroyImpl.undestroy;
                    Writable.prototype._destroy = function(err, cb) {
                        this.end();
                        cb(err);
                    };
                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(123), __webpack_require__(452).setImmediate, __webpack_require__(68)))

                /***/
            }),

        /***/
        1852:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var implementation = __webpack_require__(2007);

                module.exports = Function.prototype.bind || implementation;


                /***/
            }),

        /***/
        1853:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var GetIntrinsic = __webpack_require__(1828);

                /** @type {import('.')} */
                var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
                if ($defineProperty) {
                    try {
                        $defineProperty({}, 'a', {
                            value: 1
                        });
                    } catch (e) {
                        // IE 8 has a broken defineProperty
                        $defineProperty = false;
                    }
                }

                module.exports = $defineProperty;


                /***/
            }),

        /***/
        1854:
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return useControlled;
                });
                /* harmony import */
                var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
                /* harmony import */
                var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
                /* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */

                function useControlled(_ref) {
                    var controlled = _ref.controlled,
                        defaultProp = _ref.default,
                        name = _ref.name,
                        _ref$state = _ref.state,
                        state = _ref$state === void 0 ? 'value' : _ref$state;

                    var _React$useRef = react__WEBPACK_IMPORTED_MODULE_0__["useRef"](controlled !== undefined),
                        isControlled = _React$useRef.current;

                    var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__["useState"](defaultProp),
                        valueState = _React$useState[0],
                        setValue = _React$useState[1];

                    var value = isControlled ? controlled : valueState;

                    if (false) {
                        var _React$useRef2, defaultValue;
                    }

                    var setValueIfUncontrolled = react__WEBPACK_IMPORTED_MODULE_0__["useCallback"](function(newValue) {
                        if (!isControlled) {
                            setValue(newValue);
                        }
                    }, []);
                    return [value, setValueIfUncontrolled];
                }

                /***/
            }),

        /***/
        1872:
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = __webpack_require__(1873)


                /***/
            }),

        /***/
        1873:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /* global window */
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    Router: function() {
                        return _router.default;
                    },
                    createRouter: function() {
                        return createRouter;
                    },
                    // Export the singletonRouter and this is the public API.
                    default: function() {
                        return _default;
                    },
                    makePublicRouterInstance: function() {
                        return makePublicRouterInstance;
                    },
                    useRouter: function() {
                        return useRouter;
                    },
                    withRouter: function() {
                        return _withrouter.default;
                    }
                });
                const _interop_require_default = __webpack_require__(448);
                const _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(0));
                const _router = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1943));
                const _routercontextsharedruntime = __webpack_require__(2023);
                const _iserror = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1875));
                const _withrouter = /*#__PURE__*/ _interop_require_default._(__webpack_require__(2024));
                const singletonRouter = {
                    router: null,
                    readyCallbacks: [],
                    ready(callback) {
                        if (this.router) return callback();
                        if (typeof window !== "undefined") {
                            this.readyCallbacks.push(callback);
                        }
                    }
                };
                // Create public properties and methods of the router in the singletonRouter
                const urlPropertyFields = [
                    "pathname",
                    "route",
                    "query",
                    "asPath",
                    "components",
                    "isFallback",
                    "basePath",
                    "locale",
                    "locales",
                    "defaultLocale",
                    "isReady",
                    "isPreview",
                    "isLocaleDomain",
                    "domainLocales"
                ];
                const routerEvents = [
                    "routeChangeStart",
                    "beforeHistoryChange",
                    "routeChangeComplete",
                    "routeChangeError",
                    "hashChangeStart",
                    "hashChangeComplete"
                ];
                const coreMethodFields = [
                    "push",
                    "replace",
                    "reload",
                    "back",
                    "prefetch",
                    "beforePopState"
                ];
                // Events is a static property on the router, the router doesn't have to be initialized to use it
                Object.defineProperty(singletonRouter, "events", {
                    get() {
                        return _router.default.events;
                    }
                });

                function getRouter() {
                    if (!singletonRouter.router) {
                        const message = "No router instance found.\n" + 'You should only use "next/router" on the client side of your app.\n';
                        throw new Error(message);
                    }
                    return singletonRouter.router;
                }
                urlPropertyFields.forEach((field) => {
                    // Here we need to use Object.defineProperty because we need to return
                    // the property assigned to the actual router
                    // The value might get changed as we change routes and this is the
                    // proper way to access it
                    Object.defineProperty(singletonRouter, field, {
                        get() {
                            const router = getRouter();
                            return router[field];
                        }
                    });
                });
                coreMethodFields.forEach((field) => {
                    singletonRouter[field] = function() {
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }
                        const router = getRouter();
                        return router[field](...args);
                    };
                });
                routerEvents.forEach((event) => {
                    singletonRouter.ready(() => {
                        _router.default.events.on(event, function() {
                            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                                args[_key] = arguments[_key];
                            }
                            const eventField = "on" + event.charAt(0).toUpperCase() + event.substring(1);
                            const _singletonRouter = singletonRouter;
                            if (_singletonRouter[eventField]) {
                                try {
                                    _singletonRouter[eventField](...args);
                                } catch (err) {
                                    console.error("Error when running the Router event: " + eventField);
                                    console.error((0, _iserror.default)(err) ? err.message + "\n" + err.stack : err + "");
                                }
                            }
                        });
                    });
                });
                const _default = singletonRouter;

                function useRouter() {
                    const router = _react.default.useContext(_routercontextsharedruntime.RouterContext);
                    if (!router) {
                        throw new Error("NextRouter was not mounted. https://nextjs.org/docs/messages/next-router-not-mounted");
                    }
                    return router;
                }

                function createRouter() {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    singletonRouter.router = new _router.default(...args);
                    singletonRouter.readyCallbacks.forEach((cb) => cb());
                    singletonRouter.readyCallbacks = [];
                    return singletonRouter.router;
                }

                function makePublicRouterInstance(router) {
                    const scopedRouter = router;
                    const instance = {};
                    for (const property of urlPropertyFields) {
                        if (typeof scopedRouter[property] === "object") {
                            instance[property] = Object.assign(Array.isArray(scopedRouter[property]) ? [] : {}, scopedRouter[property]) // makes sure query is not stateful
                            ;
                            continue;
                        }
                        instance[property] = scopedRouter[property];
                    }
                    // Events is a static property on the router, the router doesn't have to be initialized to use it
                    instance.events = _router.default.events;
                    coreMethodFields.forEach((field) => {
                        instance[field] = function() {
                            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                                args[_key] = arguments[_key];
                            }
                            return scopedRouter[field](...args);
                        };
                    });
                    return instance;
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=router.js.map

                /***/
            }),

        /***/
        1874:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    cancelIdleCallback: function() {
                        return cancelIdleCallback;
                    },
                    requestIdleCallback: function() {
                        return requestIdleCallback;
                    }
                });
                const requestIdleCallback = typeof self !== "undefined" && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function(cb) {
                    let start = Date.now();
                    return self.setTimeout(function() {
                        cb({
                            didTimeout: false,
                            timeRemaining: function() {
                                return Math.max(0, 50 - (Date.now() - start));
                            }
                        });
                    }, 1);
                };
                const cancelIdleCallback = typeof self !== "undefined" && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function(id) {
                    return clearTimeout(id);
                };

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=request-idle-callback.js.map

                /***/
            }),

        /***/
        1875:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    default: function() {
                        return isError;
                    },
                    getProperError: function() {
                        return getProperError;
                    }
                });
                const _isplainobject = __webpack_require__(1951);

                function isError(err) {
                    return typeof err === "object" && err !== null && "name" in err && "message" in err;
                }

                function getProperError(err) {
                    if (isError(err)) {
                        return err;
                    }
                    if (false) {}
                    return new Error((0, _isplainobject.isPlainObject)(err) ? JSON.stringify(err) : err + "");
                }

                //# sourceMappingURL=is-error.js.map

                /***/
            }),

        /***/
        1876:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    getSortedRoutes: function() {
                        return _sortedroutes.getSortedRoutes;
                    },
                    isDynamicRoute: function() {
                        return _isdynamic.isDynamicRoute;
                    }
                });
                const _sortedroutes = __webpack_require__(1953);
                const _isdynamic = __webpack_require__(1877);

                //# sourceMappingURL=index.js.map

                /***/
            }),

        /***/
        1877:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "isDynamicRoute", {
                    enumerable: true,
                    get: function() {
                        return isDynamicRoute;
                    }
                });
                const _interceptionroutes = __webpack_require__(1842);
                // Identify /[param]/ in route string
                const TEST_ROUTE = /\/\[[^/]+?\](?=\/|$)/;

                function isDynamicRoute(route) {
                    if ((0, _interceptionroutes.isInterceptionRouteAppPath)(route)) {
                        route = (0, _interceptionroutes.extractInterceptionRouteInformation)(route).interceptedRoute;
                    }
                    return TEST_ROUTE.test(route);
                }

                //# sourceMappingURL=is-dynamic.js.map

                /***/
            }),

        /***/
        1878:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                /**
                 * Tokenize input string.
                 */
                function lexer(str) {
                    var tokens = [];
                    var i = 0;
                    while (i < str.length) {
                        var char = str[i];
                        if (char === "*" || char === "+" || char === "?") {
                            tokens.push({
                                type: "MODIFIER",
                                index: i,
                                value: str[i++]
                            });
                            continue;
                        }
                        if (char === "\\") {
                            tokens.push({
                                type: "ESCAPED_CHAR",
                                index: i++,
                                value: str[i++]
                            });
                            continue;
                        }
                        if (char === "{") {
                            tokens.push({
                                type: "OPEN",
                                index: i,
                                value: str[i++]
                            });
                            continue;
                        }
                        if (char === "}") {
                            tokens.push({
                                type: "CLOSE",
                                index: i,
                                value: str[i++]
                            });
                            continue;
                        }
                        if (char === ":") {
                            var name = "";
                            var j = i + 1;
                            while (j < str.length) {
                                var code = str.charCodeAt(j);
                                if (
                                    // `0-9`
                                    (code >= 48 && code <= 57) ||
                                    // `A-Z`
                                    (code >= 65 && code <= 90) ||
                                    // `a-z`
                                    (code >= 97 && code <= 122) ||
                                    // `_`
                                    code === 95) {
                                    name += str[j++];
                                    continue;
                                }
                                break;
                            }
                            if (!name)
                                throw new TypeError("Missing parameter name at " + i);
                            tokens.push({
                                type: "NAME",
                                index: i,
                                value: name
                            });
                            i = j;
                            continue;
                        }
                        if (char === "(") {
                            var count = 1;
                            var pattern = "";
                            var j = i + 1;
                            if (str[j] === "?") {
                                throw new TypeError("Pattern cannot start with \"?\" at " + j);
                            }
                            while (j < str.length) {
                                if (str[j] === "\\") {
                                    pattern += str[j++] + str[j++];
                                    continue;
                                }
                                if (str[j] === ")") {
                                    count--;
                                    if (count === 0) {
                                        j++;
                                        break;
                                    }
                                } else if (str[j] === "(") {
                                    count++;
                                    if (str[j + 1] !== "?") {
                                        throw new TypeError("Capturing groups are not allowed at " + j);
                                    }
                                }
                                pattern += str[j++];
                            }
                            if (count)
                                throw new TypeError("Unbalanced pattern at " + i);
                            if (!pattern)
                                throw new TypeError("Missing pattern at " + i);
                            tokens.push({
                                type: "PATTERN",
                                index: i,
                                value: pattern
                            });
                            i = j;
                            continue;
                        }
                        tokens.push({
                            type: "CHAR",
                            index: i,
                            value: str[i++]
                        });
                    }
                    tokens.push({
                        type: "END",
                        index: i,
                        value: ""
                    });
                    return tokens;
                }
                /**
                 * Parse a string for the raw tokens.
                 */
                function parse(str, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    var tokens = lexer(str);
                    var _a = options.prefixes,
                        prefixes = _a === void 0 ? "./" : _a;
                    var defaultPattern = "[^" + escapeString(options.delimiter || "/#?") + "]+?";
                    var result = [];
                    var key = 0;
                    var i = 0;
                    var path = "";
                    var tryConsume = function(type) {
                        if (i < tokens.length && tokens[i].type === type)
                            return tokens[i++].value;
                    };
                    var mustConsume = function(type) {
                        var value = tryConsume(type);
                        if (value !== undefined)
                            return value;
                        var _a = tokens[i],
                            nextType = _a.type,
                            index = _a.index;
                        throw new TypeError("Unexpected " + nextType + " at " + index + ", expected " + type);
                    };
                    var consumeText = function() {
                        var result = "";
                        var value;
                        // tslint:disable-next-line
                        while ((value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR"))) {
                            result += value;
                        }
                        return result;
                    };
                    while (i < tokens.length) {
                        var char = tryConsume("CHAR");
                        var name = tryConsume("NAME");
                        var pattern = tryConsume("PATTERN");
                        if (name || pattern) {
                            var prefix = char || "";
                            if (prefixes.indexOf(prefix) === -1) {
                                path += prefix;
                                prefix = "";
                            }
                            if (path) {
                                result.push(path);
                                path = "";
                            }
                            result.push({
                                name: name || key++,
                                prefix: prefix,
                                suffix: "",
                                pattern: pattern || defaultPattern,
                                modifier: tryConsume("MODIFIER") || ""
                            });
                            continue;
                        }
                        var value = char || tryConsume("ESCAPED_CHAR");
                        if (value) {
                            path += value;
                            continue;
                        }
                        if (path) {
                            result.push(path);
                            path = "";
                        }
                        var open = tryConsume("OPEN");
                        if (open) {
                            var prefix = consumeText();
                            var name_1 = tryConsume("NAME") || "";
                            var pattern_1 = tryConsume("PATTERN") || "";
                            var suffix = consumeText();
                            mustConsume("CLOSE");
                            result.push({
                                name: name_1 || (pattern_1 ? key++ : ""),
                                pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
                                prefix: prefix,
                                suffix: suffix,
                                modifier: tryConsume("MODIFIER") || ""
                            });
                            continue;
                        }
                        mustConsume("END");
                    }
                    return result;
                }
                exports.parse = parse;
                /**
                 * Compile a string to a template function for the path.
                 */
                function compile(str, options) {
                    return tokensToFunction(parse(str, options), options);
                }
                exports.compile = compile;
                /**
                 * Expose a method for transforming tokens into the path function.
                 */
                function tokensToFunction(tokens, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    var reFlags = flags(options);
                    var _a = options.encode,
                        encode = _a === void 0 ? function(x) {
                            return x;
                        } : _a,
                        _b = options.validate,
                        validate = _b === void 0 ? true : _b;
                    // Compile all the tokens into regexps.
                    var matches = tokens.map(function(token) {
                        if (typeof token === "object") {
                            return new RegExp("^(?:" + token.pattern + ")$", reFlags);
                        }
                    });
                    return function(data) {
                        var path = "";
                        for (var i = 0; i < tokens.length; i++) {
                            var token = tokens[i];
                            if (typeof token === "string") {
                                path += token;
                                continue;
                            }
                            var value = data ? data[token.name] : undefined;
                            var optional = token.modifier === "?" || token.modifier === "*";
                            var repeat = token.modifier === "*" || token.modifier === "+";
                            if (Array.isArray(value)) {
                                if (!repeat) {
                                    throw new TypeError("Expected \"" + token.name + "\" to not repeat, but got an array");
                                }
                                if (value.length === 0) {
                                    if (optional)
                                        continue;
                                    throw new TypeError("Expected \"" + token.name + "\" to not be empty");
                                }
                                for (var j = 0; j < value.length; j++) {
                                    var segment = encode(value[j], token);
                                    if (validate && !matches[i].test(segment)) {
                                        throw new TypeError("Expected all \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                                    }
                                    path += token.prefix + segment + token.suffix;
                                }
                                continue;
                            }
                            if (typeof value === "string" || typeof value === "number") {
                                var segment = encode(String(value), token);
                                if (validate && !matches[i].test(segment)) {
                                    throw new TypeError("Expected \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                                }
                                path += token.prefix + segment + token.suffix;
                                continue;
                            }
                            if (optional)
                                continue;
                            var typeOfMessage = repeat ? "an array" : "a string";
                            throw new TypeError("Expected \"" + token.name + "\" to be " + typeOfMessage);
                        }
                        return path;
                    };
                }
                exports.tokensToFunction = tokensToFunction;
                /**
                 * Create path match function from `path-to-regexp` spec.
                 */
                function match(str, options) {
                    var keys = [];
                    var re = pathToRegexp(str, keys, options);
                    return regexpToFunction(re, keys, options);
                }
                exports.match = match;
                /**
                 * Create a path match function from `path-to-regexp` output.
                 */
                function regexpToFunction(re, keys, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    var _a = options.decode,
                        decode = _a === void 0 ? function(x) {
                            return x;
                        } : _a;
                    return function(pathname) {
                        var m = re.exec(pathname);
                        if (!m)
                            return false;
                        var path = m[0],
                            index = m.index;
                        var params = Object.create(null);
                        var _loop_1 = function(i) {
                            // tslint:disable-next-line
                            if (m[i] === undefined)
                                return "continue";
                            var key = keys[i - 1];
                            if (key.modifier === "*" || key.modifier === "+") {
                                params[key.name] = m[i].split(key.prefix + key.suffix).map(function(value) {
                                    return decode(value, key);
                                });
                            } else {
                                params[key.name] = decode(m[i], key);
                            }
                        };
                        for (var i = 1; i < m.length; i++) {
                            _loop_1(i);
                        }
                        return {
                            path: path,
                            index: index,
                            params: params
                        };
                    };
                }
                exports.regexpToFunction = regexpToFunction;
                /**
                 * Escape a regular expression string.
                 */
                function escapeString(str) {
                    return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
                }
                /**
                 * Get the flags for a regexp from the options.
                 */
                function flags(options) {
                    return options && options.sensitive ? "" : "i";
                }
                /**
                 * Pull out keys from a regexp.
                 */
                function regexpToRegexp(path, keys) {
                    if (!keys)
                        return path;
                    // Use a negative lookahead to match only capturing groups.
                    var groups = path.source.match(/\((?!\?)/g);
                    if (groups) {
                        for (var i = 0; i < groups.length; i++) {
                            keys.push({
                                name: i,
                                prefix: "",
                                suffix: "",
                                modifier: "",
                                pattern: ""
                            });
                        }
                    }
                    return path;
                }
                /**
                 * Transform an array into a regexp.
                 */
                function arrayToRegexp(paths, keys, options) {
                    var parts = paths.map(function(path) {
                        return pathToRegexp(path, keys, options).source;
                    });
                    return new RegExp("(?:" + parts.join("|") + ")", flags(options));
                }
                /**
                 * Create a path regexp from string input.
                 */
                function stringToRegexp(path, keys, options) {
                    return tokensToRegexp(parse(path, options), keys, options);
                }
                /**
                 * Expose a function for taking tokens and returning a RegExp.
                 */
                function tokensToRegexp(tokens, keys, options) {
                    if (options === void 0) {
                        options = {};
                    }
                    var _a = options.strict,
                        strict = _a === void 0 ? false : _a,
                        _b = options.start,
                        start = _b === void 0 ? true : _b,
                        _c = options.end,
                        end = _c === void 0 ? true : _c,
                        _d = options.encode,
                        encode = _d === void 0 ? function(x) {
                            return x;
                        } : _d;
                    var endsWith = "[" + escapeString(options.endsWith || "") + "]|$";
                    var delimiter = "[" + escapeString(options.delimiter || "/#?") + "]";
                    var route = start ? "^" : "";
                    // Iterate over the tokens and create our regexp string.
                    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
                        var token = tokens_1[_i];
                        if (typeof token === "string") {
                            route += escapeString(encode(token));
                        } else {
                            var prefix = escapeString(encode(token.prefix));
                            var suffix = escapeString(encode(token.suffix));
                            if (token.pattern) {
                                if (keys)
                                    keys.push(token);
                                if (prefix || suffix) {
                                    if (token.modifier === "+" || token.modifier === "*") {
                                        var mod = token.modifier === "*" ? "?" : "";
                                        route += "(?:" + prefix + "((?:" + token.pattern + ")(?:" + suffix + prefix + "(?:" + token.pattern + "))*)" + suffix + ")" + mod;
                                    } else {
                                        route += "(?:" + prefix + "(" + token.pattern + ")" + suffix + ")" + token.modifier;
                                    }
                                } else {
                                    route += "(" + token.pattern + ")" + token.modifier;
                                }
                            } else {
                                route += "(?:" + prefix + suffix + ")" + token.modifier;
                            }
                        }
                    }
                    if (end) {
                        if (!strict)
                            route += delimiter + "?";
                        route += !options.endsWith ? "$" : "(?=" + endsWith + ")";
                    } else {
                        var endToken = tokens[tokens.length - 1];
                        var isEndDelimited = typeof endToken === "string" ?
                            delimiter.indexOf(endToken[endToken.length - 1]) > -1 : // tslint:disable-next-line
                            endToken === undefined;
                        if (!strict) {
                            route += "(?:" + delimiter + "(?=" + endsWith + "))?";
                        }
                        if (!isEndDelimited) {
                            route += "(?=" + delimiter + "|" + endsWith + ")";
                        }
                    }
                    return new RegExp(route, flags(options));
                }
                exports.tokensToRegexp = tokensToRegexp;
                /**
                 * Normalize the given path string, returning a regular expression.
                 *
                 * An empty array can be passed in for the keys, which will hold the
                 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
                 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
                 */
                function pathToRegexp(path, keys, options) {
                    if (path instanceof RegExp)
                        return regexpToRegexp(path, keys);
                    if (Array.isArray(path))
                        return arrayToRegexp(path, keys, options);
                    return stringToRegexp(path, keys, options);
                }
                exports.pathToRegexp = pathToRegexp;
                //# sourceMappingURL=index.js.map

                /***/
            }),

        /***/
        1879:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // regexp is based on https://github.com/sindresorhus/escape-string-regexp

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "escapeStringRegexp", {
                    enumerable: true,
                    get: function() {
                        return escapeStringRegexp;
                    }
                });
                const reHasRegExp = /[|\\{}()[\]^$+*?.-]/;
                const reReplaceRegExp = /[|\\{}()[\]^$+*?.-]/g;

                function escapeStringRegexp(str) {
                    // see also: https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/escapeRegExp.js#L23
                    if (reHasRegExp.test(str)) {
                        return str.replace(reReplaceRegExp, "\\$&");
                    }
                    return str;
                }

                //# sourceMappingURL=escape-regexp.js.map

                /***/
            }),

        /***/
        1880:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "removeBasePath", {
                    enumerable: true,
                    get: function() {
                        return removeBasePath;
                    }
                });
                const _hasbasepath = __webpack_require__(1845);
                const basePath = Object({
                    "NODE_ENV": "production"
                }).__NEXT_ROUTER_BASEPATH || "";

                function removeBasePath(path) {
                    if (Object({
                            "NODE_ENV": "production"
                        }).__NEXT_MANUAL_CLIENT_BASE_PATH) {
                        if (!(0, _hasbasepath.hasBasePath)(path)) {
                            return path;
                        }
                    }
                    // Can't trim the basePath if it has zero length!
                    if (basePath.length === 0) return path;
                    path = path.slice(basePath.length);
                    if (!path.startsWith("/")) path = "/" + path;
                    return path;
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=remove-base-path.js.map

                /***/
            }),

        /***/
        1881:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "getRouteMatcher", {
                    enumerable: true,
                    get: function() {
                        return getRouteMatcher;
                    }
                });
                const _utils = __webpack_require__(1826);

                function getRouteMatcher(param) {
                    let {
                        re,
                        groups
                    } = param;
                    return (pathname) => {
                        const routeMatch = re.exec(pathname);
                        if (!routeMatch) {
                            return false;
                        }
                        const decode = (param) => {
                            try {
                                return decodeURIComponent(param);
                            } catch (_) {
                                throw new _utils.DecodeError("failed to decode param");
                            }
                        };
                        const params = {};
                        Object.keys(groups).forEach((slugName) => {
                            const g = groups[slugName];
                            const m = routeMatch[g.pos];
                            if (m !== undefined) {
                                params[slugName] = ~m.indexOf("/") ? m.split("/").map((entry) => decode(entry)) : g.repeat ? [
                                    decode(m)
                                ] : decode(m);
                            }
                        });
                        return params;
                    };
                }

                //# sourceMappingURL=route-matcher.js.map

                /***/
            }),

        /***/
        1882:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    getNamedMiddlewareRegex: function() {
                        return getNamedMiddlewareRegex;
                    },
                    getNamedRouteRegex: function() {
                        return getNamedRouteRegex;
                    },
                    getRouteRegex: function() {
                        return getRouteRegex;
                    }
                });
                const _interceptionroutes = __webpack_require__(1842);
                const _escaperegexp = __webpack_require__(1879);
                const _removetrailingslash = __webpack_require__(1825);
                const NEXT_QUERY_PARAM_PREFIX = "nxtP";
                const NEXT_INTERCEPTION_MARKER_PREFIX = "nxtI";
                /**
                 * Parses a given parameter from a route to a data structure that can be used
                 * to generate the parametrized route. Examples:
                 *   - `[...slug]` -> `{ key: 'slug', repeat: true, optional: true }`
                 *   - `...slug` -> `{ key: 'slug', repeat: true, optional: false }`
                 *   - `[foo]` -> `{ key: 'foo', repeat: false, optional: true }`
                 *   - `bar` -> `{ key: 'bar', repeat: false, optional: false }`
                 */
                function parseParameter(param) {
                    const optional = param.startsWith("[") && param.endsWith("]");
                    if (optional) {
                        param = param.slice(1, -1);
                    }
                    const repeat = param.startsWith("...");
                    if (repeat) {
                        param = param.slice(3);
                    }
                    return {
                        key: param,
                        repeat,
                        optional
                    };
                }

                function getParametrizedRoute(route) {
                    const segments = (0, _removetrailingslash.removeTrailingSlash)(route).slice(1).split("/");
                    const groups = {};
                    let groupIndex = 1;
                    return {
                        parameterizedRoute: segments.map((segment) => {
                            const markerMatch = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m));
                            const paramMatches = segment.match(/\[((?:\[.*\])|.+)\]/) // Check for parameters
                            ;
                            if (markerMatch && paramMatches) {
                                const {
                                    key,
                                    optional,
                                    repeat
                                } = parseParameter(paramMatches[1]);
                                groups[key] = {
                                    pos: groupIndex++,
                                    repeat,
                                    optional
                                };
                                return "/" + (0, _escaperegexp.escapeStringRegexp)(markerMatch) + "([^/]+?)";
                            } else if (paramMatches) {
                                const {
                                    key,
                                    repeat,
                                    optional
                                } = parseParameter(paramMatches[1]);
                                groups[key] = {
                                    pos: groupIndex++,
                                    repeat,
                                    optional
                                };
                                return repeat ? optional ? "(?:/(.+?))?" : "/(.+?)" : "/([^/]+?)";
                            } else {
                                return "/" + (0, _escaperegexp.escapeStringRegexp)(segment);
                            }
                        }).join(""),
                        groups
                    };
                }

                function getRouteRegex(normalizedRoute) {
                    const {
                        parameterizedRoute,
                        groups
                    } = getParametrizedRoute(normalizedRoute);
                    return {
                        re: new RegExp("^" + parameterizedRoute + "(?:/)?$"),
                        groups: groups
                    };
                }
                /**
                 * Builds a function to generate a minimal routeKey using only a-z and minimal
                 * number of characters.
                 */
                function buildGetSafeRouteKey() {
                    let i = 0;
                    return () => {
                        let routeKey = "";
                        let j = ++i;
                        while (j > 0) {
                            routeKey += String.fromCharCode(97 + (j - 1) % 26);
                            j = Math.floor((j - 1) / 26);
                        }
                        return routeKey;
                    };
                }

                function getSafeKeyFromSegment(param) {
                    let {
                        interceptionMarker,
                        getSafeRouteKey,
                        segment,
                        routeKeys,
                        keyPrefix
                    } = param;
                    const {
                        key,
                        optional,
                        repeat
                    } = parseParameter(segment);
                    // replace any non-word characters since they can break
                    // the named regex
                    let cleanedKey = key.replace(/\W/g, "");
                    if (keyPrefix) {
                        cleanedKey = "" + keyPrefix + cleanedKey;
                    }
                    let invalidKey = false;
                    // check if the key is still invalid and fallback to using a known
                    // safe key
                    if (cleanedKey.length === 0 || cleanedKey.length > 30) {
                        invalidKey = true;
                    }
                    if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {
                        invalidKey = true;
                    }
                    if (invalidKey) {
                        cleanedKey = getSafeRouteKey();
                    }
                    if (keyPrefix) {
                        routeKeys[cleanedKey] = "" + keyPrefix + key;
                    } else {
                        routeKeys[cleanedKey] = key;
                    }
                    // if the segment has an interception marker, make sure that's part of the regex pattern
                    // this is to ensure that the route with the interception marker doesn't incorrectly match
                    // the non-intercepted route (ie /app/(.)[username] should not match /app/[username])
                    const interceptionPrefix = interceptionMarker ? (0, _escaperegexp.escapeStringRegexp)(interceptionMarker) : "";
                    return repeat ? optional ? "(?:/" + interceptionPrefix + "(?<" + cleanedKey + ">.+?))?" : "/" + interceptionPrefix + "(?<" + cleanedKey + ">.+?)" : "/" + interceptionPrefix + "(?<" + cleanedKey + ">[^/]+?)";
                }

                function getNamedParametrizedRoute(route, prefixRouteKeys) {
                    const segments = (0, _removetrailingslash.removeTrailingSlash)(route).slice(1).split("/");
                    const getSafeRouteKey = buildGetSafeRouteKey();
                    const routeKeys = {};
                    return {
                        namedParameterizedRoute: segments.map((segment) => {
                            const hasInterceptionMarker = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.some((m) => segment.startsWith(m));
                            const paramMatches = segment.match(/\[((?:\[.*\])|.+)\]/) // Check for parameters
                            ;
                            if (hasInterceptionMarker && paramMatches) {
                                const [usedMarker] = segment.split(paramMatches[0]);
                                return getSafeKeyFromSegment({
                                    getSafeRouteKey,
                                    interceptionMarker: usedMarker,
                                    segment: paramMatches[1],
                                    routeKeys,
                                    keyPrefix: prefixRouteKeys ? NEXT_INTERCEPTION_MARKER_PREFIX : undefined
                                });
                            } else if (paramMatches) {
                                return getSafeKeyFromSegment({
                                    getSafeRouteKey,
                                    segment: paramMatches[1],
                                    routeKeys,
                                    keyPrefix: prefixRouteKeys ? NEXT_QUERY_PARAM_PREFIX : undefined
                                });
                            } else {
                                return "/" + (0, _escaperegexp.escapeStringRegexp)(segment);
                            }
                        }).join(""),
                        routeKeys
                    };
                }

                function getNamedRouteRegex(normalizedRoute, prefixRouteKey) {
                    const result = getNamedParametrizedRoute(normalizedRoute, prefixRouteKey);
                    return {
                        ...getRouteRegex(normalizedRoute),
                        namedRegex: "^" + result.namedParameterizedRoute + "(?:/)?$",
                        routeKeys: result.routeKeys
                    };
                }

                function getNamedMiddlewareRegex(normalizedRoute, options) {
                    const {
                        parameterizedRoute
                    } = getParametrizedRoute(normalizedRoute);
                    const {
                        catchAll = true
                    } = options;
                    if (parameterizedRoute === "/") {
                        let catchAllRegex = catchAll ? ".*" : "";
                        return {
                            namedRegex: "^/" + catchAllRegex + "$"
                        };
                    }
                    const {
                        namedParameterizedRoute
                    } = getNamedParametrizedRoute(normalizedRoute, false);
                    let catchAllGroupedRegex = catchAll ? "(?:(/.*)?)" : "";
                    return {
                        namedRegex: "^" + namedParameterizedRoute + catchAllGroupedRegex + "$"
                    };
                }

                //# sourceMappingURL=route-regex.js.map

                /***/
            }),

        /***/
        1883:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // Format function modified from nodejs
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    formatUrl: function() {
                        return formatUrl;
                    },
                    formatWithValidation: function() {
                        return formatWithValidation;
                    },
                    urlObjectKeys: function() {
                        return urlObjectKeys;
                    }
                });
                const _interop_require_wildcard = __webpack_require__(1841);
                const _querystring = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(1832));
                const slashedProtocols = /https?|ftp|gopher|file/;

                function formatUrl(urlObj) {
                    let {
                        auth,
                        hostname
                    } = urlObj;
                    let protocol = urlObj.protocol || "";
                    let pathname = urlObj.pathname || "";
                    let hash = urlObj.hash || "";
                    let query = urlObj.query || "";
                    let host = false;
                    auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ":") + "@" : "";
                    if (urlObj.host) {
                        host = auth + urlObj.host;
                    } else if (hostname) {
                        host = auth + (~hostname.indexOf(":") ? "[" + hostname + "]" : hostname);
                        if (urlObj.port) {
                            host += ":" + urlObj.port;
                        }
                    }
                    if (query && typeof query === "object") {
                        query = String(_querystring.urlQueryToSearchParams(query));
                    }
                    let search = urlObj.search || query && "?" + query || "";
                    if (protocol && !protocol.endsWith(":")) protocol += ":";
                    if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {
                        host = "//" + (host || "");
                        if (pathname && pathname[0] !== "/") pathname = "/" + pathname;
                    } else if (!host) {
                        host = "";
                    }
                    if (hash && hash[0] !== "#") hash = "#" + hash;
                    if (search && search[0] !== "?") search = "?" + search;
                    pathname = pathname.replace(/[?#]/g, encodeURIComponent);
                    search = search.replace("#", "%23");
                    return "" + protocol + host + pathname + search + hash;
                }
                const urlObjectKeys = [
                    "auth",
                    "hash",
                    "host",
                    "hostname",
                    "href",
                    "path",
                    "pathname",
                    "port",
                    "protocol",
                    "query",
                    "search",
                    "slashes"
                ];

                function formatWithValidation(url) {
                    if (false) {}
                    return formatUrl(url);
                }

                //# sourceMappingURL=format-url.js.map

                /***/
            }),

        /***/
        1884:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "addLocale", {
                    enumerable: true,
                    get: function() {
                        return addLocale;
                    }
                });
                const _addpathprefix = __webpack_require__(1847);
                const _pathhasprefix = __webpack_require__(1833);

                function addLocale(path, locale, defaultLocale, ignorePrefix) {
                    // If no locale was given or the locale is the default locale, we don't need
                    // to prefix the path.
                    if (!locale || locale === defaultLocale) return path;
                    const lower = path.toLowerCase();
                    // If the path is an API path or the path already has the locale prefix, we
                    // don't need to prefix the path.
                    if (!ignorePrefix) {
                        if ((0, _pathhasprefix.pathHasPrefix)(lower, "/api")) return path;
                        if ((0, _pathhasprefix.pathHasPrefix)(lower, "/" + locale.toLowerCase())) return path;
                    }
                    // Add the locale prefix to the path.
                    return (0, _addpathprefix.addPathPrefix)(path, "/" + locale);
                }

                //# sourceMappingURL=add-locale.js.map

                /***/
            }),

        /***/
        1885:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "omit", {
                    enumerable: true,
                    get: function() {
                        return omit;
                    }
                });

                function omit(object, keys) {
                    const omitted = {};
                    Object.keys(object).forEach((key) => {
                        if (!keys.includes(key)) {
                            omitted[key] = object[key];
                        }
                    });
                    return omitted;
                }

                //# sourceMappingURL=omit.js.map

                /***/
            }),

        /***/
        1886:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "isLocalURL", {
                    enumerable: true,
                    get: function() {
                        return isLocalURL;
                    }
                });
                const _utils = __webpack_require__(1826);
                const _hasbasepath = __webpack_require__(1845);

                function isLocalURL(url) {
                    // prevent a hydration mismatch on href for url with anchor refs
                    if (!(0, _utils.isAbsoluteUrl)(url)) return true;
                    try {
                        // absolute urls can be local if they are on the same origin
                        const locationOrigin = (0, _utils.getLocationOrigin)();
                        const resolved = new URL(url, locationOrigin);
                        return resolved.origin === locationOrigin && (0, _hasbasepath.hasBasePath)(resolved.pathname);
                    } catch (_) {
                        return false;
                    }
                }

                //# sourceMappingURL=is-local-url.js.map

                /***/
            }),

        /***/
        1887:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "interpolateAs", {
                    enumerable: true,
                    get: function() {
                        return interpolateAs;
                    }
                });
                const _routematcher = __webpack_require__(1881);
                const _routeregex = __webpack_require__(1882);

                function interpolateAs(route, asPathname, query) {
                    let interpolatedRoute = "";
                    const dynamicRegex = (0, _routeregex.getRouteRegex)(route);
                    const dynamicGroups = dynamicRegex.groups;
                    const dynamicMatches = // Try to match the dynamic route against the asPath
                        (asPathname !== route ? (0, _routematcher.getRouteMatcher)(dynamicRegex)(asPathname) : "") || // Fall back to reading the values from the href
                        // TODO: should this take priority; also need to change in the router.
                        query;
                    interpolatedRoute = route;
                    const params = Object.keys(dynamicGroups);
                    if (!params.every((param) => {
                            let value = dynamicMatches[param] || "";
                            const {
                                repeat,
                                optional
                            } = dynamicGroups[param];
                            // support single-level catch-all
                            // TODO: more robust handling for user-error (passing `/`)
                            let replaced = "[" + (repeat ? "..." : "") + param + "]";
                            if (optional) {
                                replaced = (!value ? "/" : "") + "[" + replaced + "]";
                            }
                            if (repeat && !Array.isArray(value)) value = [
                                value
                            ];
                            return (optional || param in dynamicMatches) && // Interpolate group into data URL if present
                                (interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just
                                    // path delimiter escaped since they are being inserted
                                    // into the URL and we expect URL encoded segments
                                    // when parsing dynamic route params
                                    (segment) => encodeURIComponent(segment)).join("/") : encodeURIComponent(value)) || "/");
                        })) {
                        interpolatedRoute = "" // did not satisfy all requirements
                        ;
                        // n.b. We ignore this error because we handle warning for this case in
                        // development in the `<Link>` component directly.
                    }
                    return {
                        params,
                        result: interpolatedRoute
                    };
                }

                //# sourceMappingURL=interpolate-as.js.map

                /***/
            }),

        /***/
        1888:
            /***/
            (function(module, exports, __webpack_require__) {

                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                module.exports = Stream;

                var EE = __webpack_require__(1848).EventEmitter;
                var inherits = __webpack_require__(1824);

                inherits(Stream, EE);
                Stream.Readable = __webpack_require__(1849);
                Stream.Writable = __webpack_require__(1989);
                Stream.Duplex = __webpack_require__(1990);
                Stream.Transform = __webpack_require__(1991);
                Stream.PassThrough = __webpack_require__(1992);

                // Backwards-compat with node 0.4.x
                Stream.Stream = Stream;



                // old-style streams.  Note that the pipe method (the only relevant
                // part of this class) is overridden in the Readable class.

                function Stream() {
                    EE.call(this);
                }

                Stream.prototype.pipe = function(dest, options) {
                    var source = this;

                    function ondata(chunk) {
                        if (dest.writable) {
                            if (false === dest.write(chunk) && source.pause) {
                                source.pause();
                            }
                        }
                    }

                    source.on('data', ondata);

                    function ondrain() {
                        if (source.readable && source.resume) {
                            source.resume();
                        }
                    }

                    dest.on('drain', ondrain);

                    // If the 'end' option is not supplied, dest.end() will be called when
                    // source gets the 'end' or 'close' events.  Only dest.end() once.
                    if (!dest._isStdio && (!options || options.end !== false)) {
                        source.on('end', onend);
                        source.on('close', onclose);
                    }

                    var didOnEnd = false;

                    function onend() {
                        if (didOnEnd) return;
                        didOnEnd = true;

                        dest.end();
                    }


                    function onclose() {
                        if (didOnEnd) return;
                        didOnEnd = true;

                        if (typeof dest.destroy === 'function') dest.destroy();
                    }

                    // don't leave dangling pipes when there are errors.
                    function onerror(er) {
                        cleanup();
                        if (EE.listenerCount(this, 'error') === 0) {
                            throw er; // Unhandled stream error in pipe.
                        }
                    }

                    source.on('error', onerror);
                    dest.on('error', onerror);

                    // remove all the event listeners that were added.
                    function cleanup() {
                        source.removeListener('data', ondata);
                        dest.removeListener('drain', ondrain);

                        source.removeListener('end', onend);
                        source.removeListener('close', onclose);

                        source.removeListener('error', onerror);
                        dest.removeListener('error', onerror);

                        source.removeListener('end', cleanup);
                        source.removeListener('close', cleanup);

                        dest.removeListener('close', cleanup);
                    }

                    source.on('end', cleanup);
                    source.on('close', cleanup);

                    dest.on('close', cleanup);

                    dest.emit('pipe', source);

                    // Allow for unix-like usage: A.pipe(B).pipe(C)
                    return dest;
                };


                /***/
            }),

        /***/
        1889:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /* WEBPACK VAR INJECTION */
                (function(global, process) { // Copyright Joyent, Inc. and other Node contributors.
                    //
                    // Permission is hereby granted, free of charge, to any person obtaining a
                    // copy of this software and associated documentation files (the
                    // "Software"), to deal in the Software without restriction, including
                    // without limitation the rights to use, copy, modify, merge, publish,
                    // distribute, sublicense, and/or sell copies of the Software, and to permit
                    // persons to whom the Software is furnished to do so, subject to the
                    // following conditions:
                    //
                    // The above copyright notice and this permission notice shall be included
                    // in all copies or substantial portions of the Software.
                    //
                    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                    // USE OR OTHER DEALINGS IN THE SOFTWARE.



                    /*<replacement>*/

                    var pna = __webpack_require__(1834);
                    /*</replacement>*/

                    module.exports = Readable;

                    /*<replacement>*/
                    var isArray = __webpack_require__(819);
                    /*</replacement>*/

                    /*<replacement>*/
                    var Duplex;
                    /*</replacement>*/

                    Readable.ReadableState = ReadableState;

                    /*<replacement>*/
                    var EE = __webpack_require__(1848).EventEmitter;

                    var EElistenerCount = function(emitter, type) {
                        return emitter.listeners(type).length;
                    };
                    /*</replacement>*/

                    /*<replacement>*/
                    var Stream = __webpack_require__(1890);
                    /*</replacement>*/

                    /*<replacement>*/

                    var Buffer = __webpack_require__(1850).Buffer;
                    var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function() {};

                    function _uint8ArrayToBuffer(chunk) {
                        return Buffer.from(chunk);
                    }

                    function _isUint8Array(obj) {
                        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                    }

                    /*</replacement>*/

                    /*<replacement>*/
                    var util = Object.create(__webpack_require__(1827));
                    util.inherits = __webpack_require__(1824);
                    /*</replacement>*/

                    /*<replacement>*/
                    var debugUtil = __webpack_require__(1983);
                    var debug = void 0;
                    if (debugUtil && debugUtil.debuglog) {
                        debug = debugUtil.debuglog('stream');
                    } else {
                        debug = function() {};
                    }
                    /*</replacement>*/

                    var BufferList = __webpack_require__(1984);
                    var destroyImpl = __webpack_require__(1891);
                    var StringDecoder;

                    util.inherits(Readable, Stream);

                    var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

                    function prependListener(emitter, event, fn) {
                        // Sadly this is not cacheable as some libraries bundle their own
                        // event emitter implementation with them.
                        if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

                        // This is a hack to make sure that our error handler is attached before any
                        // userland ones.  NEVER DO THIS. This is here only because this code needs
                        // to continue to work with older versions of Node.js that do not include
                        // the prependListener() method. The goal is to eventually remove this hack.
                        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
                        else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);
                        else emitter._events[event] = [fn, emitter._events[event]];
                    }

                    function ReadableState(options, stream) {
                        Duplex = Duplex || __webpack_require__(1822);

                        options = options || {};

                        // Duplex streams are both readable and writable, but share
                        // the same options object.
                        // However, some cases require setting options to different
                        // values for the readable and the writable sides of the duplex stream.
                        // These options can be provided separately as readableXXX and writableXXX.
                        var isDuplex = stream instanceof Duplex;

                        // object stream flag. Used to make read(n) ignore n and to
                        // make all the buffer merging and length checks go away
                        this.objectMode = !!options.objectMode;

                        if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

                        // the point at which it stops calling _read() to fill the buffer
                        // Note: 0 is a valid value, means "don't call _read preemptively ever"
                        var hwm = options.highWaterMark;
                        var readableHwm = options.readableHighWaterMark;
                        var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                        if (hwm || hwm === 0) this.highWaterMark = hwm;
                        else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
                        else this.highWaterMark = defaultHwm;

                        // cast to ints.
                        this.highWaterMark = Math.floor(this.highWaterMark);

                        // A linked list is used to store data chunks instead of an array because the
                        // linked list can remove elements from the beginning faster than
                        // array.shift()
                        this.buffer = new BufferList();
                        this.length = 0;
                        this.pipes = null;
                        this.pipesCount = 0;
                        this.flowing = null;
                        this.ended = false;
                        this.endEmitted = false;
                        this.reading = false;

                        // a flag to be able to tell if the event 'readable'/'data' is emitted
                        // immediately, or on a later tick.  We set this to true at first, because
                        // any actions that shouldn't happen until "later" should generally also
                        // not happen before the first read call.
                        this.sync = true;

                        // whenever we return null, then we set a flag to say
                        // that we're awaiting a 'readable' event emission.
                        this.needReadable = false;
                        this.emittedReadable = false;
                        this.readableListening = false;
                        this.resumeScheduled = false;

                        // has it been destroyed
                        this.destroyed = false;

                        // Crypto is kind of old and crusty.  Historically, its default string
                        // encoding is 'binary' so we have to make this configurable.
                        // Everything else in the universe uses 'utf8', though.
                        this.defaultEncoding = options.defaultEncoding || 'utf8';

                        // the number of writers that are awaiting a drain event in .pipe()s
                        this.awaitDrain = 0;

                        // if true, a maybeReadMore has been scheduled
                        this.readingMore = false;

                        this.decoder = null;
                        this.encoding = null;
                        if (options.encoding) {
                            if (!StringDecoder) StringDecoder = __webpack_require__(1892).StringDecoder;
                            this.decoder = new StringDecoder(options.encoding);
                            this.encoding = options.encoding;
                        }
                    }

                    function Readable(options) {
                        Duplex = Duplex || __webpack_require__(1822);

                        if (!(this instanceof Readable)) return new Readable(options);

                        this._readableState = new ReadableState(options, this);

                        // legacy
                        this.readable = true;

                        if (options) {
                            if (typeof options.read === 'function') this._read = options.read;

                            if (typeof options.destroy === 'function') this._destroy = options.destroy;
                        }

                        Stream.call(this);
                    }

                    Object.defineProperty(Readable.prototype, 'destroyed', {
                        get: function() {
                            if (this._readableState === undefined) {
                                return false;
                            }
                            return this._readableState.destroyed;
                        },
                        set: function(value) {
                            // we ignore the value if the stream
                            // has not been initialized yet
                            if (!this._readableState) {
                                return;
                            }

                            // backward compatibility, the user is explicitly
                            // managing destroyed
                            this._readableState.destroyed = value;
                        }
                    });

                    Readable.prototype.destroy = destroyImpl.destroy;
                    Readable.prototype._undestroy = destroyImpl.undestroy;
                    Readable.prototype._destroy = function(err, cb) {
                        this.push(null);
                        cb(err);
                    };

                    // Manually shove something into the read() buffer.
                    // This returns true if the highWaterMark has not been hit yet,
                    // similar to how Writable.write() returns true if you should
                    // write() some more.
                    Readable.prototype.push = function(chunk, encoding) {
                        var state = this._readableState;
                        var skipChunkCheck;

                        if (!state.objectMode) {
                            if (typeof chunk === 'string') {
                                encoding = encoding || state.defaultEncoding;
                                if (encoding !== state.encoding) {
                                    chunk = Buffer.from(chunk, encoding);
                                    encoding = '';
                                }
                                skipChunkCheck = true;
                            }
                        } else {
                            skipChunkCheck = true;
                        }

                        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
                    };

                    // Unshift should *always* be something directly out of read()
                    Readable.prototype.unshift = function(chunk) {
                        return readableAddChunk(this, chunk, null, true, false);
                    };

                    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                        var state = stream._readableState;
                        if (chunk === null) {
                            state.reading = false;
                            onEofChunk(stream, state);
                        } else {
                            var er;
                            if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                            if (er) {
                                stream.emit('error', er);
                            } else if (state.objectMode || chunk && chunk.length > 0) {
                                if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                                    chunk = _uint8ArrayToBuffer(chunk);
                                }

                                if (addToFront) {
                                    if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));
                                    else addChunk(stream, state, chunk, true);
                                } else if (state.ended) {
                                    stream.emit('error', new Error('stream.push() after EOF'));
                                } else {
                                    state.reading = false;
                                    if (state.decoder && !encoding) {
                                        chunk = state.decoder.write(chunk);
                                        if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                                        else maybeReadMore(stream, state);
                                    } else {
                                        addChunk(stream, state, chunk, false);
                                    }
                                }
                            } else if (!addToFront) {
                                state.reading = false;
                            }
                        }

                        return needMoreData(state);
                    }

                    function addChunk(stream, state, chunk, addToFront) {
                        if (state.flowing && state.length === 0 && !state.sync) {
                            stream.emit('data', chunk);
                            stream.read(0);
                        } else {
                            // update the buffer info.
                            state.length += state.objectMode ? 1 : chunk.length;
                            if (addToFront) state.buffer.unshift(chunk);
                            else state.buffer.push(chunk);

                            if (state.needReadable) emitReadable(stream);
                        }
                        maybeReadMore(stream, state);
                    }

                    function chunkInvalid(state, chunk) {
                        var er;
                        if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                            er = new TypeError('Invalid non-string/buffer chunk');
                        }
                        return er;
                    }

                    // if it's past the high water mark, we can push in some more.
                    // Also, if we have no data yet, we can stand some
                    // more bytes.  This is to work around cases where hwm=0,
                    // such as the repl.  Also, if the push() triggered a
                    // readable event, and the user called read(largeNumber) such that
                    // needReadable was set, then we ought to push more, so that another
                    // 'readable' event will be triggered.
                    function needMoreData(state) {
                        return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
                    }

                    Readable.prototype.isPaused = function() {
                        return this._readableState.flowing === false;
                    };

                    // backwards compatibility.
                    Readable.prototype.setEncoding = function(enc) {
                        if (!StringDecoder) StringDecoder = __webpack_require__(1892).StringDecoder;
                        this._readableState.decoder = new StringDecoder(enc);
                        this._readableState.encoding = enc;
                        return this;
                    };

                    // Don't raise the hwm > 8MB
                    var MAX_HWM = 0x800000;

                    function computeNewHighWaterMark(n) {
                        if (n >= MAX_HWM) {
                            n = MAX_HWM;
                        } else {
                            // Get the next highest power of 2 to prevent increasing hwm excessively in
                            // tiny amounts
                            n--;
                            n |= n >>> 1;
                            n |= n >>> 2;
                            n |= n >>> 4;
                            n |= n >>> 8;
                            n |= n >>> 16;
                            n++;
                        }
                        return n;
                    }

                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function howMuchToRead(n, state) {
                        if (n <= 0 || state.length === 0 && state.ended) return 0;
                        if (state.objectMode) return 1;
                        if (n !== n) {
                            // Only flow one buffer at a time
                            if (state.flowing && state.length) return state.buffer.head.data.length;
                            else return state.length;
                        }
                        // If we're asking for more than the current hwm, then raise the hwm.
                        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                        if (n <= state.length) return n;
                        // Don't have enough
                        if (!state.ended) {
                            state.needReadable = true;
                            return 0;
                        }
                        return state.length;
                    }

                    // you can override either this method, or the async _read(n) below.
                    Readable.prototype.read = function(n) {
                        debug('read', n);
                        n = parseInt(n, 10);
                        var state = this._readableState;
                        var nOrig = n;

                        if (n !== 0) state.emittedReadable = false;

                        // if we're doing read(0) to trigger a readable event, but we
                        // already have a bunch of data in the buffer, then just trigger
                        // the 'readable' event and move on.
                        if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                            debug('read: emitReadable', state.length, state.ended);
                            if (state.length === 0 && state.ended) endReadable(this);
                            else emitReadable(this);
                            return null;
                        }

                        n = howMuchToRead(n, state);

                        // if we've ended, and we're now clear, then finish it up.
                        if (n === 0 && state.ended) {
                            if (state.length === 0) endReadable(this);
                            return null;
                        }

                        // All the actual chunk generation logic needs to be
                        // *below* the call to _read.  The reason is that in certain
                        // synthetic stream cases, such as passthrough streams, _read
                        // may be a completely synchronous operation which may change
                        // the state of the read buffer, providing enough data when
                        // before there was *not* enough.
                        //
                        // So, the steps are:
                        // 1. Figure out what the state of things will be after we do
                        // a read from the buffer.
                        //
                        // 2. If that resulting state will trigger a _read, then call _read.
                        // Note that this may be asynchronous, or synchronous.  Yes, it is
                        // deeply ugly to write APIs this way, but that still doesn't mean
                        // that the Readable class should behave improperly, as streams are
                        // designed to be sync/async agnostic.
                        // Take note if the _read call is sync or async (ie, if the read call
                        // has returned yet), so that we know whether or not it's safe to emit
                        // 'readable' etc.
                        //
                        // 3. Actually pull the requested chunks out of the buffer and return.

                        // if we need a readable event, then we need to do some reading.
                        var doRead = state.needReadable;
                        debug('need readable', doRead);

                        // if we currently have less than the highWaterMark, then also read some
                        if (state.length === 0 || state.length - n < state.highWaterMark) {
                            doRead = true;
                            debug('length less than watermark', doRead);
                        }

                        // however, if we've ended, then there's no point, and if we're already
                        // reading, then it's unnecessary.
                        if (state.ended || state.reading) {
                            doRead = false;
                            debug('reading or ended', doRead);
                        } else if (doRead) {
                            debug('do read');
                            state.reading = true;
                            state.sync = true;
                            // if the length is currently zero, then we *need* a readable event.
                            if (state.length === 0) state.needReadable = true;
                            // call internal read method
                            this._read(state.highWaterMark);
                            state.sync = false;
                            // If _read pushed data synchronously, then `reading` will be false,
                            // and we need to re-evaluate how much data we can return to the user.
                            if (!state.reading) n = howMuchToRead(nOrig, state);
                        }

                        var ret;
                        if (n > 0) ret = fromList(n, state);
                        else ret = null;

                        if (ret === null) {
                            state.needReadable = true;
                            n = 0;
                        } else {
                            state.length -= n;
                        }

                        if (state.length === 0) {
                            // If we have nothing in the buffer, then we want to know
                            // as soon as we *do* get something into the buffer.
                            if (!state.ended) state.needReadable = true;

                            // If we tried to read() past the EOF, then emit end on the next tick.
                            if (nOrig !== n && state.ended) endReadable(this);
                        }

                        if (ret !== null) this.emit('data', ret);

                        return ret;
                    };

                    function onEofChunk(stream, state) {
                        if (state.ended) return;
                        if (state.decoder) {
                            var chunk = state.decoder.end();
                            if (chunk && chunk.length) {
                                state.buffer.push(chunk);
                                state.length += state.objectMode ? 1 : chunk.length;
                            }
                        }
                        state.ended = true;

                        // emit 'readable' now to make sure it gets picked up.
                        emitReadable(stream);
                    }

                    // Don't emit readable right away in sync mode, because this can trigger
                    // another read() call => stack overflow.  This way, it might trigger
                    // a nextTick recursion warning, but that's not so bad.
                    function emitReadable(stream) {
                        var state = stream._readableState;
                        state.needReadable = false;
                        if (!state.emittedReadable) {
                            debug('emitReadable', state.flowing);
                            state.emittedReadable = true;
                            if (state.sync) pna.nextTick(emitReadable_, stream);
                            else emitReadable_(stream);
                        }
                    }

                    function emitReadable_(stream) {
                        debug('emit readable');
                        stream.emit('readable');
                        flow(stream);
                    }

                    // at this point, the user has presumably seen the 'readable' event,
                    // and called read() to consume some data.  that may have triggered
                    // in turn another _read(n) call, in which case reading = true if
                    // it's in progress.
                    // However, if we're not ended, or reading, and the length < hwm,
                    // then go ahead and try to read some more preemptively.
                    function maybeReadMore(stream, state) {
                        if (!state.readingMore) {
                            state.readingMore = true;
                            pna.nextTick(maybeReadMore_, stream, state);
                        }
                    }

                    function maybeReadMore_(stream, state) {
                        var len = state.length;
                        while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                            debug('maybeReadMore read 0');
                            stream.read(0);
                            if (len === state.length)
                                // didn't get any data, stop spinning.
                                break;
                            else len = state.length;
                        }
                        state.readingMore = false;
                    }

                    // abstract method.  to be overridden in specific implementation classes.
                    // call cb(er, data) where data is <= n in length.
                    // for virtual (non-string, non-buffer) streams, "length" is somewhat
                    // arbitrary, and perhaps not very meaningful.
                    Readable.prototype._read = function(n) {
                        this.emit('error', new Error('_read() is not implemented'));
                    };

                    Readable.prototype.pipe = function(dest, pipeOpts) {
                        var src = this;
                        var state = this._readableState;

                        switch (state.pipesCount) {
                            case 0:
                                state.pipes = dest;
                                break;
                            case 1:
                                state.pipes = [state.pipes, dest];
                                break;
                            default:
                                state.pipes.push(dest);
                                break;
                        }
                        state.pipesCount += 1;
                        debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

                        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

                        var endFn = doEnd ? onend : unpipe;
                        if (state.endEmitted) pna.nextTick(endFn);
                        else src.once('end', endFn);

                        dest.on('unpipe', onunpipe);

                        function onunpipe(readable, unpipeInfo) {
                            debug('onunpipe');
                            if (readable === src) {
                                if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                                    unpipeInfo.hasUnpiped = true;
                                    cleanup();
                                }
                            }
                        }

                        function onend() {
                            debug('onend');
                            dest.end();
                        }

                        // when the dest drains, it reduces the awaitDrain counter
                        // on the source.  This would be more elegant with a .once()
                        // handler in flow(), but adding and removing repeatedly is
                        // too slow.
                        var ondrain = pipeOnDrain(src);
                        dest.on('drain', ondrain);

                        var cleanedUp = false;

                        function cleanup() {
                            debug('cleanup');
                            // cleanup event handlers once the pipe is broken
                            dest.removeListener('close', onclose);
                            dest.removeListener('finish', onfinish);
                            dest.removeListener('drain', ondrain);
                            dest.removeListener('error', onerror);
                            dest.removeListener('unpipe', onunpipe);
                            src.removeListener('end', onend);
                            src.removeListener('end', unpipe);
                            src.removeListener('data', ondata);

                            cleanedUp = true;

                            // if the reader is waiting for a drain event from this
                            // specific writer, then it would cause it to never start
                            // flowing again.
                            // So, if this is awaiting a drain, then we just call it now.
                            // If we don't know, then assume that we are waiting for one.
                            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                        }

                        // If the user pushes more data while we're writing to dest then we'll end up
                        // in ondata again. However, we only want to increase awaitDrain once because
                        // dest will only emit one 'drain' event for the multiple writes.
                        // => Introduce a guard on increasing awaitDrain.
                        var increasedAwaitDrain = false;
                        src.on('data', ondata);

                        function ondata(chunk) {
                            debug('ondata');
                            increasedAwaitDrain = false;
                            var ret = dest.write(chunk);
                            if (false === ret && !increasedAwaitDrain) {
                                // If the user unpiped during `dest.write()`, it is possible
                                // to get stuck in a permanently paused state if that write
                                // also returned false.
                                // => Check whether `dest` is still a piping destination.
                                if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                                    debug('false write response, pause', state.awaitDrain);
                                    state.awaitDrain++;
                                    increasedAwaitDrain = true;
                                }
                                src.pause();
                            }
                        }

                        // if the dest has an error, then stop piping into it.
                        // however, don't suppress the throwing behavior for this.
                        function onerror(er) {
                            debug('onerror', er);
                            unpipe();
                            dest.removeListener('error', onerror);
                            if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                        }

                        // Make sure our error handler is attached before userland ones.
                        prependListener(dest, 'error', onerror);

                        // Both close and finish should trigger unpipe, but only once.
                        function onclose() {
                            dest.removeListener('finish', onfinish);
                            unpipe();
                        }
                        dest.once('close', onclose);

                        function onfinish() {
                            debug('onfinish');
                            dest.removeListener('close', onclose);
                            unpipe();
                        }
                        dest.once('finish', onfinish);

                        function unpipe() {
                            debug('unpipe');
                            src.unpipe(dest);
                        }

                        // tell the dest that it's being piped to
                        dest.emit('pipe', src);

                        // start the flow if it hasn't been started already.
                        if (!state.flowing) {
                            debug('pipe resume');
                            src.resume();
                        }

                        return dest;
                    };

                    function pipeOnDrain(src) {
                        return function() {
                            var state = src._readableState;
                            debug('pipeOnDrain', state.awaitDrain);
                            if (state.awaitDrain) state.awaitDrain--;
                            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                                state.flowing = true;
                                flow(src);
                            }
                        };
                    }

                    Readable.prototype.unpipe = function(dest) {
                        var state = this._readableState;
                        var unpipeInfo = {
                            hasUnpiped: false
                        };

                        // if we're not piping anywhere, then do nothing.
                        if (state.pipesCount === 0) return this;

                        // just one destination.  most common case.
                        if (state.pipesCount === 1) {
                            // passed in one, but it's not the right one.
                            if (dest && dest !== state.pipes) return this;

                            if (!dest) dest = state.pipes;

                            // got a match.
                            state.pipes = null;
                            state.pipesCount = 0;
                            state.flowing = false;
                            if (dest) dest.emit('unpipe', this, unpipeInfo);
                            return this;
                        }

                        // slow case. multiple pipe destinations.

                        if (!dest) {
                            // remove all.
                            var dests = state.pipes;
                            var len = state.pipesCount;
                            state.pipes = null;
                            state.pipesCount = 0;
                            state.flowing = false;

                            for (var i = 0; i < len; i++) {
                                dests[i].emit('unpipe', this, {
                                    hasUnpiped: false
                                });
                            }
                            return this;
                        }

                        // try to find the right one.
                        var index = indexOf(state.pipes, dest);
                        if (index === -1) return this;

                        state.pipes.splice(index, 1);
                        state.pipesCount -= 1;
                        if (state.pipesCount === 1) state.pipes = state.pipes[0];

                        dest.emit('unpipe', this, unpipeInfo);

                        return this;
                    };

                    // set up data events if they are asked for
                    // Ensure readable listeners eventually get something
                    Readable.prototype.on = function(ev, fn) {
                        var res = Stream.prototype.on.call(this, ev, fn);

                        if (ev === 'data') {
                            // Start flowing on next tick if stream isn't explicitly paused
                            if (this._readableState.flowing !== false) this.resume();
                        } else if (ev === 'readable') {
                            var state = this._readableState;
                            if (!state.endEmitted && !state.readableListening) {
                                state.readableListening = state.needReadable = true;
                                state.emittedReadable = false;
                                if (!state.reading) {
                                    pna.nextTick(nReadingNextTick, this);
                                } else if (state.length) {
                                    emitReadable(this);
                                }
                            }
                        }

                        return res;
                    };
                    Readable.prototype.addListener = Readable.prototype.on;

                    function nReadingNextTick(self) {
                        debug('readable nexttick read 0');
                        self.read(0);
                    }

                    // pause() and resume() are remnants of the legacy readable stream API
                    // If the user uses them, then switch into old mode.
                    Readable.prototype.resume = function() {
                        var state = this._readableState;
                        if (!state.flowing) {
                            debug('resume');
                            state.flowing = true;
                            resume(this, state);
                        }
                        return this;
                    };

                    function resume(stream, state) {
                        if (!state.resumeScheduled) {
                            state.resumeScheduled = true;
                            pna.nextTick(resume_, stream, state);
                        }
                    }

                    function resume_(stream, state) {
                        if (!state.reading) {
                            debug('resume read 0');
                            stream.read(0);
                        }

                        state.resumeScheduled = false;
                        state.awaitDrain = 0;
                        stream.emit('resume');
                        flow(stream);
                        if (state.flowing && !state.reading) stream.read(0);
                    }

                    Readable.prototype.pause = function() {
                        debug('call pause flowing=%j', this._readableState.flowing);
                        if (false !== this._readableState.flowing) {
                            debug('pause');
                            this._readableState.flowing = false;
                            this.emit('pause');
                        }
                        return this;
                    };

                    function flow(stream) {
                        var state = stream._readableState;
                        debug('flow', state.flowing);
                        while (state.flowing && stream.read() !== null) {}
                    }

                    // wrap an old-style stream as the async data source.
                    // This is *not* part of the readable stream interface.
                    // It is an ugly unfortunate mess of history.
                    Readable.prototype.wrap = function(stream) {
                        var _this = this;

                        var state = this._readableState;
                        var paused = false;

                        stream.on('end', function() {
                            debug('wrapped end');
                            if (state.decoder && !state.ended) {
                                var chunk = state.decoder.end();
                                if (chunk && chunk.length) _this.push(chunk);
                            }

                            _this.push(null);
                        });

                        stream.on('data', function(chunk) {
                            debug('wrapped data');
                            if (state.decoder) chunk = state.decoder.write(chunk);

                            // don't skip over falsy values in objectMode
                            if (state.objectMode && (chunk === null || chunk === undefined)) return;
                            else if (!state.objectMode && (!chunk || !chunk.length)) return;

                            var ret = _this.push(chunk);
                            if (!ret) {
                                paused = true;
                                stream.pause();
                            }
                        });

                        // proxy all the other methods.
                        // important when wrapping filters and duplexes.
                        for (var i in stream) {
                            if (this[i] === undefined && typeof stream[i] === 'function') {
                                this[i] = function(method) {
                                    return function() {
                                        return stream[method].apply(stream, arguments);
                                    };
                                }(i);
                            }
                        }

                        // proxy certain important events.
                        for (var n = 0; n < kProxyEvents.length; n++) {
                            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                        }

                        // when we try to consume some more bytes, simply unpause the
                        // underlying stream.
                        this._read = function(n) {
                            debug('wrapped _read', n);
                            if (paused) {
                                paused = false;
                                stream.resume();
                            }
                        };

                        return this;
                    };

                    Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
                        // making it explicit this property is not enumerable
                        // because otherwise some prototype manipulation in
                        // userland will fail
                        enumerable: false,
                        get: function() {
                            return this._readableState.highWaterMark;
                        }
                    });

                    // exposed for testing purposes only.
                    Readable._fromList = fromList;

                    // Pluck off n bytes from an array of buffers.
                    // Length is the combined lengths of all the buffers in the list.
                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function fromList(n, state) {
                        // nothing buffered
                        if (state.length === 0) return null;

                        var ret;
                        if (state.objectMode) ret = state.buffer.shift();
                        else if (!n || n >= state.length) {
                            // read it all, truncate the list
                            if (state.decoder) ret = state.buffer.join('');
                            else if (state.buffer.length === 1) ret = state.buffer.head.data;
                            else ret = state.buffer.concat(state.length);
                            state.buffer.clear();
                        } else {
                            // read part of list
                            ret = fromListPartial(n, state.buffer, state.decoder);
                        }

                        return ret;
                    }

                    // Extracts only enough buffered data to satisfy the amount requested.
                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function fromListPartial(n, list, hasStrings) {
                        var ret;
                        if (n < list.head.data.length) {
                            // slice is the same for buffers and strings
                            ret = list.head.data.slice(0, n);
                            list.head.data = list.head.data.slice(n);
                        } else if (n === list.head.data.length) {
                            // first chunk is a perfect match
                            ret = list.shift();
                        } else {
                            // result spans more than one buffer
                            ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                        }
                        return ret;
                    }

                    // Copies a specified amount of characters from the list of buffered data
                    // chunks.
                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function copyFromBufferString(n, list) {
                        var p = list.head;
                        var c = 1;
                        var ret = p.data;
                        n -= ret.length;
                        while (p = p.next) {
                            var str = p.data;
                            var nb = n > str.length ? str.length : n;
                            if (nb === str.length) ret += str;
                            else ret += str.slice(0, n);
                            n -= nb;
                            if (n === 0) {
                                if (nb === str.length) {
                                    ++c;
                                    if (p.next) list.head = p.next;
                                    else list.head = list.tail = null;
                                } else {
                                    list.head = p;
                                    p.data = str.slice(nb);
                                }
                                break;
                            }
                            ++c;
                        }
                        list.length -= c;
                        return ret;
                    }

                    // Copies a specified amount of bytes from the list of buffered data chunks.
                    // This function is designed to be inlinable, so please take care when making
                    // changes to the function body.
                    function copyFromBuffer(n, list) {
                        var ret = Buffer.allocUnsafe(n);
                        var p = list.head;
                        var c = 1;
                        p.data.copy(ret);
                        n -= p.data.length;
                        while (p = p.next) {
                            var buf = p.data;
                            var nb = n > buf.length ? buf.length : n;
                            buf.copy(ret, ret.length - n, 0, nb);
                            n -= nb;
                            if (n === 0) {
                                if (nb === buf.length) {
                                    ++c;
                                    if (p.next) list.head = p.next;
                                    else list.head = list.tail = null;
                                } else {
                                    list.head = p;
                                    p.data = buf.slice(nb);
                                }
                                break;
                            }
                            ++c;
                        }
                        list.length -= c;
                        return ret;
                    }

                    function endReadable(stream) {
                        var state = stream._readableState;

                        // If we get here before consuming all the bytes, then that is a
                        // bug in node.  Should never happen.
                        if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

                        if (!state.endEmitted) {
                            state.ended = true;
                            pna.nextTick(endReadableNT, state, stream);
                        }
                    }

                    function endReadableNT(state, stream) {
                        // Check that we didn't get one last unshift.
                        if (!state.endEmitted && state.length === 0) {
                            state.endEmitted = true;
                            stream.readable = false;
                            stream.emit('end');
                        }
                    }

                    function indexOf(xs, x) {
                        for (var i = 0, l = xs.length; i < l; i++) {
                            if (xs[i] === x) return i;
                        }
                        return -1;
                    }
                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(68), __webpack_require__(123)))

                /***/
            }),

        /***/
        1890:
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = __webpack_require__(1848).EventEmitter;


                /***/
            }),

        /***/
        1891:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /*<replacement>*/

                var pna = __webpack_require__(1834);
                /*</replacement>*/

                // undocumented cb() API, needed for core, not for public API
                function destroy(err, cb) {
                    var _this = this;

                    var readableDestroyed = this._readableState && this._readableState.destroyed;
                    var writableDestroyed = this._writableState && this._writableState.destroyed;

                    if (readableDestroyed || writableDestroyed) {
                        if (cb) {
                            cb(err);
                        } else if (err) {
                            if (!this._writableState) {
                                pna.nextTick(emitErrorNT, this, err);
                            } else if (!this._writableState.errorEmitted) {
                                this._writableState.errorEmitted = true;
                                pna.nextTick(emitErrorNT, this, err);
                            }
                        }

                        return this;
                    }

                    // we set destroyed to true before firing error callbacks in order
                    // to make it re-entrance safe in case destroy() is called within callbacks

                    if (this._readableState) {
                        this._readableState.destroyed = true;
                    }

                    // if this is a duplex stream mark the writable part as destroyed as well
                    if (this._writableState) {
                        this._writableState.destroyed = true;
                    }

                    this._destroy(err || null, function(err) {
                        if (!cb && err) {
                            if (!_this._writableState) {
                                pna.nextTick(emitErrorNT, _this, err);
                            } else if (!_this._writableState.errorEmitted) {
                                _this._writableState.errorEmitted = true;
                                pna.nextTick(emitErrorNT, _this, err);
                            }
                        } else if (cb) {
                            cb(err);
                        }
                    });

                    return this;
                }

                function undestroy() {
                    if (this._readableState) {
                        this._readableState.destroyed = false;
                        this._readableState.reading = false;
                        this._readableState.ended = false;
                        this._readableState.endEmitted = false;
                    }

                    if (this._writableState) {
                        this._writableState.destroyed = false;
                        this._writableState.ended = false;
                        this._writableState.ending = false;
                        this._writableState.finalCalled = false;
                        this._writableState.prefinished = false;
                        this._writableState.finished = false;
                        this._writableState.errorEmitted = false;
                    }
                }

                function emitErrorNT(self, err) {
                    self.emit('error', err);
                }

                module.exports = {
                    destroy: destroy,
                    undestroy: undestroy
                };

                /***/
            }),

        /***/
        1892:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.



                /*<replacement>*/

                var Buffer = __webpack_require__(1987).Buffer;
                /*</replacement>*/

                var isEncoding = Buffer.isEncoding || function(encoding) {
                    encoding = '' + encoding;
                    switch (encoding && encoding.toLowerCase()) {
                        case 'hex':
                        case 'utf8':
                        case 'utf-8':
                        case 'ascii':
                        case 'binary':
                        case 'base64':
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                        case 'raw':
                            return true;
                        default:
                            return false;
                    }
                };

                function _normalizeEncoding(enc) {
                    if (!enc) return 'utf8';
                    var retried;
                    while (true) {
                        switch (enc) {
                            case 'utf8':
                            case 'utf-8':
                                return 'utf8';
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return 'utf16le';
                            case 'latin1':
                            case 'binary':
                                return 'latin1';
                            case 'base64':
                            case 'ascii':
                            case 'hex':
                                return enc;
                            default:
                                if (retried) return; // undefined
                                enc = ('' + enc).toLowerCase();
                                retried = true;
                        }
                    }
                };

                // Do not cache `Buffer.isEncoding` when checking encoding names as some
                // modules monkey-patch it to support additional encodings
                function normalizeEncoding(enc) {
                    var nenc = _normalizeEncoding(enc);
                    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
                    return nenc || enc;
                }

                // StringDecoder provides an interface for efficiently splitting a series of
                // buffers into a series of JS strings without breaking apart multi-byte
                // characters.
                exports.StringDecoder = StringDecoder;

                function StringDecoder(encoding) {
                    this.encoding = normalizeEncoding(encoding);
                    var nb;
                    switch (this.encoding) {
                        case 'utf16le':
                            this.text = utf16Text;
                            this.end = utf16End;
                            nb = 4;
                            break;
                        case 'utf8':
                            this.fillLast = utf8FillLast;
                            nb = 4;
                            break;
                        case 'base64':
                            this.text = base64Text;
                            this.end = base64End;
                            nb = 3;
                            break;
                        default:
                            this.write = simpleWrite;
                            this.end = simpleEnd;
                            return;
                    }
                    this.lastNeed = 0;
                    this.lastTotal = 0;
                    this.lastChar = Buffer.allocUnsafe(nb);
                }

                StringDecoder.prototype.write = function(buf) {
                    if (buf.length === 0) return '';
                    var r;
                    var i;
                    if (this.lastNeed) {
                        r = this.fillLast(buf);
                        if (r === undefined) return '';
                        i = this.lastNeed;
                        this.lastNeed = 0;
                    } else {
                        i = 0;
                    }
                    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
                    return r || '';
                };

                StringDecoder.prototype.end = utf8End;

                // Returns only complete characters in a Buffer
                StringDecoder.prototype.text = utf8Text;

                // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
                StringDecoder.prototype.fillLast = function(buf) {
                    if (this.lastNeed <= buf.length) {
                        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                    }
                    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                    this.lastNeed -= buf.length;
                };

                // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
                // continuation byte. If an invalid byte is detected, -2 is returned.
                function utf8CheckByte(byte) {
                    if (byte <= 0x7F) return 0;
                    else if (byte >> 5 === 0x06) return 2;
                    else if (byte >> 4 === 0x0E) return 3;
                    else if (byte >> 3 === 0x1E) return 4;
                    return byte >> 6 === 0x02 ? -1 : -2;
                }

                // Checks at most 3 bytes at the end of a Buffer in order to detect an
                // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
                // needed to complete the UTF-8 character (if applicable) are returned.
                function utf8CheckIncomplete(self, buf, i) {
                    var j = buf.length - 1;
                    if (j < i) return 0;
                    var nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) self.lastNeed = nb - 1;
                        return nb;
                    }
                    if (--j < i || nb === -2) return 0;
                    nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) self.lastNeed = nb - 2;
                        return nb;
                    }
                    if (--j < i || nb === -2) return 0;
                    nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) {
                            if (nb === 2) nb = 0;
                            else self.lastNeed = nb - 3;
                        }
                        return nb;
                    }
                    return 0;
                }

                // Validates as many continuation bytes for a multi-byte UTF-8 character as
                // needed or are available. If we see a non-continuation byte where we expect
                // one, we "replace" the validated continuation bytes we've seen so far with
                // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
                // behavior. The continuation byte check is included three times in the case
                // where all of the continuation bytes for a character exist in the same buffer.
                // It is also done this way as a slight performance increase instead of using a
                // loop.
                function utf8CheckExtraBytes(self, buf, p) {
                    if ((buf[0] & 0xC0) !== 0x80) {
                        self.lastNeed = 0;
                        return '\ufffd';
                    }
                    if (self.lastNeed > 1 && buf.length > 1) {
                        if ((buf[1] & 0xC0) !== 0x80) {
                            self.lastNeed = 1;
                            return '\ufffd';
                        }
                        if (self.lastNeed > 2 && buf.length > 2) {
                            if ((buf[2] & 0xC0) !== 0x80) {
                                self.lastNeed = 2;
                                return '\ufffd';
                            }
                        }
                    }
                }

                // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
                function utf8FillLast(buf) {
                    var p = this.lastTotal - this.lastNeed;
                    var r = utf8CheckExtraBytes(this, buf, p);
                    if (r !== undefined) return r;
                    if (this.lastNeed <= buf.length) {
                        buf.copy(this.lastChar, p, 0, this.lastNeed);
                        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                    }
                    buf.copy(this.lastChar, p, 0, buf.length);
                    this.lastNeed -= buf.length;
                }

                // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
                // partial character, the character's bytes are buffered until the required
                // number of bytes are available.
                function utf8Text(buf, i) {
                    var total = utf8CheckIncomplete(this, buf, i);
                    if (!this.lastNeed) return buf.toString('utf8', i);
                    this.lastTotal = total;
                    var end = buf.length - (total - this.lastNeed);
                    buf.copy(this.lastChar, 0, end);
                    return buf.toString('utf8', i, end);
                }

                // For UTF-8, a replacement character is added when ending on a partial
                // character.
                function utf8End(buf) {
                    var r = buf && buf.length ? this.write(buf) : '';
                    if (this.lastNeed) return r + '\ufffd';
                    return r;
                }

                // UTF-16LE typically needs two bytes per character, but even if we have an even
                // number of bytes available, we need to check if we end on a leading/high
                // surrogate. In that case, we need to wait for the next two bytes in order to
                // decode the last character properly.
                function utf16Text(buf, i) {
                    if ((buf.length - i) % 2 === 0) {
                        var r = buf.toString('utf16le', i);
                        if (r) {
                            var c = r.charCodeAt(r.length - 1);
                            if (c >= 0xD800 && c <= 0xDBFF) {
                                this.lastNeed = 2;
                                this.lastTotal = 4;
                                this.lastChar[0] = buf[buf.length - 2];
                                this.lastChar[1] = buf[buf.length - 1];
                                return r.slice(0, -1);
                            }
                        }
                        return r;
                    }
                    this.lastNeed = 1;
                    this.lastTotal = 2;
                    this.lastChar[0] = buf[buf.length - 1];
                    return buf.toString('utf16le', i, buf.length - 1);
                }

                // For UTF-16LE we do not explicitly append special replacement characters if we
                // end on a partial character, we simply let v8 handle that.
                function utf16End(buf) {
                    var r = buf && buf.length ? this.write(buf) : '';
                    if (this.lastNeed) {
                        var end = this.lastTotal - this.lastNeed;
                        return r + this.lastChar.toString('utf16le', 0, end);
                    }
                    return r;
                }

                function base64Text(buf, i) {
                    var n = (buf.length - i) % 3;
                    if (n === 0) return buf.toString('base64', i);
                    this.lastNeed = 3 - n;
                    this.lastTotal = 3;
                    if (n === 1) {
                        this.lastChar[0] = buf[buf.length - 1];
                    } else {
                        this.lastChar[0] = buf[buf.length - 2];
                        this.lastChar[1] = buf[buf.length - 1];
                    }
                    return buf.toString('base64', i, buf.length - n);
                }

                function base64End(buf) {
                    var r = buf && buf.length ? this.write(buf) : '';
                    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
                    return r;
                }

                // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
                function simpleWrite(buf) {
                    return buf.toString(this.encoding);
                }

                function simpleEnd(buf) {
                    return buf && buf.length ? this.write(buf) : '';
                }

                /***/
            }),

        /***/
        1893:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // a transform stream is a readable/writable stream where you do
                // something with the data.  Sometimes it's called a "filter",
                // but that's not a great name for it, since that implies a thing where
                // some bits pass through, and others are simply ignored.  (That would
                // be a valid example of a transform, of course.)
                //
                // While the output is causally related to the input, it's not a
                // necessarily symmetric or synchronous transformation.  For example,
                // a zlib stream might take multiple plain-text writes(), and then
                // emit a single compressed chunk some time in the future.
                //
                // Here's how this works:
                //
                // The Transform stream has all the aspects of the readable and writable
                // stream classes.  When you write(chunk), that calls _write(chunk,cb)
                // internally, and returns false if there's a lot of pending writes
                // buffered up.  When you call read(), that calls _read(n) until
                // there's enough pending readable data buffered up.
                //
                // In a transform stream, the written data is placed in a buffer.  When
                // _read(n) is called, it transforms the queued up data, calling the
                // buffered _write cb's as it consumes chunks.  If consuming a single
                // written chunk would result in multiple output chunks, then the first
                // outputted bit calls the readcb, and subsequent chunks just go into
                // the read buffer, and will cause it to emit 'readable' if necessary.
                //
                // This way, back-pressure is actually determined by the reading side,
                // since _read has to be called to start processing a new chunk.  However,
                // a pathological inflate type of transform can cause excessive buffering
                // here.  For example, imagine a stream where every byte of input is
                // interpreted as an integer from 0-255, and then results in that many
                // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
                // 1kb of data being output.  In this case, you could write a very small
                // amount of input, and end up with a very large amount of output.  In
                // such a pathological inflating mechanism, there'd be no way to tell
                // the system to stop doing the transform.  A single 4MB write could
                // cause the system to run out of memory.
                //
                // However, even in such a pathological case, only a single written chunk
                // would be consumed, and then the rest would wait (un-transformed) until
                // the results of the previous transformed chunk were consumed.



                module.exports = Transform;

                var Duplex = __webpack_require__(1822);

                /*<replacement>*/
                var util = Object.create(__webpack_require__(1827));
                util.inherits = __webpack_require__(1824);
                /*</replacement>*/

                util.inherits(Transform, Duplex);

                function afterTransform(er, data) {
                    var ts = this._transformState;
                    ts.transforming = false;

                    var cb = ts.writecb;

                    if (!cb) {
                        return this.emit('error', new Error('write callback called multiple times'));
                    }

                    ts.writechunk = null;
                    ts.writecb = null;

                    if (data != null) // single equals check for both `null` and `undefined`
                        this.push(data);

                    cb(er);

                    var rs = this._readableState;
                    rs.reading = false;
                    if (rs.needReadable || rs.length < rs.highWaterMark) {
                        this._read(rs.highWaterMark);
                    }
                }

                function Transform(options) {
                    if (!(this instanceof Transform)) return new Transform(options);

                    Duplex.call(this, options);

                    this._transformState = {
                        afterTransform: afterTransform.bind(this),
                        needTransform: false,
                        transforming: false,
                        writecb: null,
                        writechunk: null,
                        writeencoding: null
                    };

                    // start out asking for a readable event once data is transformed.
                    this._readableState.needReadable = true;

                    // we have implemented the _read method, and done the other things
                    // that Readable wants before the first _read call, so unset the
                    // sync guard flag.
                    this._readableState.sync = false;

                    if (options) {
                        if (typeof options.transform === 'function') this._transform = options.transform;

                        if (typeof options.flush === 'function') this._flush = options.flush;
                    }

                    // When the writable side finishes, then flush out anything remaining.
                    this.on('prefinish', prefinish);
                }

                function prefinish() {
                    var _this = this;

                    if (typeof this._flush === 'function') {
                        this._flush(function(er, data) {
                            done(_this, er, data);
                        });
                    } else {
                        done(this, null, null);
                    }
                }

                Transform.prototype.push = function(chunk, encoding) {
                    this._transformState.needTransform = false;
                    return Duplex.prototype.push.call(this, chunk, encoding);
                };

                // This is the part where you do stuff!
                // override this function in implementation classes.
                // 'chunk' is an input chunk.
                //
                // Call `push(newChunk)` to pass along transformed output
                // to the readable side.  You may call 'push' zero or more times.
                //
                // Call `cb(err)` when you are done with this chunk.  If you pass
                // an error, then that'll put the hurt on the whole operation.  If you
                // never call cb(), then you'll never get another chunk.
                Transform.prototype._transform = function(chunk, encoding, cb) {
                    throw new Error('_transform() is not implemented');
                };

                Transform.prototype._write = function(chunk, encoding, cb) {
                    var ts = this._transformState;
                    ts.writecb = cb;
                    ts.writechunk = chunk;
                    ts.writeencoding = encoding;
                    if (!ts.transforming) {
                        var rs = this._readableState;
                        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
                    }
                };

                // Doesn't matter what the args are here.
                // _transform does all the work.
                // That we got here means that the readable side wants more data.
                Transform.prototype._read = function(n) {
                    var ts = this._transformState;

                    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                        ts.transforming = true;
                        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                    } else {
                        // mark that we need a transform, so that any data that comes in
                        // will get processed, now that we've asked for it.
                        ts.needTransform = true;
                    }
                };

                Transform.prototype._destroy = function(err, cb) {
                    var _this2 = this;

                    Duplex.prototype._destroy.call(this, err, function(err2) {
                        cb(err2);
                        _this2.emit('close');
                    });
                };

                function done(stream, er, data) {
                    if (er) return stream.emit('error', er);

                    if (data != null) // single equals check for both `null` and `undefined`
                        stream.push(data);

                    // if there's nothing in the write buffer, then that means
                    // that nothing more will ever be provided
                    if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

                    if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

                    return stream.push(null);
                }

                /***/
            }),

        /***/
        1894:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /* WEBPACK VAR INJECTION */
                (function(global) {

                    var objectAssign = __webpack_require__(1995)();

                    // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
                    // original notice:

                    /*!
                     * The buffer module from node.js, for the browser.
                     *
                     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
                     * @license  MIT
                     */
                    function compare(a, b) {
                        if (a === b) {
                            return 0;
                        }

                        var x = a.length;
                        var y = b.length;

                        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                            if (a[i] !== b[i]) {
                                x = a[i];
                                y = b[i];
                                break;
                            }
                        }

                        if (x < y) {
                            return -1;
                        }
                        if (y < x) {
                            return 1;
                        }
                        return 0;
                    }

                    function isBuffer(b) {
                        if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
                            return global.Buffer.isBuffer(b);
                        }
                        return !!(b != null && b._isBuffer);
                    }

                    // based on node assert, original notice:
                    // NB: The URL to the CommonJS spec is kept just for tradition.
                    //     node-assert has evolved a lot since then, both in API and behavior.

                    // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
                    //
                    // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
                    //
                    // Originally from narwhal.js (http://narwhaljs.org)
                    // Copyright (c) 2009 Thomas Robinson <280north.com>
                    //
                    // Permission is hereby granted, free of charge, to any person obtaining a copy
                    // of this software and associated documentation files (the 'Software'), to
                    // deal in the Software without restriction, including without limitation the
                    // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                    // sell copies of the Software, and to permit persons to whom the Software is
                    // furnished to do so, subject to the following conditions:
                    //
                    // The above copyright notice and this permission notice shall be included in
                    // all copies or substantial portions of the Software.
                    //
                    // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                    // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
                    // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
                    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

                    var util = __webpack_require__(1899);
                    var hasOwn = Object.prototype.hasOwnProperty;
                    var pSlice = Array.prototype.slice;
                    var functionsHaveNames = (function() {
                        return function foo() {}.name === 'foo';
                    }());

                    function pToString(obj) {
                        return Object.prototype.toString.call(obj);
                    }

                    function isView(arrbuf) {
                        if (isBuffer(arrbuf)) {
                            return false;
                        }
                        if (typeof global.ArrayBuffer !== 'function') {
                            return false;
                        }
                        if (typeof ArrayBuffer.isView === 'function') {
                            return ArrayBuffer.isView(arrbuf);
                        }
                        if (!arrbuf) {
                            return false;
                        }
                        if (arrbuf instanceof DataView) {
                            return true;
                        }
                        if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                            return true;
                        }
                        return false;
                    }
                    // 1. The assert module provides functions that throw
                    // AssertionError's when particular conditions are not met. The
                    // assert module must conform to the following interface.

                    var assert = module.exports = ok;

                    // 2. The AssertionError is defined in assert.
                    // new assert.AssertionError({ message: message,
                    //                             actual: actual,
                    //                             expected: expected })

                    var regex = /\s*function\s+([^\(\s]*)\s*/;
                    // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
                    function getName(func) {
                        if (!util.isFunction(func)) {
                            return;
                        }
                        if (functionsHaveNames) {
                            return func.name;
                        }
                        var str = func.toString();
                        var match = str.match(regex);
                        return match && match[1];
                    }
                    assert.AssertionError = function AssertionError(options) {
                        this.name = 'AssertionError';
                        this.actual = options.actual;
                        this.expected = options.expected;
                        this.operator = options.operator;
                        if (options.message) {
                            this.message = options.message;
                            this.generatedMessage = false;
                        } else {
                            this.message = getMessage(this);
                            this.generatedMessage = true;
                        }
                        var stackStartFunction = options.stackStartFunction || fail;
                        if (Error.captureStackTrace) {
                            Error.captureStackTrace(this, stackStartFunction);
                        } else {
                            // non v8 browsers so we can have a stacktrace
                            var err = new Error();
                            if (err.stack) {
                                var out = err.stack;

                                // try to strip useless frames
                                var fn_name = getName(stackStartFunction);
                                var idx = out.indexOf('\n' + fn_name);
                                if (idx >= 0) {
                                    // once we have located the function frame
                                    // we need to strip out everything before it (and its line)
                                    var next_line = out.indexOf('\n', idx + 1);
                                    out = out.substring(next_line + 1);
                                }

                                this.stack = out;
                            }
                        }
                    };

                    // assert.AssertionError instanceof Error
                    util.inherits(assert.AssertionError, Error);

                    function truncate(s, n) {
                        if (typeof s === 'string') {
                            return s.length < n ? s : s.slice(0, n);
                        } else {
                            return s;
                        }
                    }

                    function inspect(something) {
                        if (functionsHaveNames || !util.isFunction(something)) {
                            return util.inspect(something);
                        }
                        var rawname = getName(something);
                        var name = rawname ? ': ' + rawname : '';
                        return '[Function' + name + ']';
                    }

                    function getMessage(self) {
                        return truncate(inspect(self.actual), 128) + ' ' +
                            self.operator + ' ' +
                            truncate(inspect(self.expected), 128);
                    }

                    // At present only the three keys mentioned above are used and
                    // understood by the spec. Implementations or sub modules can pass
                    // other keys to the AssertionError's constructor - they will be
                    // ignored.

                    // 3. All of the following functions must throw an AssertionError
                    // when a corresponding condition is not met, with a message that
                    // may be undefined if not provided.  All assertion methods provide
                    // both the actual and expected values to the assertion error for
                    // display purposes.

                    function fail(actual, expected, message, operator, stackStartFunction) {
                        throw new assert.AssertionError({
                            message: message,
                            actual: actual,
                            expected: expected,
                            operator: operator,
                            stackStartFunction: stackStartFunction
                        });
                    }

                    // EXTENSION! allows for well behaved errors defined elsewhere.
                    assert.fail = fail;

                    // 4. Pure assertion tests whether a value is truthy, as determined
                    // by !!guard.
                    // assert.ok(guard, message_opt);
                    // This statement is equivalent to assert.equal(true, !!guard,
                    // message_opt);. To test strictly for the value true, use
                    // assert.strictEqual(true, guard, message_opt);.

                    function ok(value, message) {
                        if (!value) fail(value, true, message, '==', assert.ok);
                    }
                    assert.ok = ok;

                    // 5. The equality assertion tests shallow, coercive equality with
                    // ==.
                    // assert.equal(actual, expected, message_opt);

                    assert.equal = function equal(actual, expected, message) {
                        if (actual != expected) fail(actual, expected, message, '==', assert.equal);
                    };

                    // 6. The non-equality assertion tests for whether two objects are not equal
                    // with != assert.notEqual(actual, expected, message_opt);

                    assert.notEqual = function notEqual(actual, expected, message) {
                        if (actual == expected) {
                            fail(actual, expected, message, '!=', assert.notEqual);
                        }
                    };

                    // 7. The equivalence assertion tests a deep equality relation.
                    // assert.deepEqual(actual, expected, message_opt);

                    assert.deepEqual = function deepEqual(actual, expected, message) {
                        if (!_deepEqual(actual, expected, false)) {
                            fail(actual, expected, message, 'deepEqual', assert.deepEqual);
                        }
                    };

                    assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                        if (!_deepEqual(actual, expected, true)) {
                            fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
                        }
                    };

                    function _deepEqual(actual, expected, strict, memos) {
                        // 7.1. All identical values are equivalent, as determined by ===.
                        if (actual === expected) {
                            return true;
                        } else if (isBuffer(actual) && isBuffer(expected)) {
                            return compare(actual, expected) === 0;

                            // 7.2. If the expected value is a Date object, the actual value is
                            // equivalent if it is also a Date object that refers to the same time.
                        } else if (util.isDate(actual) && util.isDate(expected)) {
                            return actual.getTime() === expected.getTime();

                            // 7.3 If the expected value is a RegExp object, the actual value is
                            // equivalent if it is also a RegExp object with the same source and
                            // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
                        } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                            return actual.source === expected.source &&
                                actual.global === expected.global &&
                                actual.multiline === expected.multiline &&
                                actual.lastIndex === expected.lastIndex &&
                                actual.ignoreCase === expected.ignoreCase;

                            // 7.4. Other pairs that do not both pass typeof value == 'object',
                            // equivalence is determined by ==.
                        } else if ((actual === null || typeof actual !== 'object') &&
                            (expected === null || typeof expected !== 'object')) {
                            return strict ? actual === expected : actual == expected;

                            // If both values are instances of typed arrays, wrap their underlying
                            // ArrayBuffers in a Buffer each to increase performance
                            // This optimization requires the arrays to have the same type as checked by
                            // Object.prototype.toString (aka pToString). Never perform binary
                            // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                            // bit patterns are not identical.
                        } else if (isView(actual) && isView(expected) &&
                            pToString(actual) === pToString(expected) &&
                            !(actual instanceof Float32Array ||
                                actual instanceof Float64Array)) {
                            return compare(new Uint8Array(actual.buffer),
                                new Uint8Array(expected.buffer)) === 0;

                            // 7.5 For all other Object pairs, including Array objects, equivalence is
                            // determined by having the same number of owned properties (as verified
                            // with Object.prototype.hasOwnProperty.call), the same set of keys
                            // (although not necessarily the same order), equivalent values for every
                            // corresponding key, and an identical 'prototype' property. Note: this
                            // accounts for both named and indexed properties on Arrays.
                        } else if (isBuffer(actual) !== isBuffer(expected)) {
                            return false;
                        } else {
                            memos = memos || {
                                actual: [],
                                expected: []
                            };

                            var actualIndex = memos.actual.indexOf(actual);
                            if (actualIndex !== -1) {
                                if (actualIndex === memos.expected.indexOf(expected)) {
                                    return true;
                                }
                            }

                            memos.actual.push(actual);
                            memos.expected.push(expected);

                            return objEquiv(actual, expected, strict, memos);
                        }
                    }

                    function isArguments(object) {
                        return Object.prototype.toString.call(object) == '[object Arguments]';
                    }

                    function objEquiv(a, b, strict, actualVisitedObjects) {
                        if (a === null || a === undefined || b === null || b === undefined)
                            return false;
                        // if one is a primitive, the other must be same
                        if (util.isPrimitive(a) || util.isPrimitive(b))
                            return a === b;
                        if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
                            return false;
                        var aIsArgs = isArguments(a);
                        var bIsArgs = isArguments(b);
                        if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
                            return false;
                        if (aIsArgs) {
                            a = pSlice.call(a);
                            b = pSlice.call(b);
                            return _deepEqual(a, b, strict);
                        }
                        var ka = objectKeys(a);
                        var kb = objectKeys(b);
                        var key, i;
                        // having the same number of owned properties (keys incorporates
                        // hasOwnProperty)
                        if (ka.length !== kb.length)
                            return false;
                        //the same set of keys (although not necessarily the same order),
                        ka.sort();
                        kb.sort();
                        //~~~cheap key test
                        for (i = ka.length - 1; i >= 0; i--) {
                            if (ka[i] !== kb[i])
                                return false;
                        }
                        //equivalent values for every corresponding key, and
                        //~~~possibly expensive deep test
                        for (i = ka.length - 1; i >= 0; i--) {
                            key = ka[i];
                            if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                                return false;
                        }
                        return true;
                    }

                    // 8. The non-equivalence assertion tests for any deep inequality.
                    // assert.notDeepEqual(actual, expected, message_opt);

                    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                        if (_deepEqual(actual, expected, false)) {
                            fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
                        }
                    };

                    assert.notDeepStrictEqual = notDeepStrictEqual;

                    function notDeepStrictEqual(actual, expected, message) {
                        if (_deepEqual(actual, expected, true)) {
                            fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
                        }
                    }


                    // 9. The strict equality assertion tests strict equality, as determined by ===.
                    // assert.strictEqual(actual, expected, message_opt);

                    assert.strictEqual = function strictEqual(actual, expected, message) {
                        if (actual !== expected) {
                            fail(actual, expected, message, '===', assert.strictEqual);
                        }
                    };

                    // 10. The strict non-equality assertion tests for strict inequality, as
                    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

                    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                        if (actual === expected) {
                            fail(actual, expected, message, '!==', assert.notStrictEqual);
                        }
                    };

                    function expectedException(actual, expected) {
                        if (!actual || !expected) {
                            return false;
                        }

                        if (Object.prototype.toString.call(expected) == '[object RegExp]') {
                            return expected.test(actual);
                        }

                        try {
                            if (actual instanceof expected) {
                                return true;
                            }
                        } catch (e) {
                            // Ignore.  The instanceof check doesn't work for arrow functions.
                        }

                        if (Error.isPrototypeOf(expected)) {
                            return false;
                        }

                        return expected.call({}, actual) === true;
                    }

                    function _tryBlock(block) {
                        var error;
                        try {
                            block();
                        } catch (e) {
                            error = e;
                        }
                        return error;
                    }

                    function _throws(shouldThrow, block, expected, message) {
                        var actual;

                        if (typeof block !== 'function') {
                            throw new TypeError('"block" argument must be a function');
                        }

                        if (typeof expected === 'string') {
                            message = expected;
                            expected = null;
                        }

                        actual = _tryBlock(block);

                        message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                            (message ? ' ' + message : '.');

                        if (shouldThrow && !actual) {
                            fail(actual, expected, 'Missing expected exception' + message);
                        }

                        var userProvidedMessage = typeof message === 'string';
                        var isUnwantedException = !shouldThrow && util.isError(actual);
                        var isUnexpectedException = !shouldThrow && actual && !expected;

                        if ((isUnwantedException &&
                                userProvidedMessage &&
                                expectedException(actual, expected)) ||
                            isUnexpectedException) {
                            fail(actual, expected, 'Got unwanted exception' + message);
                        }

                        if ((shouldThrow && actual && expected &&
                                !expectedException(actual, expected)) || (!shouldThrow && actual)) {
                            throw actual;
                        }
                    }

                    // 11. Expected to throw an error:
                    // assert.throws(block, Error_opt, message_opt);

                    assert.throws = function(block, /*optional*/ error, /*optional*/ message) {
                        _throws(true, block, error, message);
                    };

                    // EXTENSION! This is annoying to write outside this module.
                    assert.doesNotThrow = function(block, /*optional*/ error, /*optional*/ message) {
                        _throws(false, block, error, message);
                    };

                    assert.ifError = function(err) {
                        if (err) throw err;
                    };

                    // Expose a strict only variant of assert
                    function strict(value, message) {
                        if (!value) fail(value, true, message, '==', strict);
                    }
                    assert.strict = objectAssign(strict, assert, {
                        equal: assert.strictEqual,
                        deepEqual: assert.deepStrictEqual,
                        notEqual: assert.notStrictEqual,
                        notDeepEqual: assert.notDeepStrictEqual
                    });
                    assert.strict.strict = assert.strict;

                    var objectKeys = Object.keys || function(obj) {
                        var keys = [];
                        for (var key in obj) {
                            if (hasOwn.call(obj, key)) keys.push(key);
                        }
                        return keys;
                    };

                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(68)))

                /***/
            }),

        /***/
        1895:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var toStr = Object.prototype.toString;

                module.exports = function isArguments(value) {
                    var str = toStr.call(value);
                    var isArgs = str === '[object Arguments]';
                    if (!isArgs) {
                        isArgs = str !== '[object Array]' &&
                            value !== null &&
                            typeof value === 'object' &&
                            typeof value.length === 'number' &&
                            value.length >= 0 &&
                            toStr.call(value.callee) === '[object Function]';
                    }
                    return isArgs;
                };


                /***/
            }),

        /***/
        1896:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /* eslint complexity: [2, 18], max-statements: [2, 33] */
                module.exports = function hasSymbols() {
                    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
                        return false;
                    }
                    if (typeof Symbol.iterator === 'symbol') {
                        return true;
                    }

                    var obj = {};
                    var sym = Symbol('test');
                    var symObj = Object(sym);
                    if (typeof sym === 'string') {
                        return false;
                    }

                    if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
                        return false;
                    }
                    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
                        return false;
                    }

                    // temp disabled per https://github.com/ljharb/object.assign/issues/17
                    // if (sym instanceof Symbol) { return false; }
                    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
                    // if (!(symObj instanceof Symbol)) { return false; }

                    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
                    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

                    var symVal = 42;
                    obj[sym] = symVal;
                    for (sym in obj) {
                        return false;
                    } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
                    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
                        return false;
                    }

                    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
                        return false;
                    }

                    var syms = Object.getOwnPropertySymbols(obj);
                    if (syms.length !== 1 || syms[0] !== sym) {
                        return false;
                    }

                    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
                        return false;
                    }

                    if (typeof Object.getOwnPropertyDescriptor === 'function') {
                        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
                        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
                            return false;
                        }
                    }

                    return true;
                };


                /***/
            }),

        /***/
        1897:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /** @type {import('./syntax')} */
                module.exports = SyntaxError;


                /***/
            }),

        /***/
        1898:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var GetIntrinsic = __webpack_require__(1828);

                var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

                if ($gOPD) {
                    try {
                        $gOPD([], 'length');
                    } catch (e) {
                        // IE 8 has a broken gOPD
                        $gOPD = null;
                    }
                }

                module.exports = $gOPD;


                /***/
            }),

        /***/
        1899:
            /***/
            (function(module, exports, __webpack_require__) {

                /* WEBPACK VAR INJECTION */
                (function(process) { // Copyright Joyent, Inc. and other Node contributors.
                    //
                    // Permission is hereby granted, free of charge, to any person obtaining a
                    // copy of this software and associated documentation files (the
                    // "Software"), to deal in the Software without restriction, including
                    // without limitation the rights to use, copy, modify, merge, publish,
                    // distribute, sublicense, and/or sell copies of the Software, and to permit
                    // persons to whom the Software is furnished to do so, subject to the
                    // following conditions:
                    //
                    // The above copyright notice and this permission notice shall be included
                    // in all copies or substantial portions of the Software.
                    //
                    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                    // USE OR OTHER DEALINGS IN THE SOFTWARE.

                    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
                        function getOwnPropertyDescriptors(obj) {
                            var keys = Object.keys(obj);
                            var descriptors = {};
                            for (var i = 0; i < keys.length; i++) {
                                descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
                            }
                            return descriptors;
                        };

                    var formatRegExp = /%[sdj%]/g;
                    exports.format = function(f) {
                        if (!isString(f)) {
                            var objects = [];
                            for (var i = 0; i < arguments.length; i++) {
                                objects.push(inspect(arguments[i]));
                            }
                            return objects.join(' ');
                        }

                        var i = 1;
                        var args = arguments;
                        var len = args.length;
                        var str = String(f).replace(formatRegExp, function(x) {
                            if (x === '%%') return '%';
                            if (i >= len) return x;
                            switch (x) {
                                case '%s':
                                    return String(args[i++]);
                                case '%d':
                                    return Number(args[i++]);
                                case '%j':
                                    try {
                                        return JSON.stringify(args[i++]);
                                    } catch (_) {
                                        return '[Circular]';
                                    }
                                default:
                                    return x;
                            }
                        });
                        for (var x = args[i]; i < len; x = args[++i]) {
                            if (isNull(x) || !isObject(x)) {
                                str += ' ' + x;
                            } else {
                                str += ' ' + inspect(x);
                            }
                        }
                        return str;
                    };


                    // Mark that a method should not be used.
                    // Returns a modified function which warns once by default.
                    // If --no-deprecation is set, then it is a no-op.
                    exports.deprecate = function(fn, msg) {
                        if (typeof process !== 'undefined' && process.noDeprecation === true) {
                            return fn;
                        }

                        // Allow for deprecating things in the process of starting up.
                        if (typeof process === 'undefined') {
                            return function() {
                                return exports.deprecate(fn, msg).apply(this, arguments);
                            };
                        }

                        var warned = false;

                        function deprecated() {
                            if (!warned) {
                                if (process.throwDeprecation) {
                                    throw new Error(msg);
                                } else if (process.traceDeprecation) {
                                    console.trace(msg);
                                } else {
                                    console.error(msg);
                                }
                                warned = true;
                            }
                            return fn.apply(this, arguments);
                        }

                        return deprecated;
                    };


                    var debugs = {};
                    var debugEnviron;
                    exports.debuglog = function(set) {
                        if (isUndefined(debugEnviron))
                            debugEnviron = Object({
                                "NODE_ENV": "production"
                            }).NODE_DEBUG || '';
                        set = set.toUpperCase();
                        if (!debugs[set]) {
                            if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                                var pid = process.pid;
                                debugs[set] = function() {
                                    var msg = exports.format.apply(exports, arguments);
                                    console.error('%s %d: %s', set, pid, msg);
                                };
                            } else {
                                debugs[set] = function() {};
                            }
                        }
                        return debugs[set];
                    };


                    /**
                     * Echos the value of a value. Trys to print the value out
                     * in the best way possible given the different types.
                     *
                     * @param {Object} obj The object to print out.
                     * @param {Object} opts Optional options object that alters the output.
                     */
                    /* legacy: obj, showHidden, depth, colors*/
                    function inspect(obj, opts) {
                        // default options
                        var ctx = {
                            seen: [],
                            stylize: stylizeNoColor
                        };
                        // legacy...
                        if (arguments.length >= 3) ctx.depth = arguments[2];
                        if (arguments.length >= 4) ctx.colors = arguments[3];
                        if (isBoolean(opts)) {
                            // legacy...
                            ctx.showHidden = opts;
                        } else if (opts) {
                            // got an "options" object
                            exports._extend(ctx, opts);
                        }
                        // set default options
                        if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                        if (isUndefined(ctx.depth)) ctx.depth = 2;
                        if (isUndefined(ctx.colors)) ctx.colors = false;
                        if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                        if (ctx.colors) ctx.stylize = stylizeWithColor;
                        return formatValue(ctx, obj, ctx.depth);
                    }
                    exports.inspect = inspect;


                    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                    inspect.colors = {
                        'bold': [1, 22],
                        'italic': [3, 23],
                        'underline': [4, 24],
                        'inverse': [7, 27],
                        'white': [37, 39],
                        'grey': [90, 39],
                        'black': [30, 39],
                        'blue': [34, 39],
                        'cyan': [36, 39],
                        'green': [32, 39],
                        'magenta': [35, 39],
                        'red': [31, 39],
                        'yellow': [33, 39]
                    };

                    // Don't use 'blue' not visible on cmd.exe
                    inspect.styles = {
                        'special': 'cyan',
                        'number': 'yellow',
                        'boolean': 'yellow',
                        'undefined': 'grey',
                        'null': 'bold',
                        'string': 'green',
                        'date': 'magenta',
                        // "name": intentionally not styling
                        'regexp': 'red'
                    };


                    function stylizeWithColor(str, styleType) {
                        var style = inspect.styles[styleType];

                        if (style) {
                            return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                                '\u001b[' + inspect.colors[style][1] + 'm';
                        } else {
                            return str;
                        }
                    }


                    function stylizeNoColor(str, styleType) {
                        return str;
                    }


                    function arrayToHash(array) {
                        var hash = {};

                        array.forEach(function(val, idx) {
                            hash[val] = true;
                        });

                        return hash;
                    }


                    function formatValue(ctx, value, recurseTimes) {
                        // Provide a hook for user-specified inspect functions.
                        // Check that value is an object with an inspect function on it
                        if (ctx.customInspect &&
                            value &&
                            isFunction(value.inspect) &&
                            // Filter out the util module, it's inspect function is special
                            value.inspect !== exports.inspect &&
                            // Also filter out any prototype objects using the circular check.
                            !(value.constructor && value.constructor.prototype === value)) {
                            var ret = value.inspect(recurseTimes, ctx);
                            if (!isString(ret)) {
                                ret = formatValue(ctx, ret, recurseTimes);
                            }
                            return ret;
                        }

                        // Primitive types cannot have properties
                        var primitive = formatPrimitive(ctx, value);
                        if (primitive) {
                            return primitive;
                        }

                        // Look up the keys of the object.
                        var keys = Object.keys(value);
                        var visibleKeys = arrayToHash(keys);

                        if (ctx.showHidden) {
                            keys = Object.getOwnPropertyNames(value);
                        }

                        // IE doesn't make error fields non-enumerable
                        // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                        if (isError(value) &&
                            (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                            return formatError(value);
                        }

                        // Some type of object without properties can be shortcutted.
                        if (keys.length === 0) {
                            if (isFunction(value)) {
                                var name = value.name ? ': ' + value.name : '';
                                return ctx.stylize('[Function' + name + ']', 'special');
                            }
                            if (isRegExp(value)) {
                                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                            }
                            if (isDate(value)) {
                                return ctx.stylize(Date.prototype.toString.call(value), 'date');
                            }
                            if (isError(value)) {
                                return formatError(value);
                            }
                        }

                        var base = '',
                            array = false,
                            braces = ['{', '}'];

                        // Make Array say that they are Array
                        if (isArray(value)) {
                            array = true;
                            braces = ['[', ']'];
                        }

                        // Make functions say that they are functions
                        if (isFunction(value)) {
                            var n = value.name ? ': ' + value.name : '';
                            base = ' [Function' + n + ']';
                        }

                        // Make RegExps say that they are RegExps
                        if (isRegExp(value)) {
                            base = ' ' + RegExp.prototype.toString.call(value);
                        }

                        // Make dates with properties first say the date
                        if (isDate(value)) {
                            base = ' ' + Date.prototype.toUTCString.call(value);
                        }

                        // Make error with message first say the error
                        if (isError(value)) {
                            base = ' ' + formatError(value);
                        }

                        if (keys.length === 0 && (!array || value.length == 0)) {
                            return braces[0] + base + braces[1];
                        }

                        if (recurseTimes < 0) {
                            if (isRegExp(value)) {
                                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                            } else {
                                return ctx.stylize('[Object]', 'special');
                            }
                        }

                        ctx.seen.push(value);

                        var output;
                        if (array) {
                            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                        } else {
                            output = keys.map(function(key) {
                                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                            });
                        }

                        ctx.seen.pop();

                        return reduceToSingleString(output, base, braces);
                    }


                    function formatPrimitive(ctx, value) {
                        if (isUndefined(value))
                            return ctx.stylize('undefined', 'undefined');
                        if (isString(value)) {
                            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                .replace(/'/g, "\\'")
                                .replace(/\\"/g, '"') + '\'';
                            return ctx.stylize(simple, 'string');
                        }
                        if (isNumber(value))
                            return ctx.stylize('' + value, 'number');
                        if (isBoolean(value))
                            return ctx.stylize('' + value, 'boolean');
                        // For some reason typeof null is "object", so special case here.
                        if (isNull(value))
                            return ctx.stylize('null', 'null');
                    }


                    function formatError(value) {
                        return '[' + Error.prototype.toString.call(value) + ']';
                    }


                    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                        var output = [];
                        for (var i = 0, l = value.length; i < l; ++i) {
                            if (hasOwnProperty(value, String(i))) {
                                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                    String(i), true));
                            } else {
                                output.push('');
                            }
                        }
                        keys.forEach(function(key) {
                            if (!key.match(/^\d+$/)) {
                                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                    key, true));
                            }
                        });
                        return output;
                    }


                    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                        var name, str, desc;
                        desc = Object.getOwnPropertyDescriptor(value, key) || {
                            value: value[key]
                        };
                        if (desc.get) {
                            if (desc.set) {
                                str = ctx.stylize('[Getter/Setter]', 'special');
                            } else {
                                str = ctx.stylize('[Getter]', 'special');
                            }
                        } else {
                            if (desc.set) {
                                str = ctx.stylize('[Setter]', 'special');
                            }
                        }
                        if (!hasOwnProperty(visibleKeys, key)) {
                            name = '[' + key + ']';
                        }
                        if (!str) {
                            if (ctx.seen.indexOf(desc.value) < 0) {
                                if (isNull(recurseTimes)) {
                                    str = formatValue(ctx, desc.value, null);
                                } else {
                                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                                }
                                if (str.indexOf('\n') > -1) {
                                    if (array) {
                                        str = str.split('\n').map(function(line) {
                                            return '  ' + line;
                                        }).join('\n').substr(2);
                                    } else {
                                        str = '\n' + str.split('\n').map(function(line) {
                                            return '   ' + line;
                                        }).join('\n');
                                    }
                                }
                            } else {
                                str = ctx.stylize('[Circular]', 'special');
                            }
                        }
                        if (isUndefined(name)) {
                            if (array && key.match(/^\d+$/)) {
                                return str;
                            }
                            name = JSON.stringify('' + key);
                            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                                name = name.substr(1, name.length - 2);
                                name = ctx.stylize(name, 'name');
                            } else {
                                name = name.replace(/'/g, "\\'")
                                    .replace(/\\"/g, '"')
                                    .replace(/(^"|"$)/g, "'");
                                name = ctx.stylize(name, 'string');
                            }
                        }

                        return name + ': ' + str;
                    }


                    function reduceToSingleString(output, base, braces) {
                        var numLinesEst = 0;
                        var length = output.reduce(function(prev, cur) {
                            numLinesEst++;
                            if (cur.indexOf('\n') >= 0) numLinesEst++;
                            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                        }, 0);

                        if (length > 60) {
                            return braces[0] +
                                (base === '' ? '' : base + '\n ') +
                                ' ' +
                                output.join(',\n  ') +
                                ' ' +
                                braces[1];
                        }

                        return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                    }


                    // NOTE: These type checking functions intentionally don't use `instanceof`
                    // because it is fragile and can be easily faked with `Object.create()`.
                    function isArray(ar) {
                        return Array.isArray(ar);
                    }
                    exports.isArray = isArray;

                    function isBoolean(arg) {
                        return typeof arg === 'boolean';
                    }
                    exports.isBoolean = isBoolean;

                    function isNull(arg) {
                        return arg === null;
                    }
                    exports.isNull = isNull;

                    function isNullOrUndefined(arg) {
                        return arg == null;
                    }
                    exports.isNullOrUndefined = isNullOrUndefined;

                    function isNumber(arg) {
                        return typeof arg === 'number';
                    }
                    exports.isNumber = isNumber;

                    function isString(arg) {
                        return typeof arg === 'string';
                    }
                    exports.isString = isString;

                    function isSymbol(arg) {
                        return typeof arg === 'symbol';
                    }
                    exports.isSymbol = isSymbol;

                    function isUndefined(arg) {
                        return arg === void 0;
                    }
                    exports.isUndefined = isUndefined;

                    function isRegExp(re) {
                        return isObject(re) && objectToString(re) === '[object RegExp]';
                    }
                    exports.isRegExp = isRegExp;

                    function isObject(arg) {
                        return typeof arg === 'object' && arg !== null;
                    }
                    exports.isObject = isObject;

                    function isDate(d) {
                        return isObject(d) && objectToString(d) === '[object Date]';
                    }
                    exports.isDate = isDate;

                    function isError(e) {
                        return isObject(e) &&
                            (objectToString(e) === '[object Error]' || e instanceof Error);
                    }
                    exports.isError = isError;

                    function isFunction(arg) {
                        return typeof arg === 'function';
                    }
                    exports.isFunction = isFunction;

                    function isPrimitive(arg) {
                        return arg === null ||
                            typeof arg === 'boolean' ||
                            typeof arg === 'number' ||
                            typeof arg === 'string' ||
                            typeof arg === 'symbol' || // ES6 symbol
                            typeof arg === 'undefined';
                    }
                    exports.isPrimitive = isPrimitive;

                    exports.isBuffer = __webpack_require__(2013);

                    function objectToString(o) {
                        return Object.prototype.toString.call(o);
                    }


                    function pad(n) {
                        return n < 10 ? '0' + n.toString(10) : n.toString(10);
                    }


                    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                        'Oct', 'Nov', 'Dec'
                    ];

                    // 26 Feb 16:19:34
                    function timestamp() {
                        var d = new Date();
                        var time = [pad(d.getHours()),
                            pad(d.getMinutes()),
                            pad(d.getSeconds())
                        ].join(':');
                        return [d.getDate(), months[d.getMonth()], time].join(' ');
                    }


                    // log is just a thin wrapper to console.log that prepends a timestamp
                    exports.log = function() {
                        console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
                    };


                    /**
                     * Inherit the prototype methods from one constructor into another.
                     *
                     * The Function.prototype.inherits from lang.js rewritten as a standalone
                     * function (not on Function.prototype). NOTE: If this file is to be loaded
                     * during bootstrapping this function needs to be rewritten using some native
                     * functions as prototype setup using normal JavaScript does not work as
                     * expected during bootstrapping (see mirror.js in r114903).
                     *
                     * @param {function} ctor Constructor function which needs to inherit the
                     *     prototype.
                     * @param {function} superCtor Constructor function to inherit prototype from.
                     */
                    exports.inherits = __webpack_require__(2014);

                    exports._extend = function(origin, add) {
                        // Don't do anything if add isn't an object
                        if (!add || !isObject(add)) return origin;

                        var keys = Object.keys(add);
                        var i = keys.length;
                        while (i--) {
                            origin[keys[i]] = add[keys[i]];
                        }
                        return origin;
                    };

                    function hasOwnProperty(obj, prop) {
                        return Object.prototype.hasOwnProperty.call(obj, prop);
                    }

                    var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

                    exports.promisify = function promisify(original) {
                        if (typeof original !== 'function')
                            throw new TypeError('The "original" argument must be of type Function');

                        if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
                            var fn = original[kCustomPromisifiedSymbol];
                            if (typeof fn !== 'function') {
                                throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                            }
                            Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                                value: fn,
                                enumerable: false,
                                writable: false,
                                configurable: true
                            });
                            return fn;
                        }

                        function fn() {
                            var promiseResolve, promiseReject;
                            var promise = new Promise(function(resolve, reject) {
                                promiseResolve = resolve;
                                promiseReject = reject;
                            });

                            var args = [];
                            for (var i = 0; i < arguments.length; i++) {
                                args.push(arguments[i]);
                            }
                            args.push(function(err, value) {
                                if (err) {
                                    promiseReject(err);
                                } else {
                                    promiseResolve(value);
                                }
                            });

                            try {
                                original.apply(this, args);
                            } catch (err) {
                                promiseReject(err);
                            }

                            return promise;
                        }

                        Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

                        if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                            value: fn,
                            enumerable: false,
                            writable: false,
                            configurable: true
                        });
                        return Object.defineProperties(
                            fn,
                            getOwnPropertyDescriptors(original)
                        );
                    }

                    exports.promisify.custom = kCustomPromisifiedSymbol

                    function callbackifyOnRejected(reason, cb) {
                        // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
                        // Because `null` is a special error value in callbacks which means "no error
                        // occurred", we error-wrap so the callback consumer can distinguish between
                        // "the promise rejected with null" or "the promise fulfilled with undefined".
                        if (!reason) {
                            var newReason = new Error('Promise was rejected with a falsy value');
                            newReason.reason = reason;
                            reason = newReason;
                        }
                        return cb(reason);
                    }

                    function callbackify(original) {
                        if (typeof original !== 'function') {
                            throw new TypeError('The "original" argument must be of type Function');
                        }

                        // We DO NOT return the promise as it gives the user a false sense that
                        // the promise is actually somehow related to the callback's execution
                        // and that the callback throwing will reject the promise.
                        function callbackified() {
                            var args = [];
                            for (var i = 0; i < arguments.length; i++) {
                                args.push(arguments[i]);
                            }

                            var maybeCb = args.pop();
                            if (typeof maybeCb !== 'function') {
                                throw new TypeError('The last argument must be of type Function');
                            }
                            var self = this;
                            var cb = function() {
                                return maybeCb.apply(self, arguments);
                            };
                            // In true node style we process the callback on `nextTick` with all the
                            // implications (stack, `uncaughtException`, `async_hooks`)
                            original.apply(this, args)
                                .then(function(ret) {
                                        process.nextTick(cb, null, ret)
                                    },
                                    function(rej) {
                                        process.nextTick(callbackifyOnRejected, rej, cb)
                                    });
                        }

                        Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
                        Object.defineProperties(callbackified,
                            getOwnPropertyDescriptors(original));
                        return callbackified;
                    }
                    exports.callbackify = callbackify;

                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(123)))

                /***/
            }),

        /***/
        1900:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // Note: adler32 takes 12% for level 0 and 2% for level 6.
                // It isn't worth it to make additional optimizations as in original.
                // Small size is preferable.

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                function adler32(adler, buf, len, pos) {
                    var s1 = (adler & 0xffff) | 0,
                        s2 = ((adler >>> 16) & 0xffff) | 0,
                        n = 0;

                    while (len !== 0) {
                        // Set limit ~ twice less than 5552, to keep
                        // s2 in 31-bits, because we force signed ints.
                        // in other case %= will fail.
                        n = len > 2000 ? 2000 : len;
                        len -= n;

                        do {
                            s1 = (s1 + buf[pos++]) | 0;
                            s2 = (s2 + s1) | 0;
                        } while (--n);

                        s1 %= 65521;
                        s2 %= 65521;
                    }

                    return (s1 | (s2 << 16)) | 0;
                }


                module.exports = adler32;


                /***/
            }),

        /***/
        1901:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // Note: we can't get significant speed boost here.
                // So write code to minimize size - no pregenerated tables
                // and array tools dependencies.

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                // Use ordinary array, since untyped makes no boost here
                function makeTable() {
                    var c, table = [];

                    for (var n = 0; n < 256; n++) {
                        c = n;
                        for (var k = 0; k < 8; k++) {
                            c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
                        }
                        table[n] = c;
                    }

                    return table;
                }

                // Create table on load. Just 255 signed longs. Not a problem.
                var crcTable = makeTable();


                function crc32(crc, buf, len, pos) {
                    var t = crcTable,
                        end = pos + len;

                    crc ^= -1;

                    for (var i = pos; i < end; i++) {
                        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
                    }

                    return (crc ^ (-1)); // >>> 0;
                }


                module.exports = crc32;


                /***/
            }),

        /***/
        1902:
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                // ESM COMPAT FLAG
                __webpack_require__.r(__webpack_exports__);

                // EXPORTS
                __webpack_require__.d(__webpack_exports__, "capitalize", function() {
                    return /* reexport */ capitalize["a" /* default */ ];
                });
                __webpack_require__.d(__webpack_exports__, "createChainedFunction", function() {
                    return /* reexport */ createChainedFunction;
                });
                __webpack_require__.d(__webpack_exports__, "createSvgIcon", function() {
                    return /* reexport */ createSvgIcon;
                });
                __webpack_require__.d(__webpack_exports__, "debounce", function() {
                    return /* reexport */ debounce;
                });
                __webpack_require__.d(__webpack_exports__, "deprecatedPropType", function() {
                    return /* reexport */ deprecatedPropType["a" /* default */ ];
                });
                __webpack_require__.d(__webpack_exports__, "isMuiElement", function() {
                    return /* reexport */ isMuiElement;
                });
                __webpack_require__.d(__webpack_exports__, "ownerDocument", function() {
                    return /* reexport */ ownerDocument;
                });
                __webpack_require__.d(__webpack_exports__, "ownerWindow", function() {
                    return /* reexport */ ownerWindow;
                });
                __webpack_require__.d(__webpack_exports__, "requirePropFactory", function() {
                    return /* reexport */ requirePropFactory["a" /* default */ ];
                });
                __webpack_require__.d(__webpack_exports__, "setRef", function() {
                    return /* reexport */ setRef["a" /* default */ ];
                });
                __webpack_require__.d(__webpack_exports__, "unsupportedProp", function() {
                    return /* reexport */ unsupportedProp;
                });
                __webpack_require__.d(__webpack_exports__, "useControlled", function() {
                    return /* reexport */ useControlled["a" /* default */ ];
                });
                __webpack_require__.d(__webpack_exports__, "useEventCallback", function() {
                    return /* reexport */ useEventCallback["a" /* default */ ];
                });
                __webpack_require__.d(__webpack_exports__, "useForkRef", function() {
                    return /* reexport */ useForkRef["a" /* default */ ];
                });
                __webpack_require__.d(__webpack_exports__, "unstable_useId", function() {
                    return /* reexport */ useId;
                });
                __webpack_require__.d(__webpack_exports__, "useIsFocusVisible", function() {
                    return /* reexport */ useIsFocusVisible["a" /* default */ ];
                });

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/capitalize.js
                var capitalize = __webpack_require__(226);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/createChainedFunction.js
                /**
                 * Safe chained function
                 *
                 * Will only create a new function if needed,
                 * otherwise will pass back existing functions or null.
                 *
                 * @param {function} functions to chain
                 * @returns {function|null}
                 */
                function createChainedFunction() {
                    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
                        funcs[_key] = arguments[_key];
                    }

                    return funcs.reduce(function(acc, func) {
                        if (func == null) {
                            return acc;
                        }

                        if (false) {}

                        return function chainedFunction() {
                            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                                args[_key2] = arguments[_key2];
                            }

                            acc.apply(this, args);
                            func.apply(this, args);
                        };
                    }, function() {});
                }
                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/extends.js
                var esm_extends = __webpack_require__(1);

                // EXTERNAL MODULE: ./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js
                var react = __webpack_require__(0);
                var react_default = /*#__PURE__*/ __webpack_require__.n(react);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
                var objectWithoutProperties = __webpack_require__(25);

                // EXTERNAL MODULE: ./node_modules/.pnpm/clsx@1.2.1/node_modules/clsx/dist/clsx.m.js
                var clsx_m = __webpack_require__(19);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/styles/withStyles.js + 2 modules
                var withStyles = __webpack_require__(137);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/SvgIcon/SvgIcon.js








                var styles = function styles(theme) {
                    return {
                        /* Styles applied to the root element. */
                        root: {
                            userSelect: 'none',
                            width: '1em',
                            height: '1em',
                            display: 'inline-block',
                            fill: 'currentColor',
                            flexShrink: 0,
                            fontSize: theme.typography.pxToRem(24),
                            transition: theme.transitions.create('fill', {
                                duration: theme.transitions.duration.shorter
                            })
                        },

                        /* Styles applied to the root element if `color="primary"`. */
                        colorPrimary: {
                            color: theme.palette.primary.main
                        },

                        /* Styles applied to the root element if `color="secondary"`. */
                        colorSecondary: {
                            color: theme.palette.secondary.main
                        },

                        /* Styles applied to the root element if `color="action"`. */
                        colorAction: {
                            color: theme.palette.action.active
                        },

                        /* Styles applied to the root element if `color="error"`. */
                        colorError: {
                            color: theme.palette.error.main
                        },

                        /* Styles applied to the root element if `color="disabled"`. */
                        colorDisabled: {
                            color: theme.palette.action.disabled
                        },

                        /* Styles applied to the root element if `fontSize="inherit"`. */
                        fontSizeInherit: {
                            fontSize: 'inherit'
                        },

                        /* Styles applied to the root element if `fontSize="small"`. */
                        fontSizeSmall: {
                            fontSize: theme.typography.pxToRem(20)
                        },

                        /* Styles applied to the root element if `fontSize="large"`. */
                        fontSizeLarge: {
                            fontSize: theme.typography.pxToRem(35)
                        }
                    };
                };
                var SvgIcon_SvgIcon = /*#__PURE__*/ react["forwardRef"](function SvgIcon(props, ref) {
                    var children = props.children,
                        classes = props.classes,
                        className = props.className,
                        _props$color = props.color,
                        color = _props$color === void 0 ? 'inherit' : _props$color,
                        _props$component = props.component,
                        Component = _props$component === void 0 ? 'svg' : _props$component,
                        _props$fontSize = props.fontSize,
                        fontSize = _props$fontSize === void 0 ? 'medium' : _props$fontSize,
                        htmlColor = props.htmlColor,
                        titleAccess = props.titleAccess,
                        _props$viewBox = props.viewBox,
                        viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,
                        other = Object(objectWithoutProperties["a" /* default */ ])(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);

                    return /*#__PURE__*/ react["createElement"](Component, Object(esm_extends["a" /* default */ ])({
                        className: Object(clsx_m["a" /* default */ ])(classes.root, className, color !== 'inherit' && classes["color".concat(Object(capitalize["a" /* default */ ])(color))], fontSize !== 'default' && fontSize !== 'medium' && classes["fontSize".concat(Object(capitalize["a" /* default */ ])(fontSize))]),
                        focusable: "false",
                        viewBox: viewBox,
                        color: htmlColor,
                        "aria-hidden": titleAccess ? undefined : true,
                        role: titleAccess ? 'img' : undefined,
                        ref: ref
                    }, other), children, titleAccess ? /*#__PURE__*/ react["createElement"]("title", null, titleAccess) : null);
                });
                false ? undefined : void 0;
                SvgIcon_SvgIcon.muiName = 'SvgIcon';
                /* harmony default export */
                var esm_SvgIcon_SvgIcon = (Object(withStyles["a" /* default */ ])(styles, {
                    name: 'MuiSvgIcon'
                })(SvgIcon_SvgIcon));
                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/createSvgIcon.js



                /**
                 * Private module reserved for @material-ui/x packages.
                 */

                function createSvgIcon(path, displayName) {
                    var Component = function Component(props, ref) {
                        return /*#__PURE__*/ react_default.a.createElement(esm_SvgIcon_SvgIcon, Object(esm_extends["a" /* default */ ])({
                            ref: ref
                        }, props), path);
                    };

                    if (false) {}

                    Component.muiName = esm_SvgIcon_SvgIcon.muiName;
                    return /*#__PURE__*/ react_default.a.memo( /*#__PURE__*/ react_default.a.forwardRef(Component));
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/debounce.js
                // Corresponds to 10 frames at 60 Hz.
                // A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
                function debounce(func) {
                    var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 166;
                    var timeout;

                    function debounced() {
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }

                        // eslint-disable-next-line consistent-this
                        var that = this;

                        var later = function later() {
                            func.apply(that, args);
                        };

                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    }

                    debounced.clear = function() {
                        clearTimeout(timeout);
                    };

                    return debounced;
                }
                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/deprecatedPropType.js
                var deprecatedPropType = __webpack_require__(810);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/isMuiElement.js

                function isMuiElement(element, muiNames) {
                    return /*#__PURE__*/ react["isValidElement"](element) && muiNames.indexOf(element.type.muiName) !== -1;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/ownerDocument.js
                function ownerDocument(node) {
                    return node && node.ownerDocument || document;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/ownerWindow.js

                function ownerWindow(node) {
                    var doc = ownerDocument(node);
                    return doc.defaultView || window;
                }
                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/requirePropFactory.js
                var requirePropFactory = __webpack_require__(1680);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/setRef.js
                var setRef = __webpack_require__(513);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/unsupportedProp.js
                function unsupportedProp(props, propName, componentName, location, propFullName) {
                    if (true) {
                        return null;
                    }

                    var propFullNameSafe = propFullName || propName;

                    if (typeof props[propName] !== 'undefined') {
                        return new Error("The prop `".concat(propFullNameSafe, "` is not supported. Please remove it."));
                    }

                    return null;
                }
                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/useControlled.js
                var useControlled = __webpack_require__(1854);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/useEventCallback.js
                var useEventCallback = __webpack_require__(228);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/useForkRef.js
                var useForkRef = __webpack_require__(403);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/unstable_useId.js

                /**
                 * Private module reserved for @material-ui/x packages.
                 */

                function useId(idOverride) {
                    var _React$useState = react["useState"](idOverride),
                        defaultId = _React$useState[0],
                        setDefaultId = _React$useState[1];

                    var id = idOverride || defaultId;
                    react["useEffect"](function() {
                        if (defaultId == null) {
                            // Fallback to this default id when possible.
                            // Use the random value for client-side rendering only.
                            // We can't use it server-side.
                            setDefaultId("mui-".concat(Math.round(Math.random() * 1e5)));
                        }
                    }, [defaultId]);
                    return id;
                }
                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/useIsFocusVisible.js
                var useIsFocusVisible = __webpack_require__(589);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/index.js













                // eslint-disable-next-line camelcase




                /***/
            }),

        /***/
        1943:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // tslint:disable:no-console

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    createKey: function() {
                        return createKey;
                    },
                    default: function() {
                        return Router;
                    },
                    matchesMiddleware: function() {
                        return matchesMiddleware;
                    }
                });
                const _interop_require_default = __webpack_require__(448);
                const _interop_require_wildcard = __webpack_require__(1841);
                const _removetrailingslash = __webpack_require__(1825);
                const _routeloader = __webpack_require__(1944);
                const _script = __webpack_require__(1948);
                const _iserror = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(1875));
                const _denormalizepagepath = __webpack_require__(1952);
                const _normalizelocalepath = __webpack_require__(1843);
                const _mitt = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1958));
                const _utils = __webpack_require__(1826);
                const _isdynamic = __webpack_require__(1877);
                const _parserelativeurl = __webpack_require__(1844);
                const _resolverewrites = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1959));
                const _routematcher = __webpack_require__(1881);
                const _routeregex = __webpack_require__(1882);
                const _formaturl = __webpack_require__(1883);
                const _detectdomainlocale = __webpack_require__(1966);
                const _parsepath = __webpack_require__(1823);
                const _addlocale = __webpack_require__(1968);
                const _removelocale = __webpack_require__(1969);
                const _removebasepath = __webpack_require__(1880);
                const _addbasepath = __webpack_require__(1970);
                const _hasbasepath = __webpack_require__(1845);
                const _resolvehref = __webpack_require__(1971);
                const _isapiroute = __webpack_require__(1972);
                const _getnextpathnameinfo = __webpack_require__(1973);
                const _formatnextpathnameinfo = __webpack_require__(1975);
                const _comparestates = __webpack_require__(1977);
                const _islocalurl = __webpack_require__(1886);
                const _isbot = __webpack_require__(1978);
                const _omit = __webpack_require__(1885);
                const _interpolateas = __webpack_require__(1887);
                const _handlesmoothscroll = __webpack_require__(1979);

                function buildCancellationError() {
                    return Object.assign(new Error("Route Cancelled"), {
                        cancelled: true
                    });
                }
                async function matchesMiddleware(options) {
                    const matchers = await Promise.resolve(options.router.pageLoader.getMiddleware());
                    if (!matchers) return false;
                    const {
                        pathname: asPathname
                    } = (0, _parsepath.parsePath)(options.asPath);
                    // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`
                    const cleanedAs = (0, _hasbasepath.hasBasePath)(asPathname) ? (0, _removebasepath.removeBasePath)(asPathname) : asPathname;
                    const asWithBasePathAndLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(cleanedAs, options.locale));
                    // Check only path match on client. Matching "has" should be done on server
                    // where we can access more info such as headers, HttpOnly cookie, etc.
                    return matchers.some((m) => new RegExp(m.regexp).test(asWithBasePathAndLocale));
                }

                function stripOrigin(url) {
                    const origin = (0, _utils.getLocationOrigin)();
                    return url.startsWith(origin) ? url.substring(origin.length) : url;
                }

                function prepareUrlAs(router, url, as) {
                    // If url and as provided as an object representation,
                    // we'll format them into the string version here.
                    let [resolvedHref, resolvedAs] = (0, _resolvehref.resolveHref)(router, url, true);
                    const origin = (0, _utils.getLocationOrigin)();
                    const hrefWasAbsolute = resolvedHref.startsWith(origin);
                    const asWasAbsolute = resolvedAs && resolvedAs.startsWith(origin);
                    resolvedHref = stripOrigin(resolvedHref);
                    resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;
                    const preparedUrl = hrefWasAbsolute ? resolvedHref : (0, _addbasepath.addBasePath)(resolvedHref);
                    const preparedAs = as ? stripOrigin((0, _resolvehref.resolveHref)(router, as)) : resolvedAs || resolvedHref;
                    return {
                        url: preparedUrl,
                        as: asWasAbsolute ? preparedAs : (0, _addbasepath.addBasePath)(preparedAs)
                    };
                }

                function resolveDynamicRoute(pathname, pages) {
                    const cleanPathname = (0, _removetrailingslash.removeTrailingSlash)((0, _denormalizepagepath.denormalizePagePath)(pathname));
                    if (cleanPathname === "/404" || cleanPathname === "/_error") {
                        return pathname;
                    }
                    // handle resolving href for dynamic routes
                    if (!pages.includes(cleanPathname)) {
                        // eslint-disable-next-line array-callback-return
                        pages.some((page) => {
                            if ((0, _isdynamic.isDynamicRoute)(page) && (0, _routeregex.getRouteRegex)(page).re.test(cleanPathname)) {
                                pathname = page;
                                return true;
                            }
                        });
                    }
                    return (0, _removetrailingslash.removeTrailingSlash)(pathname);
                }

                function getMiddlewareData(source, response, options) {
                    const nextConfig = {
                        basePath: options.router.basePath,
                        i18n: {
                            locales: options.router.locales
                        },
                        trailingSlash: Boolean(Object({
                            "NODE_ENV": "production"
                        }).__NEXT_TRAILING_SLASH)
                    };
                    const rewriteHeader = response.headers.get("x-nextjs-rewrite");
                    let rewriteTarget = rewriteHeader || response.headers.get("x-nextjs-matched-path");
                    const matchedPath = response.headers.get("x-matched-path");
                    if (matchedPath && !rewriteTarget && !matchedPath.includes("__next_data_catchall") && !matchedPath.includes("/_error") && !matchedPath.includes("/404")) {
                        // leverage x-matched-path to detect next.config.js rewrites
                        rewriteTarget = matchedPath;
                    }
                    if (rewriteTarget) {
                        if (rewriteTarget.startsWith("/") || Object({
                                "NODE_ENV": "production"
                            }).__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE) {
                            const parsedRewriteTarget = (0, _parserelativeurl.parseRelativeUrl)(rewriteTarget);
                            const pathnameInfo = (0, _getnextpathnameinfo.getNextPathnameInfo)(parsedRewriteTarget.pathname, {
                                nextConfig,
                                parseData: true
                            });
                            let fsPathname = (0, _removetrailingslash.removeTrailingSlash)(pathnameInfo.pathname);
                            return Promise.all([
                                options.router.pageLoader.getPageList(),
                                (0, _routeloader.getClientBuildManifest)()
                            ]).then((param) => {
                                let [pages, {
                                    __rewrites: rewrites
                                }] = param;
                                let as = (0, _addlocale.addLocale)(pathnameInfo.pathname, pathnameInfo.locale);
                                if ((0, _isdynamic.isDynamicRoute)(as) || !rewriteHeader && pages.includes((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(as), options.router.locales).pathname)) {
                                    const parsedSource = (0, _getnextpathnameinfo.getNextPathnameInfo)((0, _parserelativeurl.parseRelativeUrl)(source).pathname, {
                                        nextConfig: Object({
                                            "NODE_ENV": "production"
                                        }).__NEXT_HAS_REWRITES ? undefined : nextConfig,
                                        parseData: true
                                    });
                                    as = (0, _addbasepath.addBasePath)(parsedSource.pathname);
                                    parsedRewriteTarget.pathname = as;
                                }
                                if (Object({
                                        "NODE_ENV": "production"
                                    }).__NEXT_HAS_REWRITES) {
                                    const result = (0, _resolverewrites.default)(as, pages, rewrites, parsedRewriteTarget.query, (path) => resolveDynamicRoute(path, pages), options.router.locales);
                                    if (result.matchedPage) {
                                        parsedRewriteTarget.pathname = result.parsedAs.pathname;
                                        as = parsedRewriteTarget.pathname;
                                        Object.assign(parsedRewriteTarget.query, result.parsedAs.query);
                                    }
                                } else if (!pages.includes(fsPathname)) {
                                    const resolvedPathname = resolveDynamicRoute(fsPathname, pages);
                                    if (resolvedPathname !== fsPathname) {
                                        fsPathname = resolvedPathname;
                                    }
                                }
                                const resolvedHref = !pages.includes(fsPathname) ? resolveDynamicRoute((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(parsedRewriteTarget.pathname), options.router.locales).pathname, pages) : fsPathname;
                                if ((0, _isdynamic.isDynamicRoute)(resolvedHref)) {
                                    const matches = (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(resolvedHref))(as);
                                    Object.assign(parsedRewriteTarget.query, matches || {});
                                }
                                return {
                                    type: "rewrite",
                                    parsedAs: parsedRewriteTarget,
                                    resolvedHref
                                };
                            });
                        }
                        const src = (0, _parsepath.parsePath)(source);
                        const pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)({
                            ...(0, _getnextpathnameinfo.getNextPathnameInfo)(src.pathname, {
                                nextConfig,
                                parseData: true
                            }),
                            defaultLocale: options.router.defaultLocale,
                            buildId: ""
                        });
                        return Promise.resolve({
                            type: "redirect-external",
                            destination: "" + pathname + src.query + src.hash
                        });
                    }
                    const redirectTarget = response.headers.get("x-nextjs-redirect");
                    if (redirectTarget) {
                        if (redirectTarget.startsWith("/")) {
                            const src = (0, _parsepath.parsePath)(redirectTarget);
                            const pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)({
                                ...(0, _getnextpathnameinfo.getNextPathnameInfo)(src.pathname, {
                                    nextConfig,
                                    parseData: true
                                }),
                                defaultLocale: options.router.defaultLocale,
                                buildId: ""
                            });
                            return Promise.resolve({
                                type: "redirect-internal",
                                newAs: "" + pathname + src.query + src.hash,
                                newUrl: "" + pathname + src.query + src.hash
                            });
                        }
                        return Promise.resolve({
                            type: "redirect-external",
                            destination: redirectTarget
                        });
                    }
                    return Promise.resolve({
                        type: "next"
                    });
                }
                async function withMiddlewareEffects(options) {
                    const matches = await matchesMiddleware(options);
                    if (!matches || !options.fetchData) {
                        return null;
                    }
                    const data = await options.fetchData();
                    const effect = await getMiddlewareData(data.dataHref, data.response, options);
                    return {
                        dataHref: data.dataHref,
                        json: data.json,
                        response: data.response,
                        text: data.text,
                        cacheKey: data.cacheKey,
                        effect
                    };
                }
                const manualScrollRestoration = Object({
                    "NODE_ENV": "production"
                }).__NEXT_SCROLL_RESTORATION && typeof window !== "undefined" && "scrollRestoration" in window.history && !! function() {
                    try {
                        let v = "__next";
                        // eslint-disable-next-line no-sequences
                        return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true;
                    } catch (n) {}
                }();
                const SSG_DATA_NOT_FOUND = Symbol("SSG_DATA_NOT_FOUND");

                function fetchRetry(url, attempts, options) {
                    return fetch(url, {
                        // Cookies are required to be present for Next.js' SSG "Preview Mode".
                        // Cookies may also be required for `getServerSideProps`.
                        //
                        // > `fetch` won’t send cookies, unless you set the credentials init
                        // > option.
                        // https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch
                        //
                        // > For maximum browser compatibility when it comes to sending &
                        // > receiving cookies, always supply the `credentials: 'same-origin'`
                        // > option instead of relying on the default.
                        // https://github.com/github/fetch#caveats
                        credentials: "same-origin",
                        method: options.method || "GET",
                        headers: Object.assign({}, options.headers, {
                            "x-nextjs-data": "1"
                        })
                    }).then((response) => {
                        return !response.ok && attempts > 1 && response.status >= 500 ? fetchRetry(url, attempts - 1, options) : response;
                    });
                }

                function tryToParseAsJSON(text) {
                    try {
                        return JSON.parse(text);
                    } catch (error) {
                        return null;
                    }
                }

                function fetchNextData(param) {
                    let {
                        dataHref,
                        inflightCache,
                        isPrefetch,
                        hasMiddleware,
                        isServerRender,
                        parseJSON,
                        persistCache,
                        isBackground,
                        unstable_skipClientCache
                    } = param;
                    const {
                        href: cacheKey
                    } = new URL(dataHref, window.location.href);
                    const getData = (params) => {
                        var _params_method;
                        return fetchRetry(dataHref, isServerRender ? 3 : 1, {
                            headers: Object.assign({}, isPrefetch ? {
                                purpose: "prefetch"
                            } : {}, isPrefetch && hasMiddleware ? {
                                "x-middleware-prefetch": "1"
                            } : {}),
                            method: (_params_method = params == null ? void 0 : params.method) != null ? _params_method : "GET"
                        }).then((response) => {
                            if (response.ok && (params == null ? void 0 : params.method) === "HEAD") {
                                return {
                                    dataHref,
                                    response,
                                    text: "",
                                    json: {},
                                    cacheKey
                                };
                            }
                            return response.text().then((text) => {
                                if (!response.ok) {
                                    /**
                                     * When the data response is a redirect because of a middleware
                                     * we do not consider it an error. The headers must bring the
                                     * mapped location.
                                     * TODO: Change the status code in the handler.
                                     */
                                    if (hasMiddleware && [
                                            301,
                                            302,
                                            307,
                                            308
                                        ].includes(response.status)) {
                                        return {
                                            dataHref,
                                            response,
                                            text,
                                            json: {},
                                            cacheKey
                                        };
                                    }
                                    if (response.status === 404) {
                                        var _tryToParseAsJSON;
                                        if ((_tryToParseAsJSON = tryToParseAsJSON(text)) == null ? void 0 : _tryToParseAsJSON.notFound) {
                                            return {
                                                dataHref,
                                                json: {
                                                    notFound: SSG_DATA_NOT_FOUND
                                                },
                                                response,
                                                text,
                                                cacheKey
                                            };
                                        }
                                    }
                                    const error = new Error("Failed to load static props");
                                    /**
                                     * We should only trigger a server-side transition if this was
                                     * caused on a client-side transition. Otherwise, we'd get into
                                     * an infinite loop.
                                     */
                                    if (!isServerRender) {
                                        (0, _routeloader.markAssetError)(error);
                                    }
                                    throw error;
                                }
                                return {
                                    dataHref,
                                    json: parseJSON ? tryToParseAsJSON(text) : null,
                                    response,
                                    text,
                                    cacheKey
                                };
                            });
                        }).then((data) => {
                            if (!persistCache || "production" !== "production" || data.response.headers.get("x-middleware-cache") === "no-cache") {
                                delete inflightCache[cacheKey];
                            }
                            return data;
                        }).catch((err) => {
                            if (!unstable_skipClientCache) {
                                delete inflightCache[cacheKey];
                            }
                            if ( // chrome
                                err.message === "Failed to fetch" || // firefox
                                err.message === "NetworkError when attempting to fetch resource." || // safari
                                err.message === "Load failed") {
                                (0, _routeloader.markAssetError)(err);
                            }
                            throw err;
                        });
                    };
                    // when skipping client cache we wait to update
                    // inflight cache until successful data response
                    // this allows racing click event with fetching newer data
                    // without blocking navigation when stale data is available
                    if (unstable_skipClientCache && persistCache) {
                        return getData({}).then((data) => {
                            inflightCache[cacheKey] = Promise.resolve(data);
                            return data;
                        });
                    }
                    if (inflightCache[cacheKey] !== undefined) {
                        return inflightCache[cacheKey];
                    }
                    return inflightCache[cacheKey] = getData(isBackground ? {
                        method: "HEAD"
                    } : {});
                }

                function createKey() {
                    return Math.random().toString(36).slice(2, 10);
                }

                function handleHardNavigation(param) {
                    let {
                        url,
                        router
                    } = param;
                    // ensure we don't trigger a hard navigation to the same
                    // URL as this can end up with an infinite refresh
                    if (url === (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(router.asPath, router.locale))) {
                        throw new Error("Invariant: attempted to hard navigate to the same URL " + url + " " + location.href);
                    }
                    window.location.href = url;
                }
                const getCancelledHandler = (param) => {
                    let {
                        route,
                        router
                    } = param;
                    let cancelled = false;
                    const cancel = router.clc = () => {
                        cancelled = true;
                    };
                    const handleCancelled = () => {
                        if (cancelled) {
                            const error = new Error('Abort fetching component for route: "' + route + '"');
                            error.cancelled = true;
                            throw error;
                        }
                        if (cancel === router.clc) {
                            router.clc = null;
                        }
                    };
                    return handleCancelled;
                };
                class Router {
                    reload() {
                        window.location.reload();
                    }
                    /**
                     * Go back in history
                     */
                    back() {
                        window.history.back();
                    }
                    /**
                     * Go forward in history
                     */
                    forward() {
                        window.history.forward();
                    }
                    /**
                     * Performs a `pushState` with arguments
                     * @param url of the route
                     * @param as masks `url` for the browser
                     * @param options object you can define `shallow` and other options
                     */
                    push(url, as, options) {
                        if (options === void 0) options = {};
                        if (Object({
                                "NODE_ENV": "production"
                            }).__NEXT_SCROLL_RESTORATION) {
                            // TODO: remove in the future when we update history before route change
                            // is complete, as the popstate event should handle this capture.
                            if (manualScrollRestoration) {
                                try {
                                    // Snapshot scroll position right before navigating to a new page:
                                    sessionStorage.setItem("__next_scroll_" + this._key, JSON.stringify({
                                        x: self.pageXOffset,
                                        y: self.pageYOffset
                                    }));
                                } catch (e) {}
                            }
                        }
                        ({
                            url,
                            as
                        } = prepareUrlAs(this, url, as));
                        return this.change("pushState", url, as, options);
                    }
                    /**
                     * Performs a `replaceState` with arguments
                     * @param url of the route
                     * @param as masks `url` for the browser
                     * @param options object you can define `shallow` and other options
                     */
                    replace(url, as, options) {
                        if (options === void 0) options = {};
                        ({
                            url,
                            as
                        } = prepareUrlAs(this, url, as));
                        return this.change("replaceState", url, as, options);
                    }
                    async _bfl(as, resolvedAs, locale, skipNavigate) {
                        if (Object({
                                "NODE_ENV": "production"
                            }).__NEXT_CLIENT_ROUTER_FILTER_ENABLED) {
                            let matchesBflStatic = false;
                            let matchesBflDynamic = false;
                            for (const curAs of [
                                    as,
                                    resolvedAs
                                ]) {
                                if (curAs) {
                                    const asNoSlash = (0, _removetrailingslash.removeTrailingSlash)(new URL(curAs, "http://n").pathname);
                                    const asNoSlashLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(asNoSlash, locale || this.locale));
                                    if (asNoSlash !== (0, _removetrailingslash.removeTrailingSlash)(new URL(this.asPath, "http://n").pathname)) {
                                        var _this__bfl_s, _this__bfl_s1;
                                        matchesBflStatic = matchesBflStatic || !!((_this__bfl_s = this._bfl_s) == null ? void 0 : _this__bfl_s.contains(asNoSlash)) || !!((_this__bfl_s1 = this._bfl_s) == null ? void 0 : _this__bfl_s1.contains(asNoSlashLocale));
                                        for (const normalizedAS of [
                                                asNoSlash,
                                                asNoSlashLocale
                                            ]) {
                                            // if any sub-path of as matches a dynamic filter path
                                            // it should be hard navigated
                                            const curAsParts = normalizedAS.split("/");
                                            for (let i = 0; !matchesBflDynamic && i < curAsParts.length + 1; i++) {
                                                var _this__bfl_d;
                                                const currentPart = curAsParts.slice(0, i).join("/");
                                                if (currentPart && ((_this__bfl_d = this._bfl_d) == null ? void 0 : _this__bfl_d.contains(currentPart))) {
                                                    matchesBflDynamic = true;
                                                    break;
                                                }
                                            }
                                        }
                                        // if the client router filter is matched then we trigger
                                        // a hard navigation
                                        if (matchesBflStatic || matchesBflDynamic) {
                                            if (skipNavigate) {
                                                return true;
                                            }
                                            handleHardNavigation({
                                                url: (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, locale || this.locale, this.defaultLocale)),
                                                router: this
                                            });
                                            return new Promise(() => {});
                                        }
                                    }
                                }
                            }
                        }
                        return false;
                    }
                    async change(method, url, as, options, forcedScroll) {
                        var _this_components_pathname;
                        if (!(0, _islocalurl.isLocalURL)(url)) {
                            handleHardNavigation({
                                url,
                                router: this
                            });
                            return false;
                        }
                        // WARNING: `_h` is an internal option for handing Next.js client-side
                        // hydration. Your app should _never_ use this property. It may change at
                        // any time without notice.
                        const isQueryUpdating = options._h === 1;
                        if (!isQueryUpdating && !options.shallow) {
                            await this._bfl(as, undefined, options.locale);
                        }
                        let shouldResolveHref = isQueryUpdating || options._shouldResolveHref || (0, _parsepath.parsePath)(url).pathname === (0, _parsepath.parsePath)(as).pathname;
                        const nextState = {
                            ...this.state
                        };
                        // for static pages with query params in the URL we delay
                        // marking the router ready until after the query is updated
                        // or a navigation has occurred
                        const readyStateChange = this.isReady !== true;
                        this.isReady = true;
                        const isSsr = this.isSsr;
                        if (!isQueryUpdating) {
                            this.isSsr = false;
                        }
                        // if a route transition is already in progress before
                        // the query updating is triggered ignore query updating
                        if (isQueryUpdating && this.clc) {
                            return false;
                        }
                        const prevLocale = nextState.locale;
                        if (Object({
                                "NODE_ENV": "production"
                            }).__NEXT_I18N_SUPPORT) {
                            nextState.locale = options.locale === false ? this.defaultLocale : options.locale || nextState.locale;
                            if (typeof options.locale === "undefined") {
                                options.locale = nextState.locale;
                            }
                            const parsedAs = (0, _parserelativeurl.parseRelativeUrl)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as);
                            const localePathResult = (0, _normalizelocalepath.normalizeLocalePath)(parsedAs.pathname, this.locales);
                            if (localePathResult.detectedLocale) {
                                nextState.locale = localePathResult.detectedLocale;
                                parsedAs.pathname = (0, _addbasepath.addBasePath)(parsedAs.pathname);
                                as = (0, _formaturl.formatWithValidation)(parsedAs);
                                url = (0, _addbasepath.addBasePath)((0, _normalizelocalepath.normalizeLocalePath)((0, _hasbasepath.hasBasePath)(url) ? (0, _removebasepath.removeBasePath)(url) : url, this.locales).pathname);
                            }
                            let didNavigate = false;
                            // we need to wrap this in the env check again since regenerator runtime
                            // moves this on its own due to the return
                            if (Object({
                                    "NODE_ENV": "production"
                                }).__NEXT_I18N_SUPPORT) {
                                var _this_locales;
                                // if the locale isn't configured hard navigate to show 404 page
                                if (!((_this_locales = this.locales) == null ? void 0 : _this_locales.includes(nextState.locale))) {
                                    parsedAs.pathname = (0, _addlocale.addLocale)(parsedAs.pathname, nextState.locale);
                                    handleHardNavigation({
                                        url: (0, _formaturl.formatWithValidation)(parsedAs),
                                        router: this
                                    });
                                    // this was previously a return but was removed in favor
                                    // of better dead code elimination with regenerator runtime
                                    didNavigate = true;
                                }
                            }
                            const detectedDomain = (0, _detectdomainlocale.detectDomainLocale)(this.domainLocales, undefined, nextState.locale);
                            // we need to wrap this in the env check again since regenerator runtime
                            // moves this on its own due to the return
                            if (Object({
                                    "NODE_ENV": "production"
                                }).__NEXT_I18N_SUPPORT) {
                                // if we are navigating to a domain locale ensure we redirect to the
                                // correct domain
                                if (!didNavigate && detectedDomain && this.isLocaleDomain && self.location.hostname !== detectedDomain.domain) {
                                    const asNoBasePath = (0, _removebasepath.removeBasePath)(as);
                                    handleHardNavigation({
                                        url: "http" + (detectedDomain.http ? "" : "s") + "://" + detectedDomain.domain + (0, _addbasepath.addBasePath)("" + (nextState.locale === detectedDomain.defaultLocale ? "" : "/" + nextState.locale) + (asNoBasePath === "/" ? "" : asNoBasePath) || "/"),
                                        router: this
                                    });
                                    // this was previously a return but was removed in favor
                                    // of better dead code elimination with regenerator runtime
                                    didNavigate = true;
                                }
                            }
                            if (didNavigate) {
                                return new Promise(() => {});
                            }
                        }
                        // marking route changes as a navigation start entry
                        if (_utils.ST) {
                            performance.mark("routeChange");
                        }
                        const {
                            shallow = false, scroll = true
                        } = options;
                        const routeProps = {
                            shallow
                        };
                        if (this._inFlightRoute && this.clc) {
                            if (!isSsr) {
                                Router.events.emit("routeChangeError", buildCancellationError(), this._inFlightRoute, routeProps);
                            }
                            this.clc();
                            this.clc = null;
                        }
                        as = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, options.locale, this.defaultLocale));
                        const cleanedAs = (0, _removelocale.removeLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, nextState.locale);
                        this._inFlightRoute = as;
                        const localeChange = prevLocale !== nextState.locale;
                        // If the url change is only related to a hash change
                        // We should not proceed. We should only change the state.
                        if (!isQueryUpdating && this.onlyAHashChange(cleanedAs) && !localeChange) {
                            nextState.asPath = cleanedAs;
                            Router.events.emit("hashChangeStart", as, routeProps);
                            // TODO: do we need the resolved href when only a hash change?
                            this.changeState(method, url, as, {
                                ...options,
                                scroll: false
                            });
                            if (scroll) {
                                this.scrollToHash(cleanedAs);
                            }
                            try {
                                await this.set(nextState, this.components[nextState.route], null);
                            } catch (err) {
                                if ((0, _iserror.default)(err) && err.cancelled) {
                                    Router.events.emit("routeChangeError", err, cleanedAs, routeProps);
                                }
                                throw err;
                            }
                            Router.events.emit("hashChangeComplete", as, routeProps);
                            return true;
                        }
                        let parsed = (0, _parserelativeurl.parseRelativeUrl)(url);
                        let {
                            pathname,
                            query
                        } = parsed;
                        // The build manifest needs to be loaded before auto-static dynamic pages
                        // get their query parameters to allow ensuring they can be parsed properly
                        // when rewritten to
                        let pages, rewrites;
                        try {
                            [pages, {
                                __rewrites: rewrites
                            }] = await Promise.all([
                                this.pageLoader.getPageList(),
                                (0, _routeloader.getClientBuildManifest)(),
                                this.pageLoader.getMiddleware()
                            ]);
                        } catch (err) {
                            // If we fail to resolve the page list or client-build manifest, we must
                            // do a server-side transition:
                            handleHardNavigation({
                                url: as,
                                router: this
                            });
                            return false;
                        }
                        // If asked to change the current URL we should reload the current page
                        // (not location.reload() but reload getInitialProps and other Next.js stuffs)
                        // We also need to set the method = replaceState always
                        // as this should not go into the history (That's how browsers work)
                        // We should compare the new asPath to the current asPath, not the url
                        if (!this.urlIsNew(cleanedAs) && !localeChange) {
                            method = "replaceState";
                        }
                        // we need to resolve the as value using rewrites for dynamic SSG
                        // pages to allow building the data URL correctly
                        let resolvedAs = as;
                        // url and as should always be prefixed with basePath by this
                        // point by either next/link or router.push/replace so strip the
                        // basePath from the pathname to match the pages dir 1-to-1
                        pathname = pathname ? (0, _removetrailingslash.removeTrailingSlash)((0, _removebasepath.removeBasePath)(pathname)) : pathname;
                        let route = (0, _removetrailingslash.removeTrailingSlash)(pathname);
                        const parsedAsPathname = as.startsWith("/") && (0, _parserelativeurl.parseRelativeUrl)(as).pathname;
                        // if we detected the path as app route during prefetching
                        // trigger hard navigation
                        if ((_this_components_pathname = this.components[pathname]) == null ? void 0 : _this_components_pathname.__appRouter) {
                            handleHardNavigation({
                                url: as,
                                router: this
                            });
                            return new Promise(() => {});
                        }
                        const isMiddlewareRewrite = !!(parsedAsPathname && route !== parsedAsPathname && (!(0, _isdynamic.isDynamicRoute)(route) || !(0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(route))(parsedAsPathname)));
                        // we don't attempt resolve asPath when we need to execute
                        // middleware as the resolving will occur server-side
                        const isMiddlewareMatch = !options.shallow && await matchesMiddleware({
                            asPath: as,
                            locale: nextState.locale,
                            router: this
                        });
                        if (isQueryUpdating && isMiddlewareMatch) {
                            shouldResolveHref = false;
                        }
                        if (shouldResolveHref && pathname !== "/_error") {
                            options._shouldResolveHref = true;
                            if (Object({
                                    "NODE_ENV": "production"
                                }).__NEXT_HAS_REWRITES && as.startsWith("/")) {
                                const rewritesResult = (0, _resolverewrites.default)((0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(cleanedAs, nextState.locale), true), pages, rewrites, query, (p) => resolveDynamicRoute(p, pages), this.locales);
                                if (rewritesResult.externalDest) {
                                    handleHardNavigation({
                                        url: as,
                                        router: this
                                    });
                                    return true;
                                }
                                if (!isMiddlewareMatch) {
                                    resolvedAs = rewritesResult.asPath;
                                }
                                if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {
                                    // if this directly matches a page we need to update the href to
                                    // allow the correct page chunk to be loaded
                                    pathname = rewritesResult.resolvedHref;
                                    parsed.pathname = (0, _addbasepath.addBasePath)(pathname);
                                    if (!isMiddlewareMatch) {
                                        url = (0, _formaturl.formatWithValidation)(parsed);
                                    }
                                }
                            } else {
                                parsed.pathname = resolveDynamicRoute(pathname, pages);
                                if (parsed.pathname !== pathname) {
                                    pathname = parsed.pathname;
                                    parsed.pathname = (0, _addbasepath.addBasePath)(pathname);
                                    if (!isMiddlewareMatch) {
                                        url = (0, _formaturl.formatWithValidation)(parsed);
                                    }
                                }
                            }
                        }
                        if (!(0, _islocalurl.isLocalURL)(as)) {
                            if (false) {}
                            handleHardNavigation({
                                url: as,
                                router: this
                            });
                            return false;
                        }
                        resolvedAs = (0, _removelocale.removeLocale)((0, _removebasepath.removeBasePath)(resolvedAs), nextState.locale);
                        route = (0, _removetrailingslash.removeTrailingSlash)(pathname);
                        let routeMatch = false;
                        if ((0, _isdynamic.isDynamicRoute)(route)) {
                            const parsedAs = (0, _parserelativeurl.parseRelativeUrl)(resolvedAs);
                            const asPathname = parsedAs.pathname;
                            const routeRegex = (0, _routeregex.getRouteRegex)(route);
                            routeMatch = (0, _routematcher.getRouteMatcher)(routeRegex)(asPathname);
                            const shouldInterpolate = route === asPathname;
                            const interpolatedAs = shouldInterpolate ? (0, _interpolateas.interpolateAs)(route, asPathname, query) : {};
                            if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {
                                const missingParams = Object.keys(routeRegex.groups).filter((param) => !query[param] && !routeRegex.groups[param].optional);
                                if (missingParams.length > 0 && !isMiddlewareMatch) {
                                    if (false) {}
                                    throw new Error((shouldInterpolate ? "The provided `href` (" + url + ") value is missing query values (" + missingParams.join(", ") + ") to be interpolated properly. " : "The provided `as` value (" + asPathname + ") is incompatible with the `href` value (" + route + "). ") + ("Read more: https://nextjs.org/docs/messages/" + (shouldInterpolate ? "href-interpolation-failed" : "incompatible-href-as")));
                                }
                            } else if (shouldInterpolate) {
                                as = (0, _formaturl.formatWithValidation)(Object.assign({}, parsedAs, {
                                    pathname: interpolatedAs.result,
                                    query: (0, _omit.omit)(query, interpolatedAs.params)
                                }));
                            } else {
                                // Merge params into `query`, overwriting any specified in search
                                Object.assign(query, routeMatch);
                            }
                        }
                        if (!isQueryUpdating) {
                            Router.events.emit("routeChangeStart", as, routeProps);
                        }
                        const isErrorRoute = this.pathname === "/404" || this.pathname === "/_error";
                        try {
                            var _self___NEXT_DATA___props_pageProps, _self___NEXT_DATA___props, _routeInfo_props;
                            let routeInfo = await this.getRouteInfo({
                                route,
                                pathname,
                                query,
                                as,
                                resolvedAs,
                                routeProps,
                                locale: nextState.locale,
                                isPreview: nextState.isPreview,
                                hasMiddleware: isMiddlewareMatch,
                                unstable_skipClientCache: options.unstable_skipClientCache,
                                isQueryUpdating: isQueryUpdating && !this.isFallback,
                                isMiddlewareRewrite
                            });
                            if (!isQueryUpdating && !options.shallow) {
                                await this._bfl(as, "resolvedAs" in routeInfo ? routeInfo.resolvedAs : undefined, nextState.locale);
                            }
                            if ("route" in routeInfo && isMiddlewareMatch) {
                                pathname = routeInfo.route || route;
                                route = pathname;
                                if (!routeProps.shallow) {
                                    query = Object.assign({}, routeInfo.query || {}, query);
                                }
                                const cleanedParsedPathname = (0, _hasbasepath.hasBasePath)(parsed.pathname) ? (0, _removebasepath.removeBasePath)(parsed.pathname) : parsed.pathname;
                                if (routeMatch && pathname !== cleanedParsedPathname) {
                                    Object.keys(routeMatch).forEach((key) => {
                                        if (routeMatch && query[key] === routeMatch[key]) {
                                            delete query[key];
                                        }
                                    });
                                }
                                if ((0, _isdynamic.isDynamicRoute)(pathname)) {
                                    const prefixedAs = !routeProps.shallow && routeInfo.resolvedAs ? routeInfo.resolvedAs : (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(new URL(as, location.href).pathname, nextState.locale), true);
                                    let rewriteAs = prefixedAs;
                                    if ((0, _hasbasepath.hasBasePath)(rewriteAs)) {
                                        rewriteAs = (0, _removebasepath.removeBasePath)(rewriteAs);
                                    }
                                    if (Object({
                                            "NODE_ENV": "production"
                                        }).__NEXT_I18N_SUPPORT) {
                                        const localeResult = (0, _normalizelocalepath.normalizeLocalePath)(rewriteAs, this.locales);
                                        nextState.locale = localeResult.detectedLocale || nextState.locale;
                                        rewriteAs = localeResult.pathname;
                                    }
                                    const routeRegex = (0, _routeregex.getRouteRegex)(pathname);
                                    const curRouteMatch = (0, _routematcher.getRouteMatcher)(routeRegex)(new URL(rewriteAs, location.href).pathname);
                                    if (curRouteMatch) {
                                        Object.assign(query, curRouteMatch);
                                    }
                                }
                            }
                            // If the routeInfo brings a redirect we simply apply it.
                            if ("type" in routeInfo) {
                                if (routeInfo.type === "redirect-internal") {
                                    return this.change(method, routeInfo.newUrl, routeInfo.newAs, options);
                                } else {
                                    handleHardNavigation({
                                        url: routeInfo.destination,
                                        router: this
                                    });
                                    return new Promise(() => {});
                                }
                            }
                            const component = routeInfo.Component;
                            if (component && component.unstable_scriptLoader) {
                                const scripts = [].concat(component.unstable_scriptLoader());
                                scripts.forEach((script) => {
                                    (0, _script.handleClientScriptLoad)(script.props);
                                });
                            }
                            // handle redirect on client-transition
                            if ((routeInfo.__N_SSG || routeInfo.__N_SSP) && routeInfo.props) {
                                if (routeInfo.props.pageProps && routeInfo.props.pageProps.__N_REDIRECT) {
                                    // Use the destination from redirect without adding locale
                                    options.locale = false;
                                    const destination = routeInfo.props.pageProps.__N_REDIRECT;
                                    // check if destination is internal (resolves to a page) and attempt
                                    // client-navigation if it is falling back to hard navigation if
                                    // it's not
                                    if (destination.startsWith("/") && routeInfo.props.pageProps.__N_REDIRECT_BASE_PATH !== false) {
                                        const parsedHref = (0, _parserelativeurl.parseRelativeUrl)(destination);
                                        parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);
                                        const {
                                            url: newUrl,
                                            as: newAs
                                        } = prepareUrlAs(this, destination, destination);
                                        return this.change(method, newUrl, newAs, options);
                                    }
                                    handleHardNavigation({
                                        url: destination,
                                        router: this
                                    });
                                    return new Promise(() => {});
                                }
                                nextState.isPreview = !!routeInfo.props.__N_PREVIEW;
                                // handle SSG data 404
                                if (routeInfo.props.notFound === SSG_DATA_NOT_FOUND) {
                                    let notFoundRoute;
                                    try {
                                        await this.fetchComponent("/404");
                                        notFoundRoute = "/404";
                                    } catch (_) {
                                        notFoundRoute = "/_error";
                                    }
                                    routeInfo = await this.getRouteInfo({
                                        route: notFoundRoute,
                                        pathname: notFoundRoute,
                                        query,
                                        as,
                                        resolvedAs,
                                        routeProps: {
                                            shallow: false
                                        },
                                        locale: nextState.locale,
                                        isPreview: nextState.isPreview,
                                        isNotFound: true
                                    });
                                    if ("type" in routeInfo) {
                                        throw new Error("Unexpected middleware effect on /404");
                                    }
                                }
                            }
                            if (isQueryUpdating && this.pathname === "/_error" && ((_self___NEXT_DATA___props = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps = _self___NEXT_DATA___props.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps.statusCode) === 500 && ((_routeInfo_props = routeInfo.props) == null ? void 0 : _routeInfo_props.pageProps)) {
                                // ensure statusCode is still correct for static 500 page
                                // when updating query information
                                routeInfo.props.pageProps.statusCode = 500;
                            }
                            var _routeInfo_route;
                            // shallow routing is only allowed for same page URL changes.
                            const isValidShallowRoute = options.shallow && nextState.route === ((_routeInfo_route = routeInfo.route) != null ? _routeInfo_route : route);
                            var _options_scroll;
                            const shouldScroll = (_options_scroll = options.scroll) != null ? _options_scroll : !isQueryUpdating && !isValidShallowRoute;
                            const resetScroll = shouldScroll ? {
                                x: 0,
                                y: 0
                            } : null;
                            const upcomingScrollState = forcedScroll != null ? forcedScroll : resetScroll;
                            // the new state that the router gonna set
                            const upcomingRouterState = {
                                ...nextState,
                                route,
                                pathname,
                                query,
                                asPath: cleanedAs,
                                isFallback: false
                            };
                            // When the page being rendered is the 404 page, we should only update the
                            // query parameters. Route changes here might add the basePath when it
                            // wasn't originally present. This is also why this block is before the
                            // below `changeState` call which updates the browser's history (changing
                            // the URL).
                            if (isQueryUpdating && isErrorRoute) {
                                var _self___NEXT_DATA___props_pageProps1, _self___NEXT_DATA___props1, _routeInfo_props1;
                                routeInfo = await this.getRouteInfo({
                                    route: this.pathname,
                                    pathname: this.pathname,
                                    query,
                                    as,
                                    resolvedAs,
                                    routeProps: {
                                        shallow: false
                                    },
                                    locale: nextState.locale,
                                    isPreview: nextState.isPreview,
                                    isQueryUpdating: isQueryUpdating && !this.isFallback
                                });
                                if ("type" in routeInfo) {
                                    throw new Error("Unexpected middleware effect on " + this.pathname);
                                }
                                if (this.pathname === "/_error" && ((_self___NEXT_DATA___props1 = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps1 = _self___NEXT_DATA___props1.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps1.statusCode) === 500 && ((_routeInfo_props1 = routeInfo.props) == null ? void 0 : _routeInfo_props1.pageProps)) {
                                    // ensure statusCode is still correct for static 500 page
                                    // when updating query information
                                    routeInfo.props.pageProps.statusCode = 500;
                                }
                                try {
                                    await this.set(upcomingRouterState, routeInfo, upcomingScrollState);
                                } catch (err) {
                                    if ((0, _iserror.default)(err) && err.cancelled) {
                                        Router.events.emit("routeChangeError", err, cleanedAs, routeProps);
                                    }
                                    throw err;
                                }
                                return true;
                            }
                            Router.events.emit("beforeHistoryChange", as, routeProps);
                            this.changeState(method, url, as, options);
                            // for query updates we can skip it if the state is unchanged and we don't
                            // need to scroll
                            // https://github.com/vercel/next.js/issues/37139
                            const canSkipUpdating = isQueryUpdating && !upcomingScrollState && !readyStateChange && !localeChange && (0, _comparestates.compareRouterStates)(upcomingRouterState, this.state);
                            if (!canSkipUpdating) {
                                try {
                                    await this.set(upcomingRouterState, routeInfo, upcomingScrollState);
                                } catch (e) {
                                    if (e.cancelled) routeInfo.error = routeInfo.error || e;
                                    else throw e;
                                }
                                if (routeInfo.error) {
                                    if (!isQueryUpdating) {
                                        Router.events.emit("routeChangeError", routeInfo.error, cleanedAs, routeProps);
                                    }
                                    throw routeInfo.error;
                                }
                                if (Object({
                                        "NODE_ENV": "production"
                                    }).__NEXT_I18N_SUPPORT) {
                                    if (nextState.locale) {
                                        document.documentElement.lang = nextState.locale;
                                    }
                                }
                                if (!isQueryUpdating) {
                                    Router.events.emit("routeChangeComplete", as, routeProps);
                                }
                                // A hash mark # is the optional last part of a URL
                                const hashRegex = /#.+$/;
                                if (shouldScroll && hashRegex.test(as)) {
                                    this.scrollToHash(as);
                                }
                            }
                            return true;
                        } catch (err) {
                            if ((0, _iserror.default)(err) && err.cancelled) {
                                return false;
                            }
                            throw err;
                        }
                    }
                    changeState(method, url, as, options) {
                        if (options === void 0) options = {};
                        if (false) {}
                        if (method !== "pushState" || (0, _utils.getURL)() !== as) {
                            this._shallow = options.shallow;
                            window.history[method]({
                                    url,
                                    as,
                                    options,
                                    __N: true,
                                    key: this._key = method !== "pushState" ? this._key : createKey()
                                }, // Most browsers currently ignores this parameter, although they may use it in the future.
                                // Passing the empty string here should be safe against future changes to the method.
                                // https://developer.mozilla.org/docs/Web/API/History/replaceState
                                "", as);
                        }
                    }
                    async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {
                        console.error(err);
                        if (err.cancelled) {
                            // bubble up cancellation errors
                            throw err;
                        }
                        if ((0, _routeloader.isAssetError)(err) || loadErrorFail) {
                            Router.events.emit("routeChangeError", err, as, routeProps);
                            // If we can't load the page it could be one of following reasons
                            //  1. Page doesn't exists
                            //  2. Page does exist in a different zone
                            //  3. Internal error while loading the page
                            // So, doing a hard reload is the proper way to deal with this.
                            handleHardNavigation({
                                url: as,
                                router: this
                            });
                            // Changing the URL doesn't block executing the current code path.
                            // So let's throw a cancellation error stop the routing logic.
                            throw buildCancellationError();
                        }
                        try {
                            let props;
                            const {
                                page: Component,
                                styleSheets
                            } = await this.fetchComponent("/_error");
                            const routeInfo = {
                                props,
                                Component,
                                styleSheets,
                                err,
                                error: err
                            };
                            if (!routeInfo.props) {
                                try {
                                    routeInfo.props = await this.getInitialProps(Component, {
                                        err,
                                        pathname,
                                        query
                                    });
                                } catch (gipErr) {
                                    console.error("Error in error page `getInitialProps`: ", gipErr);
                                    routeInfo.props = {};
                                }
                            }
                            return routeInfo;
                        } catch (routeInfoErr) {
                            return this.handleRouteInfoError((0, _iserror.default)(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + ""), pathname, query, as, routeProps, true);
                        }
                    }
                    async getRouteInfo(param) {
                        let {
                            route: requestedRoute,
                            pathname,
                            query,
                            as,
                            resolvedAs,
                            routeProps,
                            locale,
                            hasMiddleware,
                            isPreview,
                            unstable_skipClientCache,
                            isQueryUpdating,
                            isMiddlewareRewrite,
                            isNotFound
                        } = param;
                        /**
                         * This `route` binding can change if there's a rewrite
                         * so we keep a reference to the original requested route
                         * so we can store the cache for it and avoid re-requesting every time
                         * for shallow routing purposes.
                         */
                        let route = requestedRoute;
                        try {
                            var _data_effect, _data_effect1, _data_effect2, _data_response;
                            let existingInfo = this.components[route];
                            if (routeProps.shallow && existingInfo && this.route === route) {
                                return existingInfo;
                            }
                            const handleCancelled = getCancelledHandler({
                                route,
                                router: this
                            });
                            if (hasMiddleware) {
                                existingInfo = undefined;
                            }
                            let cachedRouteInfo = existingInfo && !("initial" in existingInfo) && "production" !== "development" ? existingInfo : undefined;
                            const isBackground = isQueryUpdating;
                            const fetchNextDataParams = {
                                dataHref: this.pageLoader.getDataHref({
                                    href: (0, _formaturl.formatWithValidation)({
                                        pathname,
                                        query
                                    }),
                                    skipInterpolation: true,
                                    asPath: isNotFound ? "/404" : resolvedAs,
                                    locale
                                }),
                                hasMiddleware: true,
                                isServerRender: this.isSsr,
                                parseJSON: true,
                                inflightCache: isBackground ? this.sbc : this.sdc,
                                persistCache: !isPreview,
                                isPrefetch: false,
                                unstable_skipClientCache,
                                isBackground
                            };
                            let data = isQueryUpdating && !isMiddlewareRewrite ? null : await withMiddlewareEffects({
                                fetchData: () => fetchNextData(fetchNextDataParams),
                                asPath: isNotFound ? "/404" : resolvedAs,
                                locale: locale,
                                router: this
                            }).catch((err) => {
                                // we don't hard error during query updating
                                // as it's un-necessary and doesn't need to be fatal
                                // unless it is a fallback route and the props can't
                                // be loaded
                                if (isQueryUpdating) {
                                    return null;
                                }
                                throw err;
                            });
                            // when rendering error routes we don't apply middleware
                            // effects
                            if (data && (pathname === "/_error" || pathname === "/404")) {
                                data.effect = undefined;
                            }
                            if (isQueryUpdating) {
                                if (!data) {
                                    data = {
                                        json: self.__NEXT_DATA__.props
                                    };
                                } else {
                                    data.json = self.__NEXT_DATA__.props;
                                }
                            }
                            handleCancelled();
                            if ((data == null ? void 0 : (_data_effect = data.effect) == null ? void 0 : _data_effect.type) === "redirect-internal" || (data == null ? void 0 : (_data_effect1 = data.effect) == null ? void 0 : _data_effect1.type) === "redirect-external") {
                                return data.effect;
                            }
                            if ((data == null ? void 0 : (_data_effect2 = data.effect) == null ? void 0 : _data_effect2.type) === "rewrite") {
                                const resolvedRoute = (0, _removetrailingslash.removeTrailingSlash)(data.effect.resolvedHref);
                                const pages = await this.pageLoader.getPageList();
                                // during query updating the page must match although during
                                // client-transition a redirect that doesn't match a page
                                // can be returned and this should trigger a hard navigation
                                // which is valid for incremental migration
                                if (!isQueryUpdating || pages.includes(resolvedRoute)) {
                                    route = resolvedRoute;
                                    pathname = data.effect.resolvedHref;
                                    query = {
                                        ...query,
                                        ...data.effect.parsedAs.query
                                    };
                                    resolvedAs = (0, _removebasepath.removeBasePath)((0, _normalizelocalepath.normalizeLocalePath)(data.effect.parsedAs.pathname, this.locales).pathname);
                                    // Check again the cache with the new destination.
                                    existingInfo = this.components[route];
                                    if (routeProps.shallow && existingInfo && this.route === route && !hasMiddleware) {
                                        // If we have a match with the current route due to rewrite,
                                        // we can copy the existing information to the rewritten one.
                                        // Then, we return the information along with the matched route.
                                        return {
                                            ...existingInfo,
                                            route
                                        };
                                    }
                                }
                            }
                            if ((0, _isapiroute.isAPIRoute)(route)) {
                                handleHardNavigation({
                                    url: as,
                                    router: this
                                });
                                return new Promise(() => {});
                            }
                            const routeInfo = cachedRouteInfo || await this.fetchComponent(route).then((res) => ({
                                Component: res.page,
                                styleSheets: res.styleSheets,
                                __N_SSG: res.mod.__N_SSG,
                                __N_SSP: res.mod.__N_SSP
                            }));
                            if (false) {}
                            const wasBailedPrefetch = data == null ? void 0 : (_data_response = data.response) == null ? void 0 : _data_response.headers.get("x-middleware-skip");
                            const shouldFetchData = routeInfo.__N_SSG || routeInfo.__N_SSP;
                            // For non-SSG prefetches that bailed before sending data
                            // we clear the cache to fetch full response
                            if (wasBailedPrefetch && (data == null ? void 0 : data.dataHref)) {
                                delete this.sdc[data.dataHref];
                            }
                            const {
                                props,
                                cacheKey
                            } = await this._getData(async () => {
                                if (shouldFetchData) {
                                    if ((data == null ? void 0 : data.json) && !wasBailedPrefetch) {
                                        return {
                                            cacheKey: data.cacheKey,
                                            props: data.json
                                        };
                                    }
                                    const dataHref = (data == null ? void 0 : data.dataHref) ? data.dataHref : this.pageLoader.getDataHref({
                                        href: (0, _formaturl.formatWithValidation)({
                                            pathname,
                                            query
                                        }),
                                        asPath: resolvedAs,
                                        locale
                                    });
                                    const fetched = await fetchNextData({
                                        dataHref,
                                        isServerRender: this.isSsr,
                                        parseJSON: true,
                                        inflightCache: wasBailedPrefetch ? {} : this.sdc,
                                        persistCache: !isPreview,
                                        isPrefetch: false,
                                        unstable_skipClientCache
                                    });
                                    return {
                                        cacheKey: fetched.cacheKey,
                                        props: fetched.json || {}
                                    };
                                }
                                return {
                                    headers: {},
                                    props: await this.getInitialProps(routeInfo.Component, // we provide AppTree later so this needs to be `any`
                                        {
                                            pathname,
                                            query,
                                            asPath: as,
                                            locale,
                                            locales: this.locales,
                                            defaultLocale: this.defaultLocale
                                        })
                                };
                            });
                            // Only bust the data cache for SSP routes although
                            // middleware can skip cache per request with
                            // x-middleware-cache: no-cache as well
                            if (routeInfo.__N_SSP && fetchNextDataParams.dataHref && cacheKey) {
                                delete this.sdc[cacheKey];
                            }
                            // we kick off a HEAD request in the background
                            // when a non-prefetch request is made to signal revalidation
                            if (!this.isPreview && routeInfo.__N_SSG && "production" !== "development" && !isQueryUpdating) {
                                fetchNextData(Object.assign({}, fetchNextDataParams, {
                                    isBackground: true,
                                    persistCache: false,
                                    inflightCache: this.sbc
                                })).catch(() => {});
                            }
                            props.pageProps = Object.assign({}, props.pageProps);
                            routeInfo.props = props;
                            routeInfo.route = route;
                            routeInfo.query = query;
                            routeInfo.resolvedAs = resolvedAs;
                            this.components[route] = routeInfo;
                            return routeInfo;
                        } catch (err) {
                            return this.handleRouteInfoError((0, _iserror.getProperError)(err), pathname, query, as, routeProps);
                        }
                    }
                    set(state, data, resetScroll) {
                        this.state = state;
                        return this.sub(data, this.components["/_app"].Component, resetScroll);
                    }
                    /**
                     * Callback to execute before replacing router state
                     * @param cb callback to be executed
                     */
                    beforePopState(cb) {
                        this._bps = cb;
                    }
                    onlyAHashChange(as) {
                        if (!this.asPath) return false;
                        const [oldUrlNoHash, oldHash] = this.asPath.split("#", 2);
                        const [newUrlNoHash, newHash] = as.split("#", 2);
                        // Makes sure we scroll to the provided hash if the url/hash are the same
                        if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {
                            return true;
                        }
                        // If the urls are change, there's more than a hash change
                        if (oldUrlNoHash !== newUrlNoHash) {
                            return false;
                        }
                        // If the hash has changed, then it's a hash only change.
                        // This check is necessary to handle both the enter and
                        // leave hash === '' cases. The identity case falls through
                        // and is treated as a next reload.
                        return oldHash !== newHash;
                    }
                    scrollToHash(as) {
                        const [, hash = ""] = as.split("#", 2);
                        (0, _handlesmoothscroll.handleSmoothScroll)(() => {
                            // Scroll to top if the hash is just `#` with no value or `#top`
                            // To mirror browsers
                            if (hash === "" || hash === "top") {
                                window.scrollTo(0, 0);
                                return;
                            }
                            // Decode hash to make non-latin anchor works.
                            const rawHash = decodeURIComponent(hash);
                            // First we check if the element by id is found
                            const idEl = document.getElementById(rawHash);
                            if (idEl) {
                                idEl.scrollIntoView();
                                return;
                            }
                            // If there's no element with the id, we check the `name` property
                            // To mirror browsers
                            const nameEl = document.getElementsByName(rawHash)[0];
                            if (nameEl) {
                                nameEl.scrollIntoView();
                            }
                        }, {
                            onlyHashChange: this.onlyAHashChange(as)
                        });
                    }
                    urlIsNew(asPath) {
                        return this.asPath !== asPath;
                    }
                    /**
                     * Prefetch page code, you may wait for the data during page rendering.
                     * This feature only works in production!
                     * @param url the href of prefetched page
                     * @param asPath the as path of the prefetched page
                     */
                    async prefetch(url, asPath, options) {
                        if (asPath === void 0) asPath = url;
                        if (options === void 0) options = {};
                        // Prefetch is not supported in development mode because it would trigger on-demand-entries
                        if (false) {}
                        if (typeof window !== "undefined" && (0, _isbot.isBot)(window.navigator.userAgent)) {
                            // No prefetches for bots that render the link since they are typically navigating
                            // links via the equivalent of a hard navigation and hence never utilize these
                            // prefetches.
                            return;
                        }
                        let parsed = (0, _parserelativeurl.parseRelativeUrl)(url);
                        const urlPathname = parsed.pathname;
                        let {
                            pathname,
                            query
                        } = parsed;
                        const originalPathname = pathname;
                        if (Object({
                                "NODE_ENV": "production"
                            }).__NEXT_I18N_SUPPORT) {
                            if (options.locale === false) {
                                pathname = (0, _normalizelocalepath.normalizeLocalePath)(pathname, this.locales).pathname;
                                parsed.pathname = pathname;
                                url = (0, _formaturl.formatWithValidation)(parsed);
                                let parsedAs = (0, _parserelativeurl.parseRelativeUrl)(asPath);
                                const localePathResult = (0, _normalizelocalepath.normalizeLocalePath)(parsedAs.pathname, this.locales);
                                parsedAs.pathname = localePathResult.pathname;
                                options.locale = localePathResult.detectedLocale || this.defaultLocale;
                                asPath = (0, _formaturl.formatWithValidation)(parsedAs);
                            }
                        }
                        const pages = await this.pageLoader.getPageList();
                        let resolvedAs = asPath;
                        const locale = typeof options.locale !== "undefined" ? options.locale || undefined : this.locale;
                        const isMiddlewareMatch = await matchesMiddleware({
                            asPath: asPath,
                            locale: locale,
                            router: this
                        });
                        if (Object({
                                "NODE_ENV": "production"
                            }).__NEXT_HAS_REWRITES && asPath.startsWith("/")) {
                            let rewrites;
                            ({
                                __rewrites: rewrites
                            } = await (0, _routeloader.getClientBuildManifest)());
                            const rewritesResult = (0, _resolverewrites.default)((0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(asPath, this.locale), true), pages, rewrites, parsed.query, (p) => resolveDynamicRoute(p, pages), this.locales);
                            if (rewritesResult.externalDest) {
                                return;
                            }
                            if (!isMiddlewareMatch) {
                                resolvedAs = (0, _removelocale.removeLocale)((0, _removebasepath.removeBasePath)(rewritesResult.asPath), this.locale);
                            }
                            if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {
                                // if this directly matches a page we need to update the href to
                                // allow the correct page chunk to be loaded
                                pathname = rewritesResult.resolvedHref;
                                parsed.pathname = pathname;
                                if (!isMiddlewareMatch) {
                                    url = (0, _formaturl.formatWithValidation)(parsed);
                                }
                            }
                        }
                        parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);
                        if ((0, _isdynamic.isDynamicRoute)(parsed.pathname)) {
                            pathname = parsed.pathname;
                            parsed.pathname = pathname;
                            Object.assign(query, (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(parsed.pathname))((0, _parsepath.parsePath)(asPath).pathname) || {});
                            if (!isMiddlewareMatch) {
                                url = (0, _formaturl.formatWithValidation)(parsed);
                            }
                        }
                        const data = Object({
                            "NODE_ENV": "production"
                        }).__NEXT_MIDDLEWARE_PREFETCH === "strict" ? null : await withMiddlewareEffects({
                            fetchData: () => fetchNextData({
                                dataHref: this.pageLoader.getDataHref({
                                    href: (0, _formaturl.formatWithValidation)({
                                        pathname: originalPathname,
                                        query
                                    }),
                                    skipInterpolation: true,
                                    asPath: resolvedAs,
                                    locale
                                }),
                                hasMiddleware: true,
                                isServerRender: false,
                                parseJSON: true,
                                inflightCache: this.sdc,
                                persistCache: !this.isPreview,
                                isPrefetch: true
                            }),
                            asPath: asPath,
                            locale: locale,
                            router: this
                        });
                        /**
                         * If there was a rewrite we apply the effects of the rewrite on the
                         * current parameters for the prefetch.
                         */
                        if ((data == null ? void 0 : data.effect.type) === "rewrite") {
                            parsed.pathname = data.effect.resolvedHref;
                            pathname = data.effect.resolvedHref;
                            query = {
                                ...query,
                                ...data.effect.parsedAs.query
                            };
                            resolvedAs = data.effect.parsedAs.pathname;
                            url = (0, _formaturl.formatWithValidation)(parsed);
                        }
                        /**
                         * If there is a redirect to an external destination then we don't have
                         * to prefetch content as it will be unused.
                         */
                        if ((data == null ? void 0 : data.effect.type) === "redirect-external") {
                            return;
                        }
                        const route = (0, _removetrailingslash.removeTrailingSlash)(pathname);
                        if (await this._bfl(asPath, resolvedAs, options.locale, true)) {
                            this.components[urlPathname] = {
                                __appRouter: true
                            };
                        }
                        await Promise.all([
                            this.pageLoader._isSsg(route).then((isSsg) => {
                                return isSsg ? fetchNextData({
                                    dataHref: (data == null ? void 0 : data.json) ? data == null ? void 0 : data.dataHref : this.pageLoader.getDataHref({
                                        href: url,
                                        asPath: resolvedAs,
                                        locale: locale
                                    }),
                                    isServerRender: false,
                                    parseJSON: true,
                                    inflightCache: this.sdc,
                                    persistCache: !this.isPreview,
                                    isPrefetch: true,
                                    unstable_skipClientCache: options.unstable_skipClientCache || options.priority && !!Object({
                                        "NODE_ENV": "production"
                                    }).__NEXT_OPTIMISTIC_CLIENT_CACHE
                                }).then(() => false).catch(() => false) : false;
                            }),
                            this.pageLoader[options.priority ? "loadPage" : "prefetch"](route)
                        ]);
                    }
                    async fetchComponent(route) {
                        const handleCancelled = getCancelledHandler({
                            route,
                            router: this
                        });
                        try {
                            const componentResult = await this.pageLoader.loadPage(route);
                            handleCancelled();
                            return componentResult;
                        } catch (err) {
                            handleCancelled();
                            throw err;
                        }
                    }
                    _getData(fn) {
                        let cancelled = false;
                        const cancel = () => {
                            cancelled = true;
                        };
                        this.clc = cancel;
                        return fn().then((data) => {
                            if (cancel === this.clc) {
                                this.clc = null;
                            }
                            if (cancelled) {
                                const err = new Error("Loading initial props cancelled");
                                err.cancelled = true;
                                throw err;
                            }
                            return data;
                        });
                    }
                    _getFlightData(dataHref) {
                        // Do not cache RSC flight response since it's not a static resource
                        return fetchNextData({
                            dataHref,
                            isServerRender: true,
                            parseJSON: false,
                            inflightCache: this.sdc,
                            persistCache: false,
                            isPrefetch: false
                        }).then((param) => {
                            let {
                                text
                            } = param;
                            return {
                                data: text
                            };
                        });
                    }
                    getInitialProps(Component, ctx) {
                        const {
                            Component: App
                        } = this.components["/_app"];
                        const AppTree = this._wrapApp(App);
                        ctx.AppTree = AppTree;
                        return (0, _utils.loadGetInitialProps)(App, {
                            AppTree,
                            Component,
                            router: this,
                            ctx
                        });
                    }
                    get route() {
                        return this.state.route;
                    }
                    get pathname() {
                        return this.state.pathname;
                    }
                    get query() {
                        return this.state.query;
                    }
                    get asPath() {
                        return this.state.asPath;
                    }
                    get locale() {
                        return this.state.locale;
                    }
                    get isFallback() {
                        return this.state.isFallback;
                    }
                    get isPreview() {
                        return this.state.isPreview;
                    }
                    constructor(pathname, query, as, {
                        initialProps,
                        pageLoader,
                        App,
                        wrapApp,
                        Component,
                        err,
                        subscription,
                        isFallback,
                        locale,
                        locales,
                        defaultLocale,
                        domainLocales,
                        isPreview
                    }) {
                        // Server Data Cache (full data requests)
                        this.sdc = {};
                        // Server Background Cache (HEAD requests)
                        this.sbc = {};
                        this.isFirstPopStateEvent = true;
                        this._key = createKey();
                        this.onPopState = (e) => {
                            const {
                                isFirstPopStateEvent
                            } = this;
                            this.isFirstPopStateEvent = false;
                            const state = e.state;
                            if (!state) {
                                // We get state as undefined for two reasons.
                                //  1. With older safari (< 8) and older chrome (< 34)
                                //  2. When the URL changed with #
                                //
                                // In the both cases, we don't need to proceed and change the route.
                                // (as it's already changed)
                                // But we can simply replace the state with the new changes.
                                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
                                // So, doing the following for (1) does no harm.
                                const {
                                    pathname,
                                    query
                                } = this;
                                this.changeState("replaceState", (0, _formaturl.formatWithValidation)({
                                    pathname: (0, _addbasepath.addBasePath)(pathname),
                                    query
                                }), (0, _utils.getURL)());
                                return;
                            }
                            // __NA is used to identify if the history entry can be handled by the app-router.
                            if (state.__NA) {
                                window.location.reload();
                                return;
                            }
                            if (!state.__N) {
                                return;
                            }
                            // Safari fires popstateevent when reopening the browser.
                            if (isFirstPopStateEvent && this.locale === state.options.locale && state.as === this.asPath) {
                                return;
                            }
                            let forcedScroll;
                            const {
                                url,
                                as,
                                options,
                                key
                            } = state;
                            if (Object({
                                    "NODE_ENV": "production"
                                }).__NEXT_SCROLL_RESTORATION) {
                                if (manualScrollRestoration) {
                                    if (this._key !== key) {
                                        // Snapshot current scroll position:
                                        try {
                                            sessionStorage.setItem("__next_scroll_" + this._key, JSON.stringify({
                                                x: self.pageXOffset,
                                                y: self.pageYOffset
                                            }));
                                        } catch (e) {}
                                        // Restore old scroll position:
                                        try {
                                            const v = sessionStorage.getItem("__next_scroll_" + key);
                                            forcedScroll = JSON.parse(v);
                                        } catch (e) {
                                            forcedScroll = {
                                                x: 0,
                                                y: 0
                                            };
                                        }
                                    }
                                }
                            }
                            this._key = key;
                            const {
                                pathname
                            } = (0, _parserelativeurl.parseRelativeUrl)(url);
                            // Make sure we don't re-render on initial load,
                            // can be caused by navigating back from an external site
                            if (this.isSsr && as === (0, _addbasepath.addBasePath)(this.asPath) && pathname === (0, _addbasepath.addBasePath)(this.pathname)) {
                                return;
                            }
                            // If the downstream application returns falsy, return.
                            // They will then be responsible for handling the event.
                            if (this._bps && !this._bps(state)) {
                                return;
                            }
                            this.change("replaceState", url, as, Object.assign({}, options, {
                                shallow: options.shallow && this._shallow,
                                locale: options.locale || this.defaultLocale,
                                // @ts-ignore internal value not exposed on types
                                _h: 0
                            }), forcedScroll);
                        };
                        // represents the current component key
                        const route = (0, _removetrailingslash.removeTrailingSlash)(pathname);
                        // set up the component cache (by route keys)
                        this.components = {};
                        // We should not keep the cache, if there's an error
                        // Otherwise, this cause issues when when going back and
                        // come again to the errored page.
                        if (pathname !== "/_error") {
                            this.components[route] = {
                                Component,
                                initial: true,
                                props: initialProps,
                                err,
                                __N_SSG: initialProps && initialProps.__N_SSG,
                                __N_SSP: initialProps && initialProps.__N_SSP
                            };
                        }
                        this.components["/_app"] = {
                            Component: App,
                            styleSheets: []
                        };
                        if (Object({
                                "NODE_ENV": "production"
                            }).__NEXT_CLIENT_ROUTER_FILTER_ENABLED) {
                            const {
                                BloomFilter
                            } = __webpack_require__(1980);
                            const routerFilterSValue = Object({
                                "NODE_ENV": "production"
                            }).__NEXT_CLIENT_ROUTER_S_FILTER;
                            const staticFilterData = routerFilterSValue ? routerFilterSValue : undefined;
                            const routerFilterDValue = Object({
                                "NODE_ENV": "production"
                            }).__NEXT_CLIENT_ROUTER_D_FILTER;
                            const dynamicFilterData = routerFilterDValue ? routerFilterDValue : undefined;
                            if (staticFilterData == null ? void 0 : staticFilterData.numHashes) {
                                this._bfl_s = new BloomFilter(staticFilterData.numItems, staticFilterData.errorRate);
                                this._bfl_s.import(staticFilterData);
                            }
                            if (dynamicFilterData == null ? void 0 : dynamicFilterData.numHashes) {
                                this._bfl_d = new BloomFilter(dynamicFilterData.numItems, dynamicFilterData.errorRate);
                                this._bfl_d.import(dynamicFilterData);
                            }
                        }
                        // Backwards compat for Router.router.events
                        // TODO: Should be remove the following major version as it was never documented
                        this.events = Router.events;
                        this.pageLoader = pageLoader;
                        // if auto prerendered and dynamic route wait to update asPath
                        // until after mount to prevent hydration mismatch
                        const autoExportDynamic = (0, _isdynamic.isDynamicRoute)(pathname) && self.__NEXT_DATA__.autoExport;
                        this.basePath = Object({
                            "NODE_ENV": "production"
                        }).__NEXT_ROUTER_BASEPATH || "";
                        this.sub = subscription;
                        this.clc = null;
                        this._wrapApp = wrapApp;
                        // make sure to ignore extra popState in safari on navigating
                        // back from external site
                        this.isSsr = true;
                        this.isLocaleDomain = false;
                        this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.isExperimentalCompile || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !Object({
                            "NODE_ENV": "production"
                        }).__NEXT_HAS_REWRITES);
                        if (Object({
                                "NODE_ENV": "production"
                            }).__NEXT_I18N_SUPPORT) {
                            this.locales = locales;
                            this.defaultLocale = defaultLocale;
                            this.domainLocales = domainLocales;
                            this.isLocaleDomain = !!(0, _detectdomainlocale.detectDomainLocale)(domainLocales, self.location.hostname);
                        }
                        this.state = {
                            route,
                            pathname,
                            query,
                            asPath: autoExportDynamic ? pathname : as,
                            isPreview: !!isPreview,
                            locale: Object({
                                "NODE_ENV": "production"
                            }).__NEXT_I18N_SUPPORT ? locale : undefined,
                            isFallback
                        };
                        this._initialMatchesMiddlewarePromise = Promise.resolve(false);
                        if (typeof window !== "undefined") {
                            // make sure "as" doesn't start with double slashes or else it can
                            // throw an error as it's considered invalid
                            if (!as.startsWith("//")) {
                                // in order for `e.state` to work on the `onpopstate` event
                                // we have to register the initial route upon initialization
                                const options = {
                                    locale
                                };
                                const asPath = (0, _utils.getURL)();
                                this._initialMatchesMiddlewarePromise = matchesMiddleware({
                                    router: this,
                                    locale,
                                    asPath
                                }).then((matches) => {
                                    options._shouldResolveHref = as !== pathname;
                                    this.changeState("replaceState", matches ? asPath : (0, _formaturl.formatWithValidation)({
                                        pathname: (0, _addbasepath.addBasePath)(pathname),
                                        query
                                    }), asPath, options);
                                    return matches;
                                });
                            }
                            window.addEventListener("popstate", this.onPopState);
                            // enable custom scroll restoration handling when available
                            // otherwise fallback to browser's default handling
                            if (Object({
                                    "NODE_ENV": "production"
                                }).__NEXT_SCROLL_RESTORATION) {
                                if (manualScrollRestoration) {
                                    window.history.scrollRestoration = "manual";
                                }
                            }
                        }
                    }
                }
                Router.events = (0, _mitt.default)();

                //# sourceMappingURL=router.js.map

                /***/
            }),

        /***/
        1944:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    createRouteLoader: function() {
                        return createRouteLoader;
                    },
                    getClientBuildManifest: function() {
                        return getClientBuildManifest;
                    },
                    isAssetError: function() {
                        return isAssetError;
                    },
                    markAssetError: function() {
                        return markAssetError;
                    }
                });
                const _interop_require_default = __webpack_require__(448);
                const _getassetpathfromroute = /*#__PURE__*/ _interop_require_default._(__webpack_require__(1945));
                const _trustedtypes = __webpack_require__(1946);
                const _requestidlecallback = __webpack_require__(1874);
                const _deploymentid = __webpack_require__(1947);
                // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
                // considers as "Good" time-to-interactive. We must assume something went
                // wrong beyond this point, and then fall-back to a full page transition to
                // show the user something of value.
                const MS_MAX_IDLE_DELAY = 3800;

                function withFuture(key, map, generator) {
                    let entry = map.get(key);
                    if (entry) {
                        if ("future" in entry) {
                            return entry.future;
                        }
                        return Promise.resolve(entry);
                    }
                    let resolver;
                    const prom = new Promise((resolve) => {
                        resolver = resolve;
                    });
                    map.set(key, entry = {
                        resolve: resolver,
                        future: prom
                    });
                    return generator ? generator() // eslint-disable-next-line no-sequences
                        .then((value) => (resolver(value), value)).catch((err) => {
                            map.delete(key);
                            throw err;
                        }) : prom;
                }
                const ASSET_LOAD_ERROR = Symbol("ASSET_LOAD_ERROR");

                function markAssetError(err) {
                    return Object.defineProperty(err, ASSET_LOAD_ERROR, {});
                }

                function isAssetError(err) {
                    return err && ASSET_LOAD_ERROR in err;
                }

                function hasPrefetch(link) {
                    try {
                        link = document.createElement("link");
                        return ( // detect IE11 since it supports prefetch but isn't detected
                            // with relList.support
                            !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports("prefetch"));
                    } catch (e) {
                        return false;
                    }
                }
                const canPrefetch = hasPrefetch();
                const getAssetQueryString = () => {
                    return (0, _deploymentid.getDeploymentIdQueryOrEmptyString)();
                };

                function prefetchViaDom(href, as, link) {
                    return new Promise((resolve, reject) => {
                        const selector = '\n      link[rel="prefetch"][href^="' + href + '"],\n      link[rel="preload"][href^="' + href + '"],\n      script[src^="' + href + '"]';
                        if (document.querySelector(selector)) {
                            return resolve();
                        }
                        link = document.createElement("link");
                        // The order of property assignment here is intentional:
                        if (as) link.as = as;
                        link.rel = "prefetch";
                        link.crossOrigin = Object({
                            "NODE_ENV": "production"
                        }).__NEXT_CROSS_ORIGIN;
                        link.onload = resolve;
                        link.onerror = () => reject(markAssetError(new Error("Failed to prefetch: " + href)));
                        // `href` should always be last:
                        link.href = href;
                        document.head.appendChild(link);
                    });
                }

                function appendScript(src, script) {
                    return new Promise((resolve, reject) => {
                        script = document.createElement("script");
                        // The order of property assignment here is intentional.
                        // 1. Setup success/failure hooks in case the browser synchronously
                        //    executes when `src` is set.
                        script.onload = resolve;
                        script.onerror = () => reject(markAssetError(new Error("Failed to load script: " + src)));
                        // 2. Configure the cross-origin attribute before setting `src` in case the
                        //    browser begins to fetch.
                        script.crossOrigin = Object({
                            "NODE_ENV": "production"
                        }).__NEXT_CROSS_ORIGIN;
                        // 3. Finally, set the source and inject into the DOM in case the child
                        //    must be appended for fetching to start.
                        script.src = src;
                        document.body.appendChild(script);
                    });
                }
                // We wait for pages to be built in dev before we start the route transition
                // timeout to prevent an un-necessary hard navigation in development.
                let devBuildPromise;
                // Resolve a promise that times out after given amount of milliseconds.
                function resolvePromiseWithTimeout(p, ms, err) {
                    return new Promise((resolve, reject) => {
                        let cancelled = false;
                        p.then((r) => {
                            // Resolved, cancel the timeout
                            cancelled = true;
                            resolve(r);
                        }).catch(reject);
                        // We wrap these checks separately for better dead-code elimination in
                        // production bundles.
                        if (false) {}
                        if (true) {
                            (0, _requestidlecallback.requestIdleCallback)(() => setTimeout(() => {
                                if (!cancelled) {
                                    reject(err);
                                }
                            }, ms));
                        }
                    });
                }

                function getClientBuildManifest() {
                    if (self.__BUILD_MANIFEST) {
                        return Promise.resolve(self.__BUILD_MANIFEST);
                    }
                    const onBuildManifest = new Promise((resolve) => {
                        // Mandatory because this is not concurrent safe:
                        const cb = self.__BUILD_MANIFEST_CB;
                        self.__BUILD_MANIFEST_CB = () => {
                            resolve(self.__BUILD_MANIFEST);
                            cb && cb();
                        };
                    });
                    return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error("Failed to load client build manifest")));
                }

                function getFilesForRoute(assetPrefix, route) {
                    if (false) {}
                    return getClientBuildManifest().then((manifest) => {
                        if (!(route in manifest)) {
                            throw markAssetError(new Error("Failed to lookup route: " + route));
                        }
                        const allFiles = manifest[route].map((entry) => assetPrefix + "/_next/" + encodeURI(entry));
                        return {
                            scripts: allFiles.filter((v) => v.endsWith(".js")).map((v) => (0, _trustedtypes.__unsafeCreateTrustedScriptURL)(v) + getAssetQueryString()),
                            css: allFiles.filter((v) => v.endsWith(".css")).map((v) => v + getAssetQueryString())
                        };
                    });
                }

                function createRouteLoader(assetPrefix) {
                    const entrypoints = new Map();
                    const loadedScripts = new Map();
                    const styleSheets = new Map();
                    const routes = new Map();

                    function maybeExecuteScript(src) {
                        // With HMR we might need to "reload" scripts when they are
                        // disposed and readded. Executing scripts twice has no functional
                        // differences
                        if (true) {
                            let prom = loadedScripts.get(src.toString());
                            if (prom) {
                                return prom;
                            }
                            // Skip executing script if it's already in the DOM:
                            if (document.querySelector('script[src^="' + src + '"]')) {
                                return Promise.resolve();
                            }
                            loadedScripts.set(src.toString(), prom = appendScript(src));
                            return prom;
                        } else {}
                    }

                    function fetchStyleSheet(href) {
                        let prom = styleSheets.get(href);
                        if (prom) {
                            return prom;
                        }
                        styleSheets.set(href, prom = fetch(href, {
                            credentials: "same-origin"
                        }).then((res) => {
                            if (!res.ok) {
                                throw new Error("Failed to load stylesheet: " + href);
                            }
                            return res.text().then((text) => ({
                                href: href,
                                content: text
                            }));
                        }).catch((err) => {
                            throw markAssetError(err);
                        }));
                        return prom;
                    }
                    return {
                        whenEntrypoint(route) {
                            return withFuture(route, entrypoints);
                        },
                        onEntrypoint(route, execute) {
                            (execute ? Promise.resolve().then(() => execute()).then((exports1) => ({
                                component: exports1 && exports1.default || exports1,
                                exports: exports1
                            }), (err) => ({
                                error: err
                            })) : Promise.resolve(undefined)).then((input) => {
                                const old = entrypoints.get(route);
                                if (old && "resolve" in old) {
                                    if (input) {
                                        entrypoints.set(route, input);
                                        old.resolve(input);
                                    }
                                } else {
                                    if (input) {
                                        entrypoints.set(route, input);
                                    } else {
                                        entrypoints.delete(route);
                                    }
                                    // when this entrypoint has been resolved before
                                    // the route is outdated and we want to invalidate
                                    // this cache entry
                                    routes.delete(route);
                                }
                            });
                        },
                        loadRoute(route, prefetch) {
                            return withFuture(route, routes, () => {
                                let devBuildPromiseResolve;
                                if (false) {}
                                return resolvePromiseWithTimeout(getFilesForRoute(assetPrefix, route).then((param) => {
                                    let {
                                        scripts,
                                        css
                                    } = param;
                                    return Promise.all([
                                        entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)),
                                        Promise.all(css.map(fetchStyleSheet))
                                    ]);
                                }).then((res) => {
                                    return this.whenEntrypoint(route).then((entrypoint) => ({
                                        entrypoint,
                                        styles: res[1]
                                    }));
                                }), MS_MAX_IDLE_DELAY, markAssetError(new Error("Route did not complete loading: " + route))).then((param) => {
                                    let {
                                        entrypoint,
                                        styles
                                    } = param;
                                    const res = Object.assign({
                                        styles: styles
                                    }, entrypoint);
                                    return "error" in entrypoint ? entrypoint : res;
                                }).catch((err) => {
                                    if (prefetch) {
                                        // we don't want to cache errors during prefetch
                                        throw err;
                                    }
                                    return {
                                        error: err
                                    };
                                }).finally(() => devBuildPromiseResolve == null ? void 0 : devBuildPromiseResolve());
                            });
                        },
                        prefetch(route) {
                            // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
                            // License: Apache 2.0
                            let cn;
                            if (cn = navigator.connection) {
                                // Don't prefetch if using 2G or if Save-Data is enabled.
                                if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();
                            }
                            return getFilesForRoute(assetPrefix, route).then((output) => Promise.all(canPrefetch ? output.scripts.map((script) => prefetchViaDom(script.toString(), "script")) : [])).then(() => {
                                (0, _requestidlecallback.requestIdleCallback)(() => this.loadRoute(route, true).catch(() => {}));
                            }).catch( // swallow prefetch errors
                                () => {});
                        }
                    };
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=route-loader.js.map

                /***/
            }),

        /***/
        1945:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // Translates a logical route into its pages asset path (relative from a common prefix)
                // "asset path" being its javascript file, data file, prerendered html,...

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "default", {
                    enumerable: true,
                    get: function() {
                        return getAssetPathFromRoute;
                    }
                });

                function getAssetPathFromRoute(route, ext) {
                    if (ext === void 0) ext = "";
                    const path = route === "/" ? "/index" : /^\/index(\/|$)/.test(route) ? "/index" + route : route;
                    return path + ext;
                }

                //# sourceMappingURL=get-asset-path-from-route.js.map

                /***/
            }),

        /***/
        1946:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /**
                 * Stores the Trusted Types Policy. Starts as undefined and can be set to null
                 * if Trusted Types is not supported in the browser.
                 */
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "__unsafeCreateTrustedScriptURL", {
                    enumerable: true,
                    get: function() {
                        return __unsafeCreateTrustedScriptURL;
                    }
                });
                let policy;
                /**
                 * Getter for the Trusted Types Policy. If it is undefined, it is instantiated
                 * here or set to null if Trusted Types is not supported in the browser.
                 */
                function getPolicy() {
                    if (typeof policy === "undefined" && typeof window !== "undefined") {
                        var _window_trustedTypes;
                        policy = ((_window_trustedTypes = window.trustedTypes) == null ? void 0 : _window_trustedTypes.createPolicy("nextjs", {
                            createHTML: (input) => input,
                            createScript: (input) => input,
                            createScriptURL: (input) => input
                        })) || null;
                    }
                    return policy;
                }

                function __unsafeCreateTrustedScriptURL(url) {
                    var _getPolicy;
                    return ((_getPolicy = getPolicy()) == null ? void 0 : _getPolicy.createScriptURL(url)) || url;
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=trusted-types.js.map

                /***/
            }),

        /***/
        1947:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "getDeploymentIdQueryOrEmptyString", {
                    enumerable: true,
                    get: function() {
                        return getDeploymentIdQueryOrEmptyString;
                    }
                });

                function getDeploymentIdQueryOrEmptyString() {
                    if (Object({
                            "NODE_ENV": "production"
                        }).NEXT_DEPLOYMENT_ID) {
                        return `?dpl=${Object({"NODE_ENV":"production"}).NEXT_DEPLOYMENT_ID}`;
                    }
                    return "";
                }

                //# sourceMappingURL=deployment-id.js.map

                /***/
            }),

        /***/
        1948:
            /***/
            (function(module, exports, __webpack_require__) {

                "use client";

                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    default: function() {
                        return _default;
                    },
                    handleClientScriptLoad: function() {
                        return handleClientScriptLoad;
                    },
                    initScriptLoader: function() {
                        return initScriptLoader;
                    }
                });
                const _interop_require_default = __webpack_require__(448);
                const _interop_require_wildcard = __webpack_require__(1841);
                const _jsxruntime = __webpack_require__(8);
                const _reactdom = /*#__PURE__*/ _interop_require_default._(__webpack_require__(46));
                const _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(0));
                const _headmanagercontextsharedruntime = __webpack_require__(1949);
                const _headmanager = __webpack_require__(1950);
                const _requestidlecallback = __webpack_require__(1874);
                const ScriptCache = new Map();
                const LoadCache = new Set();
                const ignoreProps = [
                    "onLoad",
                    "onReady",
                    "dangerouslySetInnerHTML",
                    "children",
                    "onError",
                    "strategy",
                    "stylesheets"
                ];
                const insertStylesheets = (stylesheets) => {
                    // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad
                    //
                    // Using ReactDOM.preinit to feature detect appDir and inject styles
                    // Stylesheets might have already been loaded if initialized with Script component
                    // Re-inject styles here to handle scripts loaded via handleClientScriptLoad
                    // ReactDOM.preinit handles dedup and ensures the styles are loaded only once
                    if (_reactdom.default.preinit) {
                        stylesheets.forEach((stylesheet) => {
                            _reactdom.default.preinit(stylesheet, {
                                as: "style"
                            });
                        });
                        return;
                    }
                    // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad
                    //
                    // We use this function to load styles when appdir is not detected
                    // TODO: Use React float APIs to load styles once available for pages dir
                    if (typeof window !== "undefined") {
                        let head = document.head;
                        stylesheets.forEach((stylesheet) => {
                            let link = document.createElement("link");
                            link.type = "text/css";
                            link.rel = "stylesheet";
                            link.href = stylesheet;
                            head.appendChild(link);
                        });
                    }
                };
                const loadScript = (props) => {
                    const {
                        src,
                        id,
                        onLoad = () => {},
                        onReady = null,
                        dangerouslySetInnerHTML,
                        children = "",
                        strategy = "afterInteractive",
                        onError,
                        stylesheets
                    } = props;
                    const cacheKey = id || src;
                    // Script has already loaded
                    if (cacheKey && LoadCache.has(cacheKey)) {
                        return;
                    }
                    // Contents of this script are already loading/loaded
                    if (ScriptCache.has(src)) {
                        LoadCache.add(cacheKey);
                        // It is possible that multiple `next/script` components all have same "src", but has different "onLoad"
                        // This is to make sure the same remote script will only load once, but "onLoad" are executed in order
                        ScriptCache.get(src).then(onLoad, onError);
                        return;
                    }
                    /** Execute after the script first loaded */
                    const afterLoad = () => {
                        // Run onReady for the first time after load event
                        if (onReady) {
                            onReady();
                        }
                        // add cacheKey to LoadCache when load successfully
                        LoadCache.add(cacheKey);
                    };
                    const el = document.createElement("script");
                    const loadPromise = new Promise((resolve, reject) => {
                        el.addEventListener("load", function(e) {
                            resolve();
                            if (onLoad) {
                                onLoad.call(this, e);
                            }
                            afterLoad();
                        });
                        el.addEventListener("error", function(e) {
                            reject(e);
                        });
                    }).catch(function(e) {
                        if (onError) {
                            onError(e);
                        }
                    });
                    if (dangerouslySetInnerHTML) {
                        // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
                        el.innerHTML = dangerouslySetInnerHTML.__html || "";
                        afterLoad();
                    } else if (children) {
                        el.textContent = typeof children === "string" ? children : Array.isArray(children) ? children.join("") : "";
                        afterLoad();
                    } else if (src) {
                        el.src = src;
                        // do not add cacheKey into LoadCache for remote script here
                        // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)
                        ScriptCache.set(src, loadPromise);
                    }
                    for (const [k, value] of Object.entries(props)) {
                        if (value === undefined || ignoreProps.includes(k)) {
                            continue;
                        }
                        const attr = _headmanager.DOMAttributeNames[k] || k.toLowerCase();
                        el.setAttribute(attr, value);
                    }
                    if (strategy === "worker") {
                        el.setAttribute("type", "text/partytown");
                    }
                    el.setAttribute("data-nscript", strategy);
                    // Load styles associated with this script
                    if (stylesheets) {
                        insertStylesheets(stylesheets);
                    }
                    document.body.appendChild(el);
                };

                function handleClientScriptLoad(props) {
                    const {
                        strategy = "afterInteractive"
                    } = props;
                    if (strategy === "lazyOnload") {
                        window.addEventListener("load", () => {
                            (0, _requestidlecallback.requestIdleCallback)(() => loadScript(props));
                        });
                    } else {
                        loadScript(props);
                    }
                }

                function loadLazyScript(props) {
                    if (document.readyState === "complete") {
                        (0, _requestidlecallback.requestIdleCallback)(() => loadScript(props));
                    } else {
                        window.addEventListener("load", () => {
                            (0, _requestidlecallback.requestIdleCallback)(() => loadScript(props));
                        });
                    }
                }

                function addBeforeInteractiveToCache() {
                    const scripts = [
                        ...document.querySelectorAll('[data-nscript="beforeInteractive"]'),
                        ...document.querySelectorAll('[data-nscript="beforePageRender"]')
                    ];
                    scripts.forEach((script) => {
                        const cacheKey = script.id || script.getAttribute("src");
                        LoadCache.add(cacheKey);
                    });
                }

                function initScriptLoader(scriptLoaderItems) {
                    scriptLoaderItems.forEach(handleClientScriptLoad);
                    addBeforeInteractiveToCache();
                }
                /**
                 * Load a third-party scripts in an optimized way.
                 *
                 * Read more: [Next.js Docs: `next/script`](https://nextjs.org/docs/app/api-reference/components/script)
                 */
                function Script(props) {
                    const {
                        id,
                        src = "",
                        onLoad = () => {},
                        onReady = null,
                        strategy = "afterInteractive",
                        onError,
                        stylesheets,
                        ...restProps
                    } = props;
                    // Context is available only during SSR
                    const {
                        updateScripts,
                        scripts,
                        getIsSsr,
                        appDir,
                        nonce
                    } = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);
                    /**
                     * - First mount:
                     *   1. The useEffect for onReady executes
                     *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)
                     *      onReady is skipped, set hasOnReadyEffectCalled.current to true
                     *   3. The useEffect for loadScript executes
                     *   4. hasLoadScriptEffectCalled.current is false, loadScript executes
                     *      Once the script is loaded, the onLoad and onReady will be called by then
                     *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
                     *   5. The useEffect for onReady executes again
                     *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
                     *   7. The useEffect for loadScript executes again
                     *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
                     *
                     * - Second mount:
                     *   1. The useEffect for onReady executes
                     *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)
                     *      onReady is called, set hasOnReadyEffectCalled.current to true
                     *   3. The useEffect for loadScript executes
                     *   4. The script is already loaded, loadScript bails out
                     *   [If strict mode is enabled / is wrapped in <OffScreen /> component]
                     *   5. The useEffect for onReady executes again
                     *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped
                     *   7. The useEffect for loadScript executes again
                     *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped
                     */
                    const hasOnReadyEffectCalled = (0, _react.useRef)(false);
                    (0, _react.useEffect)(() => {
                        const cacheKey = id || src;
                        if (!hasOnReadyEffectCalled.current) {
                            // Run onReady if script has loaded before but component is re-mounted
                            if (onReady && cacheKey && LoadCache.has(cacheKey)) {
                                onReady();
                            }
                            hasOnReadyEffectCalled.current = true;
                        }
                    }, [
                        onReady,
                        id,
                        src
                    ]);
                    const hasLoadScriptEffectCalled = (0, _react.useRef)(false);
                    (0, _react.useEffect)(() => {
                        if (!hasLoadScriptEffectCalled.current) {
                            if (strategy === "afterInteractive") {
                                loadScript(props);
                            } else if (strategy === "lazyOnload") {
                                loadLazyScript(props);
                            }
                            hasLoadScriptEffectCalled.current = true;
                        }
                    }, [
                        props,
                        strategy
                    ]);
                    if (strategy === "beforeInteractive" || strategy === "worker") {
                        if (updateScripts) {
                            scripts[strategy] = (scripts[strategy] || []).concat([{
                                id,
                                src,
                                onLoad,
                                onReady,
                                onError,
                                ...restProps
                            }]);
                            updateScripts(scripts);
                        } else if (getIsSsr && getIsSsr()) {
                            // Script has already loaded during SSR
                            LoadCache.add(id || src);
                        } else if (getIsSsr && !getIsSsr()) {
                            loadScript(props);
                        }
                    }
                    // For the app directory, we need React Float to preload these scripts.
                    if (appDir) {
                        // Injecting stylesheets here handles beforeInteractive and worker scripts correctly
                        // For other strategies injecting here ensures correct stylesheet order
                        // ReactDOM.preinit handles loading the styles in the correct order,
                        // also ensures the stylesheet is loaded only once and in a consistent manner
                        //
                        // Case 1: Styles for beforeInteractive/worker with appDir - handled here
                        // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet
                        // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here
                        // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function
                        if (stylesheets) {
                            stylesheets.forEach((styleSrc) => {
                                _reactdom.default.preinit(styleSrc, {
                                    as: "style"
                                });
                            });
                        }
                        // Before interactive scripts need to be loaded by Next.js' runtime instead
                        // of native <script> tags, because they no longer have `defer`.
                        if (strategy === "beforeInteractive") {
                            if (!src) {
                                // For inlined scripts, we put the content in `children`.
                                if (restProps.dangerouslySetInnerHTML) {
                                    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.
                                    restProps.children = restProps.dangerouslySetInnerHTML.__html;
                                    delete restProps.dangerouslySetInnerHTML;
                                }
                                return /*#__PURE__*/ (0, _jsxruntime.jsx)("script", {
                                    nonce: nonce,
                                    dangerouslySetInnerHTML: {
                                        __html: "(self.__next_s=self.__next_s||[]).push(" + JSON.stringify([
                                            0,
                                            {
                                                ...restProps,
                                                id
                                            }
                                        ]) + ")"
                                    }
                                });
                            } else {
                                // @ts-ignore
                                _reactdom.default.preload(src, restProps.integrity ? {
                                    as: "script",
                                    integrity: restProps.integrity,
                                    nonce
                                } : {
                                    as: "script",
                                    nonce
                                });
                                return /*#__PURE__*/ (0, _jsxruntime.jsx)("script", {
                                    nonce: nonce,
                                    dangerouslySetInnerHTML: {
                                        __html: "(self.__next_s=self.__next_s||[]).push(" + JSON.stringify([
                                            src,
                                            {
                                                ...restProps,
                                                id
                                            }
                                        ]) + ")"
                                    }
                                });
                            }
                        } else if (strategy === "afterInteractive") {
                            if (src) {
                                // @ts-ignore
                                _reactdom.default.preload(src, restProps.integrity ? {
                                    as: "script",
                                    integrity: restProps.integrity,
                                    nonce
                                } : {
                                    as: "script",
                                    nonce
                                });
                            }
                        }
                    }
                    return null;
                }
                Object.defineProperty(Script, "__nextScript", {
                    value: true
                });
                const _default = Script;

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=script.js.map

                /***/
            }),

        /***/
        1949:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "HeadManagerContext", {
                    enumerable: true,
                    get: function() {
                        return HeadManagerContext;
                    }
                });
                const _interop_require_default = __webpack_require__(448);
                const _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(0));
                const HeadManagerContext = _react.default.createContext({});
                if (false) {}

                //# sourceMappingURL=head-manager-context.shared-runtime.js.map

                /***/
            }),

        /***/
        1950:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    DOMAttributeNames: function() {
                        return DOMAttributeNames;
                    },
                    default: function() {
                        return initHeadManager;
                    },
                    isEqualNode: function() {
                        return isEqualNode;
                    }
                });
                const DOMAttributeNames = {
                    acceptCharset: "accept-charset",
                    className: "class",
                    htmlFor: "for",
                    httpEquiv: "http-equiv",
                    noModule: "noModule"
                };

                function reactElementToDOM(param) {
                    let {
                        type,
                        props
                    } = param;
                    const el = document.createElement(type);
                    for (const p in props) {
                        if (!props.hasOwnProperty(p)) continue;
                        if (p === "children" || p === "dangerouslySetInnerHTML") continue;
                        // we don't render undefined props to the DOM
                        if (props[p] === undefined) continue;
                        const attr = DOMAttributeNames[p] || p.toLowerCase();
                        if (type === "script" && (attr === "async" || attr === "defer" || attr === "noModule")) {
                            el[attr] = !!props[p];
                        } else {
                            el.setAttribute(attr, props[p]);
                        }
                    }
                    const {
                        children,
                        dangerouslySetInnerHTML
                    } = props;
                    if (dangerouslySetInnerHTML) {
                        el.innerHTML = dangerouslySetInnerHTML.__html || "";
                    } else if (children) {
                        el.textContent = typeof children === "string" ? children : Array.isArray(children) ? children.join("") : "";
                    }
                    return el;
                }

                function isEqualNode(oldTag, newTag) {
                    if (oldTag instanceof HTMLElement && newTag instanceof HTMLElement) {
                        const nonce = newTag.getAttribute("nonce");
                        // Only strip the nonce if `oldTag` has had it stripped. An element's nonce attribute will not
                        // be stripped if there is no content security policy response header that includes a nonce.
                        if (nonce && !oldTag.getAttribute("nonce")) {
                            const cloneTag = newTag.cloneNode(true);
                            cloneTag.setAttribute("nonce", "");
                            cloneTag.nonce = nonce;
                            return nonce === oldTag.nonce && oldTag.isEqualNode(cloneTag);
                        }
                    }
                    return oldTag.isEqualNode(newTag);
                }
                let updateElements;
                if (Object({
                        "NODE_ENV": "production"
                    }).__NEXT_STRICT_NEXT_HEAD) {
                    updateElements = (type, components) => {
                        const headEl = document.querySelector("head");
                        if (!headEl) return;
                        const headMetaTags = headEl.querySelectorAll('meta[name="next-head"]') || [];
                        const oldTags = [];
                        if (type === "meta") {
                            const metaCharset = headEl.querySelector("meta[charset]");
                            if (metaCharset) {
                                oldTags.push(metaCharset);
                            }
                        }
                        for (let i = 0; i < headMetaTags.length; i++) {
                            var _headTag_tagName;
                            const metaTag = headMetaTags[i];
                            const headTag = metaTag.nextSibling;
                            if ((headTag == null ? void 0 : (_headTag_tagName = headTag.tagName) == null ? void 0 : _headTag_tagName.toLowerCase()) === type) {
                                oldTags.push(headTag);
                            }
                        }
                        const newTags = components.map(reactElementToDOM).filter((newTag) => {
                            for (let k = 0, len = oldTags.length; k < len; k++) {
                                const oldTag = oldTags[k];
                                if (isEqualNode(oldTag, newTag)) {
                                    oldTags.splice(k, 1);
                                    return false;
                                }
                            }
                            return true;
                        });
                        oldTags.forEach((t) => {
                            var _t_parentNode;
                            const metaTag = t.previousSibling;
                            if (metaTag && metaTag.getAttribute("name") === "next-head") {
                                var _t_parentNode1;
                                (_t_parentNode1 = t.parentNode) == null ? void 0 : _t_parentNode1.removeChild(metaTag);
                            }
                            (_t_parentNode = t.parentNode) == null ? void 0 : _t_parentNode.removeChild(t);
                        });
                        newTags.forEach((t) => {
                            var _t_tagName;
                            const meta = document.createElement("meta");
                            meta.name = "next-head";
                            meta.content = "1";
                            // meta[charset] must be first element so special case
                            if (!(((_t_tagName = t.tagName) == null ? void 0 : _t_tagName.toLowerCase()) === "meta" && t.getAttribute("charset"))) {
                                headEl.appendChild(meta);
                            }
                            headEl.appendChild(t);
                        });
                    };
                } else {
                    updateElements = (type, components) => {
                        const headEl = document.getElementsByTagName("head")[0];
                        const headCountEl = headEl.querySelector("meta[name=next-head-count]");
                        if (false) {}
                        const headCount = Number(headCountEl.content);
                        const oldTags = [];
                        for (let i = 0, j = headCountEl.previousElementSibling; i < headCount; i++, j = (j == null ? void 0 : j.previousElementSibling) || null) {
                            var _j_tagName;
                            if ((j == null ? void 0 : (_j_tagName = j.tagName) == null ? void 0 : _j_tagName.toLowerCase()) === type) {
                                oldTags.push(j);
                            }
                        }
                        const newTags = components.map(reactElementToDOM).filter((newTag) => {
                            for (let k = 0, len = oldTags.length; k < len; k++) {
                                const oldTag = oldTags[k];
                                if (isEqualNode(oldTag, newTag)) {
                                    oldTags.splice(k, 1);
                                    return false;
                                }
                            }
                            return true;
                        });
                        oldTags.forEach((t) => {
                            var _t_parentNode;
                            return (_t_parentNode = t.parentNode) == null ? void 0 : _t_parentNode.removeChild(t);
                        });
                        newTags.forEach((t) => headEl.insertBefore(t, headCountEl));
                        headCountEl.content = (headCount - oldTags.length + newTags.length).toString();
                    };
                }

                function initHeadManager() {
                    return {
                        mountedInstances: new Set(),
                        updateHead: (head) => {
                            const tags = {};
                            head.forEach((h) => {
                                if ( // If the font tag is loaded only on client navigation
                                    // it won't be inlined. In this case revert to the original behavior
                                    h.type === "link" && h.props["data-optimized-fonts"]) {
                                    if (document.querySelector('style[data-href="' + h.props["data-href"] + '"]')) {
                                        return;
                                    } else {
                                        h.props.href = h.props["data-href"];
                                        h.props["data-href"] = undefined;
                                    }
                                }
                                const components = tags[h.type] || [];
                                components.push(h);
                                tags[h.type] = components;
                            });
                            const titleComponent = tags.title ? tags.title[0] : null;
                            let title = "";
                            if (titleComponent) {
                                const {
                                    children
                                } = titleComponent.props;
                                title = typeof children === "string" ? children : Array.isArray(children) ? children.join("") : "";
                            }
                            if (title !== document.title) document.title = title;
                            [
                                "meta",
                                "base",
                                "link",
                                "style",
                                "script"
                            ].forEach((type) => {
                                updateElements(type, tags[type] || []);
                            });
                        }
                    };
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=head-manager.js.map

                /***/
            }),

        /***/
        1951:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    getObjectClassLabel: function() {
                        return getObjectClassLabel;
                    },
                    isPlainObject: function() {
                        return isPlainObject;
                    }
                });

                function getObjectClassLabel(value) {
                    return Object.prototype.toString.call(value);
                }

                function isPlainObject(value) {
                    if (getObjectClassLabel(value) !== "[object Object]") {
                        return false;
                    }
                    const prototype = Object.getPrototypeOf(value);
                    /**
                     * this used to be previously:
                     *
                     * `return prototype === null || prototype === Object.prototype`
                     *
                     * but Edge Runtime expose Object from vm, being that kind of type-checking wrongly fail.
                     *
                     * It was changed to the current implementation since it's resilient to serialization.
                     */
                    return prototype === null || prototype.hasOwnProperty("isPrototypeOf");
                }

                //# sourceMappingURL=is-plain-object.js.map

                /***/
            }),

        /***/
        1952:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "denormalizePagePath", {
                    enumerable: true,
                    get: function() {
                        return denormalizePagePath;
                    }
                });
                const _utils = __webpack_require__(1876);
                const _normalizepathsep = __webpack_require__(1957);

                function denormalizePagePath(page) {
                    let _page = (0, _normalizepathsep.normalizePathSep)(page);
                    return _page.startsWith("/index/") && !(0, _utils.isDynamicRoute)(_page) ? _page.slice(6) : _page !== "/index" ? _page : "/";
                }

                //# sourceMappingURL=denormalize-page-path.js.map

                /***/
            }),

        /***/
        1953:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "getSortedRoutes", {
                    enumerable: true,
                    get: function() {
                        return getSortedRoutes;
                    }
                });
                class UrlNode {
                    insert(urlPath) {
                        this._insert(urlPath.split("/").filter(Boolean), [], false);
                    }
                    smoosh() {
                        return this._smoosh();
                    }
                    _smoosh(prefix) {
                        if (prefix === void 0) prefix = "/";
                        const childrenPaths = [
                            ...this.children.keys()
                        ].sort();
                        if (this.slugName !== null) {
                            childrenPaths.splice(childrenPaths.indexOf("[]"), 1);
                        }
                        if (this.restSlugName !== null) {
                            childrenPaths.splice(childrenPaths.indexOf("[...]"), 1);
                        }
                        if (this.optionalRestSlugName !== null) {
                            childrenPaths.splice(childrenPaths.indexOf("[[...]]"), 1);
                        }
                        const routes = childrenPaths.map((c) => this.children.get(c)._smoosh("" + prefix + c + "/")).reduce((prev, curr) => [
                            ...prev,
                            ...curr
                        ], []);
                        if (this.slugName !== null) {
                            routes.push(...this.children.get("[]")._smoosh(prefix + "[" + this.slugName + "]/"));
                        }
                        if (!this.placeholder) {
                            const r = prefix === "/" ? "/" : prefix.slice(0, -1);
                            if (this.optionalRestSlugName != null) {
                                throw new Error('You cannot define a route with the same specificity as a optional catch-all route ("' + r + '" and "' + r + "[[..." + this.optionalRestSlugName + ']]").');
                            }
                            routes.unshift(r);
                        }
                        if (this.restSlugName !== null) {
                            routes.push(...this.children.get("[...]")._smoosh(prefix + "[..." + this.restSlugName + "]/"));
                        }
                        if (this.optionalRestSlugName !== null) {
                            routes.push(...this.children.get("[[...]]")._smoosh(prefix + "[[..." + this.optionalRestSlugName + "]]/"));
                        }
                        return routes;
                    }
                    _insert(urlPaths, slugNames, isCatchAll) {
                        if (urlPaths.length === 0) {
                            this.placeholder = false;
                            return;
                        }
                        if (isCatchAll) {
                            throw new Error("Catch-all must be the last part of the URL.");
                        }
                        // The next segment in the urlPaths list
                        let nextSegment = urlPaths[0];
                        // Check if the segment matches `[something]`
                        if (nextSegment.startsWith("[") && nextSegment.endsWith("]")) {
                            // Strip `[` and `]`, leaving only `something`
                            let segmentName = nextSegment.slice(1, -1);
                            let isOptional = false;
                            if (segmentName.startsWith("[") && segmentName.endsWith("]")) {
                                // Strip optional `[` and `]`, leaving only `something`
                                segmentName = segmentName.slice(1, -1);
                                isOptional = true;
                            }
                            if (segmentName.startsWith("...")) {
                                // Strip `...`, leaving only `something`
                                segmentName = segmentName.substring(3);
                                isCatchAll = true;
                            }
                            if (segmentName.startsWith("[") || segmentName.endsWith("]")) {
                                throw new Error("Segment names may not start or end with extra brackets ('" + segmentName + "').");
                            }
                            if (segmentName.startsWith(".")) {
                                throw new Error("Segment names may not start with erroneous periods ('" + segmentName + "').");
                            }

                            function handleSlug(previousSlug, nextSlug) {
                                if (previousSlug !== null) {
                                    // If the specific segment already has a slug but the slug is not `something`
                                    // This prevents collisions like:
                                    // pages/[post]/index.js
                                    // pages/[id]/index.js
                                    // Because currently multiple dynamic params on the same segment level are not supported
                                    if (previousSlug !== nextSlug) {
                                        // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.
                                        throw new Error("You cannot use different slug names for the same dynamic path ('" + previousSlug + "' !== '" + nextSlug + "').");
                                    }
                                }
                                slugNames.forEach((slug) => {
                                    if (slug === nextSlug) {
                                        throw new Error('You cannot have the same slug name "' + nextSlug + '" repeat within a single dynamic path');
                                    }
                                    if (slug.replace(/\W/g, "") === nextSegment.replace(/\W/g, "")) {
                                        throw new Error('You cannot have the slug names "' + slug + '" and "' + nextSlug + '" differ only by non-word symbols within a single dynamic path');
                                    }
                                });
                                slugNames.push(nextSlug);
                            }
                            if (isCatchAll) {
                                if (isOptional) {
                                    if (this.restSlugName != null) {
                                        throw new Error('You cannot use both an required and optional catch-all route at the same level ("[...' + this.restSlugName + ']" and "' + urlPaths[0] + '" ).');
                                    }
                                    handleSlug(this.optionalRestSlugName, segmentName);
                                    // slugName is kept as it can only be one particular slugName
                                    this.optionalRestSlugName = segmentName;
                                    // nextSegment is overwritten to [[...]] so that it can later be sorted specifically
                                    nextSegment = "[[...]]";
                                } else {
                                    if (this.optionalRestSlugName != null) {
                                        throw new Error('You cannot use both an optional and required catch-all route at the same level ("[[...' + this.optionalRestSlugName + ']]" and "' + urlPaths[0] + '").');
                                    }
                                    handleSlug(this.restSlugName, segmentName);
                                    // slugName is kept as it can only be one particular slugName
                                    this.restSlugName = segmentName;
                                    // nextSegment is overwritten to [...] so that it can later be sorted specifically
                                    nextSegment = "[...]";
                                }
                            } else {
                                if (isOptional) {
                                    throw new Error('Optional route parameters are not yet supported ("' + urlPaths[0] + '").');
                                }
                                handleSlug(this.slugName, segmentName);
                                // slugName is kept as it can only be one particular slugName
                                this.slugName = segmentName;
                                // nextSegment is overwritten to [] so that it can later be sorted specifically
                                nextSegment = "[]";
                            }
                        }
                        // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode
                        if (!this.children.has(nextSegment)) {
                            this.children.set(nextSegment, new UrlNode());
                        }
                        this.children.get(nextSegment)._insert(urlPaths.slice(1), slugNames, isCatchAll);
                    }
                    constructor() {
                        this.placeholder = true;
                        this.children = new Map();
                        this.slugName = null;
                        this.restSlugName = null;
                        this.optionalRestSlugName = null;
                    }
                }

                function getSortedRoutes(normalizedPages) {
                    // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment
                    // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js
                    // Only 1 dynamic segment per nesting level
                    // So in the case that is test/integration/dynamic-routing it'll be this:
                    // pages/[post]/comments.js
                    // pages/blog/[post]/comment/[id].js
                    // Both are fine because `pages/[post]` and `pages/blog` are on the same level
                    // So in this case `UrlNode` created here has `this.slugName === 'post'`
                    // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities
                    // Instead what has to be passed through is the upwards path's dynamic names
                    const root = new UrlNode();
                    // Here the `root` gets injected multiple paths, and insert will break them up into sublevels
                    normalizedPages.forEach((pagePath) => root.insert(pagePath));
                    // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority
                    return root.smoosh();
                }

                //# sourceMappingURL=sorted-routes.js.map

                /***/
            }),

        /***/
        1954:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    normalizeAppPath: function() {
                        return normalizeAppPath;
                    },
                    normalizeRscURL: function() {
                        return normalizeRscURL;
                    }
                });
                const _ensureleadingslash = __webpack_require__(1955);
                const _segment = __webpack_require__(1956);

                function normalizeAppPath(route) {
                    return (0, _ensureleadingslash.ensureLeadingSlash)(route.split("/").reduce((pathname, segment, index, segments) => {
                        // Empty segments are ignored.
                        if (!segment) {
                            return pathname;
                        }
                        // Groups are ignored.
                        if ((0, _segment.isGroupSegment)(segment)) {
                            return pathname;
                        }
                        // Parallel segments are ignored.
                        if (segment[0] === "@") {
                            return pathname;
                        }
                        // The last segment (if it's a leaf) should be ignored.
                        if ((segment === "page" || segment === "route") && index === segments.length - 1) {
                            return pathname;
                        }
                        return pathname + "/" + segment;
                    }, ""));
                }

                function normalizeRscURL(url) {
                    return url.replace(/\.rsc($|\?)/, // $1 ensures `?` is preserved
                        "$1");
                }

                //# sourceMappingURL=app-paths.js.map

                /***/
            }),

        /***/
        1955:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /**
                 * For a given page path, this function ensures that there is a leading slash.
                 * If there is not a leading slash, one is added, otherwise it is noop.
                 */
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "ensureLeadingSlash", {
                    enumerable: true,
                    get: function() {
                        return ensureLeadingSlash;
                    }
                });

                function ensureLeadingSlash(path) {
                    return path.startsWith("/") ? path : "/" + path;
                }

                //# sourceMappingURL=ensure-leading-slash.js.map

                /***/
            }),

        /***/
        1956:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    DEFAULT_SEGMENT_KEY: function() {
                        return DEFAULT_SEGMENT_KEY;
                    },
                    PAGE_SEGMENT_KEY: function() {
                        return PAGE_SEGMENT_KEY;
                    },
                    isGroupSegment: function() {
                        return isGroupSegment;
                    }
                });

                function isGroupSegment(segment) {
                    // Use array[0] for performant purpose
                    return segment[0] === "(" && segment.endsWith(")");
                }
                const PAGE_SEGMENT_KEY = "__PAGE__";
                const DEFAULT_SEGMENT_KEY = "__DEFAULT__";

                //# sourceMappingURL=segment.js.map

                /***/
            }),

        /***/
        1957:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /**
                 * For a given page path, this function ensures that there is no backslash
                 * escaping slashes in the path. Example:
                 *  - `foo\/bar\/baz` -> `foo/bar/baz`
                 */
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "normalizePathSep", {
                    enumerable: true,
                    get: function() {
                        return normalizePathSep;
                    }
                });

                function normalizePathSep(path) {
                    return path.replace(/\\/g, "/");
                }

                //# sourceMappingURL=normalize-path-sep.js.map

                /***/
            }),

        /***/
        1958:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /*
                MIT License

                Copyright (c) Jason Miller (https://jasonformat.com/)

                Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

                The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

                THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                */ // This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
                // It's been edited for the needs of this script
                // See the LICENSE at the top of the file

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "default", {
                    enumerable: true,
                    get: function() {
                        return mitt;
                    }
                });

                function mitt() {
                    const all = Object.create(null);
                    return {
                        on(type, handler) {
                            (all[type] || (all[type] = [])).push(handler);
                        },
                        off(type, handler) {
                            if (all[type]) {
                                all[type].splice(all[type].indexOf(handler) >>> 0, 1);
                            }
                        },
                        emit(type) {
                            for (var _len = arguments.length, evts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                                evts[_key - 1] = arguments[_key];
                            }
                            (all[type] || []).slice().map((handler) => {
                                handler(...evts);
                            });
                        }
                    };
                }

                //# sourceMappingURL=mitt.js.map

                /***/
            }),

        /***/
        1959:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "default", {
                    enumerable: true,
                    get: function() {
                        return resolveRewrites;
                    }
                });
                const _pathmatch = __webpack_require__(1960);
                const _preparedestination = __webpack_require__(1961);
                const _removetrailingslash = __webpack_require__(1825);
                const _normalizelocalepath = __webpack_require__(1843);
                const _removebasepath = __webpack_require__(1880);
                const _parserelativeurl = __webpack_require__(1844);

                function resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {
                    let matchedPage = false;
                    let externalDest = false;
                    let parsedAs = (0, _parserelativeurl.parseRelativeUrl)(asPath);
                    let fsPathname = (0, _removetrailingslash.removeTrailingSlash)((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(parsedAs.pathname), locales).pathname);
                    let resolvedHref;
                    const handleRewrite = (rewrite) => {
                        const matcher = (0, _pathmatch.getPathMatch)(rewrite.source + (Object({
                            "NODE_ENV": "production"
                        }).__NEXT_TRAILING_SLASH ? "(/)?" : ""), {
                            removeUnnamedParams: true,
                            strict: true
                        });
                        let params = matcher(parsedAs.pathname);
                        if ((rewrite.has || rewrite.missing) && params) {
                            const hasParams = (0, _preparedestination.matchHas)({
                                headers: {
                                    host: document.location.hostname,
                                    "user-agent": navigator.userAgent
                                },
                                cookies: document.cookie.split("; ").reduce((acc, item) => {
                                    const [key, ...value] = item.split("=");
                                    acc[key] = value.join("=");
                                    return acc;
                                }, {})
                            }, parsedAs.query, rewrite.has, rewrite.missing);
                            if (hasParams) {
                                Object.assign(params, hasParams);
                            } else {
                                params = false;
                            }
                        }
                        if (params) {
                            if (!rewrite.destination) {
                                // this is a proxied rewrite which isn't handled on the client
                                externalDest = true;
                                return true;
                            }
                            const destRes = (0, _preparedestination.prepareDestination)({
                                appendParamsToQuery: true,
                                destination: rewrite.destination,
                                params: params,
                                query: query
                            });
                            parsedAs = destRes.parsedDestination;
                            asPath = destRes.newUrl;
                            Object.assign(query, destRes.parsedDestination.query);
                            fsPathname = (0, _removetrailingslash.removeTrailingSlash)((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(asPath), locales).pathname);
                            if (pages.includes(fsPathname)) {
                                // check if we now match a page as this means we are done
                                // resolving the rewrites
                                matchedPage = true;
                                resolvedHref = fsPathname;
                                return true;
                            }
                            // check if we match a dynamic-route, if so we break the rewrites chain
                            resolvedHref = resolveHref(fsPathname);
                            if (resolvedHref !== asPath && pages.includes(resolvedHref)) {
                                matchedPage = true;
                                return true;
                            }
                        }
                    };
                    let finished = false;
                    for (let i = 0; i < rewrites.beforeFiles.length; i++) {
                        // we don't end after match in beforeFiles to allow
                        // continuing through all beforeFiles rewrites
                        handleRewrite(rewrites.beforeFiles[i]);
                    }
                    matchedPage = pages.includes(fsPathname);
                    if (!matchedPage) {
                        if (!finished) {
                            for (let i = 0; i < rewrites.afterFiles.length; i++) {
                                if (handleRewrite(rewrites.afterFiles[i])) {
                                    finished = true;
                                    break;
                                }
                            }
                        }
                        // check dynamic route before processing fallback rewrites
                        if (!finished) {
                            resolvedHref = resolveHref(fsPathname);
                            matchedPage = pages.includes(resolvedHref);
                            finished = matchedPage;
                        }
                        if (!finished) {
                            for (let i = 0; i < rewrites.fallback.length; i++) {
                                if (handleRewrite(rewrites.fallback[i])) {
                                    finished = true;
                                    break;
                                }
                            }
                        }
                    }
                    return {
                        asPath,
                        parsedAs,
                        matchedPage,
                        resolvedHref,
                        externalDest
                    };
                }

                //# sourceMappingURL=resolve-rewrites.js.map

                /***/
            }),

        /***/
        1960:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "getPathMatch", {
                    enumerable: true,
                    get: function() {
                        return getPathMatch;
                    }
                });
                const _pathtoregexp = __webpack_require__(1878);

                function getPathMatch(path, options) {
                    const keys = [];
                    const regexp = (0, _pathtoregexp.pathToRegexp)(path, keys, {
                        delimiter: "/",
                        sensitive: typeof(options == null ? void 0 : options.sensitive) === "boolean" ? options.sensitive : false,
                        strict: options == null ? void 0 : options.strict
                    });
                    const matcher = (0, _pathtoregexp.regexpToFunction)((options == null ? void 0 : options.regexModifier) ? new RegExp(options.regexModifier(regexp.source), regexp.flags) : regexp, keys);
                    /**
                     * A matcher function that will check if a given pathname matches the path
                     * given in the builder function. When the path does not match it will return
                     * `false` but if it does it will return an object with the matched params
                     * merged with the params provided in the second argument.
                     */
                    return (pathname, params) => {
                        // If no pathname is provided it's not a match.
                        if (typeof pathname !== "string") return false;
                        const match = matcher(pathname);
                        // If the path did not match `false` will be returned.
                        if (!match) return false;
                        /**
                         * If unnamed params are not allowed they must be removed from
                         * the matched parameters. path-to-regexp uses "string" for named and
                         * "number" for unnamed parameters.
                         */
                        if (options == null ? void 0 : options.removeUnnamedParams) {
                            for (const key of keys) {
                                if (typeof key.name === "number") {
                                    delete match.params[key.name];
                                }
                            }
                        }
                        return {
                            ...params,
                            ...match.params
                        };
                    };
                }

                //# sourceMappingURL=path-match.js.map

                /***/
            }),

        /***/
        1961:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    compileNonPath: function() {
                        return compileNonPath;
                    },
                    matchHas: function() {
                        return matchHas;
                    },
                    prepareDestination: function() {
                        return prepareDestination;
                    }
                });
                const _pathtoregexp = __webpack_require__(1878);
                const _escaperegexp = __webpack_require__(1879);
                const _parseurl = __webpack_require__(1962);
                const _interceptionroutes = __webpack_require__(1842);
                const _approuterheaders = __webpack_require__(1963);
                const _getcookieparser = __webpack_require__(1964);
                /**
                 * Ensure only a-zA-Z are used for param names for proper interpolating
                 * with path-to-regexp
                 */
                function getSafeParamName(paramName) {
                    let newParamName = "";
                    for (let i = 0; i < paramName.length; i++) {
                        const charCode = paramName.charCodeAt(i);
                        if (charCode > 64 && charCode < 91 || // A-Z
                            charCode > 96 && charCode < 123 // a-z
                        ) {
                            newParamName += paramName[i];
                        }
                    }
                    return newParamName;
                }

                function escapeSegment(str, segmentName) {
                    return str.replace(new RegExp(":" + (0, _escaperegexp.escapeStringRegexp)(segmentName), "g"), "__ESC_COLON_" + segmentName);
                }

                function unescapeSegments(str) {
                    return str.replace(/__ESC_COLON_/gi, ":");
                }

                function matchHas(req, query, has, missing) {
                    if (has === void 0) has = [];
                    if (missing === void 0) missing = [];
                    const params = {};
                    const hasMatch = (hasItem) => {
                        let value;
                        let key = hasItem.key;
                        switch (hasItem.type) {
                            case "header":
                                {
                                    key = key.toLowerCase();
                                    value = req.headers[key];
                                    break;
                                }
                            case "cookie":
                                {
                                    if ("cookies" in req) {
                                        value = req.cookies[hasItem.key];
                                    } else {
                                        const cookies = (0, _getcookieparser.getCookieParser)(req.headers)();
                                        value = cookies[hasItem.key];
                                    }
                                    break;
                                }
                            case "query":
                                {
                                    value = query[key];
                                    break;
                                }
                            case "host":
                                {
                                    const {
                                        host
                                    } = (req == null ? void 0 : req.headers) || {};
                                    // remove port from host if present
                                    const hostname = host == null ? void 0 : host.split(":", 1)[0].toLowerCase();
                                    value = hostname;
                                    break;
                                }
                            default:
                                {
                                    break;
                                }
                        }
                        if (!hasItem.value && value) {
                            params[getSafeParamName(key)] = value;
                            return true;
                        } else if (value) {
                            const matcher = new RegExp("^" + hasItem.value + "$");
                            const matches = Array.isArray(value) ? value.slice(-1)[0].match(matcher) : value.match(matcher);
                            if (matches) {
                                if (Array.isArray(matches)) {
                                    if (matches.groups) {
                                        Object.keys(matches.groups).forEach((groupKey) => {
                                            params[groupKey] = matches.groups[groupKey];
                                        });
                                    } else if (hasItem.type === "host" && matches[0]) {
                                        params.host = matches[0];
                                    }
                                }
                                return true;
                            }
                        }
                        return false;
                    };
                    const allMatch = has.every((item) => hasMatch(item)) && !missing.some((item) => hasMatch(item));
                    if (allMatch) {
                        return params;
                    }
                    return false;
                }

                function compileNonPath(value, params) {
                    if (!value.includes(":")) {
                        return value;
                    }
                    for (const key of Object.keys(params)) {
                        if (value.includes(":" + key)) {
                            value = value.replace(new RegExp(":" + key + "\\*", "g"), ":" + key + "--ESCAPED_PARAM_ASTERISKS").replace(new RegExp(":" + key + "\\?", "g"), ":" + key + "--ESCAPED_PARAM_QUESTION").replace(new RegExp(":" + key + "\\+", "g"), ":" + key + "--ESCAPED_PARAM_PLUS").replace(new RegExp(":" + key + "(?!\\w)", "g"), "--ESCAPED_PARAM_COLON" + key);
                        }
                    }
                    value = value.replace(/(:|\*|\?|\+|\(|\)|\{|\})/g, "\\$1").replace(/--ESCAPED_PARAM_PLUS/g, "+").replace(/--ESCAPED_PARAM_COLON/g, ":").replace(/--ESCAPED_PARAM_QUESTION/g, "?").replace(/--ESCAPED_PARAM_ASTERISKS/g, "*");
                    // the value needs to start with a forward-slash to be compiled
                    // correctly
                    return (0, _pathtoregexp.compile)("/" + value, {
                        validate: false
                    })(params).slice(1);
                }

                function prepareDestination(args) {
                    const query = Object.assign({}, args.query);
                    delete query.__nextLocale;
                    delete query.__nextDefaultLocale;
                    delete query.__nextDataReq;
                    delete query.__nextInferredLocaleFromDefault;
                    delete query[_approuterheaders.NEXT_RSC_UNION_QUERY];
                    let escapedDestination = args.destination;
                    for (const param of Object.keys({
                            ...args.params,
                            ...query
                        })) {
                        escapedDestination = escapeSegment(escapedDestination, param);
                    }
                    const parsedDestination = (0, _parseurl.parseUrl)(escapedDestination);
                    const destQuery = parsedDestination.query;
                    const destPath = unescapeSegments("" + parsedDestination.pathname + (parsedDestination.hash || ""));
                    const destHostname = unescapeSegments(parsedDestination.hostname || "");
                    const destPathParamKeys = [];
                    const destHostnameParamKeys = [];
                    (0, _pathtoregexp.pathToRegexp)(destPath, destPathParamKeys);
                    (0, _pathtoregexp.pathToRegexp)(destHostname, destHostnameParamKeys);
                    const destParams = [];
                    destPathParamKeys.forEach((key) => destParams.push(key.name));
                    destHostnameParamKeys.forEach((key) => destParams.push(key.name));
                    const destPathCompiler = (0, _pathtoregexp.compile)(destPath, // we don't validate while compiling the destination since we should
                        // have already validated before we got to this point and validating
                        // breaks compiling destinations with named pattern params from the source
                        // e.g. /something:hello(.*) -> /another/:hello is broken with validation
                        // since compile validation is meant for reversing and not for inserting
                        // params from a separate path-regex into another
                        {
                            validate: false
                        });
                    const destHostnameCompiler = (0, _pathtoregexp.compile)(destHostname, {
                        validate: false
                    });
                    // update any params in query values
                    for (const [key, strOrArray] of Object.entries(destQuery)) {
                        // the value needs to start with a forward-slash to be compiled
                        // correctly
                        if (Array.isArray(strOrArray)) {
                            destQuery[key] = strOrArray.map((value) => compileNonPath(unescapeSegments(value), args.params));
                        } else if (typeof strOrArray === "string") {
                            destQuery[key] = compileNonPath(unescapeSegments(strOrArray), args.params);
                        }
                    }
                    // add path params to query if it's not a redirect and not
                    // already defined in destination query or path
                    let paramKeys = Object.keys(args.params).filter((name) => name !== "nextInternalLocale");
                    if (args.appendParamsToQuery && !paramKeys.some((key) => destParams.includes(key))) {
                        for (const key of paramKeys) {
                            if (!(key in destQuery)) {
                                destQuery[key] = args.params[key];
                            }
                        }
                    }
                    let newUrl;
                    // The compiler also that the interception route marker is an unnamed param, hence '0',
                    // so we need to add it to the params object.
                    if ((0, _interceptionroutes.isInterceptionRouteAppPath)(destPath)) {
                        for (const segment of destPath.split("/")) {
                            const marker = _interceptionroutes.INTERCEPTION_ROUTE_MARKERS.find((m) => segment.startsWith(m));
                            if (marker) {
                                args.params["0"] = marker;
                                break;
                            }
                        }
                    }
                    try {
                        newUrl = destPathCompiler(args.params);
                        const [pathname, hash] = newUrl.split("#", 2);
                        parsedDestination.hostname = destHostnameCompiler(args.params);
                        parsedDestination.pathname = pathname;
                        parsedDestination.hash = "" + (hash ? "#" : "") + (hash || "");
                        delete parsedDestination.search;
                    } catch (err) {
                        if (err.message.match(/Expected .*? to not repeat, but got an array/)) {
                            throw new Error("To use a multi-match in the destination you must add `*` at the end of the param name to signify it should repeat. https://nextjs.org/docs/messages/invalid-multi-match");
                        }
                        throw err;
                    }
                    // Query merge order lowest priority to highest
                    // 1. initial URL query values
                    // 2. path segment values
                    // 3. destination specified query values
                    parsedDestination.query = {
                        ...query,
                        ...parsedDestination.query
                    };
                    return {
                        newUrl,
                        destQuery,
                        parsedDestination
                    };
                }

                //# sourceMappingURL=prepare-destination.js.map

                /***/
            }),

        /***/
        1962:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "parseUrl", {
                    enumerable: true,
                    get: function() {
                        return parseUrl;
                    }
                });
                const _querystring = __webpack_require__(1832);
                const _parserelativeurl = __webpack_require__(1844);

                function parseUrl(url) {
                    if (url.startsWith("/")) {
                        return (0, _parserelativeurl.parseRelativeUrl)(url);
                    }
                    const parsedURL = new URL(url);
                    return {
                        hash: parsedURL.hash,
                        hostname: parsedURL.hostname,
                        href: parsedURL.href,
                        pathname: parsedURL.pathname,
                        port: parsedURL.port,
                        protocol: parsedURL.protocol,
                        query: (0, _querystring.searchParamsToUrlQuery)(parsedURL.searchParams),
                        search: parsedURL.search
                    };
                }

                //# sourceMappingURL=parse-url.js.map

                /***/
            }),

        /***/
        1963:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                0 && (false);

                function _export(target, all) {
                    for (var name in all) Object.defineProperty(target, name, {
                        enumerable: true,
                        get: all[name]
                    });
                }
                _export(exports, {
                    ACTION: function() {
                        return ACTION;
                    },
                    FLIGHT_PARAMETERS: function() {
                        return FLIGHT_PARAMETERS;
                    },
                    NEXT_DID_POSTPONE_HEADER: function() {
                        return NEXT_DID_POSTPONE_HEADER;
                    },
                    NEXT_ROUTER_PREFETCH_HEADER: function() {
                        return NEXT_ROUTER_PREFETCH_HEADER;
                    },
                    NEXT_ROUTER_STATE_TREE: function() {
                        return NEXT_ROUTER_STATE_TREE;
                    },
                    NEXT_RSC_UNION_QUERY: function() {
                        return NEXT_RSC_UNION_QUERY;
                    },
                    NEXT_URL: function() {
                        return NEXT_URL;
                    },
                    RSC_CONTENT_TYPE_HEADER: function() {
                        return RSC_CONTENT_TYPE_HEADER;
                    },
                    RSC_HEADER: function() {
                        return RSC_HEADER;
                    }
                });
                const RSC_HEADER = "RSC";
                const ACTION = "Next-Action";
                const NEXT_ROUTER_STATE_TREE = "Next-Router-State-Tree";
                const NEXT_ROUTER_PREFETCH_HEADER = "Next-Router-Prefetch";
                const NEXT_URL = "Next-Url";
                const RSC_CONTENT_TYPE_HEADER = "text/x-component";
                const FLIGHT_PARAMETERS = [
                    [
                        RSC_HEADER
                    ],
                    [
                        NEXT_ROUTER_STATE_TREE
                    ],
                    [
                        NEXT_ROUTER_PREFETCH_HEADER
                    ]
                ];
                const NEXT_RSC_UNION_QUERY = "_rsc";
                const NEXT_DID_POSTPONE_HEADER = "x-nextjs-postponed";

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=app-router-headers.js.map

                /***/
            }),

        /***/
        1964:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "getCookieParser", {
                    enumerable: true,
                    get: function() {
                        return getCookieParser;
                    }
                });

                function getCookieParser(headers) {
                    return function parseCookie() {
                        const {
                            cookie
                        } = headers;
                        if (!cookie) {
                            return {};
                        }
                        const {
                            parse: parseCookieFn
                        } = __webpack_require__(1965);
                        return parseCookieFn(Array.isArray(cookie) ? cookie.join("; ") : cookie);
                    };
                }

                //# sourceMappingURL=get-cookie-parser.js.map

                /***/
            }),

        /***/
        1965:
            /***/
            (function(module, exports) {

                /* WEBPACK VAR INJECTION */
                (function(__dirname) {
                    (() => {
                        "use strict";
                        if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
                        var e = {};
                        (() => {
                            var r = e;
                            /*!
                             * cookie
                             * Copyright(c) 2012-2014 Roman Shtylman
                             * Copyright(c) 2015 Douglas Christopher Wilson
                             * MIT Licensed
                             */
                            r.parse = parse;
                            r.serialize = serialize;
                            var i = decodeURIComponent;
                            var t = encodeURIComponent;
                            var a = /; */;
                            var n = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;

                            function parse(e, r) {
                                if (typeof e !== "string") {
                                    throw new TypeError("argument str must be a string")
                                }
                                var t = {};
                                var n = r || {};
                                var o = e.split(a);
                                var s = n.decode || i;
                                for (var p = 0; p < o.length; p++) {
                                    var f = o[p];
                                    var u = f.indexOf("=");
                                    if (u < 0) {
                                        continue
                                    }
                                    var v = f.substr(0, u).trim();
                                    var c = f.substr(++u, f.length).trim();
                                    if ('"' == c[0]) {
                                        c = c.slice(1, -1)
                                    }
                                    if (undefined == t[v]) {
                                        t[v] = tryDecode(c, s)
                                    }
                                }
                                return t
                            }

                            function serialize(e, r, i) {
                                var a = i || {};
                                var o = a.encode || t;
                                if (typeof o !== "function") {
                                    throw new TypeError("option encode is invalid")
                                }
                                if (!n.test(e)) {
                                    throw new TypeError("argument name is invalid")
                                }
                                var s = o(r);
                                if (s && !n.test(s)) {
                                    throw new TypeError("argument val is invalid")
                                }
                                var p = e + "=" + s;
                                if (null != a.maxAge) {
                                    var f = a.maxAge - 0;
                                    if (isNaN(f) || !isFinite(f)) {
                                        throw new TypeError("option maxAge is invalid")
                                    }
                                    p += "; Max-Age=" + Math.floor(f)
                                }
                                if (a.domain) {
                                    if (!n.test(a.domain)) {
                                        throw new TypeError("option domain is invalid")
                                    }
                                    p += "; Domain=" + a.domain
                                }
                                if (a.path) {
                                    if (!n.test(a.path)) {
                                        throw new TypeError("option path is invalid")
                                    }
                                    p += "; Path=" + a.path
                                }
                                if (a.expires) {
                                    if (typeof a.expires.toUTCString !== "function") {
                                        throw new TypeError("option expires is invalid")
                                    }
                                    p += "; Expires=" + a.expires.toUTCString()
                                }
                                if (a.httpOnly) {
                                    p += "; HttpOnly"
                                }
                                if (a.secure) {
                                    p += "; Secure"
                                }
                                if (a.sameSite) {
                                    var u = typeof a.sameSite === "string" ? a.sameSite.toLowerCase() : a.sameSite;
                                    switch (u) {
                                        case true:
                                            p += "; SameSite=Strict";
                                            break;
                                        case "lax":
                                            p += "; SameSite=Lax";
                                            break;
                                        case "strict":
                                            p += "; SameSite=Strict";
                                            break;
                                        case "none":
                                            p += "; SameSite=None";
                                            break;
                                        default:
                                            throw new TypeError("option sameSite is invalid")
                                    }
                                }
                                return p
                            }

                            function tryDecode(e, r) {
                                try {
                                    return r(e)
                                } catch (r) {
                                    return e
                                }
                            }
                        })();
                        module.exports = e
                    })();
                    /* WEBPACK VAR INJECTION */
                }.call(this, "/"))

                /***/
            }),

        /***/
        1966:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "detectDomainLocale", {
                    enumerable: true,
                    get: function() {
                        return detectDomainLocale;
                    }
                });
                const detectDomainLocale = function() {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    if (Object({
                            "NODE_ENV": "production"
                        }).__NEXT_I18N_SUPPORT) {
                        return __webpack_require__(1967).detectDomainLocale(...args);
                    }
                };

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=detect-domain-locale.js.map

                /***/
            }),

        /***/
        1967:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "detectDomainLocale", {
                    enumerable: true,
                    get: function() {
                        return detectDomainLocale;
                    }
                });

                function detectDomainLocale(domainItems, hostname, detectedLocale) {
                    if (!domainItems) return;
                    if (detectedLocale) {
                        detectedLocale = detectedLocale.toLowerCase();
                    }
                    for (const item of domainItems) {
                        var _item_domain, _item_locales;
                        // remove port if present
                        const domainHostname = (_item_domain = item.domain) == null ? void 0 : _item_domain.split(":", 1)[0].toLowerCase();
                        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((_item_locales = item.locales) == null ? void 0 : _item_locales.some((locale) => locale.toLowerCase() === detectedLocale))) {
                            return item;
                        }
                    }
                }

                //# sourceMappingURL=detect-domain-locale.js.map

                /***/
            }),

        /***/
        1968:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "addLocale", {
                    enumerable: true,
                    get: function() {
                        return addLocale;
                    }
                });
                const _normalizetrailingslash = __webpack_require__(1846);
                const addLocale = function(path) {
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        args[_key - 1] = arguments[_key];
                    }
                    if (Object({
                            "NODE_ENV": "production"
                        }).__NEXT_I18N_SUPPORT) {
                        return (0, _normalizetrailingslash.normalizePathTrailingSlash)(__webpack_require__(1884).addLocale(path, ...args));
                    }
                    return path;
                };

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=add-locale.js.map

                /***/
            }),

        /***/
        1969:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "removeLocale", {
                    enumerable: true,
                    get: function() {
                        return removeLocale;
                    }
                });
                const _parsepath = __webpack_require__(1823);

                function removeLocale(path, locale) {
                    if (Object({
                            "NODE_ENV": "production"
                        }).__NEXT_I18N_SUPPORT) {
                        const {
                            pathname
                        } = (0, _parsepath.parsePath)(path);
                        const pathLower = pathname.toLowerCase();
                        const localeLower = locale == null ? void 0 : locale.toLowerCase();
                        return locale && (pathLower.startsWith("/" + localeLower + "/") || pathLower === "/" + localeLower) ? "" + (pathname.length === locale.length + 1 ? "/" : "") + path.slice(locale.length + 1) : path;
                    }
                    return path;
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=remove-locale.js.map

                /***/
            }),

        /***/
        1970:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "addBasePath", {
                    enumerable: true,
                    get: function() {
                        return addBasePath;
                    }
                });
                const _addpathprefix = __webpack_require__(1847);
                const _normalizetrailingslash = __webpack_require__(1846);
                const basePath = Object({
                    "NODE_ENV": "production"
                }).__NEXT_ROUTER_BASEPATH || "";

                function addBasePath(path, required) {
                    return (0, _normalizetrailingslash.normalizePathTrailingSlash)(Object({
                        "NODE_ENV": "production"
                    }).__NEXT_MANUAL_CLIENT_BASE_PATH && !required ? path : (0, _addpathprefix.addPathPrefix)(path, basePath));
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=add-base-path.js.map

                /***/
            }),

        /***/
        1971:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "resolveHref", {
                    enumerable: true,
                    get: function() {
                        return resolveHref;
                    }
                });
                const _querystring = __webpack_require__(1832);
                const _formaturl = __webpack_require__(1883);
                const _omit = __webpack_require__(1885);
                const _utils = __webpack_require__(1826);
                const _normalizetrailingslash = __webpack_require__(1846);
                const _islocalurl = __webpack_require__(1886);
                const _utils1 = __webpack_require__(1876);
                const _interpolateas = __webpack_require__(1887);

                function resolveHref(router, href, resolveAs) {
                    // we use a dummy base url for relative urls
                    let base;
                    let urlAsString = typeof href === "string" ? href : (0, _formaturl.formatWithValidation)(href);
                    // repeated slashes and backslashes in the URL are considered
                    // invalid and will never match a Next.js page/file
                    const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\/\//);
                    const urlAsStringNoProto = urlProtoMatch ? urlAsString.slice(urlProtoMatch[0].length) : urlAsString;
                    const urlParts = urlAsStringNoProto.split("?", 1);
                    if ((urlParts[0] || "").match(/(\/\/|\\)/)) {
                        console.error("Invalid href '" + urlAsString + "' passed to next/router in page: '" + router.pathname + "'. Repeated forward-slashes (//) or backslashes \\ are not valid in the href.");
                        const normalizedUrl = (0, _utils.normalizeRepeatedSlashes)(urlAsStringNoProto);
                        urlAsString = (urlProtoMatch ? urlProtoMatch[0] : "") + normalizedUrl;
                    }
                    // Return because it cannot be routed by the Next.js router
                    if (!(0, _islocalurl.isLocalURL)(urlAsString)) {
                        return resolveAs ? [
                            urlAsString
                        ] : urlAsString;
                    }
                    try {
                        base = new URL(urlAsString.startsWith("#") ? router.asPath : router.pathname, "http://n");
                    } catch (_) {
                        // fallback to / for invalid asPath values e.g. //
                        base = new URL("/", "http://n");
                    }
                    try {
                        const finalUrl = new URL(urlAsString, base);
                        finalUrl.pathname = (0, _normalizetrailingslash.normalizePathTrailingSlash)(finalUrl.pathname);
                        let interpolatedAs = "";
                        if ((0, _utils1.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {
                            const query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);
                            const {
                                result,
                                params
                            } = (0, _interpolateas.interpolateAs)(finalUrl.pathname, finalUrl.pathname, query);
                            if (result) {
                                interpolatedAs = (0, _formaturl.formatWithValidation)({
                                    pathname: result,
                                    hash: finalUrl.hash,
                                    query: (0, _omit.omit)(query, params)
                                });
                            }
                        }
                        // if the origin didn't change, it means we received a relative href
                        const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;
                        return resolveAs ? [
                            resolvedHref,
                            interpolatedAs || resolvedHref
                        ] : resolvedHref;
                    } catch (_) {
                        return resolveAs ? [
                            urlAsString
                        ] : urlAsString;
                    }
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=resolve-href.js.map

                /***/
            }),

        /***/
        1972:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "isAPIRoute", {
                    enumerable: true,
                    get: function() {
                        return isAPIRoute;
                    }
                });

                function isAPIRoute(value) {
                    return value === "/api" || Boolean(value == null ? void 0 : value.startsWith("/api/"));
                }

                //# sourceMappingURL=is-api-route.js.map

                /***/
            }),

        /***/
        1973:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "getNextPathnameInfo", {
                    enumerable: true,
                    get: function() {
                        return getNextPathnameInfo;
                    }
                });
                const _normalizelocalepath = __webpack_require__(1843);
                const _removepathprefix = __webpack_require__(1974);
                const _pathhasprefix = __webpack_require__(1833);

                function getNextPathnameInfo(pathname, options) {
                    var _options_nextConfig;
                    const {
                        basePath,
                        i18n,
                        trailingSlash
                    } = (_options_nextConfig = options.nextConfig) != null ? _options_nextConfig : {};
                    const info = {
                        pathname,
                        trailingSlash: pathname !== "/" ? pathname.endsWith("/") : trailingSlash
                    };
                    if (basePath && (0, _pathhasprefix.pathHasPrefix)(info.pathname, basePath)) {
                        info.pathname = (0, _removepathprefix.removePathPrefix)(info.pathname, basePath);
                        info.basePath = basePath;
                    }
                    let pathnameNoDataPrefix = info.pathname;
                    if (info.pathname.startsWith("/_next/data/") && info.pathname.endsWith(".json")) {
                        const paths = info.pathname.replace(/^\/_next\/data\//, "").replace(/\.json$/, "").split("/");
                        const buildId = paths[0];
                        info.buildId = buildId;
                        pathnameNoDataPrefix = paths[1] !== "index" ? "/" + paths.slice(1).join("/") : "/";
                        // update pathname with normalized if enabled although
                        // we use normalized to populate locale info still
                        if (options.parseData === true) {
                            info.pathname = pathnameNoDataPrefix;
                        }
                    }
                    // If provided, use the locale route normalizer to detect the locale instead
                    // of the function below.
                    if (i18n) {
                        let result = options.i18nProvider ? options.i18nProvider.analyze(info.pathname) : (0, _normalizelocalepath.normalizeLocalePath)(info.pathname, i18n.locales);
                        info.locale = result.detectedLocale;
                        var _result_pathname;
                        info.pathname = (_result_pathname = result.pathname) != null ? _result_pathname : info.pathname;
                        if (!result.detectedLocale && info.buildId) {
                            result = options.i18nProvider ? options.i18nProvider.analyze(pathnameNoDataPrefix) : (0, _normalizelocalepath.normalizeLocalePath)(pathnameNoDataPrefix, i18n.locales);
                            if (result.detectedLocale) {
                                info.locale = result.detectedLocale;
                            }
                        }
                    }
                    return info;
                }

                //# sourceMappingURL=get-next-pathname-info.js.map

                /***/
            }),

        /***/
        1974:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "removePathPrefix", {
                    enumerable: true,
                    get: function() {
                        return removePathPrefix;
                    }
                });
                const _pathhasprefix = __webpack_require__(1833);

                function removePathPrefix(path, prefix) {
                    // If the path doesn't start with the prefix we can return it as is. This
                    // protects us from situations where the prefix is a substring of the path
                    // prefix such as:
                    //
                    // For prefix: /blog
                    //
                    //   /blog -> true
                    //   /blog/ -> true
                    //   /blog/1 -> true
                    //   /blogging -> false
                    //   /blogging/ -> false
                    //   /blogging/1 -> false
                    if (!(0, _pathhasprefix.pathHasPrefix)(path, prefix)) {
                        return path;
                    }
                    // Remove the prefix from the path via slicing.
                    const withoutPrefix = path.slice(prefix.length);
                    // If the path without the prefix starts with a `/` we can return it as is.
                    if (withoutPrefix.startsWith("/")) {
                        return withoutPrefix;
                    }
                    // If the path without the prefix doesn't start with a `/` we need to add it
                    // back to the path to make sure it's a valid path.
                    return "/" + withoutPrefix;
                }

                //# sourceMappingURL=remove-path-prefix.js.map

                /***/
            }),

        /***/
        1975:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "formatNextPathnameInfo", {
                    enumerable: true,
                    get: function() {
                        return formatNextPathnameInfo;
                    }
                });
                const _removetrailingslash = __webpack_require__(1825);
                const _addpathprefix = __webpack_require__(1847);
                const _addpathsuffix = __webpack_require__(1976);
                const _addlocale = __webpack_require__(1884);

                function formatNextPathnameInfo(info) {
                    let pathname = (0, _addlocale.addLocale)(info.pathname, info.locale, info.buildId ? undefined : info.defaultLocale, info.ignorePrefix);
                    if (info.buildId || !info.trailingSlash) {
                        pathname = (0, _removetrailingslash.removeTrailingSlash)(pathname);
                    }
                    if (info.buildId) {
                        pathname = (0, _addpathsuffix.addPathSuffix)((0, _addpathprefix.addPathPrefix)(pathname, "/_next/data/" + info.buildId), info.pathname === "/" ? "index.json" : ".json");
                    }
                    pathname = (0, _addpathprefix.addPathPrefix)(pathname, info.basePath);
                    return !info.buildId && info.trailingSlash ? !pathname.endsWith("/") ? (0, _addpathsuffix.addPathSuffix)(pathname, "/") : pathname : (0, _removetrailingslash.removeTrailingSlash)(pathname);
                }

                //# sourceMappingURL=format-next-pathname-info.js.map

                /***/
            }),

        /***/
        1976:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "addPathSuffix", {
                    enumerable: true,
                    get: function() {
                        return addPathSuffix;
                    }
                });
                const _parsepath = __webpack_require__(1823);

                function addPathSuffix(path, suffix) {
                    if (!path.startsWith("/") || !suffix) {
                        return path;
                    }
                    const {
                        pathname,
                        query,
                        hash
                    } = (0, _parsepath.parsePath)(path);
                    return "" + pathname + suffix + query + hash;
                }

                //# sourceMappingURL=add-path-suffix.js.map

                /***/
            }),

        /***/
        1977:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "compareRouterStates", {
                    enumerable: true,
                    get: function() {
                        return compareRouterStates;
                    }
                });

                function compareRouterStates(a, b) {
                    const stateKeys = Object.keys(a);
                    if (stateKeys.length !== Object.keys(b).length) return false;
                    for (let i = stateKeys.length; i--;) {
                        const key = stateKeys[i];
                        if (key === "query") {
                            const queryKeys = Object.keys(a.query);
                            if (queryKeys.length !== Object.keys(b.query).length) {
                                return false;
                            }
                            for (let j = queryKeys.length; j--;) {
                                const queryKey = queryKeys[j];
                                if (!b.query.hasOwnProperty(queryKey) || a.query[queryKey] !== b.query[queryKey]) {
                                    return false;
                                }
                            }
                        } else if (!b.hasOwnProperty(key) || a[key] !== b[key]) {
                            return false;
                        }
                    }
                    return true;
                }

                //# sourceMappingURL=compare-states.js.map

                /***/
            }),

        /***/
        1978:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "isBot", {
                    enumerable: true,
                    get: function() {
                        return isBot;
                    }
                });

                function isBot(userAgent) {
                    return /Googlebot|Mediapartners-Google|AdsBot-Google|googleweblight|Storebot-Google|Google-PageRenderer|Bingbot|BingPreview|Slurp|DuckDuckBot|baiduspider|yandex|sogou|LinkedInBot|bitlybot|tumblr|vkShare|quora link preview|facebookexternalhit|facebookcatalog|Twitterbot|applebot|redditbot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|ia_archiver/i.test(userAgent);
                }

                //# sourceMappingURL=is-bot.js.map

                /***/
            }),

        /***/
        1979:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /**
                 * Run function with `scroll-behavior: auto` applied to `<html/>`.
                 * This css change will be reverted after the function finishes.
                 */
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "handleSmoothScroll", {
                    enumerable: true,
                    get: function() {
                        return handleSmoothScroll;
                    }
                });

                function handleSmoothScroll(fn, options) {
                    if (options === void 0) options = {};
                    // if only the hash is changed, we don't need to disable smooth scrolling
                    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
                    if (options.onlyHashChange) {
                        fn();
                        return;
                    }
                    const htmlElement = document.documentElement;
                    const existing = htmlElement.style.scrollBehavior;
                    htmlElement.style.scrollBehavior = "auto";
                    if (!options.dontForceLayout) {
                        // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
                        // Otherwise it will not pickup the change in scrollBehavior
                        // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
                        htmlElement.getClientRects();
                    }
                    fn();
                    htmlElement.style.scrollBehavior = existing;
                }

                //# sourceMappingURL=handle-smooth-scroll.js.map

                /***/
            }),

        /***/
        1980:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // minimal implementation MurmurHash2 hash function

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "BloomFilter", {
                    enumerable: true,
                    get: function() {
                        return BloomFilter;
                    }
                });

                function murmurhash2(str) {
                    let h = 0;
                    for (let i = 0; i < str.length; i++) {
                        const c = str.charCodeAt(i);
                        h = Math.imul(h ^ c, 0x5bd1e995);
                        h ^= h >>> 13;
                        h = Math.imul(h, 0x5bd1e995);
                    }
                    return h >>> 0;
                }
                // default to 0.01% error rate as the filter compresses very well
                const DEFAULT_ERROR_RATE = 0.0001;
                class BloomFilter {
                    static from(items, errorRate) {
                        if (errorRate === void 0) errorRate = DEFAULT_ERROR_RATE;
                        const filter = new BloomFilter(items.length, errorRate);
                        for (const item of items) {
                            filter.add(item);
                        }
                        return filter;
                    }
                    export () {
                        const data = {
                            numItems: this.numItems,
                            errorRate: this.errorRate,
                            numBits: this.numBits,
                            numHashes: this.numHashes,
                            bitArray: this.bitArray
                        };
                        if (Object({
                                "NODE_ENV": "production"
                            }).NEXT_RUNTIME === "nodejs") {
                            if (this.errorRate < DEFAULT_ERROR_RATE) {
                                const filterData = JSON.stringify(data);
                                const gzipSize = __webpack_require__(1981).sync(filterData);
                                if (gzipSize > 1024) {
                                    console.warn("Creating filter with error rate less than 0.1% (0.001) can increase the size dramatically proceed with caution. Received error rate " + this.errorRate + " resulted in size " + filterData.length + " bytes, " + gzipSize + " bytes (gzip)");
                                }
                            }
                        }
                        return data;
                    }
                    import (data) {
                        this.numItems = data.numItems;
                        this.errorRate = data.errorRate;
                        this.numBits = data.numBits;
                        this.numHashes = data.numHashes;
                        this.bitArray = data.bitArray;
                    }
                    add(item) {
                        const hashValues = this.getHashValues(item);
                        hashValues.forEach((hash) => {
                            this.bitArray[hash] = 1;
                        });
                    }
                    contains(item) {
                        const hashValues = this.getHashValues(item);
                        return hashValues.every((hash) => this.bitArray[hash]);
                    }
                    getHashValues(item) {
                        const hashValues = [];
                        for (let i = 1; i <= this.numHashes; i++) {
                            const hash = murmurhash2("" + item + i) % this.numBits;
                            hashValues.push(hash);
                        }
                        return hashValues;
                    }
                    constructor(numItems, errorRate = DEFAULT_ERROR_RATE) {
                        this.numItems = numItems;
                        this.errorRate = errorRate;
                        this.numBits = Math.ceil(-(numItems * Math.log(errorRate)) / (Math.log(2) * Math.log(2)));
                        this.numHashes = Math.ceil(this.numBits / numItems * Math.log(2));
                        this.bitArray = new Array(this.numBits).fill(0);
                    }
                }

                //# sourceMappingURL=bloom-filter.js.map

                /***/
            }),

        /***/
        1981:
            /***/
            (function(module, exports, __webpack_require__) {

                /* WEBPACK VAR INJECTION */
                (function(__dirname) {
                    (() => {
                        var e = {
                            154: (e, r, t) => {
                                var n = t(781);
                                var o = ["write", "end", "destroy"];
                                var i = ["resume", "pause"];
                                var s = ["data", "close"];
                                var c = Array.prototype.slice;
                                e.exports = duplex;

                                function forEach(e, r) {
                                    if (e.forEach) {
                                        return e.forEach(r)
                                    }
                                    for (var t = 0; t < e.length; t++) {
                                        r(e[t], t)
                                    }
                                }

                                function duplex(e, r) {
                                    var t = new n;
                                    var a = false;
                                    forEach(o, proxyWriter);
                                    forEach(i, proxyReader);
                                    forEach(s, proxyStream);
                                    r.on("end", handleEnd);
                                    e.on("drain", (function() {
                                        t.emit("drain")
                                    }));
                                    e.on("error", reemit);
                                    r.on("error", reemit);
                                    t.writable = e.writable;
                                    t.readable = r.readable;
                                    return t;

                                    function proxyWriter(r) {
                                        t[r] = method;

                                        function method() {
                                            return e[r].apply(e, arguments)
                                        }
                                    }

                                    function proxyReader(e) {
                                        t[e] = method;

                                        function method() {
                                            t.emit(e);
                                            var n = r[e];
                                            if (n) {
                                                return n.apply(r, arguments)
                                            }
                                            r.emit(e)
                                        }
                                    }

                                    function proxyStream(e) {
                                        r.on(e, reemit);

                                        function reemit() {
                                            var r = c.call(arguments);
                                            r.unshift(e);
                                            t.emit.apply(t, r)
                                        }
                                    }

                                    function handleEnd() {
                                        if (a) {
                                            return
                                        }
                                        a = true;
                                        var e = c.call(arguments);
                                        e.unshift("end");
                                        t.emit.apply(t, e)
                                    }

                                    function reemit(e) {
                                        t.emit("error", e)
                                    }
                                }
                            },
                            349: (e, r, t) => {
                                "use strict";
                                const n = t(147);
                                const o = t(781);
                                const i = t(796);
                                const s = t(154);
                                const c = t(530);
                                const getOptions = e => Object.assign({
                                    level: 9
                                }, e);
                                e.exports = (e, r) => {
                                    if (!e) {
                                        return Promise.resolve(0)
                                    }
                                    return c(i.gzip)(e, getOptions(r)).then((e => e.length)).catch((e => 0))
                                };
                                e.exports.sync = (e, r) => i.gzipSync(e, getOptions(r)).length;
                                e.exports.stream = e => {
                                    const r = new o.PassThrough;
                                    const t = new o.PassThrough;
                                    const n = s(r, t);
                                    let c = 0;
                                    const a = i.createGzip(getOptions(e)).on("data", (e => {
                                        c += e.length
                                    })).on("error", (() => {
                                        n.gzipSize = 0
                                    })).on("end", (() => {
                                        n.gzipSize = c;
                                        n.emit("gzip-size", c);
                                        t.end()
                                    }));
                                    r.pipe(a);
                                    r.pipe(t, {
                                        end: false
                                    });
                                    return n
                                };
                                e.exports.file = (r, t) => new Promise(((o, i) => {
                                    const s = n.createReadStream(r);
                                    s.on("error", i);
                                    const c = s.pipe(e.exports.stream(t));
                                    c.on("error", i);
                                    c.on("gzip-size", o)
                                }));
                                e.exports.fileSync = (r, t) => e.exports.sync(n.readFileSync(r), t)
                            },
                            530: e => {
                                "use strict";
                                const processFn = (e, r) => function(...t) {
                                    const n = r.promiseModule;
                                    return new n(((n, o) => {
                                        if (r.multiArgs) {
                                            t.push(((...e) => {
                                                if (r.errorFirst) {
                                                    if (e[0]) {
                                                        o(e)
                                                    } else {
                                                        e.shift();
                                                        n(e)
                                                    }
                                                } else {
                                                    n(e)
                                                }
                                            }))
                                        } else if (r.errorFirst) {
                                            t.push(((e, r) => {
                                                if (e) {
                                                    o(e)
                                                } else {
                                                    n(r)
                                                }
                                            }))
                                        } else {
                                            t.push(n)
                                        }
                                        e.apply(this, t)
                                    }))
                                };
                                e.exports = (e, r) => {
                                    r = Object.assign({
                                        exclude: [/.+(Sync|Stream)$/],
                                        errorFirst: true,
                                        promiseModule: Promise
                                    }, r);
                                    const t = typeof e;
                                    if (!(e !== null && (t === "object" || t === "function"))) {
                                        throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${e===null?"null":t}\``)
                                    }
                                    const filter = e => {
                                        const match = r => typeof r === "string" ? e === r : r.test(e);
                                        return r.include ? r.include.some(match) : !r.exclude.some(match)
                                    };
                                    let n;
                                    if (t === "function") {
                                        n = function(...t) {
                                            return r.excludeMain ? e(...t) : processFn(e, r).apply(this, t)
                                        }
                                    } else {
                                        n = Object.create(Object.getPrototypeOf(e))
                                    }
                                    for (const t in e) {
                                        const o = e[t];
                                        n[t] = typeof o === "function" && filter(t) ? processFn(o, r) : o
                                    }
                                    return n
                                }
                            },
                            147: e => {
                                "use strict";
                                e.exports = __webpack_require__(1982)
                            },
                            781: e => {
                                "use strict";
                                e.exports = __webpack_require__(1888)
                            },
                            796: e => {
                                "use strict";
                                e.exports = __webpack_require__(1993)
                            }
                        };
                        var r = {};

                        function __nccwpck_require__(t) {
                            var n = r[t];
                            if (n !== undefined) {
                                return n.exports
                            }
                            var o = r[t] = {
                                exports: {}
                            };
                            var i = true;
                            try {
                                e[t](o, o.exports, __nccwpck_require__);
                                i = false
                            } finally {
                                if (i) delete r[t]
                            }
                            return o.exports
                        }
                        if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
                        var t = __nccwpck_require__(349);
                        module.exports = t
                    })();
                    /* WEBPACK VAR INJECTION */
                }.call(this, "/"))

                /***/
            }),

        /***/
        1982:
            /***/
            (function(module, exports) {



                /***/
            }),

        /***/
        1984:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }

                var Buffer = __webpack_require__(1850).Buffer;
                var util = __webpack_require__(1985);

                function copyBuffer(src, target, offset) {
                    src.copy(target, offset);
                }

                module.exports = function() {
                    function BufferList() {
                        _classCallCheck(this, BufferList);

                        this.head = null;
                        this.tail = null;
                        this.length = 0;
                    }

                    BufferList.prototype.push = function push(v) {
                        var entry = {
                            data: v,
                            next: null
                        };
                        if (this.length > 0) this.tail.next = entry;
                        else this.head = entry;
                        this.tail = entry;
                        ++this.length;
                    };

                    BufferList.prototype.unshift = function unshift(v) {
                        var entry = {
                            data: v,
                            next: this.head
                        };
                        if (this.length === 0) this.tail = entry;
                        this.head = entry;
                        ++this.length;
                    };

                    BufferList.prototype.shift = function shift() {
                        if (this.length === 0) return;
                        var ret = this.head.data;
                        if (this.length === 1) this.head = this.tail = null;
                        else this.head = this.head.next;
                        --this.length;
                        return ret;
                    };

                    BufferList.prototype.clear = function clear() {
                        this.head = this.tail = null;
                        this.length = 0;
                    };

                    BufferList.prototype.join = function join(s) {
                        if (this.length === 0) return '';
                        var p = this.head;
                        var ret = '' + p.data;
                        while (p = p.next) {
                            ret += s + p.data;
                        }
                        return ret;
                    };

                    BufferList.prototype.concat = function concat(n) {
                        if (this.length === 0) return Buffer.alloc(0);
                        var ret = Buffer.allocUnsafe(n >>> 0);
                        var p = this.head;
                        var i = 0;
                        while (p) {
                            copyBuffer(p.data, ret, i);
                            i += p.data.length;
                            p = p.next;
                        }
                        return ret;
                    };

                    return BufferList;
                }();

                if (util && util.inspect && util.inspect.custom) {
                    module.exports.prototype[util.inspect.custom] = function() {
                        var obj = util.inspect({
                            length: this.length
                        });
                        return this.constructor.name + ' ' + obj;
                    };
                }

                /***/
            }),

        /***/
        1986:
            /***/
            (function(module, exports, __webpack_require__) {

                /* WEBPACK VAR INJECTION */
                (function(global) {
                    /**
                     * Module exports.
                     */

                    module.exports = deprecate;

                    /**
                     * Mark that a method should not be used.
                     * Returns a modified function which warns once by default.
                     *
                     * If `localStorage.noDeprecation = true` is set, then it is a no-op.
                     *
                     * If `localStorage.throwDeprecation = true` is set, then deprecated functions
                     * will throw an Error when invoked.
                     *
                     * If `localStorage.traceDeprecation = true` is set, then deprecated functions
                     * will invoke `console.trace()` instead of `console.error()`.
                     *
                     * @param {Function} fn - the function to deprecate
                     * @param {String} msg - the string to print to the console when `fn` is invoked
                     * @returns {Function} a new "deprecated" version of `fn`
                     * @api public
                     */

                    function deprecate(fn, msg) {
                        if (config('noDeprecation')) {
                            return fn;
                        }

                        var warned = false;

                        function deprecated() {
                            if (!warned) {
                                if (config('throwDeprecation')) {
                                    throw new Error(msg);
                                } else if (config('traceDeprecation')) {
                                    console.trace(msg);
                                } else {
                                    console.warn(msg);
                                }
                                warned = true;
                            }
                            return fn.apply(this, arguments);
                        }

                        return deprecated;
                    }

                    /**
                     * Checks `localStorage` for boolean values for the given `name`.
                     *
                     * @param {String} name
                     * @returns {Boolean}
                     * @api private
                     */

                    function config(name) {
                        // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                        try {
                            if (!global.localStorage) return false;
                        } catch (_) {
                            return false;
                        }
                        var val = global.localStorage[name];
                        if (null == val) return false;
                        return String(val).toLowerCase() === 'true';
                    }

                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(68)))

                /***/
            }),

        /***/
        1987:
            /***/
            (function(module, exports, __webpack_require__) {

                /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
                /* eslint-disable node/no-deprecated-api */
                var buffer = __webpack_require__(1676)
                var Buffer = buffer.Buffer

                // alternative to using Object.keys for old browsers
                function copyProps(src, dst) {
                    for (var key in src) {
                        dst[key] = src[key]
                    }
                }
                if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
                    module.exports = buffer
                } else {
                    // Copy properties from require('buffer')
                    copyProps(buffer, exports)
                    exports.Buffer = SafeBuffer
                }

                function SafeBuffer(arg, encodingOrOffset, length) {
                    return Buffer(arg, encodingOrOffset, length)
                }

                SafeBuffer.prototype = Object.create(Buffer.prototype)

                // Copy static methods from Buffer
                copyProps(Buffer, SafeBuffer)

                SafeBuffer.from = function(arg, encodingOrOffset, length) {
                    if (typeof arg === 'number') {
                        throw new TypeError('Argument must not be a number')
                    }
                    return Buffer(arg, encodingOrOffset, length)
                }

                SafeBuffer.alloc = function(size, fill, encoding) {
                    if (typeof size !== 'number') {
                        throw new TypeError('Argument must be a number')
                    }
                    var buf = Buffer(size)
                    if (fill !== undefined) {
                        if (typeof encoding === 'string') {
                            buf.fill(fill, encoding)
                        } else {
                            buf.fill(fill)
                        }
                    } else {
                        buf.fill(0)
                    }
                    return buf
                }

                SafeBuffer.allocUnsafe = function(size) {
                    if (typeof size !== 'number') {
                        throw new TypeError('Argument must be a number')
                    }
                    return Buffer(size)
                }

                SafeBuffer.allocUnsafeSlow = function(size) {
                    if (typeof size !== 'number') {
                        throw new TypeError('Argument must be a number')
                    }
                    return buffer.SlowBuffer(size)
                }


                /***/
            }),

        /***/
        1988:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // a passthrough stream.
                // basically just the most minimal sort of Transform stream.
                // Every written chunk gets output as-is.



                module.exports = PassThrough;

                var Transform = __webpack_require__(1893);

                /*<replacement>*/
                var util = Object.create(__webpack_require__(1827));
                util.inherits = __webpack_require__(1824);
                /*</replacement>*/

                util.inherits(PassThrough, Transform);

                function PassThrough(options) {
                    if (!(this instanceof PassThrough)) return new PassThrough(options);

                    Transform.call(this, options);
                }

                PassThrough.prototype._transform = function(chunk, encoding, cb) {
                    cb(null, chunk);
                };

                /***/
            }),

        /***/
        1989:
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = __webpack_require__(1851);


                /***/
            }),

        /***/
        1990:
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = __webpack_require__(1822);


                /***/
            }),

        /***/
        1991:
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = __webpack_require__(1849).Transform


                /***/
            }),

        /***/
        1992:
            /***/
            (function(module, exports, __webpack_require__) {

                module.exports = __webpack_require__(1849).PassThrough


                /***/
            }),

        /***/
        1993:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /* WEBPACK VAR INJECTION */
                (function(process) {

                    var Buffer = __webpack_require__(1676).Buffer;
                    var Transform = __webpack_require__(1888).Transform;
                    var binding = __webpack_require__(1994);
                    var util = __webpack_require__(1899);
                    var assert = __webpack_require__(1894).ok;
                    var kMaxLength = __webpack_require__(1676).kMaxLength;
                    var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';

                    // zlib doesn't provide these, so kludge them in following the same
                    // const naming scheme zlib uses.
                    binding.Z_MIN_WINDOWBITS = 8;
                    binding.Z_MAX_WINDOWBITS = 15;
                    binding.Z_DEFAULT_WINDOWBITS = 15;

                    // fewer than 64 bytes per chunk is stupid.
                    // technically it could work with as few as 8, but even 64 bytes
                    // is absurdly low.  Usually a MB or more is best.
                    binding.Z_MIN_CHUNK = 64;
                    binding.Z_MAX_CHUNK = Infinity;
                    binding.Z_DEFAULT_CHUNK = 16 * 1024;

                    binding.Z_MIN_MEMLEVEL = 1;
                    binding.Z_MAX_MEMLEVEL = 9;
                    binding.Z_DEFAULT_MEMLEVEL = 8;

                    binding.Z_MIN_LEVEL = -1;
                    binding.Z_MAX_LEVEL = 9;
                    binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

                    // expose all the zlib constants
                    var bkeys = Object.keys(binding);
                    for (var bk = 0; bk < bkeys.length; bk++) {
                        var bkey = bkeys[bk];
                        if (bkey.match(/^Z/)) {
                            Object.defineProperty(exports, bkey, {
                                enumerable: true,
                                value: binding[bkey],
                                writable: false
                            });
                        }
                    }

                    // translation table for return codes.
                    var codes = {
                        Z_OK: binding.Z_OK,
                        Z_STREAM_END: binding.Z_STREAM_END,
                        Z_NEED_DICT: binding.Z_NEED_DICT,
                        Z_ERRNO: binding.Z_ERRNO,
                        Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
                        Z_DATA_ERROR: binding.Z_DATA_ERROR,
                        Z_MEM_ERROR: binding.Z_MEM_ERROR,
                        Z_BUF_ERROR: binding.Z_BUF_ERROR,
                        Z_VERSION_ERROR: binding.Z_VERSION_ERROR
                    };

                    var ckeys = Object.keys(codes);
                    for (var ck = 0; ck < ckeys.length; ck++) {
                        var ckey = ckeys[ck];
                        codes[codes[ckey]] = ckey;
                    }

                    Object.defineProperty(exports, 'codes', {
                        enumerable: true,
                        value: Object.freeze(codes),
                        writable: false
                    });

                    exports.Deflate = Deflate;
                    exports.Inflate = Inflate;
                    exports.Gzip = Gzip;
                    exports.Gunzip = Gunzip;
                    exports.DeflateRaw = DeflateRaw;
                    exports.InflateRaw = InflateRaw;
                    exports.Unzip = Unzip;

                    exports.createDeflate = function(o) {
                        return new Deflate(o);
                    };

                    exports.createInflate = function(o) {
                        return new Inflate(o);
                    };

                    exports.createDeflateRaw = function(o) {
                        return new DeflateRaw(o);
                    };

                    exports.createInflateRaw = function(o) {
                        return new InflateRaw(o);
                    };

                    exports.createGzip = function(o) {
                        return new Gzip(o);
                    };

                    exports.createGunzip = function(o) {
                        return new Gunzip(o);
                    };

                    exports.createUnzip = function(o) {
                        return new Unzip(o);
                    };

                    // Convenience methods.
                    // compress/decompress a string or buffer in one step.
                    exports.deflate = function(buffer, opts, callback) {
                        if (typeof opts === 'function') {
                            callback = opts;
                            opts = {};
                        }
                        return zlibBuffer(new Deflate(opts), buffer, callback);
                    };

                    exports.deflateSync = function(buffer, opts) {
                        return zlibBufferSync(new Deflate(opts), buffer);
                    };

                    exports.gzip = function(buffer, opts, callback) {
                        if (typeof opts === 'function') {
                            callback = opts;
                            opts = {};
                        }
                        return zlibBuffer(new Gzip(opts), buffer, callback);
                    };

                    exports.gzipSync = function(buffer, opts) {
                        return zlibBufferSync(new Gzip(opts), buffer);
                    };

                    exports.deflateRaw = function(buffer, opts, callback) {
                        if (typeof opts === 'function') {
                            callback = opts;
                            opts = {};
                        }
                        return zlibBuffer(new DeflateRaw(opts), buffer, callback);
                    };

                    exports.deflateRawSync = function(buffer, opts) {
                        return zlibBufferSync(new DeflateRaw(opts), buffer);
                    };

                    exports.unzip = function(buffer, opts, callback) {
                        if (typeof opts === 'function') {
                            callback = opts;
                            opts = {};
                        }
                        return zlibBuffer(new Unzip(opts), buffer, callback);
                    };

                    exports.unzipSync = function(buffer, opts) {
                        return zlibBufferSync(new Unzip(opts), buffer);
                    };

                    exports.inflate = function(buffer, opts, callback) {
                        if (typeof opts === 'function') {
                            callback = opts;
                            opts = {};
                        }
                        return zlibBuffer(new Inflate(opts), buffer, callback);
                    };

                    exports.inflateSync = function(buffer, opts) {
                        return zlibBufferSync(new Inflate(opts), buffer);
                    };

                    exports.gunzip = function(buffer, opts, callback) {
                        if (typeof opts === 'function') {
                            callback = opts;
                            opts = {};
                        }
                        return zlibBuffer(new Gunzip(opts), buffer, callback);
                    };

                    exports.gunzipSync = function(buffer, opts) {
                        return zlibBufferSync(new Gunzip(opts), buffer);
                    };

                    exports.inflateRaw = function(buffer, opts, callback) {
                        if (typeof opts === 'function') {
                            callback = opts;
                            opts = {};
                        }
                        return zlibBuffer(new InflateRaw(opts), buffer, callback);
                    };

                    exports.inflateRawSync = function(buffer, opts) {
                        return zlibBufferSync(new InflateRaw(opts), buffer);
                    };

                    function zlibBuffer(engine, buffer, callback) {
                        var buffers = [];
                        var nread = 0;

                        engine.on('error', onError);
                        engine.on('end', onEnd);

                        engine.end(buffer);
                        flow();

                        function flow() {
                            var chunk;
                            while (null !== (chunk = engine.read())) {
                                buffers.push(chunk);
                                nread += chunk.length;
                            }
                            engine.once('readable', flow);
                        }

                        function onError(err) {
                            engine.removeListener('end', onEnd);
                            engine.removeListener('readable', flow);
                            callback(err);
                        }

                        function onEnd() {
                            var buf;
                            var err = null;

                            if (nread >= kMaxLength) {
                                err = new RangeError(kRangeErrorMessage);
                            } else {
                                buf = Buffer.concat(buffers, nread);
                            }

                            buffers = [];
                            engine.close();
                            callback(err, buf);
                        }
                    }

                    function zlibBufferSync(engine, buffer) {
                        if (typeof buffer === 'string') buffer = Buffer.from(buffer);

                        if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');

                        var flushFlag = engine._finishFlushFlag;

                        return engine._processChunk(buffer, flushFlag);
                    }

                    // generic zlib
                    // minimal 2-byte header
                    function Deflate(opts) {
                        if (!(this instanceof Deflate)) return new Deflate(opts);
                        Zlib.call(this, opts, binding.DEFLATE);
                    }

                    function Inflate(opts) {
                        if (!(this instanceof Inflate)) return new Inflate(opts);
                        Zlib.call(this, opts, binding.INFLATE);
                    }

                    // gzip - bigger header, same deflate compression
                    function Gzip(opts) {
                        if (!(this instanceof Gzip)) return new Gzip(opts);
                        Zlib.call(this, opts, binding.GZIP);
                    }

                    function Gunzip(opts) {
                        if (!(this instanceof Gunzip)) return new Gunzip(opts);
                        Zlib.call(this, opts, binding.GUNZIP);
                    }

                    // raw - no header
                    function DeflateRaw(opts) {
                        if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
                        Zlib.call(this, opts, binding.DEFLATERAW);
                    }

                    function InflateRaw(opts) {
                        if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
                        Zlib.call(this, opts, binding.INFLATERAW);
                    }

                    // auto-detect header.
                    function Unzip(opts) {
                        if (!(this instanceof Unzip)) return new Unzip(opts);
                        Zlib.call(this, opts, binding.UNZIP);
                    }

                    function isValidFlushFlag(flag) {
                        return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
                    }

                    // the Zlib class they all inherit from
                    // This thing manages the queue of requests, and returns
                    // true or false if there is anything in the queue when
                    // you call the .write() method.

                    function Zlib(opts, mode) {
                        var _this = this;

                        this._opts = opts = opts || {};
                        this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

                        Transform.call(this, opts);

                        if (opts.flush && !isValidFlushFlag(opts.flush)) {
                            throw new Error('Invalid flush flag: ' + opts.flush);
                        }
                        if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
                            throw new Error('Invalid flush flag: ' + opts.finishFlush);
                        }

                        this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
                        this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

                        if (opts.chunkSize) {
                            if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
                                throw new Error('Invalid chunk size: ' + opts.chunkSize);
                            }
                        }

                        if (opts.windowBits) {
                            if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
                                throw new Error('Invalid windowBits: ' + opts.windowBits);
                            }
                        }

                        if (opts.level) {
                            if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
                                throw new Error('Invalid compression level: ' + opts.level);
                            }
                        }

                        if (opts.memLevel) {
                            if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
                                throw new Error('Invalid memLevel: ' + opts.memLevel);
                            }
                        }

                        if (opts.strategy) {
                            if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
                                throw new Error('Invalid strategy: ' + opts.strategy);
                            }
                        }

                        if (opts.dictionary) {
                            if (!Buffer.isBuffer(opts.dictionary)) {
                                throw new Error('Invalid dictionary: it should be a Buffer instance');
                            }
                        }

                        this._handle = new binding.Zlib(mode);

                        var self = this;
                        this._hadError = false;
                        this._handle.onerror = function(message, errno) {
                            // there is no way to cleanly recover.
                            // continuing only obscures problems.
                            _close(self);
                            self._hadError = true;

                            var error = new Error(message);
                            error.errno = errno;
                            error.code = exports.codes[errno];
                            self.emit('error', error);
                        };

                        var level = exports.Z_DEFAULT_COMPRESSION;
                        if (typeof opts.level === 'number') level = opts.level;

                        var strategy = exports.Z_DEFAULT_STRATEGY;
                        if (typeof opts.strategy === 'number') strategy = opts.strategy;

                        this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

                        this._buffer = Buffer.allocUnsafe(this._chunkSize);
                        this._offset = 0;
                        this._level = level;
                        this._strategy = strategy;

                        this.once('end', this.close);

                        Object.defineProperty(this, '_closed', {
                            get: function() {
                                return !_this._handle;
                            },
                            configurable: true,
                            enumerable: true
                        });
                    }

                    util.inherits(Zlib, Transform);

                    Zlib.prototype.params = function(level, strategy, callback) {
                        if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
                            throw new RangeError('Invalid compression level: ' + level);
                        }
                        if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
                            throw new TypeError('Invalid strategy: ' + strategy);
                        }

                        if (this._level !== level || this._strategy !== strategy) {
                            var self = this;
                            this.flush(binding.Z_SYNC_FLUSH, function() {
                                assert(self._handle, 'zlib binding closed');
                                self._handle.params(level, strategy);
                                if (!self._hadError) {
                                    self._level = level;
                                    self._strategy = strategy;
                                    if (callback) callback();
                                }
                            });
                        } else {
                            process.nextTick(callback);
                        }
                    };

                    Zlib.prototype.reset = function() {
                        assert(this._handle, 'zlib binding closed');
                        return this._handle.reset();
                    };

                    // This is the _flush function called by the transform class,
                    // internally, when the last chunk has been written.
                    Zlib.prototype._flush = function(callback) {
                        this._transform(Buffer.alloc(0), '', callback);
                    };

                    Zlib.prototype.flush = function(kind, callback) {
                        var _this2 = this;

                        var ws = this._writableState;

                        if (typeof kind === 'function' || kind === undefined && !callback) {
                            callback = kind;
                            kind = binding.Z_FULL_FLUSH;
                        }

                        if (ws.ended) {
                            if (callback) process.nextTick(callback);
                        } else if (ws.ending) {
                            if (callback) this.once('end', callback);
                        } else if (ws.needDrain) {
                            if (callback) {
                                this.once('drain', function() {
                                    return _this2.flush(kind, callback);
                                });
                            }
                        } else {
                            this._flushFlag = kind;
                            this.write(Buffer.alloc(0), '', callback);
                        }
                    };

                    Zlib.prototype.close = function(callback) {
                        _close(this, callback);
                        process.nextTick(emitCloseNT, this);
                    };

                    function _close(engine, callback) {
                        if (callback) process.nextTick(callback);

                        // Caller may invoke .close after a zlib error (which will null _handle).
                        if (!engine._handle) return;

                        engine._handle.close();
                        engine._handle = null;
                    }

                    function emitCloseNT(self) {
                        self.emit('close');
                    }

                    Zlib.prototype._transform = function(chunk, encoding, cb) {
                        var flushFlag;
                        var ws = this._writableState;
                        var ending = ws.ending || ws.ended;
                        var last = ending && (!chunk || ws.length === chunk.length);

                        if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));

                        if (!this._handle) return cb(new Error('zlib binding closed'));

                        // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
                        // (or whatever flag was provided using opts.finishFlush).
                        // If it's explicitly flushing at some other time, then we use
                        // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
                        // goodness.
                        if (last) flushFlag = this._finishFlushFlag;
                        else {
                            flushFlag = this._flushFlag;
                            // once we've flushed the last of the queue, stop flushing and
                            // go back to the normal behavior.
                            if (chunk.length >= ws.length) {
                                this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
                            }
                        }

                        this._processChunk(chunk, flushFlag, cb);
                    };

                    Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
                        var availInBefore = chunk && chunk.length;
                        var availOutBefore = this._chunkSize - this._offset;
                        var inOff = 0;

                        var self = this;

                        var async = typeof cb === 'function';

                        if (!async) {
                            var buffers = [];
                            var nread = 0;

                            var error;
                            this.on('error', function(er) {
                                error = er;
                            });

                            assert(this._handle, 'zlib binding closed');
                            do {
                                var res = this._handle.writeSync(flushFlag, chunk, // in
                                    inOff, // in_off
                                    availInBefore, // in_len
                                    this._buffer, // out
                                    this._offset, //out_off
                                    availOutBefore); // out_len
                            } while (!this._hadError && callback(res[0], res[1]));

                            if (this._hadError) {
                                throw error;
                            }

                            if (nread >= kMaxLength) {
                                _close(this);
                                throw new RangeError(kRangeErrorMessage);
                            }

                            var buf = Buffer.concat(buffers, nread);
                            _close(this);

                            return buf;
                        }

                        assert(this._handle, 'zlib binding closed');
                        var req = this._handle.write(flushFlag, chunk, // in
                            inOff, // in_off
                            availInBefore, // in_len
                            this._buffer, // out
                            this._offset, //out_off
                            availOutBefore); // out_len

                        req.buffer = chunk;
                        req.callback = callback;

                        function callback(availInAfter, availOutAfter) {
                            // When the callback is used in an async write, the callback's
                            // context is the `req` object that was created. The req object
                            // is === this._handle, and that's why it's important to null
                            // out the values after they are done being used. `this._handle`
                            // can stay in memory longer than the callback and buffer are needed.
                            if (this) {
                                this.buffer = null;
                                this.callback = null;
                            }

                            if (self._hadError) return;

                            var have = availOutBefore - availOutAfter;
                            assert(have >= 0, 'have should not go down');

                            if (have > 0) {
                                var out = self._buffer.slice(self._offset, self._offset + have);
                                self._offset += have;
                                // serve some output to the consumer.
                                if (async) {
                                    self.push(out);
                                } else {
                                    buffers.push(out);
                                    nread += out.length;
                                }
                            }

                            // exhausted the output buffer, or used all the input create a new one.
                            if (availOutAfter === 0 || self._offset >= self._chunkSize) {
                                availOutBefore = self._chunkSize;
                                self._offset = 0;
                                self._buffer = Buffer.allocUnsafe(self._chunkSize);
                            }

                            if (availOutAfter === 0) {
                                // Not actually done.  Need to reprocess.
                                // Also, update the availInBefore to the availInAfter value,
                                // so that if we have to hit it a third (fourth, etc.) time,
                                // it'll have the correct byte counts.
                                inOff += availInBefore - availInAfter;
                                availInBefore = availInAfter;

                                if (!async) return true;

                                var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
                                newReq.callback = callback; // this same function
                                newReq.buffer = chunk;
                                return;
                            }

                            if (!async) return false;

                            // finished with the chunk.
                            cb();
                        }
                    };

                    util.inherits(Deflate, Zlib);
                    util.inherits(Inflate, Zlib);
                    util.inherits(Gzip, Zlib);
                    util.inherits(Gunzip, Zlib);
                    util.inherits(DeflateRaw, Zlib);
                    util.inherits(InflateRaw, Zlib);
                    util.inherits(Unzip, Zlib);
                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(123)))

                /***/
            }),

        /***/
        1994:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";
                /* WEBPACK VAR INJECTION */
                (function(Buffer, process) {
                    /* eslint camelcase: "off" */

                    var assert = __webpack_require__(1894);

                    var Zstream = __webpack_require__(2015);
                    var zlib_deflate = __webpack_require__(2016);
                    var zlib_inflate = __webpack_require__(2019);
                    var constants = __webpack_require__(2022);

                    for (var key in constants) {
                        exports[key] = constants[key];
                    }

                    // zlib modes
                    exports.NONE = 0;
                    exports.DEFLATE = 1;
                    exports.INFLATE = 2;
                    exports.GZIP = 3;
                    exports.GUNZIP = 4;
                    exports.DEFLATERAW = 5;
                    exports.INFLATERAW = 6;
                    exports.UNZIP = 7;

                    var GZIP_HEADER_ID1 = 0x1f;
                    var GZIP_HEADER_ID2 = 0x8b;

                    /**
                     * Emulate Node's zlib C++ layer for use by the JS layer in index.js
                     */
                    function Zlib(mode) {
                        if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
                            throw new TypeError('Bad argument');
                        }

                        this.dictionary = null;
                        this.err = 0;
                        this.flush = 0;
                        this.init_done = false;
                        this.level = 0;
                        this.memLevel = 0;
                        this.mode = mode;
                        this.strategy = 0;
                        this.windowBits = 0;
                        this.write_in_progress = false;
                        this.pending_close = false;
                        this.gzip_id_bytes_read = 0;
                    }

                    Zlib.prototype.close = function() {
                        if (this.write_in_progress) {
                            this.pending_close = true;
                            return;
                        }

                        this.pending_close = false;

                        assert(this.init_done, 'close before init');
                        assert(this.mode <= exports.UNZIP);

                        if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
                            zlib_deflate.deflateEnd(this.strm);
                        } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
                            zlib_inflate.inflateEnd(this.strm);
                        }

                        this.mode = exports.NONE;

                        this.dictionary = null;
                    };

                    Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {
                        return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
                    };

                    Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
                        return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
                    };

                    Zlib.prototype._write = function(async, flush, input, in_off, in_len, out, out_off, out_len) {
                        assert.equal(arguments.length, 8);

                        assert(this.init_done, 'write before init');
                        assert(this.mode !== exports.NONE, 'already finalized');
                        assert.equal(false, this.write_in_progress, 'write already in progress');
                        assert.equal(false, this.pending_close, 'close is pending');

                        this.write_in_progress = true;

                        assert.equal(false, flush === undefined, 'must provide flush value');

                        this.write_in_progress = true;

                        if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
                            throw new Error('Invalid flush value');
                        }

                        if (input == null) {
                            input = Buffer.alloc(0);
                            in_len = 0;
                            in_off = 0;
                        }

                        this.strm.avail_in = in_len;
                        this.strm.input = input;
                        this.strm.next_in = in_off;
                        this.strm.avail_out = out_len;
                        this.strm.output = out;
                        this.strm.next_out = out_off;
                        this.flush = flush;

                        if (!async) {
                            // sync version
                            this._process();

                            if (this._checkError()) {
                                return this._afterSync();
                            }
                            return;
                        }

                        // async version
                        var self = this;
                        process.nextTick(function() {
                            self._process();
                            self._after();
                        });

                        return this;
                    };

                    Zlib.prototype._afterSync = function() {
                        var avail_out = this.strm.avail_out;
                        var avail_in = this.strm.avail_in;

                        this.write_in_progress = false;

                        return [avail_in, avail_out];
                    };

                    Zlib.prototype._process = function() {
                        var next_expected_header_byte = null;

                        // If the avail_out is left at 0, then it means that it ran out
                        // of room.  If there was avail_out left over, then it means
                        // that all of the input was consumed.
                        switch (this.mode) {
                            case exports.DEFLATE:
                            case exports.GZIP:
                            case exports.DEFLATERAW:
                                this.err = zlib_deflate.deflate(this.strm, this.flush);
                                break;
                            case exports.UNZIP:
                                if (this.strm.avail_in > 0) {
                                    next_expected_header_byte = this.strm.next_in;
                                }

                                switch (this.gzip_id_bytes_read) {
                                    case 0:
                                        if (next_expected_header_byte === null) {
                                            break;
                                        }

                                        if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
                                            this.gzip_id_bytes_read = 1;
                                            next_expected_header_byte++;

                                            if (this.strm.avail_in === 1) {
                                                // The only available byte was already read.
                                                break;
                                            }
                                        } else {
                                            this.mode = exports.INFLATE;
                                            break;
                                        }

                                        // fallthrough
                                    case 1:
                                        if (next_expected_header_byte === null) {
                                            break;
                                        }

                                        if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
                                            this.gzip_id_bytes_read = 2;
                                            this.mode = exports.GUNZIP;
                                        } else {
                                            // There is no actual difference between INFLATE and INFLATERAW
                                            // (after initialization).
                                            this.mode = exports.INFLATE;
                                        }

                                        break;
                                    default:
                                        throw new Error('invalid number of gzip magic number bytes read');
                                }

                                // fallthrough
                            case exports.INFLATE:
                            case exports.GUNZIP:
                            case exports.INFLATERAW:
                                this.err = zlib_inflate.inflate(this.strm, this.flush

                                    // If data was encoded with dictionary
                                );
                                if (this.err === exports.Z_NEED_DICT && this.dictionary) {
                                    // Load it
                                    this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
                                    if (this.err === exports.Z_OK) {
                                        // And try to decode again
                                        this.err = zlib_inflate.inflate(this.strm, this.flush);
                                    } else if (this.err === exports.Z_DATA_ERROR) {
                                        // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
                                        // Make it possible for After() to tell a bad dictionary from bad
                                        // input.
                                        this.err = exports.Z_NEED_DICT;
                                    }
                                }
                                while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
                                    // Bytes remain in input buffer. Perhaps this is another compressed
                                    // member in the same archive, or just trailing garbage.
                                    // Trailing zero bytes are okay, though, since they are frequently
                                    // used for padding.

                                    this.reset();
                                    this.err = zlib_inflate.inflate(this.strm, this.flush);
                                }
                                break;
                            default:
                                throw new Error('Unknown mode ' + this.mode);
                        }
                    };

                    Zlib.prototype._checkError = function() {
                        // Acceptable error states depend on the type of zlib stream.
                        switch (this.err) {
                            case exports.Z_OK:
                            case exports.Z_BUF_ERROR:
                                if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
                                    this._error('unexpected end of file');
                                    return false;
                                }
                                break;
                            case exports.Z_STREAM_END:
                                // normal statuses, not fatal
                                break;
                            case exports.Z_NEED_DICT:
                                if (this.dictionary == null) {
                                    this._error('Missing dictionary');
                                } else {
                                    this._error('Bad dictionary');
                                }
                                return false;
                            default:
                                // something else.
                                this._error('Zlib error');
                                return false;
                        }

                        return true;
                    };

                    Zlib.prototype._after = function() {
                        if (!this._checkError()) {
                            return;
                        }

                        var avail_out = this.strm.avail_out;
                        var avail_in = this.strm.avail_in;

                        this.write_in_progress = false;

                        // call the write() cb
                        this.callback(avail_in, avail_out);

                        if (this.pending_close) {
                            this.close();
                        }
                    };

                    Zlib.prototype._error = function(message) {
                        if (this.strm.msg) {
                            message = this.strm.msg;
                        }
                        this.onerror(message, this.err

                            // no hope of rescue.
                        );
                        this.write_in_progress = false;
                        if (this.pending_close) {
                            this.close();
                        }
                    };

                    Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
                        assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');

                        assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
                        assert(level >= -1 && level <= 9, 'invalid compression level');

                        assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');

                        assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');

                        this._init(level, windowBits, memLevel, strategy, dictionary);
                        this._setDictionary();
                    };

                    Zlib.prototype.params = function() {
                        throw new Error('deflateParams Not supported');
                    };

                    Zlib.prototype.reset = function() {
                        this._reset();
                        this._setDictionary();
                    };

                    Zlib.prototype._init = function(level, windowBits, memLevel, strategy, dictionary) {
                        this.level = level;
                        this.windowBits = windowBits;
                        this.memLevel = memLevel;
                        this.strategy = strategy;

                        this.flush = exports.Z_NO_FLUSH;

                        this.err = exports.Z_OK;

                        if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
                            this.windowBits += 16;
                        }

                        if (this.mode === exports.UNZIP) {
                            this.windowBits += 32;
                        }

                        if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
                            this.windowBits = -1 * this.windowBits;
                        }

                        this.strm = new Zstream();

                        switch (this.mode) {
                            case exports.DEFLATE:
                            case exports.GZIP:
                            case exports.DEFLATERAW:
                                this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
                                break;
                            case exports.INFLATE:
                            case exports.GUNZIP:
                            case exports.INFLATERAW:
                            case exports.UNZIP:
                                this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
                                break;
                            default:
                                throw new Error('Unknown mode ' + this.mode);
                        }

                        if (this.err !== exports.Z_OK) {
                            this._error('Init error');
                        }

                        this.dictionary = dictionary;

                        this.write_in_progress = false;
                        this.init_done = true;
                    };

                    Zlib.prototype._setDictionary = function() {
                        if (this.dictionary == null) {
                            return;
                        }

                        this.err = exports.Z_OK;

                        switch (this.mode) {
                            case exports.DEFLATE:
                            case exports.DEFLATERAW:
                                this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
                                break;
                            default:
                                break;
                        }

                        if (this.err !== exports.Z_OK) {
                            this._error('Failed to set dictionary');
                        }
                    };

                    Zlib.prototype._reset = function() {
                        this.err = exports.Z_OK;

                        switch (this.mode) {
                            case exports.DEFLATE:
                            case exports.DEFLATERAW:
                            case exports.GZIP:
                                this.err = zlib_deflate.deflateReset(this.strm);
                                break;
                            case exports.INFLATE:
                            case exports.INFLATERAW:
                            case exports.GUNZIP:
                                this.err = zlib_inflate.inflateReset(this.strm);
                                break;
                            default:
                                break;
                        }

                        if (this.err !== exports.Z_OK) {
                            this._error('Failed to reset stream');
                        }
                    };

                    exports.Zlib = Zlib;
                    /* WEBPACK VAR INJECTION */
                }.call(this, __webpack_require__(1676).Buffer, __webpack_require__(123)))

                /***/
            }),

        /***/
        1995:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var implementation = __webpack_require__(1996);

                var lacksProperEnumerationOrder = function() {
                    if (!Object.assign) {
                        return false;
                    }
                    /*
                     * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
                     * note: this does not detect the bug unless there's 20 characters
                     */
                    var str = 'abcdefghijklmnopqrst';
                    var letters = str.split('');
                    var map = {};
                    for (var i = 0; i < letters.length; ++i) {
                        map[letters[i]] = letters[i];
                    }
                    var obj = Object.assign({}, map);
                    var actual = '';
                    for (var k in obj) {
                        actual += k;
                    }
                    return str !== actual;
                };

                var assignHasPendingExceptions = function() {
                    if (!Object.assign || !Object.preventExtensions) {
                        return false;
                    }
                    /*
                     * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
                     * which is 72% slower than our shim, and Firefox 40's native implementation.
                     */
                    var thrower = Object.preventExtensions({
                        1: 2
                    });
                    try {
                        Object.assign(thrower, 'xy');
                    } catch (e) {
                        return thrower[1] === 'y';
                    }
                    return false;
                };

                module.exports = function getPolyfill() {
                    if (!Object.assign) {
                        return implementation;
                    }
                    if (lacksProperEnumerationOrder()) {
                        return implementation;
                    }
                    if (assignHasPendingExceptions()) {
                        return implementation;
                    }
                    return Object.assign;
                };


                /***/
            }),

        /***/
        1996:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // modified from https://github.com/es-shims/es6-shim
                var objectKeys = __webpack_require__(1997);
                var hasSymbols = __webpack_require__(1896)();
                var callBound = __webpack_require__(1999);
                var toObject = Object;
                var $push = callBound('Array.prototype.push');
                var $propIsEnumerable = callBound('Object.prototype.propertyIsEnumerable');
                var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;

                // eslint-disable-next-line no-unused-vars
                module.exports = function assign(target, source1) {
                    if (target == null) {
                        throw new TypeError('target must be an object');
                    }
                    var to = toObject(target); // step 1
                    if (arguments.length === 1) {
                        return to; // step 2
                    }
                    for (var s = 1; s < arguments.length; ++s) {
                        var from = toObject(arguments[s]); // step 3.a.i

                        // step 3.a.ii:
                        var keys = objectKeys(from);
                        var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
                        if (getSymbols) {
                            var syms = getSymbols(from);
                            for (var j = 0; j < syms.length; ++j) {
                                var key = syms[j];
                                if ($propIsEnumerable(from, key)) {
                                    $push(keys, key);
                                }
                            }
                        }

                        // step 3.a.iii:
                        for (var i = 0; i < keys.length; ++i) {
                            var nextKey = keys[i];
                            if ($propIsEnumerable(from, nextKey)) { // step 3.a.iii.2
                                var propValue = from[nextKey]; // step 3.a.iii.2.a
                                to[nextKey] = propValue; // step 3.a.iii.2.b
                            }
                        }
                    }

                    return to; // step 4
                };


                /***/
            }),

        /***/
        1997:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var slice = Array.prototype.slice;
                var isArgs = __webpack_require__(1895);

                var origKeys = Object.keys;
                var keysShim = origKeys ? function keys(o) {
                    return origKeys(o);
                } : __webpack_require__(1998);

                var originalKeys = Object.keys;

                keysShim.shim = function shimObjectKeys() {
                    if (Object.keys) {
                        var keysWorksWithArguments = (function() {
                            // Safari 5.0 bug
                            var args = Object.keys(arguments);
                            return args && args.length === arguments.length;
                        }(1, 2));
                        if (!keysWorksWithArguments) {
                            Object.keys = function keys(object) { // eslint-disable-line func-name-matching
                                if (isArgs(object)) {
                                    return originalKeys(slice.call(object));
                                }
                                return originalKeys(object);
                            };
                        }
                    } else {
                        Object.keys = keysShim;
                    }
                    return Object.keys || keysShim;
                };

                module.exports = keysShim;


                /***/
            }),

        /***/
        1998:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var keysShim;
                if (!Object.keys) {
                    // modified from https://github.com/es-shims/es5-shim
                    var has = Object.prototype.hasOwnProperty;
                    var toStr = Object.prototype.toString;
                    var isArgs = __webpack_require__(1895); // eslint-disable-line global-require
                    var isEnumerable = Object.prototype.propertyIsEnumerable;
                    var hasDontEnumBug = !isEnumerable.call({
                        toString: null
                    }, 'toString');
                    var hasProtoEnumBug = isEnumerable.call(function() {}, 'prototype');
                    var dontEnums = [
                        'toString',
                        'toLocaleString',
                        'valueOf',
                        'hasOwnProperty',
                        'isPrototypeOf',
                        'propertyIsEnumerable',
                        'constructor'
                    ];
                    var equalsConstructorPrototype = function(o) {
                        var ctor = o.constructor;
                        return ctor && ctor.prototype === o;
                    };
                    var excludedKeys = {
                        $applicationCache: true,
                        $console: true,
                        $external: true,
                        $frame: true,
                        $frameElement: true,
                        $frames: true,
                        $innerHeight: true,
                        $innerWidth: true,
                        $onmozfullscreenchange: true,
                        $onmozfullscreenerror: true,
                        $outerHeight: true,
                        $outerWidth: true,
                        $pageXOffset: true,
                        $pageYOffset: true,
                        $parent: true,
                        $scrollLeft: true,
                        $scrollTop: true,
                        $scrollX: true,
                        $scrollY: true,
                        $self: true,
                        $webkitIndexedDB: true,
                        $webkitStorageInfo: true,
                        $window: true
                    };
                    var hasAutomationEqualityBug = (function() {
                        /* global window */
                        if (typeof window === 'undefined') {
                            return false;
                        }
                        for (var k in window) {
                            try {
                                if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                                    try {
                                        equalsConstructorPrototype(window[k]);
                                    } catch (e) {
                                        return true;
                                    }
                                }
                            } catch (e) {
                                return true;
                            }
                        }
                        return false;
                    }());
                    var equalsConstructorPrototypeIfNotBuggy = function(o) {
                        /* global window */
                        if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                            return equalsConstructorPrototype(o);
                        }
                        try {
                            return equalsConstructorPrototype(o);
                        } catch (e) {
                            return false;
                        }
                    };

                    keysShim = function keys(object) {
                        var isObject = object !== null && typeof object === 'object';
                        var isFunction = toStr.call(object) === '[object Function]';
                        var isArguments = isArgs(object);
                        var isString = isObject && toStr.call(object) === '[object String]';
                        var theKeys = [];

                        if (!isObject && !isFunction && !isArguments) {
                            throw new TypeError('Object.keys called on a non-object');
                        }

                        var skipProto = hasProtoEnumBug && isFunction;
                        if (isString && object.length > 0 && !has.call(object, 0)) {
                            for (var i = 0; i < object.length; ++i) {
                                theKeys.push(String(i));
                            }
                        }

                        if (isArguments && object.length > 0) {
                            for (var j = 0; j < object.length; ++j) {
                                theKeys.push(String(j));
                            }
                        } else {
                            for (var name in object) {
                                if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                                    theKeys.push(String(name));
                                }
                            }
                        }

                        if (hasDontEnumBug) {
                            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

                            for (var k = 0; k < dontEnums.length; ++k) {
                                if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                                    theKeys.push(dontEnums[k]);
                                }
                            }
                        }
                        return theKeys;
                    };
                }
                module.exports = keysShim;


                /***/
            }),

        /***/
        1999:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var GetIntrinsic = __webpack_require__(1828);

                var callBind = __webpack_require__(2009);

                var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

                module.exports = function callBoundIntrinsic(name, allowMissing) {
                    var intrinsic = GetIntrinsic(name, !!allowMissing);
                    if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
                        return callBind(intrinsic);
                    }
                    return intrinsic;
                };


                /***/
            }),

        /***/
        2000:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /** @type {import('.')} */
                module.exports = Error;


                /***/
            }),

        /***/
        2001:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /** @type {import('./eval')} */
                module.exports = EvalError;


                /***/
            }),

        /***/
        2002:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /** @type {import('./range')} */
                module.exports = RangeError;


                /***/
            }),

        /***/
        2003:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /** @type {import('./ref')} */
                module.exports = ReferenceError;


                /***/
            }),

        /***/
        2004:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /** @type {import('./uri')} */
                module.exports = URIError;


                /***/
            }),

        /***/
        2005:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var origSymbol = typeof Symbol !== 'undefined' && Symbol;
                var hasSymbolSham = __webpack_require__(1896);

                module.exports = function hasNativeSymbols() {
                    if (typeof origSymbol !== 'function') {
                        return false;
                    }
                    if (typeof Symbol !== 'function') {
                        return false;
                    }
                    if (typeof origSymbol('foo') !== 'symbol') {
                        return false;
                    }
                    if (typeof Symbol('bar') !== 'symbol') {
                        return false;
                    }

                    return hasSymbolSham();
                };


                /***/
            }),

        /***/
        2006:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var test = {
                    __proto__: null,
                    foo: {}
                };

                var $Object = Object;

                /** @type {import('.')} */
                module.exports = function hasProto() {
                    // @ts-expect-error: TS errors on an inherited property for some reason
                    return {
                        __proto__: test
                    }.foo === test.foo &&
                        !(test instanceof $Object);
                };


                /***/
            }),

        /***/
        2007:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                /* eslint no-invalid-this: 1 */

                var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
                var toStr = Object.prototype.toString;
                var max = Math.max;
                var funcType = '[object Function]';

                var concatty = function concatty(a, b) {
                    var arr = [];

                    for (var i = 0; i < a.length; i += 1) {
                        arr[i] = a[i];
                    }
                    for (var j = 0; j < b.length; j += 1) {
                        arr[j + a.length] = b[j];
                    }

                    return arr;
                };

                var slicy = function slicy(arrLike, offset) {
                    var arr = [];
                    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
                        arr[j] = arrLike[i];
                    }
                    return arr;
                };

                var joiny = function(arr, joiner) {
                    var str = '';
                    for (var i = 0; i < arr.length; i += 1) {
                        str += arr[i];
                        if (i + 1 < arr.length) {
                            str += joiner;
                        }
                    }
                    return str;
                };

                module.exports = function bind(that) {
                    var target = this;
                    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
                        throw new TypeError(ERROR_MESSAGE + target);
                    }
                    var args = slicy(arguments, 1);

                    var bound;
                    var binder = function() {
                        if (this instanceof bound) {
                            var result = target.apply(
                                this,
                                concatty(args, arguments)
                            );
                            if (Object(result) === result) {
                                return result;
                            }
                            return this;
                        }
                        return target.apply(
                            that,
                            concatty(args, arguments)
                        );

                    };

                    var boundLength = max(0, target.length - args.length);
                    var boundArgs = [];
                    for (var i = 0; i < boundLength; i++) {
                        boundArgs[i] = '$' + i;
                    }

                    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

                    if (target.prototype) {
                        var Empty = function Empty() {};
                        Empty.prototype = target.prototype;
                        bound.prototype = new Empty();
                        Empty.prototype = null;
                    }

                    return bound;
                };


                /***/
            }),

        /***/
        2008:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var call = Function.prototype.call;
                var $hasOwn = Object.prototype.hasOwnProperty;
                var bind = __webpack_require__(1852);

                /** @type {import('.')} */
                module.exports = bind.call(call, $hasOwn);


                /***/
            }),

        /***/
        2009:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var bind = __webpack_require__(1852);
                var GetIntrinsic = __webpack_require__(1828);
                var setFunctionLength = __webpack_require__(2010);

                var $TypeError = __webpack_require__(1835);
                var $apply = GetIntrinsic('%Function.prototype.apply%');
                var $call = GetIntrinsic('%Function.prototype.call%');
                var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

                var $defineProperty = __webpack_require__(1853);
                var $max = GetIntrinsic('%Math.max%');

                module.exports = function callBind(originalFunction) {
                    if (typeof originalFunction !== 'function') {
                        throw new $TypeError('a function is required');
                    }
                    var func = $reflectApply(bind, $call, arguments);
                    return setFunctionLength(
                        func,
                        1 + $max(0, originalFunction.length - (arguments.length - 1)),
                        true
                    );
                };

                var applyBind = function applyBind() {
                    return $reflectApply(bind, $apply, arguments);
                };

                if ($defineProperty) {
                    $defineProperty(module.exports, 'apply', {
                        value: applyBind
                    });
                } else {
                    module.exports.apply = applyBind;
                }


                /***/
            }),

        /***/
        2010:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var GetIntrinsic = __webpack_require__(1828);
                var define = __webpack_require__(2011);
                var hasDescriptors = __webpack_require__(2012)();
                var gOPD = __webpack_require__(1898);

                var $TypeError = __webpack_require__(1835);
                var $floor = GetIntrinsic('%Math.floor%');

                /** @type {import('.')} */
                module.exports = function setFunctionLength(fn, length) {
                    if (typeof fn !== 'function') {
                        throw new $TypeError('`fn` is not a function');
                    }
                    if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
                        throw new $TypeError('`length` must be a positive 32-bit integer');
                    }

                    var loose = arguments.length > 2 && !!arguments[2];

                    var functionLengthIsConfigurable = true;
                    var functionLengthIsWritable = true;
                    if ('length' in fn && gOPD) {
                        var desc = gOPD(fn, 'length');
                        if (desc && !desc.configurable) {
                            functionLengthIsConfigurable = false;
                        }
                        if (desc && !desc.writable) {
                            functionLengthIsWritable = false;
                        }
                    }

                    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
                        if (hasDescriptors) {
                            define( /** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
                        } else {
                            define( /** @type {Parameters<define>[0]} */ (fn), 'length', length);
                        }
                    }
                    return fn;
                };


                /***/
            }),

        /***/
        2011:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var $defineProperty = __webpack_require__(1853);

                var $SyntaxError = __webpack_require__(1897);
                var $TypeError = __webpack_require__(1835);

                var gopd = __webpack_require__(1898);

                /** @type {import('.')} */
                module.exports = function defineDataProperty(
                    obj,
                    property,
                    value
                ) {
                    if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
                        throw new $TypeError('`obj` must be an object or a function`');
                    }
                    if (typeof property !== 'string' && typeof property !== 'symbol') {
                        throw new $TypeError('`property` must be a string or a symbol`');
                    }
                    if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
                        throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
                    }
                    if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
                        throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
                    }
                    if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
                        throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
                    }
                    if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
                        throw new $TypeError('`loose`, if provided, must be a boolean');
                    }

                    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
                    var nonWritable = arguments.length > 4 ? arguments[4] : null;
                    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
                    var loose = arguments.length > 6 ? arguments[6] : false;

                    /* @type {false | TypedPropertyDescriptor<unknown>} */
                    var desc = !!gopd && gopd(obj, property);

                    if ($defineProperty) {
                        $defineProperty(obj, property, {
                            configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
                            enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
                            value: value,
                            writable: nonWritable === null && desc ? desc.writable : !nonWritable
                        });
                    } else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
                        // must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
                        obj[property] = value; // eslint-disable-line no-param-reassign
                    } else {
                        throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
                    }
                };


                /***/
            }),

        /***/
        2012:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var $defineProperty = __webpack_require__(1853);

                var hasPropertyDescriptors = function hasPropertyDescriptors() {
                    return !!$defineProperty;
                };

                hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
                    // node v0.6 has a bug where array lengths can be Set but not Defined
                    if (!$defineProperty) {
                        return null;
                    }
                    try {
                        return $defineProperty([], 'length', {
                            value: 1
                        }).length !== 1;
                    } catch (e) {
                        // In Firefox 4-22, defining length on an array throws an exception.
                        return true;
                    }
                };

                module.exports = hasPropertyDescriptors;


                /***/
            }),

        /***/
        2013:
            /***/
            (function(module, exports) {

                module.exports = function isBuffer(arg) {
                    return arg && typeof arg === 'object' &&
                        typeof arg.copy === 'function' &&
                        typeof arg.fill === 'function' &&
                        typeof arg.readUInt8 === 'function';
                }

                /***/
            }),

        /***/
        2014:
            /***/
            (function(module, exports) {

                if (typeof Object.create === 'function') {
                    // implementation from standard node.js 'util' module
                    module.exports = function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor
                        ctor.prototype = Object.create(superCtor.prototype, {
                            constructor: {
                                value: ctor,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                    };
                } else {
                    // old school shim for old browsers
                    module.exports = function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor
                        var TempCtor = function() {}
                        TempCtor.prototype = superCtor.prototype
                        ctor.prototype = new TempCtor()
                        ctor.prototype.constructor = ctor
                    }
                }


                /***/
            }),

        /***/
        2015:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                function ZStream() {
                    /* next input byte */
                    this.input = null; // JS specific, because we have no pointers
                    this.next_in = 0;
                    /* number of bytes available at input */
                    this.avail_in = 0;
                    /* total number of input bytes read so far */
                    this.total_in = 0;
                    /* next output byte should be put there */
                    this.output = null; // JS specific, because we have no pointers
                    this.next_out = 0;
                    /* remaining free space at output */
                    this.avail_out = 0;
                    /* total number of bytes output so far */
                    this.total_out = 0;
                    /* last error message, NULL if no error */
                    this.msg = '' /*Z_NULL*/ ;
                    /* not visible by applications */
                    this.state = null;
                    /* best guess about the data type: binary or text */
                    this.data_type = 2 /*Z_UNKNOWN*/ ;
                    /* adler32 value of the uncompressed data */
                    this.adler = 0;
                }

                module.exports = ZStream;


                /***/
            }),

        /***/
        2016:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                var utils = __webpack_require__(1836);
                var trees = __webpack_require__(2017);
                var adler32 = __webpack_require__(1900);
                var crc32 = __webpack_require__(1901);
                var msg = __webpack_require__(2018);

                /* Public constants ==========================================================*/
                /* ===========================================================================*/


                /* Allowed flush values; see deflate() and inflate() below for details */
                var Z_NO_FLUSH = 0;
                var Z_PARTIAL_FLUSH = 1;
                //var Z_SYNC_FLUSH    = 2;
                var Z_FULL_FLUSH = 3;
                var Z_FINISH = 4;
                var Z_BLOCK = 5;
                //var Z_TREES         = 6;


                /* Return codes for the compression/decompression functions. Negative values
                 * are errors, positive values are used for special but normal events.
                 */
                var Z_OK = 0;
                var Z_STREAM_END = 1;
                //var Z_NEED_DICT     = 2;
                //var Z_ERRNO         = -1;
                var Z_STREAM_ERROR = -2;
                var Z_DATA_ERROR = -3;
                //var Z_MEM_ERROR     = -4;
                var Z_BUF_ERROR = -5;
                //var Z_VERSION_ERROR = -6;


                /* compression levels */
                //var Z_NO_COMPRESSION      = 0;
                //var Z_BEST_SPEED          = 1;
                //var Z_BEST_COMPRESSION    = 9;
                var Z_DEFAULT_COMPRESSION = -1;


                var Z_FILTERED = 1;
                var Z_HUFFMAN_ONLY = 2;
                var Z_RLE = 3;
                var Z_FIXED = 4;
                var Z_DEFAULT_STRATEGY = 0;

                /* Possible values of the data_type field (though see inflate()) */
                //var Z_BINARY              = 0;
                //var Z_TEXT                = 1;
                //var Z_ASCII               = 1; // = Z_TEXT
                var Z_UNKNOWN = 2;


                /* The deflate compression method */
                var Z_DEFLATED = 8;

                /*============================================================================*/


                var MAX_MEM_LEVEL = 9;
                /* Maximum value for memLevel in deflateInit2 */
                var MAX_WBITS = 15;
                /* 32K LZ77 window */
                var DEF_MEM_LEVEL = 8;


                var LENGTH_CODES = 29;
                /* number of length codes, not counting the special END_BLOCK code */
                var LITERALS = 256;
                /* number of literal bytes 0..255 */
                var L_CODES = LITERALS + 1 + LENGTH_CODES;
                /* number of Literal or Length codes, including the END_BLOCK code */
                var D_CODES = 30;
                /* number of distance codes */
                var BL_CODES = 19;
                /* number of codes used to transfer the bit lengths */
                var HEAP_SIZE = 2 * L_CODES + 1;
                /* maximum heap size */
                var MAX_BITS = 15;
                /* All codes must not exceed MAX_BITS bits */

                var MIN_MATCH = 3;
                var MAX_MATCH = 258;
                var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

                var PRESET_DICT = 0x20;

                var INIT_STATE = 42;
                var EXTRA_STATE = 69;
                var NAME_STATE = 73;
                var COMMENT_STATE = 91;
                var HCRC_STATE = 103;
                var BUSY_STATE = 113;
                var FINISH_STATE = 666;

                var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
                var BS_BLOCK_DONE = 2; /* block flush performed */
                var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
                var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

                var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

                function err(strm, errorCode) {
                    strm.msg = msg[errorCode];
                    return errorCode;
                }

                function rank(f) {
                    return ((f) << 1) - ((f) > 4 ? 9 : 0);
                }

                function zero(buf) {
                    var len = buf.length;
                    while (--len >= 0) {
                        buf[len] = 0;
                    }
                }


                /* =========================================================================
                 * Flush as much pending output as possible. All deflate() output goes
                 * through this function so some applications may wish to modify it
                 * to avoid allocating a large strm->output buffer and copying into it.
                 * (See also read_buf()).
                 */
                function flush_pending(strm) {
                    var s = strm.state;

                    //_tr_flush_bits(s);
                    var len = s.pending;
                    if (len > strm.avail_out) {
                        len = strm.avail_out;
                    }
                    if (len === 0) {
                        return;
                    }

                    utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
                    strm.next_out += len;
                    s.pending_out += len;
                    strm.total_out += len;
                    strm.avail_out -= len;
                    s.pending -= len;
                    if (s.pending === 0) {
                        s.pending_out = 0;
                    }
                }


                function flush_block_only(s, last) {
                    trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
                    s.block_start = s.strstart;
                    flush_pending(s.strm);
                }


                function put_byte(s, b) {
                    s.pending_buf[s.pending++] = b;
                }


                /* =========================================================================
                 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
                 * IN assertion: the stream state is correct and there is enough room in
                 * pending_buf.
                 */
                function putShortMSB(s, b) {
                    //  put_byte(s, (Byte)(b >> 8));
                    //  put_byte(s, (Byte)(b & 0xff));
                    s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
                    s.pending_buf[s.pending++] = b & 0xff;
                }


                /* ===========================================================================
                 * Read a new buffer from the current input stream, update the adler32
                 * and total number of bytes read.  All deflate() input goes through
                 * this function so some applications may wish to modify it to avoid
                 * allocating a large strm->input buffer and copying from it.
                 * (See also flush_pending()).
                 */
                function read_buf(strm, buf, start, size) {
                    var len = strm.avail_in;

                    if (len > size) {
                        len = size;
                    }
                    if (len === 0) {
                        return 0;
                    }

                    strm.avail_in -= len;

                    // zmemcpy(buf, strm->next_in, len);
                    utils.arraySet(buf, strm.input, strm.next_in, len, start);
                    if (strm.state.wrap === 1) {
                        strm.adler = adler32(strm.adler, buf, len, start);
                    } else if (strm.state.wrap === 2) {
                        strm.adler = crc32(strm.adler, buf, len, start);
                    }

                    strm.next_in += len;
                    strm.total_in += len;

                    return len;
                }


                /* ===========================================================================
                 * Set match_start to the longest match starting at the given string and
                 * return its length. Matches shorter or equal to prev_length are discarded,
                 * in which case the result is equal to prev_length and match_start is
                 * garbage.
                 * IN assertions: cur_match is the head of the hash chain for the current
                 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
                 * OUT assertion: the match length is not greater than s->lookahead.
                 */
                function longest_match(s, cur_match) {
                    var chain_length = s.max_chain_length; /* max hash chain length */
                    var scan = s.strstart; /* current string */
                    var match; /* matched string */
                    var len; /* length of current match */
                    var best_len = s.prev_length; /* best match length so far */
                    var nice_match = s.nice_match; /* stop if match long enough */
                    var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
                        s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;

                    var _win = s.window; // shortcut

                    var wmask = s.w_mask;
                    var prev = s.prev;

                    /* Stop when cur_match becomes <= limit. To simplify the code,
                     * we prevent matches with the string of window index 0.
                     */

                    var strend = s.strstart + MAX_MATCH;
                    var scan_end1 = _win[scan + best_len - 1];
                    var scan_end = _win[scan + best_len];

                    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
                     * It is easy to get rid of this optimization if necessary.
                     */
                    // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

                    /* Do not waste too much time if we already have a good match: */
                    if (s.prev_length >= s.good_match) {
                        chain_length >>= 2;
                    }
                    /* Do not look for matches beyond the end of the input. This is necessary
                     * to make deflate deterministic.
                     */
                    if (nice_match > s.lookahead) {
                        nice_match = s.lookahead;
                    }

                    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

                    do {
                        // Assert(cur_match < s->strstart, "no future");
                        match = cur_match;

                        /* Skip to next match if the match length cannot increase
                         * or if the match length is less than 2.  Note that the checks below
                         * for insufficient lookahead only occur occasionally for performance
                         * reasons.  Therefore uninitialized memory will be accessed, and
                         * conditional jumps will be made that depend on those values.
                         * However the length of the match is limited to the lookahead, so
                         * the output of deflate is not affected by the uninitialized values.
                         */

                        if (_win[match + best_len] !== scan_end ||
                            _win[match + best_len - 1] !== scan_end1 ||
                            _win[match] !== _win[scan] ||
                            _win[++match] !== _win[scan + 1]) {
                            continue;
                        }

                        /* The check at best_len-1 can be removed because it will be made
                         * again later. (This heuristic is not always a win.)
                         * It is not necessary to compare scan[2] and match[2] since they
                         * are always equal when the other bytes match, given that
                         * the hash keys are equal and that HASH_BITS >= 8.
                         */
                        scan += 2;
                        match++;
                        // Assert(*scan == *match, "match[2]?");

                        /* We check for insufficient lookahead only every 8th comparison;
                         * the 256th check will be made at strstart+258.
                         */
                        do {
                            /*jshint noempty:false*/
                        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                            scan < strend);

                        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

                        len = MAX_MATCH - (strend - scan);
                        scan = strend - MAX_MATCH;

                        if (len > best_len) {
                            s.match_start = cur_match;
                            best_len = len;
                            if (len >= nice_match) {
                                break;
                            }
                            scan_end1 = _win[scan + best_len - 1];
                            scan_end = _win[scan + best_len];
                        }
                    } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

                    if (best_len <= s.lookahead) {
                        return best_len;
                    }
                    return s.lookahead;
                }


                /* ===========================================================================
                 * Fill the window when the lookahead becomes insufficient.
                 * Updates strstart and lookahead.
                 *
                 * IN assertion: lookahead < MIN_LOOKAHEAD
                 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
                 *    At least one byte has been read, or avail_in == 0; reads are
                 *    performed for at least two bytes (required for the zip translate_eol
                 *    option -- not supported here).
                 */
                function fill_window(s) {
                    var _w_size = s.w_size;
                    var p, n, m, more, str;

                    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

                    do {
                        more = s.window_size - s.lookahead - s.strstart;

                        // JS ints have 32 bit, block below not needed
                        /* Deal with !@#$% 64K limit: */
                        //if (sizeof(int) <= 2) {
                        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
                        //        more = wsize;
                        //
                        //  } else if (more == (unsigned)(-1)) {
                        //        /* Very unlikely, but possible on 16 bit machine if
                        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
                        //         */
                        //        more--;
                        //    }
                        //}


                        /* If the window is almost full and there is insufficient lookahead,
                         * move the upper half to the lower one to make room in the upper half.
                         */
                        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

                            utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
                            s.match_start -= _w_size;
                            s.strstart -= _w_size;
                            /* we now have strstart >= MAX_DIST */
                            s.block_start -= _w_size;

                            /* Slide the hash table (could be avoided with 32 bit values
                             at the expense of memory usage). We slide even when level == 0
                             to keep the hash table consistent if we switch back to level > 0
                             later. (Using level 0 permanently is not an optimal usage of
                             zlib, so we don't care about this pathological case.)
                             */

                            n = s.hash_size;
                            p = n;
                            do {
                                m = s.head[--p];
                                s.head[p] = (m >= _w_size ? m - _w_size : 0);
                            } while (--n);

                            n = _w_size;
                            p = n;
                            do {
                                m = s.prev[--p];
                                s.prev[p] = (m >= _w_size ? m - _w_size : 0);
                                /* If n is not on any hash chain, prev[n] is garbage but
                                 * its value will never be used.
                                 */
                            } while (--n);

                            more += _w_size;
                        }
                        if (s.strm.avail_in === 0) {
                            break;
                        }

                        /* If there was no sliding:
                         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
                         *    more == window_size - lookahead - strstart
                         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
                         * => more >= window_size - 2*WSIZE + 2
                         * In the BIG_MEM or MMAP case (not yet supported),
                         *   window_size == input_size + MIN_LOOKAHEAD  &&
                         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
                         * Otherwise, window_size == 2*WSIZE so more >= 2.
                         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
                         */
                        //Assert(more >= 2, "more < 2");
                        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
                        s.lookahead += n;

                        /* Initialize the hash value now that we have some input: */
                        if (s.lookahead + s.insert >= MIN_MATCH) {
                            str = s.strstart - s.insert;
                            s.ins_h = s.window[str];

                            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
                            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
                            //#if MIN_MATCH != 3
                            //        Call update_hash() MIN_MATCH-3 more times
                            //#endif
                            while (s.insert) {
                                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                                s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

                                s.prev[str & s.w_mask] = s.head[s.ins_h];
                                s.head[s.ins_h] = str;
                                str++;
                                s.insert--;
                                if (s.lookahead + s.insert < MIN_MATCH) {
                                    break;
                                }
                            }
                        }
                        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
                         * but this is not important since only literal bytes will be emitted.
                         */

                    } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

                    /* If the WIN_INIT bytes after the end of the current data have never been
                     * written, then zero those bytes in order to avoid memory check reports of
                     * the use of uninitialized (or uninitialised as Julian writes) bytes by
                     * the longest match routines.  Update the high water mark for the next
                     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
                     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
                     */
                    //  if (s.high_water < s.window_size) {
                    //    var curr = s.strstart + s.lookahead;
                    //    var init = 0;
                    //
                    //    if (s.high_water < curr) {
                    //      /* Previous high water mark below current data -- zero WIN_INIT
                    //       * bytes or up to end of window, whichever is less.
                    //       */
                    //      init = s.window_size - curr;
                    //      if (init > WIN_INIT)
                    //        init = WIN_INIT;
                    //      zmemzero(s->window + curr, (unsigned)init);
                    //      s->high_water = curr + init;
                    //    }
                    //    else if (s->high_water < (ulg)curr + WIN_INIT) {
                    //      /* High water mark at or above current data, but below current data
                    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
                    //       * to end of window, whichever is less.
                    //       */
                    //      init = (ulg)curr + WIN_INIT - s->high_water;
                    //      if (init > s->window_size - s->high_water)
                    //        init = s->window_size - s->high_water;
                    //      zmemzero(s->window + s->high_water, (unsigned)init);
                    //      s->high_water += init;
                    //    }
                    //  }
                    //
                    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
                    //    "not enough room for search");
                }

                /* ===========================================================================
                 * Copy without compression as much as possible from the input stream, return
                 * the current block state.
                 * This function does not insert new strings in the dictionary since
                 * uncompressible data is probably not useful. This function is used
                 * only for the level=0 compression option.
                 * NOTE: this function should be optimized to avoid extra copying from
                 * window to pending_buf.
                 */
                function deflate_stored(s, flush) {
                    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
                     * to pending_buf_size, and each stored block has a 5 byte header:
                     */
                    var max_block_size = 0xffff;

                    if (max_block_size > s.pending_buf_size - 5) {
                        max_block_size = s.pending_buf_size - 5;
                    }

                    /* Copy as much as possible from input to output: */
                    for (;;) {
                        /* Fill the window as much as possible: */
                        if (s.lookahead <= 1) {

                            //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
                            //  s->block_start >= (long)s->w_size, "slide too late");
                            //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
                            //        s.block_start >= s.w_size)) {
                            //        throw  new Error("slide too late");
                            //      }

                            fill_window(s);
                            if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
                                return BS_NEED_MORE;
                            }

                            if (s.lookahead === 0) {
                                break;
                            }
                            /* flush the current block */
                        }
                        //Assert(s->block_start >= 0L, "block gone");
                        //    if (s.block_start < 0) throw new Error("block gone");

                        s.strstart += s.lookahead;
                        s.lookahead = 0;

                        /* Emit a stored block if pending_buf will be full: */
                        var max_start = s.block_start + max_block_size;

                        if (s.strstart === 0 || s.strstart >= max_start) {
                            /* strstart == 0 is possible when wraparound on 16-bit machine */
                            s.lookahead = s.strstart - max_start;
                            s.strstart = max_start;
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/


                        }
                        /* Flush if we may have to slide, otherwise block_start may become
                         * negative and the data will be gone:
                         */
                        if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                    }

                    s.insert = 0;

                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }

                    if (s.strstart > s.block_start) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }

                    return BS_NEED_MORE;
                }

                /* ===========================================================================
                 * Compress as much as possible from the input stream, return the current
                 * block state.
                 * This function does not perform lazy evaluation of matches and inserts
                 * new strings in the dictionary only for unmatched strings or for short
                 * matches. It is used only for the fast compression options.
                 */
                function deflate_fast(s, flush) {
                    var hash_head; /* head of the hash chain */
                    var bflush; /* set if current block must be flushed */

                    for (;;) {
                        /* Make sure that we always have enough lookahead, except
                         * at the end of the input file. We need MAX_MATCH bytes
                         * for the next match, plus MIN_MATCH bytes to insert the
                         * string following the next match.
                         */
                        if (s.lookahead < MIN_LOOKAHEAD) {
                            fill_window(s);
                            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                                return BS_NEED_MORE;
                            }
                            if (s.lookahead === 0) {
                                break; /* flush the current block */
                            }
                        }

                        /* Insert the string window[strstart .. strstart+2] in the
                         * dictionary, and set hash_head to the head of the hash chain:
                         */
                        hash_head = 0 /*NIL*/ ;
                        if (s.lookahead >= MIN_MATCH) {
                            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                            s.head[s.ins_h] = s.strstart;
                            /***/
                        }

                        /* Find the longest match, discarding those <= prev_length.
                         * At this point we have always match_length < MIN_MATCH
                         */
                        if (hash_head !== 0 /*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
                            /* To simplify the code, we prevent matches with the string
                             * of window index 0 (in particular we have to avoid a match
                             * of the string with itself at the start of the input file).
                             */
                            s.match_length = longest_match(s, hash_head);
                            /* longest_match() sets match_start */
                        }
                        if (s.match_length >= MIN_MATCH) {
                            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

                            /*** _tr_tally_dist(s, s.strstart - s.match_start,
                                           s.match_length - MIN_MATCH, bflush); ***/
                            bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

                            s.lookahead -= s.match_length;

                            /* Insert new strings in the hash table only if the match length
                             * is not too large. This saves time but degrades compression.
                             */
                            if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
                                s.match_length--; /* string at strstart already in table */
                                do {
                                    s.strstart++;
                                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                    s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                    s.head[s.ins_h] = s.strstart;
                                    /***/
                                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                                     * always MIN_MATCH bytes ahead.
                                     */
                                } while (--s.match_length !== 0);
                                s.strstart++;
                            } else {
                                s.strstart += s.match_length;
                                s.match_length = 0;
                                s.ins_h = s.window[s.strstart];
                                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
                                s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

                                //#if MIN_MATCH != 3
                                //                Call UPDATE_HASH() MIN_MATCH-3 more times
                                //#endif
                                /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
                                 * matter since it will be recomputed at next deflate call.
                                 */
                            }
                        } else {
                            /* No match, output a literal byte */
                            //Tracevv((stderr,"%c", s.window[s.strstart]));
                            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

                            s.lookahead--;
                            s.strstart++;
                        }
                        if (bflush) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                    }
                    s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }
                    if (s.last_lit) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                    return BS_BLOCK_DONE;
                }

                /* ===========================================================================
                 * Same as above, but achieves better compression. We use a lazy
                 * evaluation for matches: a match is finally adopted only if there is
                 * no better match at the next window position.
                 */
                function deflate_slow(s, flush) {
                    var hash_head; /* head of hash chain */
                    var bflush; /* set if current block must be flushed */

                    var max_insert;

                    /* Process the input block. */
                    for (;;) {
                        /* Make sure that we always have enough lookahead, except
                         * at the end of the input file. We need MAX_MATCH bytes
                         * for the next match, plus MIN_MATCH bytes to insert the
                         * string following the next match.
                         */
                        if (s.lookahead < MIN_LOOKAHEAD) {
                            fill_window(s);
                            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                                return BS_NEED_MORE;
                            }
                            if (s.lookahead === 0) {
                                break;
                            } /* flush the current block */
                        }

                        /* Insert the string window[strstart .. strstart+2] in the
                         * dictionary, and set hash_head to the head of the hash chain:
                         */
                        hash_head = 0 /*NIL*/ ;
                        if (s.lookahead >= MIN_MATCH) {
                            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                            s.head[s.ins_h] = s.strstart;
                            /***/
                        }

                        /* Find the longest match, discarding those <= prev_length.
                         */
                        s.prev_length = s.match_length;
                        s.prev_match = s.match_start;
                        s.match_length = MIN_MATCH - 1;

                        if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match &&
                            s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD) /*MAX_DIST(s)*/ ) {
                            /* To simplify the code, we prevent matches with the string
                             * of window index 0 (in particular we have to avoid a match
                             * of the string with itself at the start of the input file).
                             */
                            s.match_length = longest_match(s, hash_head);
                            /* longest_match() sets match_start */

                            if (s.match_length <= 5 &&
                                (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ ))) {

                                /* If prev_match is also MIN_MATCH, match_start is garbage
                                 * but we will ignore the current match anyway.
                                 */
                                s.match_length = MIN_MATCH - 1;
                            }
                        }
                        /* If there was a match at the previous step and the current
                         * match is not better, output the previous match:
                         */
                        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
                            max_insert = s.strstart + s.lookahead - MIN_MATCH;
                            /* Do not insert strings in hash table beyond this. */

                            //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

                            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                                           s.prev_length - MIN_MATCH, bflush);***/
                            bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
                            /* Insert in hash table all strings up to the end of the match.
                             * strstart-1 and strstart are already inserted. If there is not
                             * enough lookahead, the last two strings are not inserted in
                             * the hash table.
                             */
                            s.lookahead -= s.prev_length - 1;
                            s.prev_length -= 2;
                            do {
                                if (++s.strstart <= max_insert) {
                                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                    s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                                    s.head[s.ins_h] = s.strstart;
                                    /***/
                                }
                            } while (--s.prev_length !== 0);
                            s.match_available = 0;
                            s.match_length = MIN_MATCH - 1;
                            s.strstart++;

                            if (bflush) {
                                /*** FLUSH_BLOCK(s, 0); ***/
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                                /***/
                            }

                        } else if (s.match_available) {
                            /* If there was no match at the previous position, output a
                             * single literal. If there was a match but the current match
                             * is longer, truncate the previous match to a single literal.
                             */
                            //Tracevv((stderr,"%c", s->window[s->strstart-1]));
                            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                            bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

                            if (bflush) {
                                /*** FLUSH_BLOCK_ONLY(s, 0) ***/
                                flush_block_only(s, false);
                                /***/
                            }
                            s.strstart++;
                            s.lookahead--;
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                        } else {
                            /* There is no previous match to compare with, wait for
                             * the next step to decide.
                             */
                            s.match_available = 1;
                            s.strstart++;
                            s.lookahead--;
                        }
                    }
                    //Assert (flush != Z_NO_FLUSH, "no flush?");
                    if (s.match_available) {
                        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
                        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                        bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

                        s.match_available = 0;
                    }
                    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }
                    if (s.last_lit) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }

                    return BS_BLOCK_DONE;
                }


                /* ===========================================================================
                 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
                 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
                 * deflate switches away from Z_RLE.)
                 */
                function deflate_rle(s, flush) {
                    var bflush; /* set if current block must be flushed */
                    var prev; /* byte at distance one to match */
                    var scan, strend; /* scan goes up to strend for length of run */

                    var _win = s.window;

                    for (;;) {
                        /* Make sure that we always have enough lookahead, except
                         * at the end of the input file. We need MAX_MATCH bytes
                         * for the longest run, plus one for the unrolled loop.
                         */
                        if (s.lookahead <= MAX_MATCH) {
                            fill_window(s);
                            if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
                                return BS_NEED_MORE;
                            }
                            if (s.lookahead === 0) {
                                break;
                            } /* flush the current block */
                        }

                        /* See how many times the previous byte repeats */
                        s.match_length = 0;
                        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
                            scan = s.strstart - 1;
                            prev = _win[scan];
                            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                                strend = s.strstart + MAX_MATCH;
                                do {
                                    /*jshint noempty:false*/
                                } while (prev === _win[++scan] && prev === _win[++scan] &&
                                    prev === _win[++scan] && prev === _win[++scan] &&
                                    prev === _win[++scan] && prev === _win[++scan] &&
                                    prev === _win[++scan] && prev === _win[++scan] &&
                                    scan < strend);
                                s.match_length = MAX_MATCH - (strend - scan);
                                if (s.match_length > s.lookahead) {
                                    s.match_length = s.lookahead;
                                }
                            }
                            //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
                        }

                        /* Emit match if have run of MIN_MATCH or longer, else emit literal */
                        if (s.match_length >= MIN_MATCH) {
                            //check_match(s, s.strstart, s.strstart - 1, s.match_length);

                            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
                            bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

                            s.lookahead -= s.match_length;
                            s.strstart += s.match_length;
                            s.match_length = 0;
                        } else {
                            /* No match, output a literal byte */
                            //Tracevv((stderr,"%c", s->window[s->strstart]));
                            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

                            s.lookahead--;
                            s.strstart++;
                        }
                        if (bflush) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                    }
                    s.insert = 0;
                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }
                    if (s.last_lit) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                    return BS_BLOCK_DONE;
                }

                /* ===========================================================================
                 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
                 * (It will be regenerated if this run of deflate switches away from Huffman.)
                 */
                function deflate_huff(s, flush) {
                    var bflush; /* set if current block must be flushed */

                    for (;;) {
                        /* Make sure that we have a literal to write. */
                        if (s.lookahead === 0) {
                            fill_window(s);
                            if (s.lookahead === 0) {
                                if (flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }
                                break; /* flush the current block */
                            }
                        }

                        /* Output a literal byte */
                        s.match_length = 0;
                        //Tracevv((stderr,"%c", s->window[s->strstart]));
                        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                        s.lookahead--;
                        s.strstart++;
                        if (bflush) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                    }
                    s.insert = 0;
                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }
                    if (s.last_lit) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                    return BS_BLOCK_DONE;
                }

                /* Values for max_lazy_match, good_match and max_chain_length, depending on
                 * the desired pack level (0..9). The values given below have been tuned to
                 * exclude worst case performance for pathological files. Better values may be
                 * found for specific files.
                 */
                function Config(good_length, max_lazy, nice_length, max_chain, func) {
                    this.good_length = good_length;
                    this.max_lazy = max_lazy;
                    this.nice_length = nice_length;
                    this.max_chain = max_chain;
                    this.func = func;
                }

                var configuration_table;

                configuration_table = [
                    /*      good lazy nice chain */
                    new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
                    new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
                    new Config(4, 5, 16, 8, deflate_fast), /* 2 */
                    new Config(4, 6, 32, 32, deflate_fast), /* 3 */

                    new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
                    new Config(8, 16, 32, 32, deflate_slow), /* 5 */
                    new Config(8, 16, 128, 128, deflate_slow), /* 6 */
                    new Config(8, 32, 128, 256, deflate_slow), /* 7 */
                    new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
                    new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
                ];


                /* ===========================================================================
                 * Initialize the "longest match" routines for a new zlib stream
                 */
                function lm_init(s) {
                    s.window_size = 2 * s.w_size;

                    /*** CLEAR_HASH(s); ***/
                    zero(s.head); // Fill with NIL (= 0);

                    /* Set the default configuration parameters:
                     */
                    s.max_lazy_match = configuration_table[s.level].max_lazy;
                    s.good_match = configuration_table[s.level].good_length;
                    s.nice_match = configuration_table[s.level].nice_length;
                    s.max_chain_length = configuration_table[s.level].max_chain;

                    s.strstart = 0;
                    s.block_start = 0;
                    s.lookahead = 0;
                    s.insert = 0;
                    s.match_length = s.prev_length = MIN_MATCH - 1;
                    s.match_available = 0;
                    s.ins_h = 0;
                }


                function DeflateState() {
                    this.strm = null; /* pointer back to this zlib stream */
                    this.status = 0; /* as the name implies */
                    this.pending_buf = null; /* output still pending */
                    this.pending_buf_size = 0; /* size of pending_buf */
                    this.pending_out = 0; /* next pending byte to output to the stream */
                    this.pending = 0; /* nb of bytes in the pending buffer */
                    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
                    this.gzhead = null; /* gzip header information to write */
                    this.gzindex = 0; /* where in extra, name, or comment */
                    this.method = Z_DEFLATED; /* can only be DEFLATED */
                    this.last_flush = -1; /* value of flush param for previous deflate call */

                    this.w_size = 0; /* LZ77 window size (32K by default) */
                    this.w_bits = 0; /* log2(w_size)  (8..16) */
                    this.w_mask = 0; /* w_size - 1 */

                    this.window = null;
                    /* Sliding window. Input bytes are read into the second half of the window,
                     * and move to the first half later to keep a dictionary of at least wSize
                     * bytes. With this organization, matches are limited to a distance of
                     * wSize-MAX_MATCH bytes, but this ensures that IO is always
                     * performed with a length multiple of the block size.
                     */

                    this.window_size = 0;
                    /* Actual size of window: 2*wSize, except when the user input buffer
                     * is directly used as sliding window.
                     */

                    this.prev = null;
                    /* Link to older string with same hash index. To limit the size of this
                     * array to 64K, this link is maintained only for the last 32K strings.
                     * An index in this array is thus a window index modulo 32K.
                     */

                    this.head = null; /* Heads of the hash chains or NIL. */

                    this.ins_h = 0; /* hash index of string to be inserted */
                    this.hash_size = 0; /* number of elements in hash table */
                    this.hash_bits = 0; /* log2(hash_size) */
                    this.hash_mask = 0; /* hash_size-1 */

                    this.hash_shift = 0;
                    /* Number of bits by which ins_h must be shifted at each input
                     * step. It must be such that after MIN_MATCH steps, the oldest
                     * byte no longer takes part in the hash key, that is:
                     *   hash_shift * MIN_MATCH >= hash_bits
                     */

                    this.block_start = 0;
                    /* Window position at the beginning of the current output block. Gets
                     * negative when the window is moved backwards.
                     */

                    this.match_length = 0; /* length of best match */
                    this.prev_match = 0; /* previous match */
                    this.match_available = 0; /* set if previous match exists */
                    this.strstart = 0; /* start of string to insert */
                    this.match_start = 0; /* start of matching string */
                    this.lookahead = 0; /* number of valid bytes ahead in window */

                    this.prev_length = 0;
                    /* Length of the best match at previous step. Matches not greater than this
                     * are discarded. This is used in the lazy match evaluation.
                     */

                    this.max_chain_length = 0;
                    /* To speed up deflation, hash chains are never searched beyond this
                     * length.  A higher limit improves compression ratio but degrades the
                     * speed.
                     */

                    this.max_lazy_match = 0;
                    /* Attempt to find a better match only when the current match is strictly
                     * smaller than this value. This mechanism is used only for compression
                     * levels >= 4.
                     */
                    // That's alias to max_lazy_match, don't use directly
                    //this.max_insert_length = 0;
                    /* Insert new strings in the hash table only if the match length is not
                     * greater than this length. This saves time but degrades compression.
                     * max_insert_length is used only for compression levels <= 3.
                     */

                    this.level = 0; /* compression level (1..9) */
                    this.strategy = 0; /* favor or force Huffman coding*/

                    this.good_match = 0;
                    /* Use a faster search when the previous match is longer than this */

                    this.nice_match = 0; /* Stop searching when current match exceeds this */

                    /* used by trees.c: */

                    /* Didn't use ct_data typedef below to suppress compiler warning */

                    // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
                    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
                    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

                    // Use flat array of DOUBLE size, with interleaved fata,
                    // because JS does not support effective
                    this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
                    this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
                    this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
                    zero(this.dyn_ltree);
                    zero(this.dyn_dtree);
                    zero(this.bl_tree);

                    this.l_desc = null; /* desc. for literal tree */
                    this.d_desc = null; /* desc. for distance tree */
                    this.bl_desc = null; /* desc. for bit length tree */

                    //ush bl_count[MAX_BITS+1];
                    this.bl_count = new utils.Buf16(MAX_BITS + 1);
                    /* number of codes at each bit length for an optimal tree */

                    //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
                    this.heap = new utils.Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */
                    zero(this.heap);

                    this.heap_len = 0; /* number of elements in the heap */
                    this.heap_max = 0; /* element of largest frequency */
                    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
                     * The same heap array is used to build all trees.
                     */

                    this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
                    zero(this.depth);
                    /* Depth of each subtree used as tie breaker for trees of equal frequency
                     */

                    this.l_buf = 0; /* buffer index for literals or lengths */

                    this.lit_bufsize = 0;
                    /* Size of match buffer for literals/lengths.  There are 4 reasons for
                     * limiting lit_bufsize to 64K:
                     *   - frequencies can be kept in 16 bit counters
                     *   - if compression is not successful for the first block, all input
                     *     data is still in the window so we can still emit a stored block even
                     *     when input comes from standard input.  (This can also be done for
                     *     all blocks if lit_bufsize is not greater than 32K.)
                     *   - if compression is not successful for a file smaller than 64K, we can
                     *     even emit a stored file instead of a stored block (saving 5 bytes).
                     *     This is applicable only for zip (not gzip or zlib).
                     *   - creating new Huffman trees less frequently may not provide fast
                     *     adaptation to changes in the input data statistics. (Take for
                     *     example a binary file with poorly compressible code followed by
                     *     a highly compressible string table.) Smaller buffer sizes give
                     *     fast adaptation but have of course the overhead of transmitting
                     *     trees more frequently.
                     *   - I can't count above 4
                     */

                    this.last_lit = 0; /* running index in l_buf */

                    this.d_buf = 0;
                    /* Buffer index for distances. To simplify the code, d_buf and l_buf have
                     * the same number of elements. To use different lengths, an extra flag
                     * array would be necessary.
                     */

                    this.opt_len = 0; /* bit length of current block with optimal trees */
                    this.static_len = 0; /* bit length of current block with static trees */
                    this.matches = 0; /* number of string matches in current block */
                    this.insert = 0; /* bytes at end of window left to insert */


                    this.bi_buf = 0;
                    /* Output buffer. bits are inserted starting at the bottom (least
                     * significant bits).
                     */
                    this.bi_valid = 0;
                    /* Number of valid bits in bi_buf.  All bits above the last valid bit
                     * are always zero.
                     */

                    // Used for window memory init. We safely ignore it for JS. That makes
                    // sense only for pointers and memory check tools.
                    //this.high_water = 0;
                    /* High water mark offset in window for initialized bytes -- bytes above
                     * this are set to zero in order to avoid memory check warnings when
                     * longest match routines access bytes past the input.  This is then
                     * updated to the new high water mark.
                     */
                }


                function deflateResetKeep(strm) {
                    var s;

                    if (!strm || !strm.state) {
                        return err(strm, Z_STREAM_ERROR);
                    }

                    strm.total_in = strm.total_out = 0;
                    strm.data_type = Z_UNKNOWN;

                    s = strm.state;
                    s.pending = 0;
                    s.pending_out = 0;

                    if (s.wrap < 0) {
                        s.wrap = -s.wrap;
                        /* was made negative by deflate(..., Z_FINISH); */
                    }
                    s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
                    strm.adler = (s.wrap === 2) ?
                        0 // crc32(0, Z_NULL, 0)
                        :
                        1; // adler32(0, Z_NULL, 0)
                    s.last_flush = Z_NO_FLUSH;
                    trees._tr_init(s);
                    return Z_OK;
                }


                function deflateReset(strm) {
                    var ret = deflateResetKeep(strm);
                    if (ret === Z_OK) {
                        lm_init(strm.state);
                    }
                    return ret;
                }


                function deflateSetHeader(strm, head) {
                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    if (strm.state.wrap !== 2) {
                        return Z_STREAM_ERROR;
                    }
                    strm.state.gzhead = head;
                    return Z_OK;
                }


                function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
                    if (!strm) { // === Z_NULL
                        return Z_STREAM_ERROR;
                    }
                    var wrap = 1;

                    if (level === Z_DEFAULT_COMPRESSION) {
                        level = 6;
                    }

                    if (windowBits < 0) { /* suppress zlib wrapper */
                        wrap = 0;
                        windowBits = -windowBits;
                    } else if (windowBits > 15) {
                        wrap = 2; /* write gzip wrapper instead */
                        windowBits -= 16;
                    }


                    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
                        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
                        strategy < 0 || strategy > Z_FIXED) {
                        return err(strm, Z_STREAM_ERROR);
                    }


                    if (windowBits === 8) {
                        windowBits = 9;
                    }
                    /* until 256-byte window bug fixed */

                    var s = new DeflateState();

                    strm.state = s;
                    s.strm = strm;

                    s.wrap = wrap;
                    s.gzhead = null;
                    s.w_bits = windowBits;
                    s.w_size = 1 << s.w_bits;
                    s.w_mask = s.w_size - 1;

                    s.hash_bits = memLevel + 7;
                    s.hash_size = 1 << s.hash_bits;
                    s.hash_mask = s.hash_size - 1;
                    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

                    s.window = new utils.Buf8(s.w_size * 2);
                    s.head = new utils.Buf16(s.hash_size);
                    s.prev = new utils.Buf16(s.w_size);

                    // Don't need mem init magic for JS.
                    //s.high_water = 0;  /* nothing written to s->window yet */

                    s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

                    s.pending_buf_size = s.lit_bufsize * 4;

                    //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
                    //s->pending_buf = (uchf *) overlay;
                    s.pending_buf = new utils.Buf8(s.pending_buf_size);

                    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
                    //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
                    s.d_buf = 1 * s.lit_bufsize;

                    //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
                    s.l_buf = (1 + 2) * s.lit_bufsize;

                    s.level = level;
                    s.strategy = strategy;
                    s.method = method;

                    return deflateReset(strm);
                }

                function deflateInit(strm, level) {
                    return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
                }


                function deflate(strm, flush) {
                    var old_flush, s;
                    var beg, val; // for gzip header write only

                    if (!strm || !strm.state ||
                        flush > Z_BLOCK || flush < 0) {
                        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
                    }

                    s = strm.state;

                    if (!strm.output ||
                        (!strm.input && strm.avail_in !== 0) ||
                        (s.status === FINISH_STATE && flush !== Z_FINISH)) {
                        return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
                    }

                    s.strm = strm; /* just in case */
                    old_flush = s.last_flush;
                    s.last_flush = flush;

                    /* Write the header */
                    if (s.status === INIT_STATE) {

                        if (s.wrap === 2) { // GZIP header
                            strm.adler = 0; //crc32(0L, Z_NULL, 0);
                            put_byte(s, 31);
                            put_byte(s, 139);
                            put_byte(s, 8);
                            if (!s.gzhead) { // s->gzhead == Z_NULL
                                put_byte(s, 0);
                                put_byte(s, 0);
                                put_byte(s, 0);
                                put_byte(s, 0);
                                put_byte(s, 0);
                                put_byte(s, s.level === 9 ? 2 :
                                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                                        4 : 0));
                                put_byte(s, OS_CODE);
                                s.status = BUSY_STATE;
                            } else {
                                put_byte(s, (s.gzhead.text ? 1 : 0) +
                                    (s.gzhead.hcrc ? 2 : 0) +
                                    (!s.gzhead.extra ? 0 : 4) +
                                    (!s.gzhead.name ? 0 : 8) +
                                    (!s.gzhead.comment ? 0 : 16)
                                );
                                put_byte(s, s.gzhead.time & 0xff);
                                put_byte(s, (s.gzhead.time >> 8) & 0xff);
                                put_byte(s, (s.gzhead.time >> 16) & 0xff);
                                put_byte(s, (s.gzhead.time >> 24) & 0xff);
                                put_byte(s, s.level === 9 ? 2 :
                                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                                        4 : 0));
                                put_byte(s, s.gzhead.os & 0xff);
                                if (s.gzhead.extra && s.gzhead.extra.length) {
                                    put_byte(s, s.gzhead.extra.length & 0xff);
                                    put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
                                }
                                if (s.gzhead.hcrc) {
                                    strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
                                }
                                s.gzindex = 0;
                                s.status = EXTRA_STATE;
                            }
                        } else // DEFLATE header
                        {
                            var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
                            var level_flags = -1;

                            if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                                level_flags = 0;
                            } else if (s.level < 6) {
                                level_flags = 1;
                            } else if (s.level === 6) {
                                level_flags = 2;
                            } else {
                                level_flags = 3;
                            }
                            header |= (level_flags << 6);
                            if (s.strstart !== 0) {
                                header |= PRESET_DICT;
                            }
                            header += 31 - (header % 31);

                            s.status = BUSY_STATE;
                            putShortMSB(s, header);

                            /* Save the adler32 of the preset dictionary: */
                            if (s.strstart !== 0) {
                                putShortMSB(s, strm.adler >>> 16);
                                putShortMSB(s, strm.adler & 0xffff);
                            }
                            strm.adler = 1; // adler32(0L, Z_NULL, 0);
                        }
                    }

                    //#ifdef GZIP
                    if (s.status === EXTRA_STATE) {
                        if (s.gzhead.extra /* != Z_NULL*/ ) {
                            beg = s.pending; /* start of bytes to update crc */

                            while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
                                if (s.pending === s.pending_buf_size) {
                                    if (s.gzhead.hcrc && s.pending > beg) {
                                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                    }
                                    flush_pending(strm);
                                    beg = s.pending;
                                    if (s.pending === s.pending_buf_size) {
                                        break;
                                    }
                                }
                                put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
                                s.gzindex++;
                            }
                            if (s.gzhead.hcrc && s.pending > beg) {
                                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                            }
                            if (s.gzindex === s.gzhead.extra.length) {
                                s.gzindex = 0;
                                s.status = NAME_STATE;
                            }
                        } else {
                            s.status = NAME_STATE;
                        }
                    }
                    if (s.status === NAME_STATE) {
                        if (s.gzhead.name /* != Z_NULL*/ ) {
                            beg = s.pending; /* start of bytes to update crc */
                            //int val;

                            do {
                                if (s.pending === s.pending_buf_size) {
                                    if (s.gzhead.hcrc && s.pending > beg) {
                                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                    }
                                    flush_pending(strm);
                                    beg = s.pending;
                                    if (s.pending === s.pending_buf_size) {
                                        val = 1;
                                        break;
                                    }
                                }
                                // JS specific: little magic to add zero terminator to end of string
                                if (s.gzindex < s.gzhead.name.length) {
                                    val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                                } else {
                                    val = 0;
                                }
                                put_byte(s, val);
                            } while (val !== 0);

                            if (s.gzhead.hcrc && s.pending > beg) {
                                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                            }
                            if (val === 0) {
                                s.gzindex = 0;
                                s.status = COMMENT_STATE;
                            }
                        } else {
                            s.status = COMMENT_STATE;
                        }
                    }
                    if (s.status === COMMENT_STATE) {
                        if (s.gzhead.comment /* != Z_NULL*/ ) {
                            beg = s.pending; /* start of bytes to update crc */
                            //int val;

                            do {
                                if (s.pending === s.pending_buf_size) {
                                    if (s.gzhead.hcrc && s.pending > beg) {
                                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                                    }
                                    flush_pending(strm);
                                    beg = s.pending;
                                    if (s.pending === s.pending_buf_size) {
                                        val = 1;
                                        break;
                                    }
                                }
                                // JS specific: little magic to add zero terminator to end of string
                                if (s.gzindex < s.gzhead.comment.length) {
                                    val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                                } else {
                                    val = 0;
                                }
                                put_byte(s, val);
                            } while (val !== 0);

                            if (s.gzhead.hcrc && s.pending > beg) {
                                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                            }
                            if (val === 0) {
                                s.status = HCRC_STATE;
                            }
                        } else {
                            s.status = HCRC_STATE;
                        }
                    }
                    if (s.status === HCRC_STATE) {
                        if (s.gzhead.hcrc) {
                            if (s.pending + 2 > s.pending_buf_size) {
                                flush_pending(strm);
                            }
                            if (s.pending + 2 <= s.pending_buf_size) {
                                put_byte(s, strm.adler & 0xff);
                                put_byte(s, (strm.adler >> 8) & 0xff);
                                strm.adler = 0; //crc32(0L, Z_NULL, 0);
                                s.status = BUSY_STATE;
                            }
                        } else {
                            s.status = BUSY_STATE;
                        }
                    }
                    //#endif

                    /* Flush as much pending output as possible */
                    if (s.pending !== 0) {
                        flush_pending(strm);
                        if (strm.avail_out === 0) {
                            /* Since avail_out is 0, deflate will be called again with
                             * more output space, but possibly with both pending and
                             * avail_in equal to zero. There won't be anything to do,
                             * but this is not an error situation so make sure we
                             * return OK instead of BUF_ERROR at next call of deflate:
                             */
                            s.last_flush = -1;
                            return Z_OK;
                        }

                        /* Make sure there is something to do and avoid duplicate consecutive
                         * flushes. For repeated and useless calls with Z_FINISH, we keep
                         * returning Z_STREAM_END instead of Z_BUF_ERROR.
                         */
                    } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
                        flush !== Z_FINISH) {
                        return err(strm, Z_BUF_ERROR);
                    }

                    /* User must not provide more input after the first FINISH: */
                    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
                        return err(strm, Z_BUF_ERROR);
                    }

                    /* Start a new block or continue the current one.
                     */
                    if (strm.avail_in !== 0 || s.lookahead !== 0 ||
                        (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
                        var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
                            (s.strategy === Z_RLE ? deflate_rle(s, flush) :
                                configuration_table[s.level].func(s, flush));

                        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
                            s.status = FINISH_STATE;
                        }
                        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
                            if (strm.avail_out === 0) {
                                s.last_flush = -1;
                                /* avoid BUF_ERROR next call, see above */
                            }
                            return Z_OK;
                            /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
                             * of deflate should use the same flush parameter to make sure
                             * that the flush is complete. So we don't have to output an
                             * empty block here, this will be done at next call. This also
                             * ensures that for a very small output buffer, we emit at most
                             * one empty block.
                             */
                        }
                        if (bstate === BS_BLOCK_DONE) {
                            if (flush === Z_PARTIAL_FLUSH) {
                                trees._tr_align(s);
                            } else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

                                trees._tr_stored_block(s, 0, 0, false);
                                /* For a full flush, this empty block will be recognized
                                 * as a special marker by inflate_sync().
                                 */
                                if (flush === Z_FULL_FLUSH) {
                                    /*** CLEAR_HASH(s); ***/
                                    /* forget history */
                                    zero(s.head); // Fill with NIL (= 0);

                                    if (s.lookahead === 0) {
                                        s.strstart = 0;
                                        s.block_start = 0;
                                        s.insert = 0;
                                    }
                                }
                            }
                            flush_pending(strm);
                            if (strm.avail_out === 0) {
                                s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
                                return Z_OK;
                            }
                        }
                    }
                    //Assert(strm->avail_out > 0, "bug2");
                    //if (strm.avail_out <= 0) { throw new Error("bug2");}

                    if (flush !== Z_FINISH) {
                        return Z_OK;
                    }
                    if (s.wrap <= 0) {
                        return Z_STREAM_END;
                    }

                    /* Write the trailer */
                    if (s.wrap === 2) {
                        put_byte(s, strm.adler & 0xff);
                        put_byte(s, (strm.adler >> 8) & 0xff);
                        put_byte(s, (strm.adler >> 16) & 0xff);
                        put_byte(s, (strm.adler >> 24) & 0xff);
                        put_byte(s, strm.total_in & 0xff);
                        put_byte(s, (strm.total_in >> 8) & 0xff);
                        put_byte(s, (strm.total_in >> 16) & 0xff);
                        put_byte(s, (strm.total_in >> 24) & 0xff);
                    } else {
                        putShortMSB(s, strm.adler >>> 16);
                        putShortMSB(s, strm.adler & 0xffff);
                    }

                    flush_pending(strm);
                    /* If avail_out is zero, the application will call deflate again
                     * to flush the rest.
                     */
                    if (s.wrap > 0) {
                        s.wrap = -s.wrap;
                    }
                    /* write the trailer only once! */
                    return s.pending !== 0 ? Z_OK : Z_STREAM_END;
                }

                function deflateEnd(strm) {
                    var status;

                    if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/ ) {
                        return Z_STREAM_ERROR;
                    }

                    status = strm.state.status;
                    if (status !== INIT_STATE &&
                        status !== EXTRA_STATE &&
                        status !== NAME_STATE &&
                        status !== COMMENT_STATE &&
                        status !== HCRC_STATE &&
                        status !== BUSY_STATE &&
                        status !== FINISH_STATE
                    ) {
                        return err(strm, Z_STREAM_ERROR);
                    }

                    strm.state = null;

                    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
                }


                /* =========================================================================
                 * Initializes the compression dictionary from the given byte
                 * sequence without producing any compressed output.
                 */
                function deflateSetDictionary(strm, dictionary) {
                    var dictLength = dictionary.length;

                    var s;
                    var str, n;
                    var wrap;
                    var avail;
                    var next;
                    var input;
                    var tmpDict;

                    if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/ ) {
                        return Z_STREAM_ERROR;
                    }

                    s = strm.state;
                    wrap = s.wrap;

                    if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
                        return Z_STREAM_ERROR;
                    }

                    /* when using zlib wrappers, compute Adler-32 for provided dictionary */
                    if (wrap === 1) {
                        /* adler32(strm->adler, dictionary, dictLength); */
                        strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
                    }

                    s.wrap = 0; /* avoid computing Adler-32 in read_buf */

                    /* if dictionary would fill window, just replace the history */
                    if (dictLength >= s.w_size) {
                        if (wrap === 0) { /* already empty otherwise */
                            /*** CLEAR_HASH(s); ***/
                            zero(s.head); // Fill with NIL (= 0);
                            s.strstart = 0;
                            s.block_start = 0;
                            s.insert = 0;
                        }
                        /* use the tail */
                        // dictionary = dictionary.slice(dictLength - s.w_size);
                        tmpDict = new utils.Buf8(s.w_size);
                        utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
                        dictionary = tmpDict;
                        dictLength = s.w_size;
                    }
                    /* insert dictionary into window and hash */
                    avail = strm.avail_in;
                    next = strm.next_in;
                    input = strm.input;
                    strm.avail_in = dictLength;
                    strm.next_in = 0;
                    strm.input = dictionary;
                    fill_window(s);
                    while (s.lookahead >= MIN_MATCH) {
                        str = s.strstart;
                        n = s.lookahead - (MIN_MATCH - 1);
                        do {
                            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

                            s.prev[str & s.w_mask] = s.head[s.ins_h];

                            s.head[s.ins_h] = str;
                            str++;
                        } while (--n);
                        s.strstart = str;
                        s.lookahead = MIN_MATCH - 1;
                        fill_window(s);
                    }
                    s.strstart += s.lookahead;
                    s.block_start = s.strstart;
                    s.insert = s.lookahead;
                    s.lookahead = 0;
                    s.match_length = s.prev_length = MIN_MATCH - 1;
                    s.match_available = 0;
                    strm.next_in = next;
                    strm.input = input;
                    strm.avail_in = avail;
                    s.wrap = wrap;
                    return Z_OK;
                }


                exports.deflateInit = deflateInit;
                exports.deflateInit2 = deflateInit2;
                exports.deflateReset = deflateReset;
                exports.deflateResetKeep = deflateResetKeep;
                exports.deflateSetHeader = deflateSetHeader;
                exports.deflate = deflate;
                exports.deflateEnd = deflateEnd;
                exports.deflateSetDictionary = deflateSetDictionary;
                exports.deflateInfo = 'pako deflate (from Nodeca project)';

                /* Not implemented
                exports.deflateBound = deflateBound;
                exports.deflateCopy = deflateCopy;
                exports.deflateParams = deflateParams;
                exports.deflatePending = deflatePending;
                exports.deflatePrime = deflatePrime;
                exports.deflateTune = deflateTune;
                */


                /***/
            }),

        /***/
        2017:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                /* eslint-disable space-unary-ops */

                var utils = __webpack_require__(1836);

                /* Public constants ==========================================================*/
                /* ===========================================================================*/


                //var Z_FILTERED          = 1;
                //var Z_HUFFMAN_ONLY      = 2;
                //var Z_RLE               = 3;
                var Z_FIXED = 4;
                //var Z_DEFAULT_STRATEGY  = 0;

                /* Possible values of the data_type field (though see inflate()) */
                var Z_BINARY = 0;
                var Z_TEXT = 1;
                //var Z_ASCII             = 1; // = Z_TEXT
                var Z_UNKNOWN = 2;

                /*============================================================================*/


                function zero(buf) {
                    var len = buf.length;
                    while (--len >= 0) {
                        buf[len] = 0;
                    }
                }

                // From zutil.h

                var STORED_BLOCK = 0;
                var STATIC_TREES = 1;
                var DYN_TREES = 2;
                /* The three kinds of block type */

                var MIN_MATCH = 3;
                var MAX_MATCH = 258;
                /* The minimum and maximum match lengths */

                // From deflate.h
                /* ===========================================================================
                 * Internal compression state.
                 */

                var LENGTH_CODES = 29;
                /* number of length codes, not counting the special END_BLOCK code */

                var LITERALS = 256;
                /* number of literal bytes 0..255 */

                var L_CODES = LITERALS + 1 + LENGTH_CODES;
                /* number of Literal or Length codes, including the END_BLOCK code */

                var D_CODES = 30;
                /* number of distance codes */

                var BL_CODES = 19;
                /* number of codes used to transfer the bit lengths */

                var HEAP_SIZE = 2 * L_CODES + 1;
                /* maximum heap size */

                var MAX_BITS = 15;
                /* All codes must not exceed MAX_BITS bits */

                var Buf_size = 16;
                /* size of bit buffer in bi_buf */


                /* ===========================================================================
                 * Constants
                 */

                var MAX_BL_BITS = 7;
                /* Bit length codes must not exceed MAX_BL_BITS bits */

                var END_BLOCK = 256;
                /* end of block literal code */

                var REP_3_6 = 16;
                /* repeat previous bit length 3-6 times (2 bits of repeat count) */

                var REPZ_3_10 = 17;
                /* repeat a zero length 3-10 times  (3 bits of repeat count) */

                var REPZ_11_138 = 18;
                /* repeat a zero length 11-138 times  (7 bits of repeat count) */

                /* eslint-disable comma-spacing,array-bracket-spacing */
                var extra_lbits = /* extra bits for each length code */ [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

                var extra_dbits = /* extra bits for each distance code */ [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

                var extra_blbits = /* extra bits for each bit length code */ [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

                var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                /* eslint-enable comma-spacing,array-bracket-spacing */

                /* The lengths of the bit length codes are sent in order of decreasing
                 * probability, to avoid transmitting the lengths for unused bit length codes.
                 */

                /* ===========================================================================
                 * Local data. These are initialized only once.
                 */

                // We pre-fill arrays with 0 to avoid uninitialized gaps

                var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

                // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
                var static_ltree = new Array((L_CODES + 2) * 2);
                zero(static_ltree);
                /* The static literal tree. Since the bit lengths are imposed, there is no
                 * need for the L_CODES extra codes used during heap construction. However
                 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
                 * below).
                 */

                var static_dtree = new Array(D_CODES * 2);
                zero(static_dtree);
                /* The static distance tree. (Actually a trivial tree since all codes use
                 * 5 bits.)
                 */

                var _dist_code = new Array(DIST_CODE_LEN);
                zero(_dist_code);
                /* Distance codes. The first 256 values correspond to the distances
                 * 3 .. 258, the last 256 values correspond to the top 8 bits of
                 * the 15 bit distances.
                 */

                var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
                zero(_length_code);
                /* length code for each normalized match length (0 == MIN_MATCH) */

                var base_length = new Array(LENGTH_CODES);
                zero(base_length);
                /* First normalized length for each code (0 = MIN_MATCH) */

                var base_dist = new Array(D_CODES);
                zero(base_dist);
                /* First normalized distance for each code (0 = distance of 1) */


                function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

                    this.static_tree = static_tree; /* static tree or NULL */
                    this.extra_bits = extra_bits; /* extra bits for each code or NULL */
                    this.extra_base = extra_base; /* base index for extra_bits */
                    this.elems = elems; /* max number of elements in the tree */
                    this.max_length = max_length; /* max bit length for the codes */

                    // show if `static_tree` has data or dummy - needed for monomorphic objects
                    this.has_stree = static_tree && static_tree.length;
                }


                var static_l_desc;
                var static_d_desc;
                var static_bl_desc;


                function TreeDesc(dyn_tree, stat_desc) {
                    this.dyn_tree = dyn_tree; /* the dynamic tree */
                    this.max_code = 0; /* largest code with non zero frequency */
                    this.stat_desc = stat_desc; /* the corresponding static tree */
                }



                function d_code(dist) {
                    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
                }


                /* ===========================================================================
                 * Output a short LSB first on the stream.
                 * IN assertion: there is enough room in pendingBuf.
                 */
                function put_short(s, w) {
                    //    put_byte(s, (uch)((w) & 0xff));
                    //    put_byte(s, (uch)((ush)(w) >> 8));
                    s.pending_buf[s.pending++] = (w) & 0xff;
                    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
                }


                /* ===========================================================================
                 * Send a value on a given number of bits.
                 * IN assertion: length <= 16 and value fits in length bits.
                 */
                function send_bits(s, value, length) {
                    if (s.bi_valid > (Buf_size - length)) {
                        s.bi_buf |= (value << s.bi_valid) & 0xffff;
                        put_short(s, s.bi_buf);
                        s.bi_buf = value >> (Buf_size - s.bi_valid);
                        s.bi_valid += length - Buf_size;
                    } else {
                        s.bi_buf |= (value << s.bi_valid) & 0xffff;
                        s.bi_valid += length;
                    }
                }


                function send_code(s, c, tree) {
                    send_bits(s, tree[c * 2] /*.Code*/ , tree[c * 2 + 1] /*.Len*/ );
                }


                /* ===========================================================================
                 * Reverse the first len bits of a code, using straightforward code (a faster
                 * method would use a table)
                 * IN assertion: 1 <= len <= 15
                 */
                function bi_reverse(code, len) {
                    var res = 0;
                    do {
                        res |= code & 1;
                        code >>>= 1;
                        res <<= 1;
                    } while (--len > 0);
                    return res >>> 1;
                }


                /* ===========================================================================
                 * Flush the bit buffer, keeping at most 7 bits in it.
                 */
                function bi_flush(s) {
                    if (s.bi_valid === 16) {
                        put_short(s, s.bi_buf);
                        s.bi_buf = 0;
                        s.bi_valid = 0;

                    } else if (s.bi_valid >= 8) {
                        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
                        s.bi_buf >>= 8;
                        s.bi_valid -= 8;
                    }
                }


                /* ===========================================================================
                 * Compute the optimal bit lengths for a tree and update the total bit length
                 * for the current block.
                 * IN assertion: the fields freq and dad are set, heap[heap_max] and
                 *    above are the tree nodes sorted by increasing frequency.
                 * OUT assertions: the field len is set to the optimal bit length, the
                 *     array bl_count contains the frequencies for each bit length.
                 *     The length opt_len is updated; static_len is also updated if stree is
                 *     not null.
                 */
                function gen_bitlen(s, desc)
                //    deflate_state *s;
                //    tree_desc *desc;    /* the tree descriptor */
                {
                    var tree = desc.dyn_tree;
                    var max_code = desc.max_code;
                    var stree = desc.stat_desc.static_tree;
                    var has_stree = desc.stat_desc.has_stree;
                    var extra = desc.stat_desc.extra_bits;
                    var base = desc.stat_desc.extra_base;
                    var max_length = desc.stat_desc.max_length;
                    var h; /* heap index */
                    var n, m; /* iterate over the tree elements */
                    var bits; /* bit length */
                    var xbits; /* extra bits */
                    var f; /* frequency */
                    var overflow = 0; /* number of elements with bit length too large */

                    for (bits = 0; bits <= MAX_BITS; bits++) {
                        s.bl_count[bits] = 0;
                    }

                    /* In a first pass, compute the optimal bit lengths (which may
                     * overflow in the case of the bit length tree).
                     */
                    tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

                    for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
                        n = s.heap[h];
                        bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
                        if (bits > max_length) {
                            bits = max_length;
                            overflow++;
                        }
                        tree[n * 2 + 1] /*.Len*/ = bits;
                        /* We overwrite tree[n].Dad which is no longer needed */

                        if (n > max_code) {
                            continue;
                        } /* not a leaf node */

                        s.bl_count[bits]++;
                        xbits = 0;
                        if (n >= base) {
                            xbits = extra[n - base];
                        }
                        f = tree[n * 2] /*.Freq*/ ;
                        s.opt_len += f * (bits + xbits);
                        if (has_stree) {
                            s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
                        }
                    }
                    if (overflow === 0) {
                        return;
                    }

                    // Trace((stderr,"\nbit length overflow\n"));
                    /* This happens for example on obj2 and pic of the Calgary corpus */

                    /* Find the first bit length which could increase: */
                    do {
                        bits = max_length - 1;
                        while (s.bl_count[bits] === 0) {
                            bits--;
                        }
                        s.bl_count[bits]--; /* move one leaf down the tree */
                        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
                        s.bl_count[max_length]--;
                        /* The brother of the overflow item also moves one step up,
                         * but this does not affect bl_count[max_length]
                         */
                        overflow -= 2;
                    } while (overflow > 0);

                    /* Now recompute all bit lengths, scanning in increasing frequency.
                     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
                     * lengths instead of fixing only the wrong ones. This idea is taken
                     * from 'ar' written by Haruhiko Okumura.)
                     */
                    for (bits = max_length; bits !== 0; bits--) {
                        n = s.bl_count[bits];
                        while (n !== 0) {
                            m = s.heap[--h];
                            if (m > max_code) {
                                continue;
                            }
                            if (tree[m * 2 + 1] /*.Len*/ !== bits) {
                                // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                                s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/ ) * tree[m * 2] /*.Freq*/ ;
                                tree[m * 2 + 1] /*.Len*/ = bits;
                            }
                            n--;
                        }
                    }
                }


                /* ===========================================================================
                 * Generate the codes for a given tree and bit counts (which need not be
                 * optimal).
                 * IN assertion: the array bl_count contains the bit length statistics for
                 * the given tree and the field len is set for all tree elements.
                 * OUT assertion: the field code is set for all tree elements of non
                 *     zero code length.
                 */
                function gen_codes(tree, max_code, bl_count)
                //    ct_data *tree;             /* the tree to decorate */
                //    int max_code;              /* largest code with non zero frequency */
                //    ushf *bl_count;            /* number of codes at each bit length */
                {
                    var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
                    var code = 0; /* running code value */
                    var bits; /* bit index */
                    var n; /* code index */

                    /* The distribution counts are first used to generate the code values
                     * without bit reversal.
                     */
                    for (bits = 1; bits <= MAX_BITS; bits++) {
                        next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
                    }
                    /* Check that the bit counts in bl_count are consistent. The last code
                     * must be all ones.
                     */
                    //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
                    //        "inconsistent bit counts");
                    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

                    for (n = 0; n <= max_code; n++) {
                        var len = tree[n * 2 + 1] /*.Len*/ ;
                        if (len === 0) {
                            continue;
                        }
                        /* Now reverse the bits */
                        tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

                        //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
                        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
                    }
                }


                /* ===========================================================================
                 * Initialize the various 'constant' tables.
                 */
                function tr_static_init() {
                    var n; /* iterates over tree elements */
                    var bits; /* bit counter */
                    var length; /* length value */
                    var code; /* code value */
                    var dist; /* distance index */
                    var bl_count = new Array(MAX_BITS + 1);
                    /* number of codes at each bit length for an optimal tree */

                    // do check in _tr_init()
                    //if (static_init_done) return;

                    /* For some embedded targets, global variables are not initialized: */
                    /*#ifdef NO_INIT_GLOBAL_POINTERS
                      static_l_desc.static_tree = static_ltree;
                      static_l_desc.extra_bits = extra_lbits;
                      static_d_desc.static_tree = static_dtree;
                      static_d_desc.extra_bits = extra_dbits;
                      static_bl_desc.extra_bits = extra_blbits;
                    #endif*/

                    /* Initialize the mapping length (0..255) -> length code (0..28) */
                    length = 0;
                    for (code = 0; code < LENGTH_CODES - 1; code++) {
                        base_length[code] = length;
                        for (n = 0; n < (1 << extra_lbits[code]); n++) {
                            _length_code[length++] = code;
                        }
                    }
                    //Assert (length == 256, "tr_static_init: length != 256");
                    /* Note that the length 255 (match length 258) can be represented
                     * in two different ways: code 284 + 5 bits or code 285, so we
                     * overwrite length_code[255] to use the best encoding:
                     */
                    _length_code[length - 1] = code;

                    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
                    dist = 0;
                    for (code = 0; code < 16; code++) {
                        base_dist[code] = dist;
                        for (n = 0; n < (1 << extra_dbits[code]); n++) {
                            _dist_code[dist++] = code;
                        }
                    }
                    //Assert (dist == 256, "tr_static_init: dist != 256");
                    dist >>= 7; /* from now on, all distances are divided by 128 */
                    for (; code < D_CODES; code++) {
                        base_dist[code] = dist << 7;
                        for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
                            _dist_code[256 + dist++] = code;
                        }
                    }
                    //Assert (dist == 256, "tr_static_init: 256+dist != 512");

                    /* Construct the codes of the static literal tree */
                    for (bits = 0; bits <= MAX_BITS; bits++) {
                        bl_count[bits] = 0;
                    }

                    n = 0;
                    while (n <= 143) {
                        static_ltree[n * 2 + 1] /*.Len*/ = 8;
                        n++;
                        bl_count[8]++;
                    }
                    while (n <= 255) {
                        static_ltree[n * 2 + 1] /*.Len*/ = 9;
                        n++;
                        bl_count[9]++;
                    }
                    while (n <= 279) {
                        static_ltree[n * 2 + 1] /*.Len*/ = 7;
                        n++;
                        bl_count[7]++;
                    }
                    while (n <= 287) {
                        static_ltree[n * 2 + 1] /*.Len*/ = 8;
                        n++;
                        bl_count[8]++;
                    }
                    /* Codes 286 and 287 do not exist, but we must include them in the
                     * tree construction to get a canonical Huffman tree (longest code
                     * all ones)
                     */
                    gen_codes(static_ltree, L_CODES + 1, bl_count);

                    /* The static distance tree is trivial: */
                    for (n = 0; n < D_CODES; n++) {
                        static_dtree[n * 2 + 1] /*.Len*/ = 5;
                        static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
                    }

                    // Now data ready and we can init static trees
                    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
                    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
                    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);

                    //static_init_done = true;
                }


                /* ===========================================================================
                 * Initialize a new block.
                 */
                function init_block(s) {
                    var n; /* iterates over tree elements */

                    /* Initialize the trees. */
                    for (n = 0; n < L_CODES; n++) {
                        s.dyn_ltree[n * 2] /*.Freq*/ = 0;
                    }
                    for (n = 0; n < D_CODES; n++) {
                        s.dyn_dtree[n * 2] /*.Freq*/ = 0;
                    }
                    for (n = 0; n < BL_CODES; n++) {
                        s.bl_tree[n * 2] /*.Freq*/ = 0;
                    }

                    s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
                    s.opt_len = s.static_len = 0;
                    s.last_lit = s.matches = 0;
                }


                /* ===========================================================================
                 * Flush the bit buffer and align the output on a byte boundary
                 */
                function bi_windup(s) {
                    if (s.bi_valid > 8) {
                        put_short(s, s.bi_buf);
                    } else if (s.bi_valid > 0) {
                        //put_byte(s, (Byte)s->bi_buf);
                        s.pending_buf[s.pending++] = s.bi_buf;
                    }
                    s.bi_buf = 0;
                    s.bi_valid = 0;
                }

                /* ===========================================================================
                 * Copy a stored block, storing first the length and its
                 * one's complement if requested.
                 */
                function copy_block(s, buf, len, header)
                //DeflateState *s;
                //charf    *buf;    /* the input data */
                //unsigned len;     /* its length */
                //int      header;  /* true if block header must be written */
                {
                    bi_windup(s); /* align on byte boundary */

                    if (header) {
                        put_short(s, len);
                        put_short(s, ~len);
                    }
                    //  while (len--) {
                    //    put_byte(s, *buf++);
                    //  }
                    utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
                    s.pending += len;
                }

                /* ===========================================================================
                 * Compares to subtrees, using the tree depth as tie breaker when
                 * the subtrees have equal frequency. This minimizes the worst case length.
                 */
                function smaller(tree, n, m, depth) {
                    var _n2 = n * 2;
                    var _m2 = m * 2;
                    return (tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||
                        (tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m]));
                }

                /* ===========================================================================
                 * Restore the heap property by moving down the tree starting at node k,
                 * exchanging a node with the smallest of its two sons if necessary, stopping
                 * when the heap property is re-established (each father smaller than its
                 * two sons).
                 */
                function pqdownheap(s, tree, k)
                //    deflate_state *s;
                //    ct_data *tree;  /* the tree to restore */
                //    int k;               /* node to move down */
                {
                    var v = s.heap[k];
                    var j = k << 1; /* left son of k */
                    while (j <= s.heap_len) {
                        /* Set j to the smallest of the two sons: */
                        if (j < s.heap_len &&
                            smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
                            j++;
                        }
                        /* Exit if v is smaller than both sons */
                        if (smaller(tree, v, s.heap[j], s.depth)) {
                            break;
                        }

                        /* Exchange v with the smallest son */
                        s.heap[k] = s.heap[j];
                        k = j;

                        /* And continue down the tree, setting j to the left son of k */
                        j <<= 1;
                    }
                    s.heap[k] = v;
                }


                // inlined manually
                // var SMALLEST = 1;

                /* ===========================================================================
                 * Send the block data compressed using the given Huffman trees
                 */
                function compress_block(s, ltree, dtree)
                //    deflate_state *s;
                //    const ct_data *ltree; /* literal tree */
                //    const ct_data *dtree; /* distance tree */
                {
                    var dist; /* distance of matched string */
                    var lc; /* match length or unmatched char (if dist == 0) */
                    var lx = 0; /* running index in l_buf */
                    var code; /* the code to send */
                    var extra; /* number of extra bits to send */

                    if (s.last_lit !== 0) {
                        do {
                            dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
                            lc = s.pending_buf[s.l_buf + lx];
                            lx++;

                            if (dist === 0) {
                                send_code(s, lc, ltree); /* send a literal byte */
                                //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
                            } else {
                                /* Here, lc is the match length - MIN_MATCH */
                                code = _length_code[lc];
                                send_code(s, code + LITERALS + 1, ltree); /* send the length code */
                                extra = extra_lbits[code];
                                if (extra !== 0) {
                                    lc -= base_length[code];
                                    send_bits(s, lc, extra); /* send the extra length bits */
                                }
                                dist--; /* dist is now the match distance - 1 */
                                code = d_code(dist);
                                //Assert (code < D_CODES, "bad d_code");

                                send_code(s, code, dtree); /* send the distance code */
                                extra = extra_dbits[code];
                                if (extra !== 0) {
                                    dist -= base_dist[code];
                                    send_bits(s, dist, extra); /* send the extra distance bits */
                                }
                            } /* literal or match pair ? */

                            /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
                            //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
                            //       "pendingBuf overflow");

                        } while (lx < s.last_lit);
                    }

                    send_code(s, END_BLOCK, ltree);
                }


                /* ===========================================================================
                 * Construct one Huffman tree and assigns the code bit strings and lengths.
                 * Update the total bit length for the current block.
                 * IN assertion: the field freq is set for all tree elements.
                 * OUT assertions: the fields len and code are set to the optimal bit length
                 *     and corresponding code. The length opt_len is updated; static_len is
                 *     also updated if stree is not null. The field max_code is set.
                 */
                function build_tree(s, desc)
                //    deflate_state *s;
                //    tree_desc *desc; /* the tree descriptor */
                {
                    var tree = desc.dyn_tree;
                    var stree = desc.stat_desc.static_tree;
                    var has_stree = desc.stat_desc.has_stree;
                    var elems = desc.stat_desc.elems;
                    var n, m; /* iterate over heap elements */
                    var max_code = -1; /* largest code with non zero frequency */
                    var node; /* new node being created */

                    /* Construct the initial heap, with least frequent element in
                     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
                     * heap[0] is not used.
                     */
                    s.heap_len = 0;
                    s.heap_max = HEAP_SIZE;

                    for (n = 0; n < elems; n++) {
                        if (tree[n * 2] /*.Freq*/ !== 0) {
                            s.heap[++s.heap_len] = max_code = n;
                            s.depth[n] = 0;

                        } else {
                            tree[n * 2 + 1] /*.Len*/ = 0;
                        }
                    }

                    /* The pkzip format requires that at least one distance code exists,
                     * and that at least one bit should be sent even if there is only one
                     * possible code. So to avoid special checks later on we force at least
                     * two codes of non zero frequency.
                     */
                    while (s.heap_len < 2) {
                        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
                        tree[node * 2] /*.Freq*/ = 1;
                        s.depth[node] = 0;
                        s.opt_len--;

                        if (has_stree) {
                            s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
                        }
                        /* node is 0 or 1 so it does not have extra bits */
                    }
                    desc.max_code = max_code;

                    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
                     * establish sub-heaps of increasing lengths:
                     */
                    for (n = (s.heap_len >> 1 /*int /2*/ ); n >= 1; n--) {
                        pqdownheap(s, tree, n);
                    }

                    /* Construct the Huffman tree by repeatedly combining the least two
                     * frequent nodes.
                     */
                    node = elems; /* next internal node of the tree */
                    do {
                        //pqremove(s, tree, n);  /* n = node of least frequency */
                        /*** pqremove ***/
                        n = s.heap[1 /*SMALLEST*/ ];
                        s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
                        pqdownheap(s, tree, 1 /*SMALLEST*/ );
                        /***/

                        m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */

                        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
                        s.heap[--s.heap_max] = m;

                        /* Create a new node father of n and m */
                        tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/ ;
                        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
                        tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

                        /* and insert the new node in the heap */
                        s.heap[1 /*SMALLEST*/ ] = node++;
                        pqdownheap(s, tree, 1 /*SMALLEST*/ );

                    } while (s.heap_len >= 2);

                    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];

                    /* At this point, the fields freq and dad are set. We can now
                     * generate the bit lengths.
                     */
                    gen_bitlen(s, desc);

                    /* The field len is now set, we can generate the bit codes */
                    gen_codes(tree, max_code, s.bl_count);
                }


                /* ===========================================================================
                 * Scan a literal or distance tree to determine the frequencies of the codes
                 * in the bit length tree.
                 */
                function scan_tree(s, tree, max_code)
                //    deflate_state *s;
                //    ct_data *tree;   /* the tree to be scanned */
                //    int max_code;    /* and its largest code of non zero frequency */
                {
                    var n; /* iterates over all tree elements */
                    var prevlen = -1; /* last emitted length */
                    var curlen; /* length of current code */

                    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

                    var count = 0; /* repeat count of the current code */
                    var max_count = 7; /* max repeat count */
                    var min_count = 4; /* min repeat count */

                    if (nextlen === 0) {
                        max_count = 138;
                        min_count = 3;
                    }
                    tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

                    for (n = 0; n <= max_code; n++) {
                        curlen = nextlen;
                        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

                        if (++count < max_count && curlen === nextlen) {
                            continue;

                        } else if (count < min_count) {
                            s.bl_tree[curlen * 2] /*.Freq*/ += count;

                        } else if (curlen !== 0) {

                            if (curlen !== prevlen) {
                                s.bl_tree[curlen * 2] /*.Freq*/ ++;
                            }
                            s.bl_tree[REP_3_6 * 2] /*.Freq*/ ++;

                        } else if (count <= 10) {
                            s.bl_tree[REPZ_3_10 * 2] /*.Freq*/ ++;

                        } else {
                            s.bl_tree[REPZ_11_138 * 2] /*.Freq*/ ++;
                        }

                        count = 0;
                        prevlen = curlen;

                        if (nextlen === 0) {
                            max_count = 138;
                            min_count = 3;

                        } else if (curlen === nextlen) {
                            max_count = 6;
                            min_count = 3;

                        } else {
                            max_count = 7;
                            min_count = 4;
                        }
                    }
                }


                /* ===========================================================================
                 * Send a literal or distance tree in compressed form, using the codes in
                 * bl_tree.
                 */
                function send_tree(s, tree, max_code)
                //    deflate_state *s;
                //    ct_data *tree; /* the tree to be scanned */
                //    int max_code;       /* and its largest code of non zero frequency */
                {
                    var n; /* iterates over all tree elements */
                    var prevlen = -1; /* last emitted length */
                    var curlen; /* length of current code */

                    var nextlen = tree[0 * 2 + 1] /*.Len*/ ; /* length of next code */

                    var count = 0; /* repeat count of the current code */
                    var max_count = 7; /* max repeat count */
                    var min_count = 4; /* min repeat count */

                    /* tree[max_code+1].Len = -1; */
                    /* guard already set */
                    if (nextlen === 0) {
                        max_count = 138;
                        min_count = 3;
                    }

                    for (n = 0; n <= max_code; n++) {
                        curlen = nextlen;
                        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;

                        if (++count < max_count && curlen === nextlen) {
                            continue;

                        } else if (count < min_count) {
                            do {
                                send_code(s, curlen, s.bl_tree);
                            } while (--count !== 0);

                        } else if (curlen !== 0) {
                            if (curlen !== prevlen) {
                                send_code(s, curlen, s.bl_tree);
                                count--;
                            }
                            //Assert(count >= 3 && count <= 6, " 3_6?");
                            send_code(s, REP_3_6, s.bl_tree);
                            send_bits(s, count - 3, 2);

                        } else if (count <= 10) {
                            send_code(s, REPZ_3_10, s.bl_tree);
                            send_bits(s, count - 3, 3);

                        } else {
                            send_code(s, REPZ_11_138, s.bl_tree);
                            send_bits(s, count - 11, 7);
                        }

                        count = 0;
                        prevlen = curlen;
                        if (nextlen === 0) {
                            max_count = 138;
                            min_count = 3;

                        } else if (curlen === nextlen) {
                            max_count = 6;
                            min_count = 3;

                        } else {
                            max_count = 7;
                            min_count = 4;
                        }
                    }
                }


                /* ===========================================================================
                 * Construct the Huffman tree for the bit lengths and return the index in
                 * bl_order of the last bit length code to send.
                 */
                function build_bl_tree(s) {
                    var max_blindex; /* index of last bit length code of non zero freq */

                    /* Determine the bit length frequencies for literal and distance trees */
                    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
                    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

                    /* Build the bit length tree: */
                    build_tree(s, s.bl_desc);
                    /* opt_len now includes the length of the tree representations, except
                     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
                     */

                    /* Determine the number of bit length codes to send. The pkzip format
                     * requires that at least 4 bit length codes be sent. (appnote.txt says
                     * 3 but the actual value used is 4.)
                     */
                    for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
                        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
                            break;
                        }
                    }
                    /* Update opt_len to include the bit length tree and counts */
                    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
                    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
                    //        s->opt_len, s->static_len));

                    return max_blindex;
                }


                /* ===========================================================================
                 * Send the header for a block using dynamic Huffman trees: the counts, the
                 * lengths of the bit length codes, the literal tree and the distance tree.
                 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
                 */
                function send_all_trees(s, lcodes, dcodes, blcodes)
                //    deflate_state *s;
                //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
                {
                    var rank; /* index in bl_order */

                    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
                    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
                    //        "too many codes");
                    //Tracev((stderr, "\nbl counts: "));
                    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
                    send_bits(s, dcodes - 1, 5);
                    send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
                    for (rank = 0; rank < blcodes; rank++) {
                        //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
                        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/ , 3);
                    }
                    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

                    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
                    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

                    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
                    //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
                }


                /* ===========================================================================
                 * Check if the data type is TEXT or BINARY, using the following algorithm:
                 * - TEXT if the two conditions below are satisfied:
                 *    a) There are no non-portable control characters belonging to the
                 *       "black list" (0..6, 14..25, 28..31).
                 *    b) There is at least one printable character belonging to the
                 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
                 * - BINARY otherwise.
                 * - The following partially-portable control characters form a
                 *   "gray list" that is ignored in this detection algorithm:
                 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
                 * IN assertion: the fields Freq of dyn_ltree are set.
                 */
                function detect_data_type(s) {
                    /* black_mask is the bit mask of black-listed bytes
                     * set bits 0..6, 14..25, and 28..31
                     * 0xf3ffc07f = binary 11110011111111111100000001111111
                     */
                    var black_mask = 0xf3ffc07f;
                    var n;

                    /* Check for non-textual ("black-listed") bytes. */
                    for (n = 0; n <= 31; n++, black_mask >>>= 1) {
                        if ((black_mask & 1) && (s.dyn_ltree[n * 2] /*.Freq*/ !== 0)) {
                            return Z_BINARY;
                        }
                    }

                    /* Check for textual ("white-listed") bytes. */
                    if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||
                        s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
                        return Z_TEXT;
                    }
                    for (n = 32; n < LITERALS; n++) {
                        if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
                            return Z_TEXT;
                        }
                    }

                    /* There are no "black-listed" or "white-listed" bytes:
                     * this stream either is empty or has tolerated ("gray-listed") bytes only.
                     */
                    return Z_BINARY;
                }


                var static_init_done = false;

                /* ===========================================================================
                 * Initialize the tree data structures for a new zlib stream.
                 */
                function _tr_init(s) {

                    if (!static_init_done) {
                        tr_static_init();
                        static_init_done = true;
                    }

                    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
                    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
                    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

                    s.bi_buf = 0;
                    s.bi_valid = 0;

                    /* Initialize the first block of the first file: */
                    init_block(s);
                }


                /* ===========================================================================
                 * Send a stored block
                 */
                function _tr_stored_block(s, buf, stored_len, last)
                //DeflateState *s;
                //charf *buf;       /* input block */
                //ulg stored_len;   /* length of input block */
                //int last;         /* one if this is the last block for a file */
                {
                    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
                    copy_block(s, buf, stored_len, true); /* with header */
                }


                /* ===========================================================================
                 * Send one empty static block to give enough lookahead for inflate.
                 * This takes 10 bits, of which 7 may remain in the bit buffer.
                 */
                function _tr_align(s) {
                    send_bits(s, STATIC_TREES << 1, 3);
                    send_code(s, END_BLOCK, static_ltree);
                    bi_flush(s);
                }


                /* ===========================================================================
                 * Determine the best encoding for the current block: dynamic trees, static
                 * trees or store, and output the encoded block to the zip file.
                 */
                function _tr_flush_block(s, buf, stored_len, last)
                //DeflateState *s;
                //charf *buf;       /* input block, or NULL if too old */
                //ulg stored_len;   /* length of input block */
                //int last;         /* one if this is the last block for a file */
                {
                    var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
                    var max_blindex = 0; /* index of last bit length code of non zero freq */

                    /* Build the Huffman trees unless a stored block is forced */
                    if (s.level > 0) {

                        /* Check if the file is binary or text */
                        if (s.strm.data_type === Z_UNKNOWN) {
                            s.strm.data_type = detect_data_type(s);
                        }

                        /* Construct the literal and distance trees */
                        build_tree(s, s.l_desc);
                        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                        //        s->static_len));

                        build_tree(s, s.d_desc);
                        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
                        //        s->static_len));
                        /* At this point, opt_len and static_len are the total bit lengths of
                         * the compressed block data, excluding the tree representations.
                         */

                        /* Build the bit length tree for the above two trees, and get the index
                         * in bl_order of the last bit length code to send.
                         */
                        max_blindex = build_bl_tree(s);

                        /* Determine the best encoding. Compute the block lengths in bytes. */
                        opt_lenb = (s.opt_len + 3 + 7) >>> 3;
                        static_lenb = (s.static_len + 3 + 7) >>> 3;

                        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
                        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
                        //        s->last_lit));

                        if (static_lenb <= opt_lenb) {
                            opt_lenb = static_lenb;
                        }

                    } else {
                        // Assert(buf != (char*)0, "lost buf");
                        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
                    }

                    if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
                        /* 4: two words for the lengths */

                        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
                         * Otherwise we can't have processed more than WSIZE input bytes since
                         * the last block flush, because compression would have been
                         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
                         * transform a block into a stored block.
                         */
                        _tr_stored_block(s, buf, stored_len, last);

                    } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

                        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
                        compress_block(s, static_ltree, static_dtree);

                    } else {
                        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
                        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
                        compress_block(s, s.dyn_ltree, s.dyn_dtree);
                    }
                    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
                    /* The above check is made mod 2^32, for files larger than 512 MB
                     * and uLong implemented on 32 bits.
                     */
                    init_block(s);

                    if (last) {
                        bi_windup(s);
                    }
                    // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
                    //       s->compressed_len-7*last));
                }

                /* ===========================================================================
                 * Save the match info and tally the frequency counts. Return true if
                 * the current block must be flushed.
                 */
                function _tr_tally(s, dist, lc)
                //    deflate_state *s;
                //    unsigned dist;  /* distance of matched string */
                //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
                {
                    //var out_length, in_length, dcode;

                    s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;
                    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

                    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
                    s.last_lit++;

                    if (dist === 0) {
                        /* lc is the unmatched char */
                        s.dyn_ltree[lc * 2] /*.Freq*/ ++;
                    } else {
                        s.matches++;
                        /* Here, lc is the match length - MIN_MATCH */
                        dist--; /* dist = match distance - 1 */
                        //Assert((ush)dist < (ush)MAX_DIST(s) &&
                        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
                        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

                        s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/ ++;
                        s.dyn_dtree[d_code(dist) * 2] /*.Freq*/ ++;
                    }

                    // (!) This block is disabled in zlib defaults,
                    // don't enable it for binary compatibility

                    //#ifdef TRUNCATE_BLOCK
                    //  /* Try to guess if it is profitable to stop the current block here */
                    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
                    //    /* Compute an upper bound for the compressed length */
                    //    out_length = s.last_lit*8;
                    //    in_length = s.strstart - s.block_start;
                    //
                    //    for (dcode = 0; dcode < D_CODES; dcode++) {
                    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
                    //    }
                    //    out_length >>>= 3;
                    //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
                    //    //       s->last_lit, in_length, out_length,
                    //    //       100L - out_length*100L/in_length));
                    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
                    //      return true;
                    //    }
                    //  }
                    //#endif

                    return (s.last_lit === s.lit_bufsize - 1);
                    /* We avoid equality with lit_bufsize because of wraparound at 64K
                     * on 16 bit machines and because stored blocks are restricted to
                     * 64K-1 bytes.
                     */
                }

                exports._tr_init = _tr_init;
                exports._tr_stored_block = _tr_stored_block;
                exports._tr_flush_block = _tr_flush_block;
                exports._tr_tally = _tr_tally;
                exports._tr_align = _tr_align;


                /***/
            }),

        /***/
        2018:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                module.exports = {
                    2: 'need dictionary',
                    /* Z_NEED_DICT       2  */
                    1: 'stream end',
                    /* Z_STREAM_END      1  */
                    0: '',
                    /* Z_OK              0  */
                    '-1': 'file error',
                    /* Z_ERRNO         (-1) */
                    '-2': 'stream error',
                    /* Z_STREAM_ERROR  (-2) */
                    '-3': 'data error',
                    /* Z_DATA_ERROR    (-3) */
                    '-4': 'insufficient memory',
                    /* Z_MEM_ERROR     (-4) */
                    '-5': 'buffer error',
                    /* Z_BUF_ERROR     (-5) */
                    '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */
                };


                /***/
            }),

        /***/
        2019:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                var utils = __webpack_require__(1836);
                var adler32 = __webpack_require__(1900);
                var crc32 = __webpack_require__(1901);
                var inflate_fast = __webpack_require__(2020);
                var inflate_table = __webpack_require__(2021);

                var CODES = 0;
                var LENS = 1;
                var DISTS = 2;

                /* Public constants ==========================================================*/
                /* ===========================================================================*/


                /* Allowed flush values; see deflate() and inflate() below for details */
                //var Z_NO_FLUSH      = 0;
                //var Z_PARTIAL_FLUSH = 1;
                //var Z_SYNC_FLUSH    = 2;
                //var Z_FULL_FLUSH    = 3;
                var Z_FINISH = 4;
                var Z_BLOCK = 5;
                var Z_TREES = 6;


                /* Return codes for the compression/decompression functions. Negative values
                 * are errors, positive values are used for special but normal events.
                 */
                var Z_OK = 0;
                var Z_STREAM_END = 1;
                var Z_NEED_DICT = 2;
                //var Z_ERRNO         = -1;
                var Z_STREAM_ERROR = -2;
                var Z_DATA_ERROR = -3;
                var Z_MEM_ERROR = -4;
                var Z_BUF_ERROR = -5;
                //var Z_VERSION_ERROR = -6;

                /* The deflate compression method */
                var Z_DEFLATED = 8;


                /* STATES ====================================================================*/
                /* ===========================================================================*/


                var HEAD = 1; /* i: waiting for magic header */
                var FLAGS = 2; /* i: waiting for method and flags (gzip) */
                var TIME = 3; /* i: waiting for modification time (gzip) */
                var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
                var EXLEN = 5; /* i: waiting for extra length (gzip) */
                var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
                var NAME = 7; /* i: waiting for end of file name (gzip) */
                var COMMENT = 8; /* i: waiting for end of comment (gzip) */
                var HCRC = 9; /* i: waiting for header crc (gzip) */
                var DICTID = 10; /* i: waiting for dictionary check value */
                var DICT = 11; /* waiting for inflateSetDictionary() call */
                var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
                var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
                var STORED = 14; /* i: waiting for stored size (length and complement) */
                var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
                var COPY = 16; /* i/o: waiting for input or output to copy stored block */
                var TABLE = 17; /* i: waiting for dynamic block table lengths */
                var LENLENS = 18; /* i: waiting for code length code lengths */
                var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
                var LEN_ = 20; /* i: same as LEN below, but only first time in */
                var LEN = 21; /* i: waiting for length/lit/eob code */
                var LENEXT = 22; /* i: waiting for length extra bits */
                var DIST = 23; /* i: waiting for distance code */
                var DISTEXT = 24; /* i: waiting for distance extra bits */
                var MATCH = 25; /* o: waiting for output space to copy string */
                var LIT = 26; /* o: waiting for output space to write literal */
                var CHECK = 27; /* i: waiting for 32-bit check value */
                var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
                var DONE = 29; /* finished check, done -- remain here until reset */
                var BAD = 30; /* got a data error -- remain here until reset */
                var MEM = 31; /* got an inflate() memory error -- remain here until reset */
                var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

                /* ===========================================================================*/



                var ENOUGH_LENS = 852;
                var ENOUGH_DISTS = 592;
                //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

                var MAX_WBITS = 15;
                /* 32K LZ77 window */
                var DEF_WBITS = MAX_WBITS;


                function zswap32(q) {
                    return (((q >>> 24) & 0xff) +
                        ((q >>> 8) & 0xff00) +
                        ((q & 0xff00) << 8) +
                        ((q & 0xff) << 24));
                }


                function InflateState() {
                    this.mode = 0; /* current inflate mode */
                    this.last = false; /* true if processing last block */
                    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
                    this.havedict = false; /* true if dictionary provided */
                    this.flags = 0; /* gzip header method and flags (0 if zlib) */
                    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
                    this.check = 0; /* protected copy of check value */
                    this.total = 0; /* protected copy of output count */
                    // TODO: may be {}
                    this.head = null; /* where to save gzip header information */

                    /* sliding window */
                    this.wbits = 0; /* log base 2 of requested window size */
                    this.wsize = 0; /* window size or zero if not using window */
                    this.whave = 0; /* valid bytes in the window */
                    this.wnext = 0; /* window write index */
                    this.window = null; /* allocated sliding window, if needed */

                    /* bit accumulator */
                    this.hold = 0; /* input bit accumulator */
                    this.bits = 0; /* number of bits in "in" */

                    /* for string and stored block copying */
                    this.length = 0; /* literal or length of data to copy */
                    this.offset = 0; /* distance back to copy string from */

                    /* for table and code decoding */
                    this.extra = 0; /* extra bits needed */

                    /* fixed and dynamic code tables */
                    this.lencode = null; /* starting table for length/literal codes */
                    this.distcode = null; /* starting table for distance codes */
                    this.lenbits = 0; /* index bits for lencode */
                    this.distbits = 0; /* index bits for distcode */

                    /* dynamic table building */
                    this.ncode = 0; /* number of code length code lengths */
                    this.nlen = 0; /* number of length code lengths */
                    this.ndist = 0; /* number of distance code lengths */
                    this.have = 0; /* number of code lengths in lens[] */
                    this.next = null; /* next available space in codes[] */

                    this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
                    this.work = new utils.Buf16(288); /* work area for code table building */

                    /*
                     because we don't have pointers in js, we use lencode and distcode directly
                     as buffers so we don't need codes
                    */
                    //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
                    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
                    this.distdyn = null; /* dynamic table for distance codes (JS specific) */
                    this.sane = 0; /* if false, allow invalid distance too far */
                    this.back = 0; /* bits back of last unprocessed length/lit */
                    this.was = 0; /* initial length of match */
                }

                function inflateResetKeep(strm) {
                    var state;

                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;
                    strm.total_in = strm.total_out = state.total = 0;
                    strm.msg = ''; /*Z_NULL*/
                    if (state.wrap) { /* to support ill-conceived Java test suite */
                        strm.adler = state.wrap & 1;
                    }
                    state.mode = HEAD;
                    state.last = 0;
                    state.havedict = 0;
                    state.dmax = 32768;
                    state.head = null /*Z_NULL*/ ;
                    state.hold = 0;
                    state.bits = 0;
                    //state.lencode = state.distcode = state.next = state.codes;
                    state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
                    state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

                    state.sane = 1;
                    state.back = -1;
                    //Tracev((stderr, "inflate: reset\n"));
                    return Z_OK;
                }

                function inflateReset(strm) {
                    var state;

                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;
                    state.wsize = 0;
                    state.whave = 0;
                    state.wnext = 0;
                    return inflateResetKeep(strm);

                }

                function inflateReset2(strm, windowBits) {
                    var wrap;
                    var state;

                    /* get the state */
                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;

                    /* extract wrap request from windowBits parameter */
                    if (windowBits < 0) {
                        wrap = 0;
                        windowBits = -windowBits;
                    } else {
                        wrap = (windowBits >> 4) + 1;
                        if (windowBits < 48) {
                            windowBits &= 15;
                        }
                    }

                    /* set number of window bits, free window if different */
                    if (windowBits && (windowBits < 8 || windowBits > 15)) {
                        return Z_STREAM_ERROR;
                    }
                    if (state.window !== null && state.wbits !== windowBits) {
                        state.window = null;
                    }

                    /* update state and reset the rest of it */
                    state.wrap = wrap;
                    state.wbits = windowBits;
                    return inflateReset(strm);
                }

                function inflateInit2(strm, windowBits) {
                    var ret;
                    var state;

                    if (!strm) {
                        return Z_STREAM_ERROR;
                    }
                    //strm.msg = Z_NULL;                 /* in case we return an error */

                    state = new InflateState();

                    //if (state === Z_NULL) return Z_MEM_ERROR;
                    //Tracev((stderr, "inflate: allocated\n"));
                    strm.state = state;
                    state.window = null /*Z_NULL*/ ;
                    ret = inflateReset2(strm, windowBits);
                    if (ret !== Z_OK) {
                        strm.state = null /*Z_NULL*/ ;
                    }
                    return ret;
                }

                function inflateInit(strm) {
                    return inflateInit2(strm, DEF_WBITS);
                }


                /*
                 Return state with length and distance decoding tables and index sizes set to
                 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
                 If BUILDFIXED is defined, then instead this routine builds the tables the
                 first time it's called, and returns those tables the first time and
                 thereafter.  This reduces the size of the code by about 2K bytes, in
                 exchange for a little execution time.  However, BUILDFIXED should not be
                 used for threaded applications, since the rewriting of the tables and virgin
                 may not be thread-safe.
                 */
                var virgin = true;

                var lenfix, distfix; // We have no pointers in JS, so keep tables separate

                function fixedtables(state) {
                    /* build fixed huffman tables if first call (may not be thread safe) */
                    if (virgin) {
                        var sym;

                        lenfix = new utils.Buf32(512);
                        distfix = new utils.Buf32(32);

                        /* literal/length table */
                        sym = 0;
                        while (sym < 144) {
                            state.lens[sym++] = 8;
                        }
                        while (sym < 256) {
                            state.lens[sym++] = 9;
                        }
                        while (sym < 280) {
                            state.lens[sym++] = 7;
                        }
                        while (sym < 288) {
                            state.lens[sym++] = 8;
                        }

                        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
                            bits: 9
                        });

                        /* distance table */
                        sym = 0;
                        while (sym < 32) {
                            state.lens[sym++] = 5;
                        }

                        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
                            bits: 5
                        });

                        /* do this just once */
                        virgin = false;
                    }

                    state.lencode = lenfix;
                    state.lenbits = 9;
                    state.distcode = distfix;
                    state.distbits = 5;
                }


                /*
                 Update the window with the last wsize (normally 32K) bytes written before
                 returning.  If window does not exist yet, create it.  This is only called
                 when a window is already in use, or when output has been written during this
                 inflate call, but the end of the deflate stream has not been reached yet.
                 It is also called to create a window for dictionary data when a dictionary
                 is loaded.

                 Providing output buffers larger than 32K to inflate() should provide a speed
                 advantage, since only the last 32K of output is copied to the sliding window
                 upon return from inflate(), and since all distances after the first 32K of
                 output will fall in the output data, making match copies simpler and faster.
                 The advantage may be dependent on the size of the processor's data caches.
                 */
                function updatewindow(strm, src, end, copy) {
                    var dist;
                    var state = strm.state;

                    /* if it hasn't been done already, allocate space for the window */
                    if (state.window === null) {
                        state.wsize = 1 << state.wbits;
                        state.wnext = 0;
                        state.whave = 0;

                        state.window = new utils.Buf8(state.wsize);
                    }

                    /* copy state->wsize or less output bytes into the circular window */
                    if (copy >= state.wsize) {
                        utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
                        state.wnext = 0;
                        state.whave = state.wsize;
                    } else {
                        dist = state.wsize - state.wnext;
                        if (dist > copy) {
                            dist = copy;
                        }
                        //zmemcpy(state->window + state->wnext, end - copy, dist);
                        utils.arraySet(state.window, src, end - copy, dist, state.wnext);
                        copy -= dist;
                        if (copy) {
                            //zmemcpy(state->window, end - copy, copy);
                            utils.arraySet(state.window, src, end - copy, copy, 0);
                            state.wnext = copy;
                            state.whave = state.wsize;
                        } else {
                            state.wnext += dist;
                            if (state.wnext === state.wsize) {
                                state.wnext = 0;
                            }
                            if (state.whave < state.wsize) {
                                state.whave += dist;
                            }
                        }
                    }
                    return 0;
                }

                function inflate(strm, flush) {
                    var state;
                    var input, output; // input/output buffers
                    var next; /* next input INDEX */
                    var put; /* next output INDEX */
                    var have, left; /* available input and output */
                    var hold; /* bit buffer */
                    var bits; /* bits in bit buffer */
                    var _in, _out; /* save starting available input and output */
                    var copy; /* number of stored or match bytes to copy */
                    var from; /* where to copy match bytes from */
                    var from_source;
                    var here = 0; /* current decoding table entry */
                    var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
                    //var last;                   /* parent table entry */
                    var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
                    var len; /* length to copy for repeats, bits to drop */
                    var ret; /* return code */
                    var hbuf = new utils.Buf8(4); /* buffer for gzip header crc calculation */
                    var opts;

                    var n; // temporary var for NEED_BITS

                    var order = /* permutation of code lengths */ [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


                    if (!strm || !strm.state || !strm.output ||
                        (!strm.input && strm.avail_in !== 0)) {
                        return Z_STREAM_ERROR;
                    }

                    state = strm.state;
                    if (state.mode === TYPE) {
                        state.mode = TYPEDO;
                    } /* skip check */


                    //--- LOAD() ---
                    put = strm.next_out;
                    output = strm.output;
                    left = strm.avail_out;
                    next = strm.next_in;
                    input = strm.input;
                    have = strm.avail_in;
                    hold = state.hold;
                    bits = state.bits;
                    //---

                    _in = have;
                    _out = left;
                    ret = Z_OK;

                    inf_leave: // goto emulation
                        for (;;) {
                            switch (state.mode) {
                                case HEAD:
                                    if (state.wrap === 0) {
                                        state.mode = TYPEDO;
                                        break;
                                    }
                                    //=== NEEDBITS(16);
                                    while (bits < 16) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    if ((state.wrap & 2) && hold === 0x8b1f) { /* gzip header */
                                        state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
                                        //=== CRC2(state.check, hold);
                                        hbuf[0] = hold & 0xff;
                                        hbuf[1] = (hold >>> 8) & 0xff;
                                        state.check = crc32(state.check, hbuf, 2, 0);
                                        //===//

                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                        state.mode = FLAGS;
                                        break;
                                    }
                                    state.flags = 0; /* expect zlib header */
                                    if (state.head) {
                                        state.head.done = false;
                                    }
                                    if (!(state.wrap & 1) || /* check if zlib header allowed */
                                        (((hold & 0xff) /*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
                                        strm.msg = 'incorrect header check';
                                        state.mode = BAD;
                                        break;
                                    }
                                    if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED) {
                                        strm.msg = 'unknown compression method';
                                        state.mode = BAD;
                                        break;
                                    }
                                    //--- DROPBITS(4) ---//
                                    hold >>>= 4;
                                    bits -= 4;
                                    //---//
                                    len = (hold & 0x0f) /*BITS(4)*/ + 8;
                                    if (state.wbits === 0) {
                                        state.wbits = len;
                                    } else if (len > state.wbits) {
                                        strm.msg = 'invalid window size';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.dmax = 1 << len;
                                    //Tracev((stderr, "inflate:   zlib header ok\n"));
                                    strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
                                    state.mode = hold & 0x200 ? DICTID : TYPE;
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    break;
                                case FLAGS:
                                    //=== NEEDBITS(16); */
                                    while (bits < 16) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.flags = hold;
                                    if ((state.flags & 0xff) !== Z_DEFLATED) {
                                        strm.msg = 'unknown compression method';
                                        state.mode = BAD;
                                        break;
                                    }
                                    if (state.flags & 0xe000) {
                                        strm.msg = 'unknown header flags set';
                                        state.mode = BAD;
                                        break;
                                    }
                                    if (state.head) {
                                        state.head.text = ((hold >> 8) & 1);
                                    }
                                    if (state.flags & 0x0200) {
                                        //=== CRC2(state.check, hold);
                                        hbuf[0] = hold & 0xff;
                                        hbuf[1] = (hold >>> 8) & 0xff;
                                        state.check = crc32(state.check, hbuf, 2, 0);
                                        //===//
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    state.mode = TIME;
                                    /* falls through */
                                case TIME:
                                    //=== NEEDBITS(32); */
                                    while (bits < 32) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    if (state.head) {
                                        state.head.time = hold;
                                    }
                                    if (state.flags & 0x0200) {
                                        //=== CRC4(state.check, hold)
                                        hbuf[0] = hold & 0xff;
                                        hbuf[1] = (hold >>> 8) & 0xff;
                                        hbuf[2] = (hold >>> 16) & 0xff;
                                        hbuf[3] = (hold >>> 24) & 0xff;
                                        state.check = crc32(state.check, hbuf, 4, 0);
                                        //===
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    state.mode = OS;
                                    /* falls through */
                                case OS:
                                    //=== NEEDBITS(16); */
                                    while (bits < 16) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    if (state.head) {
                                        state.head.xflags = (hold & 0xff);
                                        state.head.os = (hold >> 8);
                                    }
                                    if (state.flags & 0x0200) {
                                        //=== CRC2(state.check, hold);
                                        hbuf[0] = hold & 0xff;
                                        hbuf[1] = (hold >>> 8) & 0xff;
                                        state.check = crc32(state.check, hbuf, 2, 0);
                                        //===//
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    state.mode = EXLEN;
                                    /* falls through */
                                case EXLEN:
                                    if (state.flags & 0x0400) {
                                        //=== NEEDBITS(16); */
                                        while (bits < 16) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        state.length = hold;
                                        if (state.head) {
                                            state.head.extra_len = hold;
                                        }
                                        if (state.flags & 0x0200) {
                                            //=== CRC2(state.check, hold);
                                            hbuf[0] = hold & 0xff;
                                            hbuf[1] = (hold >>> 8) & 0xff;
                                            state.check = crc32(state.check, hbuf, 2, 0);
                                            //===//
                                        }
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                    } else if (state.head) {
                                        state.head.extra = null /*Z_NULL*/ ;
                                    }
                                    state.mode = EXTRA;
                                    /* falls through */
                                case EXTRA:
                                    if (state.flags & 0x0400) {
                                        copy = state.length;
                                        if (copy > have) {
                                            copy = have;
                                        }
                                        if (copy) {
                                            if (state.head) {
                                                len = state.head.extra_len - state.length;
                                                if (!state.head.extra) {
                                                    // Use untyped array for more convenient processing later
                                                    state.head.extra = new Array(state.head.extra_len);
                                                }
                                                utils.arraySet(
                                                    state.head.extra,
                                                    input,
                                                    next,
                                                    // extra field is limited to 65536 bytes
                                                    // - no need for additional size check
                                                    copy,
                                                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                                                    len
                                                );
                                                //zmemcpy(state.head.extra + len, next,
                                                //        len + copy > state.head.extra_max ?
                                                //        state.head.extra_max - len : copy);
                                            }
                                            if (state.flags & 0x0200) {
                                                state.check = crc32(state.check, input, copy, next);
                                            }
                                            have -= copy;
                                            next += copy;
                                            state.length -= copy;
                                        }
                                        if (state.length) {
                                            break inf_leave;
                                        }
                                    }
                                    state.length = 0;
                                    state.mode = NAME;
                                    /* falls through */
                                case NAME:
                                    if (state.flags & 0x0800) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        copy = 0;
                                        do {
                                            // TODO: 2 or 1 bytes?
                                            len = input[next + copy++];
                                            /* use constant limit because in js we should not preallocate memory */
                                            if (state.head && len &&
                                                (state.length < 65536 /*state.head.name_max*/ )) {
                                                state.head.name += String.fromCharCode(len);
                                            }
                                        } while (len && copy < have);

                                        if (state.flags & 0x0200) {
                                            state.check = crc32(state.check, input, copy, next);
                                        }
                                        have -= copy;
                                        next += copy;
                                        if (len) {
                                            break inf_leave;
                                        }
                                    } else if (state.head) {
                                        state.head.name = null;
                                    }
                                    state.length = 0;
                                    state.mode = COMMENT;
                                    /* falls through */
                                case COMMENT:
                                    if (state.flags & 0x1000) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        copy = 0;
                                        do {
                                            len = input[next + copy++];
                                            /* use constant limit because in js we should not preallocate memory */
                                            if (state.head && len &&
                                                (state.length < 65536 /*state.head.comm_max*/ )) {
                                                state.head.comment += String.fromCharCode(len);
                                            }
                                        } while (len && copy < have);
                                        if (state.flags & 0x0200) {
                                            state.check = crc32(state.check, input, copy, next);
                                        }
                                        have -= copy;
                                        next += copy;
                                        if (len) {
                                            break inf_leave;
                                        }
                                    } else if (state.head) {
                                        state.head.comment = null;
                                    }
                                    state.mode = HCRC;
                                    /* falls through */
                                case HCRC:
                                    if (state.flags & 0x0200) {
                                        //=== NEEDBITS(16); */
                                        while (bits < 16) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        if (hold !== (state.check & 0xffff)) {
                                            strm.msg = 'header crc mismatch';
                                            state.mode = BAD;
                                            break;
                                        }
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                    }
                                    if (state.head) {
                                        state.head.hcrc = ((state.flags >> 9) & 1);
                                        state.head.done = true;
                                    }
                                    strm.adler = state.check = 0;
                                    state.mode = TYPE;
                                    break;
                                case DICTID:
                                    //=== NEEDBITS(32); */
                                    while (bits < 32) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    strm.adler = state.check = zswap32(hold);
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    state.mode = DICT;
                                    /* falls through */
                                case DICT:
                                    if (state.havedict === 0) {
                                        //--- RESTORE() ---
                                        strm.next_out = put;
                                        strm.avail_out = left;
                                        strm.next_in = next;
                                        strm.avail_in = have;
                                        state.hold = hold;
                                        state.bits = bits;
                                        //---
                                        return Z_NEED_DICT;
                                    }
                                    strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
                                    state.mode = TYPE;
                                    /* falls through */
                                case TYPE:
                                    if (flush === Z_BLOCK || flush === Z_TREES) {
                                        break inf_leave;
                                    }
                                    /* falls through */
                                case TYPEDO:
                                    if (state.last) {
                                        //--- BYTEBITS() ---//
                                        hold >>>= bits & 7;
                                        bits -= bits & 7;
                                        //---//
                                        state.mode = CHECK;
                                        break;
                                    }
                                    //=== NEEDBITS(3); */
                                    while (bits < 3) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.last = (hold & 0x01) /*BITS(1)*/ ;
                                    //--- DROPBITS(1) ---//
                                    hold >>>= 1;
                                    bits -= 1;
                                    //---//

                                    switch ((hold & 0x03) /*BITS(2)*/ ) {
                                        case 0:
                                            /* stored block */
                                            //Tracev((stderr, "inflate:     stored block%s\n",
                                            //        state.last ? " (last)" : ""));
                                            state.mode = STORED;
                                            break;
                                        case 1:
                                            /* fixed block */
                                            fixedtables(state);
                                            //Tracev((stderr, "inflate:     fixed codes block%s\n",
                                            //        state.last ? " (last)" : ""));
                                            state.mode = LEN_; /* decode codes */
                                            if (flush === Z_TREES) {
                                                //--- DROPBITS(2) ---//
                                                hold >>>= 2;
                                                bits -= 2;
                                                //---//
                                                break inf_leave;
                                            }
                                            break;
                                        case 2:
                                            /* dynamic block */
                                            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                                            //        state.last ? " (last)" : ""));
                                            state.mode = TABLE;
                                            break;
                                        case 3:
                                            strm.msg = 'invalid block type';
                                            state.mode = BAD;
                                    }
                                    //--- DROPBITS(2) ---//
                                    hold >>>= 2;
                                    bits -= 2;
                                    //---//
                                    break;
                                case STORED:
                                    //--- BYTEBITS() ---// /* go to byte boundary */
                                    hold >>>= bits & 7;
                                    bits -= bits & 7;
                                    //---//
                                    //=== NEEDBITS(32); */
                                    while (bits < 32) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
                                        strm.msg = 'invalid stored block lengths';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.length = hold & 0xffff;
                                    //Tracev((stderr, "inflate:       stored length %u\n",
                                    //        state.length));
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    state.mode = COPY_;
                                    if (flush === Z_TREES) {
                                        break inf_leave;
                                    }
                                    /* falls through */
                                case COPY_:
                                    state.mode = COPY;
                                    /* falls through */
                                case COPY:
                                    copy = state.length;
                                    if (copy) {
                                        if (copy > have) {
                                            copy = have;
                                        }
                                        if (copy > left) {
                                            copy = left;
                                        }
                                        if (copy === 0) {
                                            break inf_leave;
                                        }
                                        //--- zmemcpy(put, next, copy); ---
                                        utils.arraySet(output, input, next, copy, put);
                                        //---//
                                        have -= copy;
                                        next += copy;
                                        left -= copy;
                                        put += copy;
                                        state.length -= copy;
                                        break;
                                    }
                                    //Tracev((stderr, "inflate:       stored end\n"));
                                    state.mode = TYPE;
                                    break;
                                case TABLE:
                                    //=== NEEDBITS(14); */
                                    while (bits < 14) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;
                                    //--- DROPBITS(5) ---//
                                    hold >>>= 5;
                                    bits -= 5;
                                    //---//
                                    state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;
                                    //--- DROPBITS(5) ---//
                                    hold >>>= 5;
                                    bits -= 5;
                                    //---//
                                    state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;
                                    //--- DROPBITS(4) ---//
                                    hold >>>= 4;
                                    bits -= 4;
                                    //---//
                                    //#ifndef PKZIP_BUG_WORKAROUND
                                    if (state.nlen > 286 || state.ndist > 30) {
                                        strm.msg = 'too many length or distance symbols';
                                        state.mode = BAD;
                                        break;
                                    }
                                    //#endif
                                    //Tracev((stderr, "inflate:       table sizes ok\n"));
                                    state.have = 0;
                                    state.mode = LENLENS;
                                    /* falls through */
                                case LENLENS:
                                    while (state.have < state.ncode) {
                                        //=== NEEDBITS(3);
                                        while (bits < 3) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        state.lens[order[state.have++]] = (hold & 0x07); //BITS(3);
                                        //--- DROPBITS(3) ---//
                                        hold >>>= 3;
                                        bits -= 3;
                                        //---//
                                    }
                                    while (state.have < 19) {
                                        state.lens[order[state.have++]] = 0;
                                    }
                                    // We have separate tables & no pointers. 2 commented lines below not needed.
                                    //state.next = state.codes;
                                    //state.lencode = state.next;
                                    // Switch to use dynamic table
                                    state.lencode = state.lendyn;
                                    state.lenbits = 7;

                                    opts = {
                                        bits: state.lenbits
                                    };
                                    ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
                                    state.lenbits = opts.bits;

                                    if (ret) {
                                        strm.msg = 'invalid code lengths set';
                                        state.mode = BAD;
                                        break;
                                    }
                                    //Tracev((stderr, "inflate:       code lengths ok\n"));
                                    state.have = 0;
                                    state.mode = CODELENS;
                                    /* falls through */
                                case CODELENS:
                                    while (state.have < state.nlen + state.ndist) {
                                        for (;;) {
                                            here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
                                            here_bits = here >>> 24;
                                            here_op = (here >>> 16) & 0xff;
                                            here_val = here & 0xffff;

                                            if ((here_bits) <= bits) {
                                                break;
                                            }
                                            //--- PULLBYTE() ---//
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                            //---//
                                        }
                                        if (here_val < 16) {
                                            //--- DROPBITS(here.bits) ---//
                                            hold >>>= here_bits;
                                            bits -= here_bits;
                                            //---//
                                            state.lens[state.have++] = here_val;
                                        } else {
                                            if (here_val === 16) {
                                                //=== NEEDBITS(here.bits + 2);
                                                n = here_bits + 2;
                                                while (bits < n) {
                                                    if (have === 0) {
                                                        break inf_leave;
                                                    }
                                                    have--;
                                                    hold += input[next++] << bits;
                                                    bits += 8;
                                                }
                                                //===//
                                                //--- DROPBITS(here.bits) ---//
                                                hold >>>= here_bits;
                                                bits -= here_bits;
                                                //---//
                                                if (state.have === 0) {
                                                    strm.msg = 'invalid bit length repeat';
                                                    state.mode = BAD;
                                                    break;
                                                }
                                                len = state.lens[state.have - 1];
                                                copy = 3 + (hold & 0x03); //BITS(2);
                                                //--- DROPBITS(2) ---//
                                                hold >>>= 2;
                                                bits -= 2;
                                                //---//
                                            } else if (here_val === 17) {
                                                //=== NEEDBITS(here.bits + 3);
                                                n = here_bits + 3;
                                                while (bits < n) {
                                                    if (have === 0) {
                                                        break inf_leave;
                                                    }
                                                    have--;
                                                    hold += input[next++] << bits;
                                                    bits += 8;
                                                }
                                                //===//
                                                //--- DROPBITS(here.bits) ---//
                                                hold >>>= here_bits;
                                                bits -= here_bits;
                                                //---//
                                                len = 0;
                                                copy = 3 + (hold & 0x07); //BITS(3);
                                                //--- DROPBITS(3) ---//
                                                hold >>>= 3;
                                                bits -= 3;
                                                //---//
                                            } else {
                                                //=== NEEDBITS(here.bits + 7);
                                                n = here_bits + 7;
                                                while (bits < n) {
                                                    if (have === 0) {
                                                        break inf_leave;
                                                    }
                                                    have--;
                                                    hold += input[next++] << bits;
                                                    bits += 8;
                                                }
                                                //===//
                                                //--- DROPBITS(here.bits) ---//
                                                hold >>>= here_bits;
                                                bits -= here_bits;
                                                //---//
                                                len = 0;
                                                copy = 11 + (hold & 0x7f); //BITS(7);
                                                //--- DROPBITS(7) ---//
                                                hold >>>= 7;
                                                bits -= 7;
                                                //---//
                                            }
                                            if (state.have + copy > state.nlen + state.ndist) {
                                                strm.msg = 'invalid bit length repeat';
                                                state.mode = BAD;
                                                break;
                                            }
                                            while (copy--) {
                                                state.lens[state.have++] = len;
                                            }
                                        }
                                    }

                                    /* handle error breaks in while */
                                    if (state.mode === BAD) {
                                        break;
                                    }

                                    /* check for end-of-block code (better have one) */
                                    if (state.lens[256] === 0) {
                                        strm.msg = 'invalid code -- missing end-of-block';
                                        state.mode = BAD;
                                        break;
                                    }

                                    /* build code tables -- note: do not change the lenbits or distbits
                                       values here (9 and 6) without reading the comments in inftrees.h
                                       concerning the ENOUGH constants, which depend on those values */
                                    state.lenbits = 9;

                                    opts = {
                                        bits: state.lenbits
                                    };
                                    ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
                                    // We have separate tables & no pointers. 2 commented lines below not needed.
                                    // state.next_index = opts.table_index;
                                    state.lenbits = opts.bits;
                                    // state.lencode = state.next;

                                    if (ret) {
                                        strm.msg = 'invalid literal/lengths set';
                                        state.mode = BAD;
                                        break;
                                    }

                                    state.distbits = 6;
                                    //state.distcode.copy(state.codes);
                                    // Switch to use dynamic table
                                    state.distcode = state.distdyn;
                                    opts = {
                                        bits: state.distbits
                                    };
                                    ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
                                    // We have separate tables & no pointers. 2 commented lines below not needed.
                                    // state.next_index = opts.table_index;
                                    state.distbits = opts.bits;
                                    // state.distcode = state.next;

                                    if (ret) {
                                        strm.msg = 'invalid distances set';
                                        state.mode = BAD;
                                        break;
                                    }
                                    //Tracev((stderr, 'inflate:       codes ok\n'));
                                    state.mode = LEN_;
                                    if (flush === Z_TREES) {
                                        break inf_leave;
                                    }
                                    /* falls through */
                                case LEN_:
                                    state.mode = LEN;
                                    /* falls through */
                                case LEN:
                                    if (have >= 6 && left >= 258) {
                                        //--- RESTORE() ---
                                        strm.next_out = put;
                                        strm.avail_out = left;
                                        strm.next_in = next;
                                        strm.avail_in = have;
                                        state.hold = hold;
                                        state.bits = bits;
                                        //---
                                        inflate_fast(strm, _out);
                                        //--- LOAD() ---
                                        put = strm.next_out;
                                        output = strm.output;
                                        left = strm.avail_out;
                                        next = strm.next_in;
                                        input = strm.input;
                                        have = strm.avail_in;
                                        hold = state.hold;
                                        bits = state.bits;
                                        //---

                                        if (state.mode === TYPE) {
                                            state.back = -1;
                                        }
                                        break;
                                    }
                                    state.back = 0;
                                    for (;;) {
                                        here = state.lencode[hold & ((1 << state.lenbits) - 1)]; /*BITS(state.lenbits)*/
                                        here_bits = here >>> 24;
                                        here_op = (here >>> 16) & 0xff;
                                        here_val = here & 0xffff;

                                        if (here_bits <= bits) {
                                            break;
                                        }
                                        //--- PULLBYTE() ---//
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                        //---//
                                    }
                                    if (here_op && (here_op & 0xf0) === 0) {
                                        last_bits = here_bits;
                                        last_op = here_op;
                                        last_val = here_val;
                                        for (;;) {
                                            here = state.lencode[last_val +
                                                ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
                                            here_bits = here >>> 24;
                                            here_op = (here >>> 16) & 0xff;
                                            here_val = here & 0xffff;

                                            if ((last_bits + here_bits) <= bits) {
                                                break;
                                            }
                                            //--- PULLBYTE() ---//
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                            //---//
                                        }
                                        //--- DROPBITS(last.bits) ---//
                                        hold >>>= last_bits;
                                        bits -= last_bits;
                                        //---//
                                        state.back += last_bits;
                                    }
                                    //--- DROPBITS(here.bits) ---//
                                    hold >>>= here_bits;
                                    bits -= here_bits;
                                    //---//
                                    state.back += here_bits;
                                    state.length = here_val;
                                    if (here_op === 0) {
                                        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                                        //        "inflate:         literal '%c'\n" :
                                        //        "inflate:         literal 0x%02x\n", here.val));
                                        state.mode = LIT;
                                        break;
                                    }
                                    if (here_op & 32) {
                                        //Tracevv((stderr, "inflate:         end of block\n"));
                                        state.back = -1;
                                        state.mode = TYPE;
                                        break;
                                    }
                                    if (here_op & 64) {
                                        strm.msg = 'invalid literal/length code';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.extra = here_op & 15;
                                    state.mode = LENEXT;
                                    /* falls through */
                                case LENEXT:
                                    if (state.extra) {
                                        //=== NEEDBITS(state.extra);
                                        n = state.extra;
                                        while (bits < n) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        state.length += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
                                        //--- DROPBITS(state.extra) ---//
                                        hold >>>= state.extra;
                                        bits -= state.extra;
                                        //---//
                                        state.back += state.extra;
                                    }
                                    //Tracevv((stderr, "inflate:         length %u\n", state.length));
                                    state.was = state.length;
                                    state.mode = DIST;
                                    /* falls through */
                                case DIST:
                                    for (;;) {
                                        here = state.distcode[hold & ((1 << state.distbits) - 1)]; /*BITS(state.distbits)*/
                                        here_bits = here >>> 24;
                                        here_op = (here >>> 16) & 0xff;
                                        here_val = here & 0xffff;

                                        if ((here_bits) <= bits) {
                                            break;
                                        }
                                        //--- PULLBYTE() ---//
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                        //---//
                                    }
                                    if ((here_op & 0xf0) === 0) {
                                        last_bits = here_bits;
                                        last_op = here_op;
                                        last_val = here_val;
                                        for (;;) {
                                            here = state.distcode[last_val +
                                                ((hold & ((1 << (last_bits + last_op)) - 1)) /*BITS(last.bits + last.op)*/ >> last_bits)];
                                            here_bits = here >>> 24;
                                            here_op = (here >>> 16) & 0xff;
                                            here_val = here & 0xffff;

                                            if ((last_bits + here_bits) <= bits) {
                                                break;
                                            }
                                            //--- PULLBYTE() ---//
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                            //---//
                                        }
                                        //--- DROPBITS(last.bits) ---//
                                        hold >>>= last_bits;
                                        bits -= last_bits;
                                        //---//
                                        state.back += last_bits;
                                    }
                                    //--- DROPBITS(here.bits) ---//
                                    hold >>>= here_bits;
                                    bits -= here_bits;
                                    //---//
                                    state.back += here_bits;
                                    if (here_op & 64) {
                                        strm.msg = 'invalid distance code';
                                        state.mode = BAD;
                                        break;
                                    }
                                    state.offset = here_val;
                                    state.extra = (here_op) & 15;
                                    state.mode = DISTEXT;
                                    /* falls through */
                                case DISTEXT:
                                    if (state.extra) {
                                        //=== NEEDBITS(state.extra);
                                        n = state.extra;
                                        while (bits < n) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        state.offset += hold & ((1 << state.extra) - 1) /*BITS(state.extra)*/ ;
                                        //--- DROPBITS(state.extra) ---//
                                        hold >>>= state.extra;
                                        bits -= state.extra;
                                        //---//
                                        state.back += state.extra;
                                    }
                                    //#ifdef INFLATE_STRICT
                                    if (state.offset > state.dmax) {
                                        strm.msg = 'invalid distance too far back';
                                        state.mode = BAD;
                                        break;
                                    }
                                    //#endif
                                    //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
                                    state.mode = MATCH;
                                    /* falls through */
                                case MATCH:
                                    if (left === 0) {
                                        break inf_leave;
                                    }
                                    copy = _out - left;
                                    if (state.offset > copy) { /* copy from window */
                                        copy = state.offset - copy;
                                        if (copy > state.whave) {
                                            if (state.sane) {
                                                strm.msg = 'invalid distance too far back';
                                                state.mode = BAD;
                                                break;
                                            }
                                            // (!) This block is disabled in zlib defaults,
                                            // don't enable it for binary compatibility
                                            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                                            //          Trace((stderr, "inflate.c too far\n"));
                                            //          copy -= state.whave;
                                            //          if (copy > state.length) { copy = state.length; }
                                            //          if (copy > left) { copy = left; }
                                            //          left -= copy;
                                            //          state.length -= copy;
                                            //          do {
                                            //            output[put++] = 0;
                                            //          } while (--copy);
                                            //          if (state.length === 0) { state.mode = LEN; }
                                            //          break;
                                            //#endif
                                        }
                                        if (copy > state.wnext) {
                                            copy -= state.wnext;
                                            from = state.wsize - copy;
                                        } else {
                                            from = state.wnext - copy;
                                        }
                                        if (copy > state.length) {
                                            copy = state.length;
                                        }
                                        from_source = state.window;
                                    } else { /* copy from output */
                                        from_source = output;
                                        from = put - state.offset;
                                        copy = state.length;
                                    }
                                    if (copy > left) {
                                        copy = left;
                                    }
                                    left -= copy;
                                    state.length -= copy;
                                    do {
                                        output[put++] = from_source[from++];
                                    } while (--copy);
                                    if (state.length === 0) {
                                        state.mode = LEN;
                                    }
                                    break;
                                case LIT:
                                    if (left === 0) {
                                        break inf_leave;
                                    }
                                    output[put++] = state.length;
                                    left--;
                                    state.mode = LEN;
                                    break;
                                case CHECK:
                                    if (state.wrap) {
                                        //=== NEEDBITS(32);
                                        while (bits < 32) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            // Use '|' instead of '+' to make sure that result is signed
                                            hold |= input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        _out -= left;
                                        strm.total_out += _out;
                                        state.total += _out;
                                        if (_out) {
                                            strm.adler = state.check =
                                                /*UPDATE(state.check, put - _out, _out);*/
                                                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

                                        }
                                        _out = left;
                                        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
                                        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                                            strm.msg = 'incorrect data check';
                                            state.mode = BAD;
                                            break;
                                        }
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                        //Tracev((stderr, "inflate:   check matches trailer\n"));
                                    }
                                    state.mode = LENGTH;
                                    /* falls through */
                                case LENGTH:
                                    if (state.wrap && state.flags) {
                                        //=== NEEDBITS(32);
                                        while (bits < 32) {
                                            if (have === 0) {
                                                break inf_leave;
                                            }
                                            have--;
                                            hold += input[next++] << bits;
                                            bits += 8;
                                        }
                                        //===//
                                        if (hold !== (state.total & 0xffffffff)) {
                                            strm.msg = 'incorrect length check';
                                            state.mode = BAD;
                                            break;
                                        }
                                        //=== INITBITS();
                                        hold = 0;
                                        bits = 0;
                                        //===//
                                        //Tracev((stderr, "inflate:   length matches trailer\n"));
                                    }
                                    state.mode = DONE;
                                    /* falls through */
                                case DONE:
                                    ret = Z_STREAM_END;
                                    break inf_leave;
                                case BAD:
                                    ret = Z_DATA_ERROR;
                                    break inf_leave;
                                case MEM:
                                    return Z_MEM_ERROR;
                                case SYNC:
                                    /* falls through */
                                default:
                                    return Z_STREAM_ERROR;
                            }
                        }

                    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

                    /*
                       Return from inflate(), updating the total counts and the check value.
                       If there was no progress during the inflate() call, return a buffer
                       error.  Call updatewindow() to create and/or update the window state.
                       Note: a memory error from inflate() is non-recoverable.
                     */

                    //--- RESTORE() ---
                    strm.next_out = put;
                    strm.avail_out = left;
                    strm.next_in = next;
                    strm.avail_in = have;
                    state.hold = hold;
                    state.bits = bits;
                    //---

                    if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                            (state.mode < CHECK || flush !== Z_FINISH))) {
                        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
                            state.mode = MEM;
                            return Z_MEM_ERROR;
                        }
                    }
                    _in -= strm.avail_in;
                    _out -= strm.avail_out;
                    strm.total_in += _in;
                    strm.total_out += _out;
                    state.total += _out;
                    if (state.wrap && _out) {
                        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
                            (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
                    }
                    strm.data_type = state.bits + (state.last ? 64 : 0) +
                        (state.mode === TYPE ? 128 : 0) +
                        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
                    if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
                        ret = Z_BUF_ERROR;
                    }
                    return ret;
                }

                function inflateEnd(strm) {

                    if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/ ) {
                        return Z_STREAM_ERROR;
                    }

                    var state = strm.state;
                    if (state.window) {
                        state.window = null;
                    }
                    strm.state = null;
                    return Z_OK;
                }

                function inflateGetHeader(strm, head) {
                    var state;

                    /* check state */
                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;
                    if ((state.wrap & 2) === 0) {
                        return Z_STREAM_ERROR;
                    }

                    /* save header structure */
                    state.head = head;
                    head.done = false;
                    return Z_OK;
                }

                function inflateSetDictionary(strm, dictionary) {
                    var dictLength = dictionary.length;

                    var state;
                    var dictid;
                    var ret;

                    /* check state */
                    if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */ ) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;

                    if (state.wrap !== 0 && state.mode !== DICT) {
                        return Z_STREAM_ERROR;
                    }

                    /* check for correct dictionary identifier */
                    if (state.mode === DICT) {
                        dictid = 1; /* adler32(0, null, 0)*/
                        /* dictid = adler32(dictid, dictionary, dictLength); */
                        dictid = adler32(dictid, dictionary, dictLength, 0);
                        if (dictid !== state.check) {
                            return Z_DATA_ERROR;
                        }
                    }
                    /* copy dictionary to window using updatewindow(), which will amend the
                     existing dictionary if appropriate */
                    ret = updatewindow(strm, dictionary, dictLength, dictLength);
                    if (ret) {
                        state.mode = MEM;
                        return Z_MEM_ERROR;
                    }
                    state.havedict = 1;
                    // Tracev((stderr, "inflate:   dictionary set\n"));
                    return Z_OK;
                }

                exports.inflateReset = inflateReset;
                exports.inflateReset2 = inflateReset2;
                exports.inflateResetKeep = inflateResetKeep;
                exports.inflateInit = inflateInit;
                exports.inflateInit2 = inflateInit2;
                exports.inflate = inflate;
                exports.inflateEnd = inflateEnd;
                exports.inflateGetHeader = inflateGetHeader;
                exports.inflateSetDictionary = inflateSetDictionary;
                exports.inflateInfo = 'pako inflate (from Nodeca project)';

                /* Not implemented
                exports.inflateCopy = inflateCopy;
                exports.inflateGetDictionary = inflateGetDictionary;
                exports.inflateMark = inflateMark;
                exports.inflatePrime = inflatePrime;
                exports.inflateSync = inflateSync;
                exports.inflateSyncPoint = inflateSyncPoint;
                exports.inflateUndermine = inflateUndermine;
                */


                /***/
            }),

        /***/
        2020:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                // See state defs from inflate.js
                var BAD = 30; /* got a data error -- remain here until reset */
                var TYPE = 12; /* i: waiting for type bits, including last-flag bit */

                /*
                   Decode literal, length, and distance codes and write out the resulting
                   literal and match bytes until either not enough input or output is
                   available, an end-of-block is encountered, or a data error is encountered.
                   When large enough input and output buffers are supplied to inflate(), for
                   example, a 16K input buffer and a 64K output buffer, more than 95% of the
                   inflate execution time is spent in this routine.

                   Entry assumptions:

                        state.mode === LEN
                        strm.avail_in >= 6
                        strm.avail_out >= 258
                        start >= strm.avail_out
                        state.bits < 8

                   On return, state.mode is one of:

                        LEN -- ran out of enough output space or enough available input
                        TYPE -- reached end of block code, inflate() to interpret next block
                        BAD -- error in block data

                   Notes:

                    - The maximum input bits used by a length/distance pair is 15 bits for the
                      length code, 5 bits for the length extra, 15 bits for the distance code,
                      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
                      Therefore if strm.avail_in >= 6, then there is enough input to avoid
                      checking for available input while decoding.

                    - The maximum bytes that a single length/distance pair can output is 258
                      bytes, which is the maximum length that can be coded.  inflate_fast()
                      requires strm.avail_out >= 258 for each loop to avoid checking for
                      output space.
                 */
                module.exports = function inflate_fast(strm, start) {
                    var state;
                    var _in; /* local strm.input */
                    var last; /* have enough input while in < last */
                    var _out; /* local strm.output */
                    var beg; /* inflate()'s initial strm.output */
                    var end; /* while out < end, enough space available */
                    //#ifdef INFLATE_STRICT
                    var dmax; /* maximum distance from zlib header */
                    //#endif
                    var wsize; /* window size or zero if not using window */
                    var whave; /* valid bytes in the window */
                    var wnext; /* window write index */
                    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
                    var s_window; /* allocated sliding window, if wsize != 0 */
                    var hold; /* local strm.hold */
                    var bits; /* local strm.bits */
                    var lcode; /* local strm.lencode */
                    var dcode; /* local strm.distcode */
                    var lmask; /* mask for first level of length codes */
                    var dmask; /* mask for first level of distance codes */
                    var here; /* retrieved table entry */
                    var op; /* code bits, operation, extra bits, or */
                    /*  window position, window bytes to copy */
                    var len; /* match length, unused bytes */
                    var dist; /* match distance */
                    var from; /* where to copy match from */
                    var from_source;


                    var input, output; // JS specific, because we have no pointers

                    /* copy state to local variables */
                    state = strm.state;
                    //here = state.here;
                    _in = strm.next_in;
                    input = strm.input;
                    last = _in + (strm.avail_in - 5);
                    _out = strm.next_out;
                    output = strm.output;
                    beg = _out - (start - strm.avail_out);
                    end = _out + (strm.avail_out - 257);
                    //#ifdef INFLATE_STRICT
                    dmax = state.dmax;
                    //#endif
                    wsize = state.wsize;
                    whave = state.whave;
                    wnext = state.wnext;
                    s_window = state.window;
                    hold = state.hold;
                    bits = state.bits;
                    lcode = state.lencode;
                    dcode = state.distcode;
                    lmask = (1 << state.lenbits) - 1;
                    dmask = (1 << state.distbits) - 1;


                    /* decode literals and length/distances until end-of-block or not enough
                       input data or output space */

                    top:
                        do {
                            if (bits < 15) {
                                hold += input[_in++] << bits;
                                bits += 8;
                                hold += input[_in++] << bits;
                                bits += 8;
                            }

                            here = lcode[hold & lmask];

                            dolen:
                                for (;;) { // Goto emulation
                                    op = here >>> 24 /*here.bits*/ ;
                                    hold >>>= op;
                                    bits -= op;
                                    op = (here >>> 16) & 0xff /*here.op*/ ;
                                    if (op === 0) { /* literal */
                                        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                                        //        "inflate:         literal '%c'\n" :
                                        //        "inflate:         literal 0x%02x\n", here.val));
                                        output[_out++] = here & 0xffff /*here.val*/ ;
                                    } else if (op & 16) { /* length base */
                                        len = here & 0xffff /*here.val*/ ;
                                        op &= 15; /* number of extra bits */
                                        if (op) {
                                            if (bits < op) {
                                                hold += input[_in++] << bits;
                                                bits += 8;
                                            }
                                            len += hold & ((1 << op) - 1);
                                            hold >>>= op;
                                            bits -= op;
                                        }
                                        //Tracevv((stderr, "inflate:         length %u\n", len));
                                        if (bits < 15) {
                                            hold += input[_in++] << bits;
                                            bits += 8;
                                            hold += input[_in++] << bits;
                                            bits += 8;
                                        }
                                        here = dcode[hold & dmask];

                                        dodist:
                                            for (;;) { // goto emulation
                                                op = here >>> 24 /*here.bits*/ ;
                                                hold >>>= op;
                                                bits -= op;
                                                op = (here >>> 16) & 0xff /*here.op*/ ;

                                                if (op & 16) { /* distance base */
                                                    dist = here & 0xffff /*here.val*/ ;
                                                    op &= 15; /* number of extra bits */
                                                    if (bits < op) {
                                                        hold += input[_in++] << bits;
                                                        bits += 8;
                                                        if (bits < op) {
                                                            hold += input[_in++] << bits;
                                                            bits += 8;
                                                        }
                                                    }
                                                    dist += hold & ((1 << op) - 1);
                                                    //#ifdef INFLATE_STRICT
                                                    if (dist > dmax) {
                                                        strm.msg = 'invalid distance too far back';
                                                        state.mode = BAD;
                                                        break top;
                                                    }
                                                    //#endif
                                                    hold >>>= op;
                                                    bits -= op;
                                                    //Tracevv((stderr, "inflate:         distance %u\n", dist));
                                                    op = _out - beg; /* max distance in output */
                                                    if (dist > op) { /* see if copy from window */
                                                        op = dist - op; /* distance back in window */
                                                        if (op > whave) {
                                                            if (state.sane) {
                                                                strm.msg = 'invalid distance too far back';
                                                                state.mode = BAD;
                                                                break top;
                                                            }

                                                            // (!) This block is disabled in zlib defaults,
                                                            // don't enable it for binary compatibility
                                                            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                                                            //                if (len <= op - whave) {
                                                            //                  do {
                                                            //                    output[_out++] = 0;
                                                            //                  } while (--len);
                                                            //                  continue top;
                                                            //                }
                                                            //                len -= op - whave;
                                                            //                do {
                                                            //                  output[_out++] = 0;
                                                            //                } while (--op > whave);
                                                            //                if (op === 0) {
                                                            //                  from = _out - dist;
                                                            //                  do {
                                                            //                    output[_out++] = output[from++];
                                                            //                  } while (--len);
                                                            //                  continue top;
                                                            //                }
                                                            //#endif
                                                        }
                                                        from = 0; // window index
                                                        from_source = s_window;
                                                        if (wnext === 0) { /* very common case */
                                                            from += wsize - op;
                                                            if (op < len) { /* some from window */
                                                                len -= op;
                                                                do {
                                                                    output[_out++] = s_window[from++];
                                                                } while (--op);
                                                                from = _out - dist; /* rest from output */
                                                                from_source = output;
                                                            }
                                                        } else if (wnext < op) { /* wrap around window */
                                                            from += wsize + wnext - op;
                                                            op -= wnext;
                                                            if (op < len) { /* some from end of window */
                                                                len -= op;
                                                                do {
                                                                    output[_out++] = s_window[from++];
                                                                } while (--op);
                                                                from = 0;
                                                                if (wnext < len) { /* some from start of window */
                                                                    op = wnext;
                                                                    len -= op;
                                                                    do {
                                                                        output[_out++] = s_window[from++];
                                                                    } while (--op);
                                                                    from = _out - dist; /* rest from output */
                                                                    from_source = output;
                                                                }
                                                            }
                                                        } else { /* contiguous in window */
                                                            from += wnext - op;
                                                            if (op < len) { /* some from window */
                                                                len -= op;
                                                                do {
                                                                    output[_out++] = s_window[from++];
                                                                } while (--op);
                                                                from = _out - dist; /* rest from output */
                                                                from_source = output;
                                                            }
                                                        }
                                                        while (len > 2) {
                                                            output[_out++] = from_source[from++];
                                                            output[_out++] = from_source[from++];
                                                            output[_out++] = from_source[from++];
                                                            len -= 3;
                                                        }
                                                        if (len) {
                                                            output[_out++] = from_source[from++];
                                                            if (len > 1) {
                                                                output[_out++] = from_source[from++];
                                                            }
                                                        }
                                                    } else {
                                                        from = _out - dist; /* copy direct from output */
                                                        do { /* minimum length is three */
                                                            output[_out++] = output[from++];
                                                            output[_out++] = output[from++];
                                                            output[_out++] = output[from++];
                                                            len -= 3;
                                                        } while (len > 2);
                                                        if (len) {
                                                            output[_out++] = output[from++];
                                                            if (len > 1) {
                                                                output[_out++] = output[from++];
                                                            }
                                                        }
                                                    }
                                                } else if ((op & 64) === 0) { /* 2nd level distance code */
                                                    here = dcode[(here & 0xffff) /*here.val*/ + (hold & ((1 << op) - 1))];
                                                    continue dodist;
                                                } else {
                                                    strm.msg = 'invalid distance code';
                                                    state.mode = BAD;
                                                    break top;
                                                }

                                                break; // need to emulate goto via "continue"
                                            }
                                    } else if ((op & 64) === 0) { /* 2nd level length code */
                                        here = lcode[(here & 0xffff) /*here.val*/ + (hold & ((1 << op) - 1))];
                                        continue dolen;
                                    } else if (op & 32) { /* end-of-block */
                                        //Tracevv((stderr, "inflate:         end of block\n"));
                                        state.mode = TYPE;
                                        break top;
                                    } else {
                                        strm.msg = 'invalid literal/length code';
                                        state.mode = BAD;
                                        break top;
                                    }

                                    break; // need to emulate goto via "continue"
                                }
                        } while (_in < last && _out < end);

                    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
                    len = bits >> 3;
                    _in -= len;
                    bits -= len << 3;
                    hold &= (1 << bits) - 1;

                    /* update state and return */
                    strm.next_in = _in;
                    strm.next_out = _out;
                    strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
                    strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
                    state.hold = hold;
                    state.bits = bits;
                    return;
                };


                /***/
            }),

        /***/
        2021:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                var utils = __webpack_require__(1836);

                var MAXBITS = 15;
                var ENOUGH_LENS = 852;
                var ENOUGH_DISTS = 592;
                //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

                var CODES = 0;
                var LENS = 1;
                var DISTS = 2;

                var lbase = [ /* Length codes 257..285 base */
                    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
                    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
                ];

                var lext = [ /* Length codes 257..285 extra */
                    16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
                    19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
                ];

                var dbase = [ /* Distance codes 0..29 base */
                    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
                    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
                    8193, 12289, 16385, 24577, 0, 0
                ];

                var dext = [ /* Distance codes 0..29 extra */
                    16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
                    23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
                    28, 28, 29, 29, 64, 64
                ];

                module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
                    var bits = opts.bits;
                    //here = opts.here; /* table entry for duplication */

                    var len = 0; /* a code's length in bits */
                    var sym = 0; /* index of code symbols */
                    var min = 0,
                        max = 0; /* minimum and maximum code lengths */
                    var root = 0; /* number of index bits for root table */
                    var curr = 0; /* number of index bits for current table */
                    var drop = 0; /* code bits to drop for sub-table */
                    var left = 0; /* number of prefix codes available */
                    var used = 0; /* code entries in table used */
                    var huff = 0; /* Huffman code */
                    var incr; /* for incrementing code, index */
                    var fill; /* index for replicating entries */
                    var low; /* low bits for current root entry */
                    var mask; /* mask for low root bits */
                    var next; /* next available space in table */
                    var base = null; /* base value table to use */
                    var base_index = 0;
                    //  var shoextra;    /* extra bits table to use */
                    var end; /* use base and extra for symbol > end */
                    var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
                    var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
                    var extra = null;
                    var extra_index = 0;

                    var here_bits, here_op, here_val;

                    /*
                     Process a set of code lengths to create a canonical Huffman code.  The
                     code lengths are lens[0..codes-1].  Each length corresponds to the
                     symbols 0..codes-1.  The Huffman code is generated by first sorting the
                     symbols by length from short to long, and retaining the symbol order
                     for codes with equal lengths.  Then the code starts with all zero bits
                     for the first code of the shortest length, and the codes are integer
                     increments for the same length, and zeros are appended as the length
                     increases.  For the deflate format, these bits are stored backwards
                     from their more natural integer increment ordering, and so when the
                     decoding tables are built in the large loop below, the integer codes
                     are incremented backwards.

                     This routine assumes, but does not check, that all of the entries in
                     lens[] are in the range 0..MAXBITS.  The caller must assure this.
                     1..MAXBITS is interpreted as that code length.  zero means that that
                     symbol does not occur in this code.

                     The codes are sorted by computing a count of codes for each length,
                     creating from that a table of starting indices for each length in the
                     sorted table, and then entering the symbols in order in the sorted
                     table.  The sorted table is work[], with that space being provided by
                     the caller.

                     The length counts are used for other purposes as well, i.e. finding
                     the minimum and maximum length codes, determining if there are any
                     codes at all, checking for a valid set of lengths, and looking ahead
                     at length counts to determine sub-table sizes when building the
                     decoding tables.
                     */

                    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
                    for (len = 0; len <= MAXBITS; len++) {
                        count[len] = 0;
                    }
                    for (sym = 0; sym < codes; sym++) {
                        count[lens[lens_index + sym]]++;
                    }

                    /* bound code lengths, force root to be within code lengths */
                    root = bits;
                    for (max = MAXBITS; max >= 1; max--) {
                        if (count[max] !== 0) {
                            break;
                        }
                    }
                    if (root > max) {
                        root = max;
                    }
                    if (max === 0) { /* no symbols to code at all */
                        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
                        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
                        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
                        table[table_index++] = (1 << 24) | (64 << 16) | 0;


                        //table.op[opts.table_index] = 64;
                        //table.bits[opts.table_index] = 1;
                        //table.val[opts.table_index++] = 0;
                        table[table_index++] = (1 << 24) | (64 << 16) | 0;

                        opts.bits = 1;
                        return 0; /* no symbols, but wait for decoding to report error */
                    }
                    for (min = 1; min < max; min++) {
                        if (count[min] !== 0) {
                            break;
                        }
                    }
                    if (root < min) {
                        root = min;
                    }

                    /* check for an over-subscribed or incomplete set of lengths */
                    left = 1;
                    for (len = 1; len <= MAXBITS; len++) {
                        left <<= 1;
                        left -= count[len];
                        if (left < 0) {
                            return -1;
                        } /* over-subscribed */
                    }
                    if (left > 0 && (type === CODES || max !== 1)) {
                        return -1; /* incomplete set */
                    }

                    /* generate offsets into symbol table for each length for sorting */
                    offs[1] = 0;
                    for (len = 1; len < MAXBITS; len++) {
                        offs[len + 1] = offs[len] + count[len];
                    }

                    /* sort symbols by length, by symbol order within each length */
                    for (sym = 0; sym < codes; sym++) {
                        if (lens[lens_index + sym] !== 0) {
                            work[offs[lens[lens_index + sym]]++] = sym;
                        }
                    }

                    /*
                     Create and fill in decoding tables.  In this loop, the table being
                     filled is at next and has curr index bits.  The code being used is huff
                     with length len.  That code is converted to an index by dropping drop
                     bits off of the bottom.  For codes where len is less than drop + curr,
                     those top drop + curr - len bits are incremented through all values to
                     fill the table with replicated entries.

                     root is the number of index bits for the root table.  When len exceeds
                     root, sub-tables are created pointed to by the root entry with an index
                     of the low root bits of huff.  This is saved in low to check for when a
                     new sub-table should be started.  drop is zero when the root table is
                     being filled, and drop is root when sub-tables are being filled.

                     When a new sub-table is needed, it is necessary to look ahead in the
                     code lengths to determine what size sub-table is needed.  The length
                     counts are used for this, and so count[] is decremented as codes are
                     entered in the tables.

                     used keeps track of how many table entries have been allocated from the
                     provided *table space.  It is checked for LENS and DIST tables against
                     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
                     the initial root table size constants.  See the comments in inftrees.h
                     for more information.

                     sym increments through all symbols, and the loop terminates when
                     all codes of length max, i.e. all codes, have been processed.  This
                     routine permits incomplete codes, so another loop after this one fills
                     in the rest of the decoding tables with invalid code markers.
                     */

                    /* set up for code type */
                    // poor man optimization - use if-else instead of switch,
                    // to avoid deopts in old v8
                    if (type === CODES) {
                        base = extra = work; /* dummy value--not used */
                        end = 19;

                    } else if (type === LENS) {
                        base = lbase;
                        base_index -= 257;
                        extra = lext;
                        extra_index -= 257;
                        end = 256;

                    } else { /* DISTS */
                        base = dbase;
                        extra = dext;
                        end = -1;
                    }

                    /* initialize opts for loop */
                    huff = 0; /* starting code */
                    sym = 0; /* starting code symbol */
                    len = min; /* starting code length */
                    next = table_index; /* current table to fill in */
                    curr = root; /* current table index bits */
                    drop = 0; /* current bits to drop from code for index */
                    low = -1; /* trigger new sub-table when len > root */
                    used = 1 << root; /* use root table entries */
                    mask = used - 1; /* mask for comparing low */

                    /* check available table space */
                    if ((type === LENS && used > ENOUGH_LENS) ||
                        (type === DISTS && used > ENOUGH_DISTS)) {
                        return 1;
                    }

                    /* process all codes and make table entries */
                    for (;;) {
                        /* create table entry */
                        here_bits = len - drop;
                        if (work[sym] < end) {
                            here_op = 0;
                            here_val = work[sym];
                        } else if (work[sym] > end) {
                            here_op = extra[extra_index + work[sym]];
                            here_val = base[base_index + work[sym]];
                        } else {
                            here_op = 32 + 64; /* end of block */
                            here_val = 0;
                        }

                        /* replicate for those indices with low len bits equal to huff */
                        incr = 1 << (len - drop);
                        fill = 1 << curr;
                        min = fill; /* save offset to next table */
                        do {
                            fill -= incr;
                            table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;
                        } while (fill !== 0);

                        /* backwards increment the len-bit code huff */
                        incr = 1 << (len - 1);
                        while (huff & incr) {
                            incr >>= 1;
                        }
                        if (incr !== 0) {
                            huff &= incr - 1;
                            huff += incr;
                        } else {
                            huff = 0;
                        }

                        /* go to next symbol, update count, len */
                        sym++;
                        if (--count[len] === 0) {
                            if (len === max) {
                                break;
                            }
                            len = lens[lens_index + work[sym]];
                        }

                        /* create new sub-table if needed */
                        if (len > root && (huff & mask) !== low) {
                            /* if first time, transition to sub-tables */
                            if (drop === 0) {
                                drop = root;
                            }

                            /* increment past last table */
                            next += min; /* here min is 1 << curr */

                            /* determine length of next table */
                            curr = len - drop;
                            left = 1 << curr;
                            while (curr + drop < max) {
                                left -= count[curr + drop];
                                if (left <= 0) {
                                    break;
                                }
                                curr++;
                                left <<= 1;
                            }

                            /* check for enough space */
                            used += 1 << curr;
                            if ((type === LENS && used > ENOUGH_LENS) ||
                                (type === DISTS && used > ENOUGH_DISTS)) {
                                return 1;
                            }

                            /* point entry in root table to sub-table */
                            low = huff & mask;
                            /*table.op[low] = curr;
                            table.bits[low] = root;
                            table.val[low] = next - opts.table_index;*/
                            table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;
                        }
                    }

                    /* fill in remaining table entry if code is incomplete (guaranteed to have
                     at most one remaining entry, since if the code is incomplete, the
                     maximum code length that was allowed to get this far is one bit) */
                    if (huff !== 0) {
                        //table.op[next + huff] = 64;            /* invalid code marker */
                        //table.bits[next + huff] = len - drop;
                        //table.val[next + huff] = 0;
                        table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;
                    }

                    /* set return parameters */
                    //opts.table_index += used;
                    opts.bits = root;
                    return 0;
                };


                /***/
            }),

        /***/
        2022:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                module.exports = {

                    /* Allowed flush values; see deflate() and inflate() below for details */
                    Z_NO_FLUSH: 0,
                    Z_PARTIAL_FLUSH: 1,
                    Z_SYNC_FLUSH: 2,
                    Z_FULL_FLUSH: 3,
                    Z_FINISH: 4,
                    Z_BLOCK: 5,
                    Z_TREES: 6,

                    /* Return codes for the compression/decompression functions. Negative values
                     * are errors, positive values are used for special but normal events.
                     */
                    Z_OK: 0,
                    Z_STREAM_END: 1,
                    Z_NEED_DICT: 2,
                    Z_ERRNO: -1,
                    Z_STREAM_ERROR: -2,
                    Z_DATA_ERROR: -3,
                    //Z_MEM_ERROR:     -4,
                    Z_BUF_ERROR: -5,
                    //Z_VERSION_ERROR: -6,

                    /* compression levels */
                    Z_NO_COMPRESSION: 0,
                    Z_BEST_SPEED: 1,
                    Z_BEST_COMPRESSION: 9,
                    Z_DEFAULT_COMPRESSION: -1,


                    Z_FILTERED: 1,
                    Z_HUFFMAN_ONLY: 2,
                    Z_RLE: 3,
                    Z_FIXED: 4,
                    Z_DEFAULT_STRATEGY: 0,

                    /* Possible values of the data_type field (though see inflate()) */
                    Z_BINARY: 0,
                    Z_TEXT: 1,
                    //Z_ASCII:                1, // = Z_TEXT (deprecated)
                    Z_UNKNOWN: 2,

                    /* The deflate compression method */
                    Z_DEFLATED: 8
                    //Z_NULL:                 null // Use -1 or null inline, depending on var type
                };


                /***/
            }),

        /***/
        2023:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "RouterContext", {
                    enumerable: true,
                    get: function() {
                        return RouterContext;
                    }
                });
                const _interop_require_default = __webpack_require__(448);
                const _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(0));
                const RouterContext = _react.default.createContext(null);
                if (false) {}

                //# sourceMappingURL=router-context.shared-runtime.js.map

                /***/
            }),

        /***/
        2024:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "default", {
                    enumerable: true,
                    get: function() {
                        return withRouter;
                    }
                });
                const _interop_require_default = __webpack_require__(448);
                const _jsxruntime = __webpack_require__(8);
                const _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(0));
                const _router = __webpack_require__(1873);

                function withRouter(ComposedComponent) {
                    function WithRouterWrapper(props) {
                        return /*#__PURE__*/ (0, _jsxruntime.jsx)(ComposedComponent, {
                            router: (0, _router.useRouter)(),
                            ...props
                        });
                    }
                    WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps;
                    WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;
                    if (false) {}
                    return WithRouterWrapper;
                }

                if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
                    Object.defineProperty(exports.default, '__esModule', {
                        value: true
                    });
                    Object.assign(exports.default, exports);
                    module.exports = exports.default;
                }

                //# sourceMappingURL=with-router.js.map

                /***/
            }),

        /***/
        2025:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var __assign = this && this.__assign || function() {
                    __assign = Object.assign || function(t) {
                        for (var s, i = 1, n = arguments.length; i < n; i++) {
                            s = arguments[i];
                            for (var p in s)
                                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                        }
                        return t;
                    };
                    return __assign.apply(this, arguments);
                };
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.Levels = exports.createLogger = exports.getLogger = void 0;
                var logger_types_1 = __webpack_require__(2026);
                var getLogger = function getLogger(category) {
                    var log = {};
                    logger_types_1.levels.forEach(function(level) {
                        log[level] = function(msg, metadata) {
                            if (metadata === void 0) {
                                metadata = {};
                            }
                            if (level === 'error') {
                                console.error(level, msg, __assign({
                                    category: category
                                }, metadata));
                            } else {
                                console.log(level, msg, __assign({
                                    category: category
                                }, metadata));
                            }
                        };
                    });
                    return log;
                };
                exports.getLogger = getLogger;
                exports.createLogger = exports.getLogger;
                exports.Levels = {
                    info: 'info',
                    debug: 'debug',
                    warn: 'warn',
                    error: 'error',
                    trace: 'trace'
                };

                /***/
            }),

        /***/
        2026:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.customLevels = exports.levels = void 0;
                exports.levels = ['debug', 'trace', 'info', 'warn', 'error'];
                /*
                 * winston logger default normally to npm logging levels
                 * https://github.com/winstonjs/winston?tab=readme-ov-file#logging-levels
                 * {
                 *   error: 0,
                 *   warn: 1,
                 *   info: 2,
                 *   http: 3,
                 *   verbose: 4,
                 *   debug: 5,
                 *   silly: 6
                 * }
                 */
                exports.customLevels = {
                    error: 0,
                    warn: 1,
                    info: 2,
                    debug: 3,
                    trace: 4
                };

                /***/
            }),

        /***/
        2027:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                "use client";

                var _interopRequireDefault = __webpack_require__(216);
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = void 0;
                var _createSvgIcon = _interopRequireDefault(__webpack_require__(1821));
                var _jsxRuntime = __webpack_require__(8);
                var _default = exports.default = (0, _createSvgIcon.default)([ /*#__PURE__*/ (0, _jsxRuntime.jsx)("circle", {
                    cx: "10.5",
                    cy: "8.5",
                    r: "1.5"
                }, "0"), /*#__PURE__*/ (0, _jsxRuntime.jsx)("circle", {
                    cx: "8.5",
                    cy: "13.5",
                    r: "1.5"
                }, "1"), /*#__PURE__*/ (0, _jsxRuntime.jsx)("circle", {
                    cx: "15",
                    cy: "15",
                    r: "1"
                }, "2"), /*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
                    d: "M21.95 10.99c-1.79-.03-3.7-1.95-2.68-4.22-2.97 1-5.78-1.59-5.19-4.56C7.11.74 2 6.41 2 12c0 5.52 4.48 10 10 10 5.89 0 10.54-5.08 9.95-11.01M12 20c-4.41 0-8-3.59-8-8 0-3.31 2.73-8.18 8.08-8.02.42 2.54 2.44 4.56 4.99 4.94.07.36.52 2.55 2.92 3.63C19.7 16.86 16.06 20 12 20"
                }, "3")], 'CookieOutlined');

                /***/
            }),

        /***/
        2028:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                "use client";

                var _interopRequireDefault = __webpack_require__(216);
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = void 0;
                var _createSvgIcon = _interopRequireDefault(__webpack_require__(1821));
                var _jsxRuntime = __webpack_require__(8);
                var _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
                    d: "M15 1H9v2h6zm-4 13h2V8h-2zm8.03-6.61 1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61M12 20c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7"
                }), 'TimerOutlined');

                /***/
            }),

        /***/
        2029:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var _interopRequireDefault = __webpack_require__(216);

                var _interopRequireWildcard = __webpack_require__(2030);

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = void 0;

                var React = _interopRequireWildcard(__webpack_require__(0));

                var _createSvgIcon = _interopRequireDefault(__webpack_require__(2031));

                var _default = (0, _createSvgIcon.default)( /*#__PURE__*/ React.createElement("path", {
                    d: "M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"
                }), 'KeyboardArrowDownOutlined');

                exports.default = _default;

                /***/
            }),

        /***/
        2030:
            /***/
            (function(module, exports, __webpack_require__) {

                var _typeof = __webpack_require__(817)["default"];

                function _getRequireWildcardCache(e) {
                    if ("function" != typeof WeakMap) return null;
                    var r = new WeakMap(),
                        t = new WeakMap();
                    return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
                        return e ? t : r;
                    })(e);
                }

                function _interopRequireWildcard(e, r) {
                    if (!r && e && e.__esModule) return e;
                    if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
                        "default": e
                    };
                    var t = _getRequireWildcardCache(r);
                    if (t && t.has(e)) return t.get(e);
                    var n = {
                            __proto__: null
                        },
                        a = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var u in e)
                        if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
                            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
                            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
                        }
                    return n["default"] = e, t && t.set(e, n), n;
                }
                module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;

                /***/
            }),

        /***/
        2031:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                Object.defineProperty(exports, "default", {
                    enumerable: true,
                    get: function get() {
                        return _utils.createSvgIcon;
                    }
                });

                var _utils = __webpack_require__(1902);

                /***/
            }),

        /***/
        2032:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                "use client";

                var _interopRequireDefault = __webpack_require__(216);
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = void 0;
                var _createSvgIcon = _interopRequireDefault(__webpack_require__(1821));
                var _jsxRuntime = __webpack_require__(8);
                var _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
                    d: "M7.5 4C5.57 4 4 5.57 4 7.5S5.57 11 7.5 11 11 9.43 11 7.5 9.43 4 7.5 4m0 5C6.67 9 6 8.33 6 7.5S6.67 6 7.5 6 9 6.67 9 7.5 8.33 9 7.5 9m9 4c-1.93 0-3.5 1.57-3.5 3.5s1.57 3.5 3.5 3.5 3.5-1.57 3.5-3.5-1.57-3.5-3.5-3.5m0 5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5M5.41 20 4 18.59 18.59 4 20 5.41z"
                }), 'PercentOutlined');

                /***/
            }),

        /***/
        2033:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                "use client";

                var _interopRequireDefault = __webpack_require__(216);
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = void 0;
                var _createSvgIcon = _interopRequireDefault(__webpack_require__(1821));
                var _jsxRuntime = __webpack_require__(8);
                var _default = exports.default = (0, _createSvgIcon.default)([ /*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
                    d: "m21.41 11.58-9-9C12.05 2.22 11.55 2 11 2H4c-1.1 0-2 .9-2 2v7c0 .55.22 1.05.59 1.42l9 9c.36.36.86.58 1.41.58s1.05-.22 1.41-.59l7-7c.37-.36.59-.86.59-1.41s-.23-1.06-.59-1.42M13 20.01 4 11V4h7v-.01l9 9z"
                }, "0"), /*#__PURE__*/ (0, _jsxRuntime.jsx)("circle", {
                    cx: "6.5",
                    cy: "6.5",
                    r: "1.5"
                }, "1")], 'LocalOfferOutlined');

                /***/
            }),

        /***/
        2034:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                "use client";

                var _interopRequireDefault = __webpack_require__(216);
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = void 0;
                var _createSvgIcon = _interopRequireDefault(__webpack_require__(1821));
                var _jsxRuntime = __webpack_require__(8);
                var _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
                    d: "M20 8h-3V4H3c-1.1 0-2 .9-2 2v11h2c0 1.66 1.34 3 3 3s3-1.34 3-3h6c0 1.66 1.34 3 3 3s3-1.34 3-3h2v-5zm-.5 1.5 1.96 2.5H17V9.5zM6 18c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1m2.22-3c-.55-.61-1.33-1-2.22-1s-1.67.39-2.22 1H3V6h12v9zM18 18c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1"
                }), 'LocalShippingOutlined');

                /***/
            }),

        /***/
        2035:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                "use client";

                var _interopRequireDefault = __webpack_require__(216);
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = void 0;
                var _createSvgIcon = _interopRequireDefault(__webpack_require__(1821));
                var _jsxRuntime = __webpack_require__(8);
                var _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
                    d: "M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2m-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1M9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1m11 15H4v-2h16zm0-5H4V8h5.08L7 10.83 8.62 12 12 7.4l3.38 4.6L17 10.83 14.92 8H20z"
                }), 'CardGiftcardOutlined');

                /***/
            }),

        /***/
        2036:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                "use client";

                var _interopRequireDefault = __webpack_require__(216);
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = void 0;
                var _createSvgIcon = _interopRequireDefault(__webpack_require__(1821));
                var _jsxRuntime = __webpack_require__(8);
                var _default = exports.default = (0, _createSvgIcon.default)([ /*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
                    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 16H5V5h14z"
                }, "0"), /*#__PURE__*/ (0, _jsxRuntime.jsx)("circle", {
                    cx: "7.5",
                    cy: "16.5",
                    r: "1.5"
                }, "1"), /*#__PURE__*/ (0, _jsxRuntime.jsx)("circle", {
                    cx: "7.5",
                    cy: "7.5",
                    r: "1.5"
                }, "2"), /*#__PURE__*/ (0, _jsxRuntime.jsx)("circle", {
                    cx: "12",
                    cy: "12",
                    r: "1.5"
                }, "3"), /*#__PURE__*/ (0, _jsxRuntime.jsx)("circle", {
                    cx: "16.5",
                    cy: "16.5",
                    r: "1.5"
                }, "4"), /*#__PURE__*/ (0, _jsxRuntime.jsx)("circle", {
                    cx: "16.5",
                    cy: "7.5",
                    r: "1.5"
                }, "5")], 'CasinoOutlined');

                /***/
            }),

        /***/
        2037:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";


                var m = __webpack_require__(46);
                if (true) {
                    exports.createRoot = m.createRoot;
                    exports.hydrateRoot = m.hydrateRoot;
                } else {
                    var i;
                }


                /***/
            }),

        /***/
        2038:
            /***/
            (function(module, exports, __webpack_require__) {

                "use strict";

                "use client";

                var _interopRequireDefault = __webpack_require__(216);
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = void 0;
                var _createSvgIcon = _interopRequireDefault(__webpack_require__(1821));
                var _jsxRuntime = __webpack_require__(8);
                var _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/ (0, _jsxRuntime.jsx)("path", {
                    d: "m12 4-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"
                }), 'ArrowForwardOutlined');

                /***/
            }),

        /***/
        2099:
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                // ESM COMPAT FLAG
                __webpack_require__.r(__webpack_exports__);

                // EXPORTS
                __webpack_require__.d(__webpack_exports__, "default", function() {
                    return /* binding */ crewPartnerModalModule;
                });

                // NAMESPACE OBJECT: ./node_modules/.pnpm/@next-common+didomi@8.116.6_@apollo+client@3.9.10_@emotion+styled@11.11.5_@types+react@18.2.7_br25ldmntc72gqek2mticxf3du/node_modules/@next-common/didomi/dist/esm/didomi/index.js
                var esm_didomi_namespaceObject = {};
                __webpack_require__.r(esm_didomi_namespaceObject);
                __webpack_require__.d(esm_didomi_namespaceObject, "DidomiContainer", function() {
                    return didomi;
                });

                // NAMESPACE OBJECT: ./node_modules/.pnpm/@next-common+didomi@8.116.6_@apollo+client@3.9.10_@emotion+styled@11.11.5_@types+react@18.2.7_br25ldmntc72gqek2mticxf3du/node_modules/@next-common/didomi/dist/esm/constants.js
                var esm_constants_namespaceObject = {};
                __webpack_require__.r(esm_constants_namespaceObject);
                __webpack_require__.d(esm_constants_namespaceObject, "NAME", function() {
                    return NAME;
                });

                // EXTERNAL MODULE: ./node_modules/.pnpm/tslib@2.6.2/node_modules/tslib/tslib.es6.js
                var tslib_es6 = __webpack_require__(2);

                // EXTERNAL MODULE: ./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js
                var react = __webpack_require__(0);
                var react_default = /*#__PURE__*/ __webpack_require__.n(react);

                // EXTERNAL MODULE: ./node_modules/.pnpm/react-redux@7.2.9_react-dom@18.2.0_react@18.3.1/node_modules/react-redux/es/index.js + 24 modules
                var es = __webpack_require__(29);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@apollo+client@3.9.10_@types+react@18.2.75_graphql@15.8.0_react-dom@18.2.0_react@18.3.1/node_modules/@apollo/client/react/hooks/useQuery.js + 2 modules
                var useQuery = __webpack_require__(1806);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/colorPalette.js
                var colorPalette = __webpack_require__(3);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+material@5.10.17_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@mui/material/esm/Typography/Typography.js
                var Typography = __webpack_require__(1776);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+system@5.16.7_@emotion+react@11.13.3_@emotion+styled@11.11.5_@types+react@18.2.75_react@18.3.1/node_modules/@mui/system/esm/styled.js + 18 modules
                var styled = __webpack_require__(1794);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/components/Advantage/AdvantageItem/AdvantageItem.style.js


                var Container = Object(styled["a" /* default */ ])('div')(function(_ref) {
                    var flex = _ref.flex,
                        size = _ref.size;
                    return Object.assign({
                        textAlign: 'center'
                    }, size !== 'L' ? {
                        flexDirection: 'row',
                        display: 'flex',
                        alignItems: 'center',
                        whiteSpace: 'nowrap'
                    } : {
                        flex: flex
                    });
                });
                var AdvantageContainer = Object(styled["a" /* default */ ])('div')(function(_ref2) {
                    var size = _ref2.size,
                        isWrap = _ref2.isWrap;
                    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
                        display: 'flex',
                        flexDirection: size !== 'L' ? 'row' : 'column'
                    }, size === 'L' && {
                        justifyContent: 'center'
                    }), {
                        alignItems: 'center',
                        padding: size === 'L' ? '16px' : '11px 16px',
                        gap: '4px'
                    }), size !== 'S' && {
                        background: colorPalette["a" /* colorPalette */ ].gray100
                    }), {
                        borderRadius: '8px',
                        flex: 1,
                        width: '100%'
                    }), isWrap && {
                        flexWrap: 'wrap'
                    });
                });
                var HeaderContainer = Object(styled["a" /* default */ ])('div')(function(_ref3) {
                    var size = _ref3.size;
                    return Object.assign({
                        flexDirection: 'row',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px'
                    }, size !== 'L' && {
                        paddingLeft: '5px'
                    });
                });
                var ValueContainer = Object(styled["a" /* default */ ])('div')(function() {
                    return {
                        flexDirection: 'row',
                        display: 'flex'
                    };
                });
                var ClubRPayContainer = Object(styled["a" /* default */ ])('div')(function(_ref4) {
                    var size = _ref4.size;
                    return {
                        backgroundColor: size === 'M' ? colorPalette["a" /* colorPalette */ ].white : colorPalette["a" /* colorPalette */ ].gray100,
                        borderRadius: 10,
                        display: 'flex',
                        padding: '4px 8px',
                        marginLeft: 4,
                        alignItems: 'center',
                        justifyContent: 'center'
                    };
                });
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/components/Advantage/utils/helper.js
                /* Plus sign helper functions */
                var setLineHeightPlus = function setLineHeightPlus(size) {
                    switch (size) {
                        case 'L':
                            return '32px';
                        case 'M':
                            return '22px';
                        case 'S':
                            return '16px';
                        default:
                            return '32px';
                    }
                };
                /* Title helper functions */
                var setFontSizeTitle = function setFontSizeTitle(size, multi) {
                    switch (size) {
                        case 'L':
                            return 30;
                        case 'M':
                            if (multi) return 14;
                            return 20;
                        case 'S':
                            return 14;
                        default:
                            return 32;
                    }
                };
                var setLineHeightTitle = function setLineHeightTitle(size, multi) {
                    switch (size) {
                        case 'L':
                            return '35px';
                        case 'M':
                            if (multi) return '18px';
                            return '25px';
                        case 'S':
                            return '18px';
                        default:
                            return '35px';
                    }
                };
                /* Description helper functions */
                var setFontSizeDescription = function setFontSizeDescription(size) {
                    switch (size) {
                        case 'L':
                            return 16;
                        case 'M':
                        case 'S':
                            return 14;
                        default:
                            return 16;
                    }
                };
                var setLineHeightDescription = function setLineHeightDescription(size) {
                    switch (size) {
                        case 'L':
                            return '20px';
                        case 'M':
                        case 'S':
                            return '18px';
                        default:
                            return '20px';
                    }
                };
                // EXTERNAL MODULE: ./node_modules/.pnpm/@next-common+shared-svg@8.101.0_react-dom@18.2.0_react@18.3.1/node_modules/@next-common/shared-svg/build/esm/components/svgImg/svgImg.js
                var svgImg = __webpack_require__(276);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+shared-svg@8.101.0_react-dom@18.2.0_react@18.3.1/node_modules/@next-common/shared-svg/build/esm/svg/clubrpay/ClubRPay.js


                var ClubRPay_ClubRPay = function ClubRPay(_ref) {
                    var _ref$width = _ref.width,
                        width = _ref$width === void 0 ? '49' : _ref$width,
                        _ref$height = _ref.height,
                        height = _ref$height === void 0 ? '11' : _ref$height,
                        _ref$fill = _ref.fill,
                        fill = _ref$fill === void 0 ? 'none' : _ref$fill;
                    return /*#__PURE__*/ react_default.a.createElement(svgImg["a" /* SvgImg */ ], {
                        width: width,
                        height: height,
                        viewbox: "0 0 49 11",
                        fill: fill,
                        title: "ClubRPay"
                    }, /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M30.4211 7.92586V0.0541992H32.956C33.8763 0.0541992 34.5983 0.270955 35.1219 0.704467C35.6535 1.13798 35.9193 1.7312 35.9193 2.48415C35.9193 3.22188 35.6535 3.8075 35.1219 4.24101C34.5983 4.67452 33.8763 4.89128 32.956 4.89128H31.1114V7.92586H30.4211ZM32.8608 0.658834H31.1114V4.28664H32.8608C33.6224 4.28664 34.2056 4.13073 34.6102 3.81891C35.0148 3.50708 35.2171 3.05836 35.2171 2.47274C35.2171 1.88712 35.0148 1.43839 34.6102 1.12657C34.2056 0.814746 33.6224 0.658834 32.8608 0.658834Z",
                        fill: "#BF0000"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M39.5126 8.03994C39.0048 8.03994 38.5486 7.91065 38.144 7.65206C37.7473 7.39348 37.4339 7.03982 37.2038 6.5911C36.9817 6.13477 36.8706 5.6176 36.8706 5.03958C36.8706 4.45396 36.9817 3.93679 37.2038 3.48807C37.4339 3.03935 37.7473 2.68569 38.144 2.42711C38.5486 2.16852 39.0048 2.03923 39.5126 2.03923C40.0045 2.03923 40.4448 2.16472 40.8335 2.4157C41.2223 2.65907 41.5079 2.98991 41.6904 3.40821L41.7618 2.15331H42.3211V7.92586H41.7618L41.6904 6.67096C41.5079 7.08165 41.2183 7.41249 40.8216 7.66347C40.4329 7.91445 39.9965 8.03994 39.5126 8.03994ZM39.6078 7.4353C40.0124 7.4353 40.3694 7.33263 40.6788 7.12728C40.9882 6.92194 41.2302 6.63673 41.4048 6.27167C41.5793 5.90661 41.6666 5.49211 41.6666 5.02817C41.6666 4.56424 41.5793 4.15355 41.4048 3.79609C41.2302 3.43863 40.9882 3.15723 40.6788 2.95188C40.3694 2.74653 40.0124 2.64386 39.6078 2.64386C39.2031 2.64386 38.8421 2.74653 38.5248 2.95188C38.2154 3.14962 37.9734 3.42722 37.7989 3.78468C37.6243 4.14214 37.537 4.56044 37.537 5.03958C37.537 5.51112 37.6243 5.92942 37.7989 6.29448C37.9734 6.65194 38.2154 6.93334 38.5248 7.13869C38.8421 7.33643 39.2031 7.4353 39.6078 7.4353Z",
                        fill: "#BF0000"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M44.1758 10.0934L45.8062 6.91053L43.4022 2.15331H44.1163L46.1632 6.24885L48.2101 2.15331H48.8885L44.8541 10.0934H44.1758Z",
                        fill: "#BF0000"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M5.95038 2.388C5.8033 1.7586 5.5285 1.31028 5.12598 1.04303C4.72345 0.775786 4.19823 0.642542 3.55032 0.643301C3.1389 0.632385 2.73139 0.724077 2.36597 0.90979C2.03926 1.08326 1.75851 1.32937 1.54621 1.6284C1.32414 1.94441 1.16281 2.29755 1.07014 2.67043C0.965697 3.08005 0.914203 3.50093 0.916872 3.92316C0.916503 4.33056 0.960882 4.73681 1.04924 5.13488C1.1293 5.51168 1.27798 5.87124 1.48815 6.19628C1.69551 6.51059 1.97866 6.76993 2.31255 6.95133C2.71354 7.15543 3.16155 7.2543 3.61302 7.23832C3.91667 7.24184 4.21832 7.1897 4.50245 7.08458C4.75958 6.98617 4.99582 6.84174 5.19913 6.65865C5.40545 6.47318 5.57889 6.25535 5.71235 6.01407C5.85352 5.75895 5.9586 5.48615 6.02469 5.20321H6.77479C6.69251 5.55333 6.56858 5.89275 6.40554 6.2145C6.07702 6.86897 5.50268 7.37309 4.80318 7.62097C4.37731 7.76879 3.92767 7.83978 3.47601 7.83052C2.9573 7.84462 2.44263 7.73726 1.97466 7.51733C1.57087 7.31863 1.22104 7.0286 0.954029 6.67118C0.680518 6.29977 0.483329 5.8797 0.373462 5.4344C0.252225 4.94458 0.192948 4.44199 0.19697 3.93796C0.182228 3.32857 0.273725 2.72119 0.467514 2.14201C0.621425 1.69062 0.876096 1.2786 1.21296 0.935983C1.52676 0.626061 1.91123 0.393799 2.33461 0.258373C2.78869 0.114312 3.26352 0.0431662 3.74075 0.0476881C4.10737 0.0449204 4.47241 0.0951901 4.82408 0.196876C5.14614 0.289613 5.44749 0.441066 5.71235 0.643301C5.97304 0.843471 6.19019 1.09285 6.35097 1.37671C6.52577 1.69155 6.64362 2.0337 6.69931 2.388H5.95038Z",
                        fill: "black"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M8.43158 0.00671387H7.76648V7.75993H8.43158V0.00671387Z",
                        fill: "black"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M13.3085 2.18188H13.975V7.7622H13.3085V6.98437C13.2202 7.08572 13.1204 7.18936 13.0101 7.29641C12.8938 7.40855 12.7653 7.50784 12.6269 7.59251C12.469 7.68902 12.2993 7.76555 12.1218 7.82028C11.9062 7.88415 11.6817 7.91489 11.4565 7.91138C11.1276 7.92115 10.7999 7.86817 10.4916 7.75536C10.249 7.66301 10.0336 7.51316 9.86457 7.31919C9.7016 7.12944 9.58273 6.90714 9.51623 6.66777C9.44322 6.40275 9.40767 6.12915 9.41056 5.85464V2.18188H10.0759V5.84325C10.0759 6.32384 10.192 6.69169 10.4242 6.94679C10.6565 7.20189 11.0334 7.32944 11.5552 7.32944C11.8099 7.33331 12.0621 7.27994 12.2925 7.17342C12.5076 7.07176 12.6956 6.92243 12.8417 6.73724C12.9985 6.53717 13.1166 6.31059 13.19 6.06874C13.2719 5.79246 13.311 5.5057 13.3062 5.21803L13.3085 2.18188Z",
                        fill: "black"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M15.6238 7.75993H14.9573V0.00671387H15.6238V3.08158C15.8323 2.74141 16.139 2.46953 16.5051 2.30034C16.8692 2.12383 17.2694 2.03076 17.6755 2.02815C18.0686 2.01837 18.4584 2.10116 18.8122 2.26959C19.1245 2.4234 19.3975 2.64408 19.6111 2.91531C19.8283 3.19718 19.9883 3.51728 20.0825 3.85827C20.1874 4.22248 20.2397 4.5993 20.2381 4.97775C20.241 5.3664 20.1926 5.75378 20.0941 6.13025C20.0071 6.46908 19.8489 6.78636 19.6297 7.06182C19.415 7.32718 19.1398 7.53938 18.8262 7.68135C18.4521 7.84207 18.0465 7.91984 17.6383 7.90912C17.4473 7.90826 17.2572 7.88299 17.0729 7.83396C16.8787 7.78293 16.691 7.71074 16.5132 7.61872C16.3312 7.52519 16.1632 7.40754 16.0139 7.26909C15.8613 7.12843 15.7355 6.96222 15.6423 6.77825H15.6203L15.6238 7.75993ZM15.6238 4.94928C15.6208 5.26756 15.6638 5.58465 15.7515 5.8911C15.8271 6.16243 15.9526 6.41793 16.1219 6.64501C16.2837 6.85566 16.4927 7.02708 16.7327 7.1461C16.9913 7.27149 17.2767 7.33436 17.5652 7.32945C17.8311 7.33217 18.0948 7.2826 18.3408 7.18368C18.5766 7.08752 18.7885 6.94263 18.962 6.75889C19.1472 6.5615 19.2891 6.32893 19.3789 6.07559C19.4838 5.77601 19.5345 5.46073 19.5287 5.14402C19.5449 4.81319 19.5148 4.48174 19.4393 4.15892C19.3735 3.8717 19.253 3.59928 19.0839 3.35604C18.9227 3.12843 18.708 2.94214 18.4581 2.81281C18.1816 2.67561 17.875 2.60717 17.5652 2.61352C17.2826 2.60937 17.0033 2.67393 16.7524 2.80143C16.5145 2.92558 16.3066 3.09841 16.1428 3.30821C15.9708 3.53125 15.841 3.78274 15.7596 4.05073C15.6703 4.34254 15.6257 4.64575 15.6273 4.95042",
                        fill: "black"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M22.204 9.65152L20.892 8.5719H30.0939L22.204 9.65152Z",
                        fill: "#BF0000"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M23.6984 7.76109V5.36952H24.7561L26.5861 7.76109H28.4567L26.2447 4.87527C26.7138 4.54868 27.0648 4.08423 27.2469 3.54908C27.4291 3.01393 27.433 2.43582 27.2581 1.89835C27.0832 1.36088 26.7385 0.891892 26.274 0.559214C25.8094 0.226537 25.2489 0.0474082 24.6737 0.0477299H22.204V7.76109H23.6984ZM23.6984 1.51228H24.6737C24.9971 1.51228 25.3072 1.63826 25.5358 1.86251C25.7644 2.08677 25.8929 2.39092 25.8929 2.70806C25.8929 3.0252 25.7644 3.32935 25.5358 3.5536C25.3072 3.77786 24.9971 3.90384 24.6737 3.90384H23.6984V1.51228Z",
                        fill: "#BF0000"
                    }));
                };

                // EXTERNAL MODULE: ./node_modules/.pnpm/@next-common+material-ui-icons@8.111.5_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+_n73w4q23zfmkeq2myeosxit3aa/node_modules/@next-common/material-ui-icons/dist/esm/Boost/Boost.js
                var Boost = __webpack_require__(745);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/components/Advantage/AdvantageItem/AdvantageItem.js







                var AdvantageItem_AdvantageItem = function AdvantageItem(_ref) {
                    var value = _ref.value,
                        type = _ref.type,
                        isCustomerCrew = _ref.isCustomerCrew,
                        _ref$multi = _ref.multi,
                        multi = _ref$multi === void 0 ? false : _ref$multi,
                        boost = _ref.boost,
                        disabled = _ref.disabled,
                        _ref$size = _ref.size,
                        size = _ref$size === void 0 ? 'L' : _ref$size,
                        _ref$clubRPay = _ref.clubRPay,
                        clubRPay = _ref$clubRPay === void 0 ? false : _ref$clubRPay,
                        partnerName = _ref.partnerName,
                        _ref$isCodePromo = _ref.isCodePromo,
                        isCodePromo = _ref$isCodePromo === void 0 ? false : _ref$isCodePromo,
                        _ref$codePromo = _ref.codePromo,
                        codePromo = _ref$codePromo === void 0 ? 0 : _ref$codePromo,
                        isShowCashbackterm = _ref.isShowCashbackterm;
                    var typeDisplay = type === 'e' ? '€' : '%';
                    var titleColor = disabled ? colorPalette["a" /* colorPalette */ ].gray500 : colorPalette["a" /* colorPalette */ ].red800;
                    var multiColor = disabled ? colorPalette["a" /* colorPalette */ ].gray500 : colorPalette["a" /* colorPalette */ ].red800;
                    var textColor = disabled ? colorPalette["a" /* colorPalette */ ].gray500 : colorPalette["a" /* colorPalette */ ].gray900;
                    var remboursesColor = size !== 'S' ? textColor : titleColor;
                    var isClubRBig = clubRPay && size !== 'L';
                    var description = isCustomerCrew ? isClubRBig ? 'avec' : 'sur votre premier achat' : isClubRBig ? 'sur tous vos achats avec' : 'sur tous vos achats';
                    var title = isCodePromo ? "+".concat(codePromo) : "".concat(value).concat(typeDisplay);
                    var descriptionPromo = "sur ".concat(partnerName);
                    return /*#__PURE__*/ react_default.a.createElement(AdvantageContainer, {
                        size: size,
                        isWrap: clubRPay && !isCustomerCrew
                    }, /*#__PURE__*/ react_default.a.createElement(Container, {
                        flex: 1,
                        size: size
                    }, multi && /*#__PURE__*/ react_default.a.createElement(Typography["a" /* default */ ], {
                        fontWeight: 400,
                        fontSize: 14,
                        color: multiColor,
                        lineHeight: "18px"
                    }, "Jusqu'\xE0"), /*#__PURE__*/ react_default.a.createElement(HeaderContainer, {
                        size: size
                    }, boost && /*#__PURE__*/ react_default.a.createElement(Boost["default"], {
                        style: {
                            fill: titleColor
                        }
                    }), isCustomerCrew ? ( /*#__PURE__*/ react_default.a.createElement(ValueContainer, null, /*#__PURE__*/ react_default.a.createElement(Typography["a" /* default */ ], {
                        fontWeight: 600,
                        fontSize: setFontSizeTitle(size, multi),
                        color: titleColor,
                        lineHeight: setLineHeightPlus(size)
                    }, "+"), /*#__PURE__*/ react_default.a.createElement(Typography["a" /* default */ ], {
                        fontWeight: 600,
                        fontSize: setFontSizeTitle(size, multi),
                        color: titleColor,
                        lineHeight: setLineHeightTitle(size, multi)
                    }, title))) : ( /*#__PURE__*/ react_default.a.createElement(Typography["a" /* default */ ], {
                        fontWeight: 600,
                        fontSize: setFontSizeTitle(size, multi),
                        color: titleColor,
                        lineHeight: setLineHeightTitle(size, multi)
                    }, title)))), /*#__PURE__*/ react_default.a.createElement(Container, {
                        flex: 0.5,
                        size: size
                    }, isCodePromo ? ( /*#__PURE__*/ react_default.a.createElement(Typography["a" /* default */ ], {
                        fontWeight: 600,
                        fontSize: setFontSizeDescription(size),
                        color: remboursesColor,
                        lineHeight: setLineHeightDescription(size)
                    }, size !== 'L' ? 'code promos' : 'Code promos')) : ( /*#__PURE__*/ react_default.a.createElement(Typography["a" /* default */ ], {
                        fontWeight: 600,
                        fontSize: setFontSizeDescription(size),
                        color: remboursesColor,
                        lineHeight: setLineHeightDescription(size)
                    }, "".concat(!isShowCashbackterm ? multi || size !== 'L' ? 'de' : 'De' : multi || size !== 'L' ? 'en' : 'En'), isShowCashbackterm ? ' Rakuten Points' : ' cashback'))), /*#__PURE__*/ react_default.a.createElement(Container, {
                        flex: 1,
                        size: size
                    }, /*#__PURE__*/ react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/ react_default.a.createElement(Typography["a" /* default */ ], {
                        fontWeight: 400,
                        fontSize: setFontSizeDescription(size),
                        color: textColor,
                        lineHeight: setLineHeightDescription(size),
                        textAlign: 'center'
                    }, isCodePromo ? descriptionPromo : description), clubRPay && size !== 'L' && ( /*#__PURE__*/ react_default.a.createElement(ClubRPayContainer, {
                        size: size
                    }, /*#__PURE__*/ react_default.a.createElement(ClubRPay_ClubRPay, null))))));
                };
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/components/Advantage/Advantage.style.js

                var StyledDiv = Object(styled["a" /* default */ ])('div')(function() {
                    return {
                        display: 'flex',
                        flexWrap: 'wrap',
                        flexDirection: 'row',
                        gap: '16px',
                        justifyContent: 'center'
                    };
                });
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/components/Advantage/utils/constants.js
                var TYPE_EURO = 'e';
                var VALUE_STRING = 5;
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/components/Advantage/Advantage.js




                var Advantage_Advantage = function Advantage(_ref) {
                    var value = _ref.value,
                        _ref$multi = _ref.multi,
                        multi = _ref$multi === void 0 ? false : _ref$multi,
                        type = _ref.type,
                        _ref$isCustomerCrew = _ref.isCustomerCrew,
                        isCustomerCrew = _ref$isCustomerCrew === void 0 ? false : _ref$isCustomerCrew,
                        _ref$isCustomerCrewOn = _ref.isCustomerCrewOnly,
                        isCustomerCrewOnly = _ref$isCustomerCrewOn === void 0 ? false : _ref$isCustomerCrewOn,
                        _ref$boost = _ref.boost,
                        boost = _ref$boost === void 0 ? false : _ref$boost,
                        disabled = _ref.disabled,
                        size = _ref.size,
                        clubRPay = _ref.clubRPay,
                        partnerName = _ref.partnerName,
                        _ref$codePromo = _ref.codePromo,
                        codePromo = _ref$codePromo === void 0 ? 0 : _ref$codePromo,
                        isShowCashbackterm = _ref.isShowCashbackterm;
                    var isCodePromo = !!(codePromo || codePromo !== 0);
                    return /*#__PURE__*/ react_default.a.createElement(StyledDiv, null, !isCustomerCrewOnly && ( /*#__PURE__*/ react_default.a.createElement(AdvantageItem_AdvantageItem, {
                        type: type,
                        value: value,
                        multi: multi,
                        boost: boost,
                        disabled: disabled,
                        size: size,
                        clubRPay: clubRPay,
                        partnerName: partnerName,
                        isShowCashbackterm: isShowCashbackterm
                    })), isCustomerCrew && ( /*#__PURE__*/ react_default.a.createElement(AdvantageItem_AdvantageItem, {
                        type: TYPE_EURO,
                        value: VALUE_STRING,
                        isCustomerCrew: isCustomerCrew,
                        disabled: disabled,
                        size: size,
                        clubRPay: clubRPay,
                        partnerName: partnerName,
                        isShowCashbackterm: isShowCashbackterm
                    })), isCodePromo && ( /*#__PURE__*/ react_default.a.createElement(AdvantageItem_AdvantageItem, {
                        type: TYPE_EURO,
                        value: VALUE_STRING,
                        disabled: disabled,
                        size: size,
                        clubRPay: clubRPay,
                        partnerName: partnerName,
                        isCodePromo: isCodePromo,
                        codePromo: codePromo,
                        isShowCashbackterm: isShowCashbackterm
                    })));
                };
                // EXTERNAL MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/components/Button/Button.js + 2 modules
                var Button = __webpack_require__(1803);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js
                var taggedTemplateLiteral = __webpack_require__(106);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@emotion+react@11.13.3_@types+react@18.2.75_react@18.3.1/node_modules/@emotion/react/dist/emotion-react.esm.js
                var emotion_react_esm = __webpack_require__(350);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/components/Link/link.styles.js

                var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;


                var linkSmall = Object(emotion_react_esm["a" /* css */ ])(_templateObject || (_templateObject = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  display: inline-block;\n  text-decoration: none;\n  color: ", ";\n  font-size: 1.4rem;\n  line-height: 16px;\n  font-weight: 400;\n  height: 18px;\n"])), colorPalette["a" /* colorPalette */ ].lightBlue800);
                var linkLarge = Object(emotion_react_esm["a" /* css */ ])(_templateObject2 || (_templateObject2 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  display: inline-block;\n  text-decoration: none;\n  color: ", ";\n  font-size: 2.4rem;\n  line-height: 24px;\n  font-weight: 400;\n  height: 26px;\n"])), colorPalette["a" /* colorPalette */ ].gray700);
                var link_styles_link = function link(props) {
                    return Object(emotion_react_esm["a" /* css */ ])(_templateObject3 || (_templateObject3 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  ", "\n\n  &:hover > div > span {\n    text-decoration-color: ", ";\n  }\n  &:focus > div > span {\n    text-decoration-color: ", ";\n  }\n"])), props.size === 'large' ? linkLarge : linkSmall, props.color ? props.color : colorPalette["a" /* colorPalette */ ].gray1000, colorPalette["a" /* colorPalette */ ].gray400);
                };
                var cursor = Object(emotion_react_esm["a" /* css */ ])(_templateObject4 || (_templateObject4 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  cursor: pointer;\n"])));
                var link_styles_linkContainer = function linkContainer(props) {
                    return Object(emotion_react_esm["a" /* css */ ])(_templateObject5 || (_templateObject5 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  display: flex;\n  justify-items: center;\n  align-items: center;\n  align-content: center;\n  gap: ", ";\n  & > svg {\n    font-size: 16px;\n  }\n"])), props.size === 'large' ? '12px' : '4px');
                };
                var link_styles_linkLabel = function linkLabel(props) {
                    return Object(emotion_react_esm["a" /* css */ ])(_templateObject6 || (_templateObject6 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  text-decoration: ", ";\n  text-underline-offset: 4px;\n  text-decoration-color: rgba(0, 0, 0, 0.4);\n  color: ", ";\n  &:hover {\n    text-decoration: underline;\n  }\n"])), props.underline ? 'underline' : 'none', props.color ? props.color : 'inherit');
                };
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+mui@8.106.0_@date-io+core@1.3.13_@types+node@14.18.63_@types+react@18.2.75_momen_pbd4qfzh2ffoeu6hyvkkfuzvxu/node_modules/@next-common/mui/dist/esm/components/Link/Link.js

                var Link_templateObject;

                // eslint-disable-next-line

                var Link_Link = function Link(_ref) {
                    var label = _ref.label,
                        leftIcon = _ref.leftIcon,
                        rightIcon = _ref.rightIcon,
                        url = _ref.url,
                        openUrlInNewTab = _ref.openUrlInNewTab,
                        _ref$size = _ref.size,
                        size = _ref$size === void 0 ? 'small' : _ref$size,
                        _ref$underline = _ref.underline,
                        underline = _ref$underline === void 0 ? false : _ref$underline,
                        _ref$marginTop = _ref.marginTop,
                        marginTop = _ref$marginTop === void 0 ? '20px' : _ref$marginTop,
                        _ref$marginBottom = _ref.marginBottom,
                        marginBottom = _ref$marginBottom === void 0 ? '20px' : _ref$marginBottom,
                        _ref$color = _ref.color,
                        color = _ref$color === void 0 ? 'inherit' : _ref$color,
                        onClick = _ref.onClick;
                    return Object(emotion_react_esm["b" /* jsx */ ])("a", {
                        href: url,
                        "data-qa": "link-url",
                        target: openUrlInNewTab ? '_blank' : '_self',
                        rel: "noopener noreferrer",
                        onClick: onClick,
                        // eslint-disable-next-line
                        css: [Object(emotion_react_esm["a" /* css */ ])(Link_templateObject || (Link_templateObject = Object(taggedTemplateLiteral["a" /* default */ ])(["\n          margin-top: ", ";\n          margin-bottom: ", ";\n        "])), marginTop, marginBottom), link_styles_link({
                            size: size,
                            color: color
                        })]
                    }, Object(emotion_react_esm["b" /* jsx */ ])("div", {
                        // eslint-disable-next-line
                        css: [cursor, link_styles_linkContainer({
                            size: size
                        })]
                    }, leftIcon, Object(emotion_react_esm["b" /* jsx */ ])("span", {
                        // eslint-disable-next-line
                        css: link_styles_linkLabel({
                            underline: underline,
                            color: color
                        })
                    }, label), rightIcon));
                };
                // EXTERNAL MODULE: ./node_modules/.pnpm/@next-common+shared-svg@8.116.6_react-dom@18.2.0_react@18.3.1/node_modules/@next-common/shared-svg/build/esm/components/svgImg/svgImg.js
                var svgImg_svgImg = __webpack_require__(1684);

                // EXTERNAL MODULE: ./node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js
                var prop_types = __webpack_require__(4);
                var prop_types_default = /*#__PURE__*/ __webpack_require__.n(prop_types);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@didomi+react@1.8.6_react@18.3.1/node_modules/@didomi/react/es/index.js



                var es_DidomiSDK = function DidomiSDK(_ref) {
                    var _ref$apiKey = _ref.apiKey,
                        apiKeyProp = _ref$apiKey === undefined ? null : _ref$apiKey,
                        _ref$iabVersion = _ref.iabVersion,
                        iabVersion = _ref$iabVersion === undefined ? 2 : _ref$iabVersion,
                        _ref$noticeId = _ref.noticeId,
                        noticeId = _ref$noticeId === undefined ? null : _ref$noticeId,
                        _ref$platform = _ref.platform,
                        platform = _ref$platform === undefined ? null : _ref$platform,
                        _ref$config = _ref.config,
                        config = _ref$config === undefined ? {} : _ref$config,
                        _ref$gdprAppliesGloba = _ref.gdprAppliesGlobally,
                        gdprAppliesGloballyProp = _ref$gdprAppliesGloba === undefined ? true : _ref$gdprAppliesGloba,
                        onReady = _ref.onReady,
                        onConsentChanged = _ref.onConsentChanged,
                        onNoticeShown = _ref.onNoticeShown,
                        onNoticeHidden = _ref.onNoticeHidden,
                        onNoticeBackdropclick = _ref.onNoticeBackdropclick,
                        onNoticeClickAgree = _ref.onNoticeClickAgree,
                        onNoticeClickMoreInfo = _ref.onNoticeClickMoreInfo,
                        onPreferencesClickAgreeToAll = _ref.onPreferencesClickAgreeToAll,
                        onPreferencesClickDisagreeToAll = _ref.onPreferencesClickDisagreeToAll,
                        onPreferencesClickPurposeAgree = _ref.onPreferencesClickPurposeAgree,
                        onPreferencesClickPurposeDisagree = _ref.onPreferencesClickPurposeDisagree,
                        onPreferencesClickViewVendors = _ref.onPreferencesClickViewVendors,
                        onPreferencesClickSaveChoices = _ref.onPreferencesClickSaveChoices,
                        onPreferencesClickVendorAgree = _ref.onPreferencesClickVendorAgree,
                        onPreferencesClickVendorDisagree = _ref.onPreferencesClickVendorDisagree,
                        onPreferencesClickVendorSaveChoices = _ref.onPreferencesClickVendorSaveChoices,
                        _ref$sdkPath = _ref.sdkPath,
                        sdkPath = _ref$sdkPath === undefined ? 'https://sdk.privacy-center.org/' : _ref$sdkPath,
                        _ref$embedTCFStub = _ref.embedTCFStub,
                        embedTCFStub = _ref$embedTCFStub === undefined ? true : _ref$embedTCFStub;

                    /**
                     * Set all the Didomi event listeners from the props
                     */
                    var setEvents = function setEvents() {
                        if (onReady) {
                            window.didomiOnReady = window.didomiOnReady || [];
                            window.didomiOnReady.push(onReady);
                        }

                        window.didomiEventListeners = window.didomiEventListeners || [];

                        if (onConsentChanged) {
                            window.didomiEventListeners.push({
                                event: 'consent.changed',
                                listener: function listener(e) {
                                    onConsentChanged(e.consentToken);
                                }
                            });
                        }

                        if (onNoticeShown) {
                            window.didomiEventListeners.push({
                                event: 'notice.shown',
                                listener: function listener() {
                                    return onNoticeShown();
                                }
                            });
                        }

                        if (onNoticeHidden) {
                            window.didomiEventListeners.push({
                                event: 'notice.hidden',
                                listener: function listener() {
                                    return onNoticeHidden();
                                }
                            });
                        }

                        if (onNoticeBackdropclick) {
                            window.didomiEventListeners.push({
                                event: 'notice.backdropclick',
                                listener: function listener() {
                                    return onNoticeBackdropclick();
                                }
                            });
                        }

                        if (onNoticeClickAgree) {
                            window.didomiEventListeners.push({
                                event: 'notice.clickagree',
                                listener: function listener() {
                                    return onNoticeClickAgree();
                                }
                            });
                        }

                        if (onNoticeClickMoreInfo) {
                            window.didomiEventListeners.push({
                                event: 'notice.clickmoreinfo',
                                listener: function listener() {
                                    return onNoticeClickMoreInfo();
                                }
                            });
                        }

                        if (onPreferencesClickAgreeToAll) {
                            window.didomiEventListeners.push({
                                event: 'preferences.clickagreetoall',
                                listener: function listener() {
                                    return onPreferencesClickAgreeToAll();
                                }
                            });
                        }

                        if (onPreferencesClickDisagreeToAll) {
                            window.didomiEventListeners.push({
                                event: 'preferences.clickdisagreetoall',
                                listener: function listener() {
                                    return onPreferencesClickDisagreeToAll();
                                }
                            });
                        }

                        if (onPreferencesClickPurposeAgree) {
                            window.didomiEventListeners.push({
                                event: 'preferences.clickpurposeagree',
                                listener: function listener() {
                                    return onPreferencesClickPurposeAgree();
                                }
                            });
                        }

                        if (onPreferencesClickPurposeDisagree) {
                            window.didomiEventListeners.push({
                                event: 'preferences.clickpurposedisagree',
                                listener: function listener() {
                                    return onPreferencesClickPurposeDisagree();
                                }
                            });
                        }

                        if (onPreferencesClickViewVendors) {
                            window.didomiEventListeners.push({
                                event: 'preferences.clickviewvendors',
                                listener: function listener() {
                                    return onPreferencesClickViewVendors();
                                }
                            });
                        }

                        if (onPreferencesClickSaveChoices) {
                            window.didomiEventListeners.push({
                                event: 'preferences.clicksavechoices',
                                listener: function listener() {
                                    return onPreferencesClickSaveChoices();
                                }
                            });
                        }

                        if (onPreferencesClickVendorAgree) {
                            window.didomiEventListeners.push({
                                event: 'preferences.clickvendoragree',
                                listener: function listener() {
                                    return onPreferencesClickVendorAgree();
                                }
                            });
                        }

                        if (onPreferencesClickVendorDisagree) {
                            window.didomiEventListeners.push({
                                event: 'preferences.clickvendordisagree',
                                listener: function listener() {
                                    return onPreferencesClickVendorDisagree();
                                }
                            });
                        }

                        if (onPreferencesClickVendorSaveChoices) {
                            window.didomiEventListeners.push({
                                event: 'preferences.clickvendorsavechoices',
                                listener: function listener() {
                                    return onPreferencesClickVendorSaveChoices();
                                }
                            });
                        }
                    };

                    /**
                     * Get the API Key from the props or from the config if it exists
                     */
                    var getApiKey = function getApiKey() {
                        var apiKey = void 0;
                        if (config.app && config.app.apiKey) {
                            apiKey = config.app.apiKey;
                        }
                        return apiKeyProp || apiKey;
                    };

                    /**
                     * Initialize the SDK, set the config object and insert the loader.js into the DOM
                     */
                    var init = function init() {
                        var loaderParams = void 0;
                        var apiKey = getApiKey();
                        var gdprAppliesGlobally = gdprAppliesGloballyProp === false ? false : true;
                        window.didomiConfig = config || {};

                        // Set the SDK path
                        window.didomiConfig.sdkPath = sdkPath;

                        // Embed the Didomi SDK on the page
                        window.gdprAppliesGlobally = gdprAppliesGlobally;
                        if (noticeId) {
                            loaderParams = 'target_type=notice&target=' + noticeId;
                            if (platform) {
                                loaderParams = 'platform=' + platform + '&' + loaderParams;
                            }
                        } else {
                            loaderParams = 'target=' + document.location.hostname;
                        }

                        // Embed the TCF stub
                        if (embedTCFStub) {
                            if (iabVersion === 2) {
                                // TCF v2
                                // prettier-ignore
                                (function() {
                                    function a(e) {
                                        if (!window.frames[e]) {
                                            if (document.body && document.body.firstChild) {
                                                var t = document.body;
                                                var n = document.createElement("iframe");
                                                n.style.display = "none";
                                                n.name = e;
                                                n.title = e;
                                                t.insertBefore(n, t.firstChild);
                                            } else {
                                                setTimeout(function() {
                                                    a(e);
                                                }, 5);
                                            }
                                        }
                                    }

                                    function e(n, r, o, c, s) {
                                        function e(e, t, n, a) {
                                            if (typeof n !== "function") {
                                                return;
                                            }
                                            if (!window[r]) {
                                                window[r] = [];
                                            }
                                            var i = false;
                                            if (s) {
                                                i = s(e, t, n);
                                            }
                                            if (!i) {
                                                window[r].push({
                                                    command: e,
                                                    parameter: t,
                                                    callback: n,
                                                    version: a
                                                });
                                            }
                                        }
                                        e.stub = true;

                                        function t(a) {
                                            if (!window[n] || window[n].stub !== true) {
                                                return;
                                            }
                                            if (!a.data) {
                                                return;
                                            }
                                            var i = typeof a.data === "string";
                                            var e;
                                            try {
                                                e = i ? JSON.parse(a.data) : a.data;
                                            } catch (t) {
                                                return;
                                            }
                                            if (e[o]) {
                                                var r = e[o];
                                                window[n](r.command, r.parameter, function(e, t) {
                                                    var n = {};
                                                    n[c] = {
                                                        returnValue: e,
                                                        success: t,
                                                        callId: r.callId
                                                    };
                                                    a.source.postMessage(i ? JSON.stringify(n) : n, "*");
                                                }, r.version);
                                            }
                                        }
                                        if (typeof window[n] !== "function") {
                                            window[n] = e;
                                            if (window.addEventListener) {
                                                window.addEventListener("message", t, false);
                                            } else {
                                                window.attachEvent("onmessage", t);
                                            }
                                        }
                                    }
                                    e("__tcfapi", "__tcfapiBuffer", "__tcfapiCall", "__tcfapiReturn");
                                    a("__tcfapiLocator");
                                })();
                            } else {
                                // TCF v1
                                // prettier-ignore
                                (function() {
                                    function r() {
                                        if (!window.frames.__cmpLocator) {
                                            if (document.body && document.body.firstChild) {
                                                var e = document.body;
                                                var t = document.createElement("iframe");
                                                t.style.display = "none";
                                                t.name = "__cmpLocator";
                                                t.title = "cmpLocator";
                                                e.insertBefore(t, e.firstChild);
                                            } else {
                                                setTimeout(r, 5);
                                            }
                                        }
                                    }

                                    function e(e, t, r) {
                                        if (typeof r !== "function") {
                                            return;
                                        }
                                        if (!window.__cmpBuffer) {
                                            window.__cmpBuffer = [];
                                        }
                                        if (e === "ping") {
                                            r({
                                                gdprAppliesGlobally: window.gdprAppliesGlobally,
                                                cmpLoaded: false
                                            }, true);
                                        } else {
                                            window.__cmpBuffer.push({
                                                command: e,
                                                parameter: t,
                                                callback: r
                                            });
                                        }
                                    }
                                    e.stub = true;

                                    function t(a) {
                                        if (!window.__cmp || window.__cmp.stub !== true) {
                                            return;
                                        }
                                        if (!a.data) {
                                            return;
                                        }
                                        var n = typeof a.data === "string";
                                        var e;
                                        try {
                                            e = n ? JSON.parse(a.data) : a.data;
                                        } catch (t) {
                                            return;
                                        }
                                        if (e.__cmpCall) {
                                            var o = e.__cmpCall;
                                            window.__cmp(o.command, o.parameter, function(e, t) {
                                                var r = {
                                                    __cmpReturn: {
                                                        returnValue: e,
                                                        success: t,
                                                        callId: o.callId
                                                    }
                                                };
                                                a.source.postMessage(n ? JSON.stringify(r) : r, "*");
                                            });
                                        }
                                    }
                                    if (typeof window.__cmp !== "function") {
                                        window.__cmp = e;
                                        if (window.addEventListener) {
                                            window.addEventListener("message", t, false);
                                        } else {
                                            window.attachEvent("onmessage", t);
                                        }
                                    }
                                    r();
                                })();
                            }
                        }

                        var spcloaderId = 'spcloader';
                        var spcloaderScript = document.getElementById(spcloaderId);

                        // Didomi is already loaded, no need to add the script again
                        if (spcloaderScript) {
                            return null;
                        }

                        // Embed the SDK
                        var loaderScript = document.createElement('script');
                        loaderScript.id = spcloaderId;
                        loaderScript.type = 'text/javascript';
                        loaderScript.async = true;
                        loaderScript.src = sdkPath + apiKey + '/loader.js?' + loaderParams;
                        loaderScript.charset = 'utf-8';

                        var firstScriptTagInDocument = document.getElementsByTagName('script')[0];
                        firstScriptTagInDocument.parentNode.insertBefore(loaderScript, firstScriptTagInDocument);
                    };

                    react_default.a.useEffect(function() {
                        setEvents();
                        init();
                    }, []);

                    return null;
                };

                es_DidomiSDK.propTypes = {
                    apiKey: prop_types_default.a.string,
                    iabVersion: prop_types_default.a.number,
                    noticeId: prop_types_default.a.string,
                    platform: prop_types_default.a.string,
                    config: prop_types_default.a.object,
                    gdprAppliesGlobally: prop_types_default.a.bool,
                    onReady: prop_types_default.a.func,
                    onConsentChanged: prop_types_default.a.func,
                    onNoticeShown: prop_types_default.a.func,
                    onNoticeHidden: prop_types_default.a.func,
                    onNoticeBackdropclick: prop_types_default.a.func,
                    onNoticeClickAgree: prop_types_default.a.func,
                    onNoticeClickMoreInfo: prop_types_default.a.func,
                    onPreferencesClickAgreeToAll: prop_types_default.a.func,
                    onPreferencesClickDisagreeToAll: prop_types_default.a.func,
                    onPreferencesClickPurposeAgree: prop_types_default.a.func,
                    onPreferencesClickPurposeDisagree: prop_types_default.a.func,
                    onPreferencesClickViewVendors: prop_types_default.a.func,
                    onPreferencesClickSaveChoices: prop_types_default.a.func,
                    onPreferencesClickVendorAgree: prop_types_default.a.func,
                    onPreferencesClickVendorDisagree: prop_types_default.a.func,
                    onPreferencesClickVendorSaveChoices: prop_types_default.a.func,
                    sdkPath: prop_types_default.a.string,
                    embedTCFStub: prop_types_default.a.bool
                };


                // EXTERNAL MODULE: ./node_modules/.pnpm/react-dom@18.2.0_react@18.3.1/node_modules/react-dom/client.js
                var client = __webpack_require__(2037);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+didomi@8.116.6_@apollo+client@3.9.10_@emotion+styled@11.11.5_@types+react@18.2.7_br25ldmntc72gqek2mticxf3du/node_modules/@next-common/didomi/dist/esm/didomi/noticeHTML.styles.js

                var noticeHTML_styles_templateObject, noticeHTML_styles_templateObject2, noticeHTML_styles_templateObject3, noticeHTML_styles_templateObject4, noticeHTML_styles_templateObject5, noticeHTML_styles_templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11;

                var containerNotice = Object(emotion_react_esm["a" /* css */ ])(noticeHTML_styles_templateObject || (noticeHTML_styles_templateObject = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  display: flex !important;\n  flex-direction: row;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  background-color: #f7f7f7;\n  font-family: RakutenSansUi, sans-serif;\n  padding: 48px 24px;\n  box-shadow: 0px -1px 0px #d1d1d1;\n  @media (max-width: 48em) {\n    flex-direction: column;\n    align-items: stretch;\n  }\n  @media (max-width: 36em) {\n    padding: 16px;\n  }\n"])));
                var containerTxt = Object(emotion_react_esm["a" /* css */ ])(noticeHTML_styles_templateObject2 || (noticeHTML_styles_templateObject2 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  max-width: 1084px;\n  display: flex !important;\n  flex-direction: column;\n  margin-right: 64px;\n  @media (max-width: 93.25em) {\n    margin-right: 32px;\n  }\n  @media (max-width: 75em) {\n    margin-right: 24px;\n  }\n  @media (max-width: 62em) {\n    margin-right: 24px;\n  }\n  @media (max-width: 48em) {\n    margin-right: 0;\n  }\n"])));
                var titleTxtStyle = Object(emotion_react_esm["a" /* css */ ])(noticeHTML_styles_templateObject3 || (noticeHTML_styles_templateObject3 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  font-size: 16px !important;\n  font-weight: bold !important;\n  color: #333333 !important;\n  line-height: 20px !important;\n  margin-bottom: 16px;\n  @media (max-width: 36em) {\n    margin-bottom: 8px;\n    font-size: 14px;\n    line-height: 18px;\n  }\n"])));
                var containerContinueWithoutConsent = Object(emotion_react_esm["a" /* css */ ])(noticeHTML_styles_templateObject4 || (noticeHTML_styles_templateObject4 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  display: flex !important;\n  cursor: pointer;\n  margin-bottom: 16px;\n  @media (max-width: 36em) {\n    margin-bottom: 8px;\n  }\n"])));
                var continueWithoutConsentTxtStyle = Object(emotion_react_esm["a" /* css */ ])(noticeHTML_styles_templateObject5 || (noticeHTML_styles_templateObject5 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  color: black !important;\n  font-size: 14px !important;\n  line-height: 18px !important;\n  margin-right: 10px;\n"])));
                var containerArrow = Object(emotion_react_esm["a" /* css */ ])(noticeHTML_styles_templateObject6 || (noticeHTML_styles_templateObject6 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  display: flex !important;\n  align-items: center;\n"])));
                var paragraphTxtStyle = Object(emotion_react_esm["a" /* css */ ])(_templateObject7 || (_templateObject7 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  color: #4d4d4d !important;\n  font-size: 14px !important;\n  line-height: 18px !important;\n  margin-bottom: 0px !important;\n  @media (max-width: 48em) {\n    margin-bottom: 16px !important;\n  }\n  @media (max-width: 36em) {\n    font-size: 12px !important;\n    line-height: 15px !important;\n  }\n"])));
                var lnkDidomi = Object(emotion_react_esm["a" /* css */ ])(_templateObject8 || (_templateObject8 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  text-decoration-line: underline !important;\n  cursor: pointer !important;\n"])));
                var containerBtn = Object(emotion_react_esm["a" /* css */ ])(_templateObject9 || (_templateObject9 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  display: flex !important;\n  flex-direction: column;\n"])));
                var didomi_accept_button = Object(emotion_react_esm["a" /* css */ ])(_templateObject10 || (_templateObject10 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  display: flex !important;\n  height: 48px;\n  width: 194px;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px !important;\n  font-weight: bold !important;\n  line-height: 24px !important;\n  text-transform: uppercase;\n  border-radius: 4px;\n  cursor: pointer;\n  color: white;\n  background-color: #bf0000;\n  margin-bottom: 16px;\n  @media (max-width: 48em) {\n    width: 100%;\n  }\n"])));
                var preferencesBtn = Object(emotion_react_esm["a" /* css */ ])(_templateObject11 || (_templateObject11 = Object(taggedTemplateLiteral["a" /* default */ ])(["\n  display: flex !important;\n  height: 48px;\n  width: 194px;\n  justify-content: center;\n  align-items: center;\n  font-size: 14px !important;\n  font-weight: bold !important;\n  line-height: 24px !important;\n  text-transform: uppercase;\n  border-radius: 4px;\n  cursor: pointer;\n  border: 1px solid #bf0000;\n  color: #bf0000;\n  background-color: #f7f7f7;\n  @media (max-width: 48em) {\n    width: 100%;\n  }\n"])));
                // EXTERNAL MODULE: ./node_modules/.pnpm/@next-common+material-ui-icons@8.111.5_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+_n73w4q23zfmkeq2myeosxit3aa/node_modules/@next-common/material-ui-icons/dist/esm/Arrow/ArrowRight.js
                var ArrowRight = __webpack_require__(746);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+didomi@8.116.6_@apollo+client@3.9.10_@emotion+styled@11.11.5_@types+react@18.2.7_br25ldmntc72gqek2mticxf3du/node_modules/@next-common/didomi/dist/esm/didomi/noticeHTML.js



                /**
                 * notice consent didomi
                 * @returns {*}
                 * @constructor
                 */
                function NoticeHTML() {
                    var openPreferences = function openPreferences(event) {
                        if (!event.key || event.key && event.key === 'enter') {
                            if (window.Didomi.preferences) window.Didomi.preferences.show();
                        }
                    };
                    var acceptAll = function acceptAll(event) {
                        if (!event.key || event.key && event.key === 'enter') {
                            if (window.Didomi.setUserAgreeToAll) window.Didomi.setUserAgreeToAll();
                        }
                    };
                    var openVendors = function openVendors(event) {
                        if (!event.key || event.key && event.key === 'enter') {
                            if (window.Didomi.preferences) window.Didomi.preferences.show('vendors');
                        }
                    };
                    var refuseAll = function refuseAll(event) {
                        if (!event.key || event.key && event.key === 'enter') {
                            if (window.Didomi.setUserDisagreeToAll) window.Didomi.setUserDisagreeToAll();
                        }
                    };
                    return Object(emotion_react_esm["b" /* jsx */ ])("div", {
                        className: "containerNotice",
                        // eslint-disable-next-line
                        css: containerNotice
                    }, Object(emotion_react_esm["b" /* jsx */ ])("div", {
                        className: "containerTxt",
                        // eslint-disable-next-line
                        css: containerTxt
                    }, Object(emotion_react_esm["b" /* jsx */ ])("span", {
                        className: "titleTxtStyle",
                        // eslint-disable-next-line
                        css: titleTxtStyle
                    }, "Vos pr\xE9f\xE9rences en mati\xE8re de cookies"), Object(emotion_react_esm["b" /* jsx */ ])("div", {
                        className: "containerContinueWithoutConsent",
                        onClick: refuseAll,
                        // eslint-disable-next-line
                        css: containerContinueWithoutConsent
                    }, Object(emotion_react_esm["b" /* jsx */ ])("span", {
                        className: "continueWithoutConsentTxtStyle",
                        // eslint-disable-next-line
                        css: continueWithoutConsentTxtStyle
                    }, "Continuer sans accepter"), Object(emotion_react_esm["b" /* jsx */ ])("span", {
                        className: "containerArrow",
                        // eslint-disable-next-line
                        css: containerArrow
                    }, Object(emotion_react_esm["b" /* jsx */ ])(ArrowRight["default"], {
                        fill: "black",
                        width: "12px",
                        height: "12px"
                    }))), Object(emotion_react_esm["b" /* jsx */ ])("p", {
                        className: "paragraphTxtStyle",
                        // eslint-disable-next-line
                        css: paragraphTxtStyle
                    }, "Rakuten France et ses", ' ', Object(emotion_react_esm["b" /* jsx */ ])("span", {
                        className: "lnkDidomi",
                        // eslint-disable-next-line
                        css: lnkDidomi,
                        onClick: openVendors
                    }, "partenaires"), ' ', "traitent vos donn\xE9es personnelles (telles que les donn\xE9es de navigation, les donn\xE9es de transaction, les informations issues des cookies et d'autres identifiants uniques) en stockant et en acc\xE9dant aux informations sur votre terminal, en analysant activement les caract\xE9ristiques de celui-ci afin de vous identifier et en utilisant vos donn\xE9es de g\xE9olocalisation pr\xE9cises pour vous proposer des contenus et publicit\xE9s personnalis\xE9s, mesurer la performance des annonces et des contenus affich\xE9s, conna\xEEtre leur audience et d\xE9velopper leurs produits. Vous pouvez retirer votre consentement \xE0 tout moment depuis la rubrique \xAB Gestion des cookies \xBB.")), Object(emotion_react_esm["b" /* jsx */ ])("div", {
                        className: "containerBtn",
                        // eslint-disable-next-line
                        css: containerBtn
                    }, Object(emotion_react_esm["b" /* jsx */ ])("div", {
                        onClick: acceptAll,
                        className: "didomi_accept_button",
                        // eslint-disable-next-line
                        css: didomi_accept_button,
                        onKeyPress: acceptAll
                    }, Object(emotion_react_esm["b" /* jsx */ ])("span", null, "Accepter et fermer")), Object(emotion_react_esm["b" /* jsx */ ])("div", {
                        onClick: openPreferences,
                        className: "preferencesBtn",
                        // eslint-disable-next-line
                        css: preferencesBtn,
                        onKeyPress: openPreferences
                    }, Object(emotion_react_esm["b" /* jsx */ ])("span", null, "Param\xE9trer"))));
                }
                /* harmony default export */
                var noticeHTML = (NoticeHTML);
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+didomi@8.116.6_@apollo+client@3.9.10_@emotion+styled@11.11.5_@types+react@18.2.7_br25ldmntc72gqek2mticxf3du/node_modules/@next-common/didomi/dist/esm/didomi/didomiConfig.js



                var didomiConfig = {
                    notice: {
                        content: {
                            html: {
                                en: function en(element) {
                                    var root = Object(client["createRoot"])(element);
                                    root.render( /*#__PURE__*/ react_default.a.createElement(noticeHTML, null));
                                }
                            }
                        }
                    }
                };
                var apiKey = 'cf68c9f5-2900-4a80-a413-8347d137161a';
                var didomiConfig_iabVersion = 2;
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+didomi@8.116.6_@apollo+client@3.9.10_@emotion+styled@11.11.5_@types+react@18.2.7_br25ldmntc72gqek2mticxf3du/node_modules/@next-common/didomi/dist/esm/didomi/didomi.js



                function Didomi(_ref) {
                    var didomiNoticeId = _ref.didomiNoticeId,
                        onConsentChanged = _ref.onConsentChanged;
                    return /*#__PURE__*/ react_default.a.createElement("div", null, /*#__PURE__*/ react_default.a.createElement(es_DidomiSDK, {
                        apiKey: apiKey,
                        iabVersion: didomiConfig_iabVersion,
                        noticeId: didomiNoticeId,
                        config: didomiConfig,
                        onConsentChanged: onConsentChanged
                    }));
                }
                var didomi_DidomiContainer = function DidomiContainer(props) {
                    return /*#__PURE__*/ react_default.a.createElement(Didomi, Object.assign({}, props));
                };
                /* harmony default export */
                var didomi = (didomi_DidomiContainer);
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+didomi@8.116.6_@apollo+client@3.9.10_@emotion+styled@11.11.5_@types+react@18.2.7_br25ldmntc72gqek2mticxf3du/node_modules/@next-common/didomi/dist/esm/didomi/index.js


                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+didomi@8.116.6_@apollo+client@3.9.10_@emotion+styled@11.11.5_@types+react@18.2.7_br25ldmntc72gqek2mticxf3du/node_modules/@next-common/didomi/dist/esm/constants.js
                var NAME = 'didomi';
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+didomi@8.116.6_@apollo+client@3.9.10_@emotion+styled@11.11.5_@types+react@18.2.7_br25ldmntc72gqek2mticxf3du/node_modules/@next-common/didomi/dist/esm/index.js


                // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
                var reducer = function reducer() {
                    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    return state;
                };
                var didomiModule = {
                    containers: esm_didomi_namespaceObject,
                    constants: esm_constants_namespaceObject,
                    reducer: reducer
                };
                /* harmony default export */
                var esm = (didomiModule);
                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+icons-material@5.16.0_@mui+material@5.10.17_@types+react@18.2.75_react@18.3.1/node_modules/@mui/icons-material/CookieOutlined.js
                var CookieOutlined = __webpack_require__(2027);
                var CookieOutlined_default = /*#__PURE__*/ __webpack_require__.n(CookieOutlined);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/Box/Box.js + 14 modules
                var Box = __webpack_require__(1795);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+icons@4.11.3_@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/icons/KeyboardArrowDownOutlined.js
                var KeyboardArrowDownOutlined = __webpack_require__(2029);
                var KeyboardArrowDownOutlined_default = /*#__PURE__*/ __webpack_require__.n(KeyboardArrowDownOutlined);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+material-ui@8.116.6_@date-io+core@1.3.13_@emotion+react@11.11.4_@emotion+styled@_3l36ikwk6uz4kyst3naerlbjj4/node_modules/@next-common/material-ui/dist/esm/colorPalette.js
                var colorPalette_colorPalette = {
                    white: '#FFFFFF',
                    gray100: '#F7F7F7',
                    gray200: '#EBEBEB',
                    gray300: '#D1D1D1',
                    gray400: '#B6B6B6',
                    gray500: '#9C9C9C',
                    gray600: '#828282',
                    gray700: '#686868',
                    gray800: '#4D4D4D',
                    gray900: '#333333',
                    gray1000: '#000000',
                    red100: '#FFF0F0',
                    red200: '#FFD3D3',
                    red300: '#FB9A9A',
                    red400: '#F76B6B',
                    red500: '#F53A3A',
                    red600: '#EC0606',
                    red700: '#D80000',
                    red800: '#BF0000',
                    red900: '#8C0000',
                    red1000: '#590000',
                    orange100: '#FEF3EB',
                    orange200: '#FFDBA3',
                    orange300: '#FFC870',
                    orange400: '#FFB238',
                    orange500: '#F59600',
                    orange600: '#DB8600',
                    orange700: '#B87100',
                    orange800: '#995E00',
                    orange900: '#7B4B00',
                    orange1000: '#5C3800',
                    yellow100: '#FFF5CC',
                    yellow200: '#FFEB99',
                    yellow300: '#FFE066',
                    yellow400: '#FFD633',
                    yellow500: '#FFCC00',
                    yellow600: '#DBAF00',
                    yellow700: '#B89300',
                    yellow800: '#947600',
                    yellow900: '#705A00',
                    yellow1000: '#4D3D00',
                    green100: '#EBF7EC',
                    green200: '#BFF4BF',
                    green300: '#8DE98D',
                    green400: '#5FD95F',
                    green500: '#2AC72A',
                    green600: '#007d00',
                    green700: '#009500',
                    green800: '#006C00',
                    green900: '#005300',
                    green1000: '#003900',
                    lightBlue100: '#EBF7FE',
                    lightBlue200: '#AEE4FF',
                    lightBlue300: '#7BD3FF',
                    lightBlue400: '#4DC4FF',
                    lightBlue500: '#1FB4FF',
                    lightBlue600: '#00A0F0',
                    lightBlue700: '#0085C7',
                    lightBlue800: '#006A9E',
                    lightBlue900: '#004E76',
                    lightBlue1000: '#00334D',
                    blue100: '#E8EEFF',
                    blue200: '#C9D7FF',
                    blue300: '#A0B9FF',
                    blue400: '#82A3FF',
                    blue500: '#6C92FB',
                    blue600: '#3A6DFA',
                    blue700: '#134FF3',
                    blue800: '#053ACE',
                    blue900: '#002896',
                    blue1000: '#001D6D',
                    purple100: '#F7E7FF',
                    purple200: '#F1D7FF',
                    purple300: '#E7B9FF',
                    purple400: '#D78BFF',
                    purple500: '#C962FF',
                    purple600: '#B62AFF',
                    purple700: '#9B00EC',
                    purple800: '#7D00BE',
                    purple900: '#65009A',
                    purple1000: '#4B0071',
                    pink100: '#FFE9F8',
                    pink200: '#FFDAF2',
                    pink300: '#FFACE3',
                    pink400: '#FF79D1',
                    pink500: '#FF41BE',
                    pink600: '#EF0AA1',
                    pink700: '#CB0085',
                    pink800: '#A2006A',
                    pink900: '#830056',
                    pink1000: '#5A003C'
                };
                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/styles/makeStyles.js
                var makeStyles = __webpack_require__(1793);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/styles/withStyles.js + 2 modules
                var withStyles = __webpack_require__(137);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/extends.js
                var esm_extends = __webpack_require__(1);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
                var arrayWithHoles = __webpack_require__(198);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/iterableToArray.js
                var iterableToArray = __webpack_require__(197);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
                var unsupportedIterableToArray = __webpack_require__(120);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
                var nonIterableRest = __webpack_require__(199);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/toArray.js




                function _toArray(arr) {
                    return Object(arrayWithHoles["a" /* default */ ])(arr) || Object(iterableToArray["a" /* default */ ])(arr) || Object(unsupportedIterableToArray["a" /* default */ ])(arr) || Object(nonIterableRest["a" /* default */ ])();
                }
                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules
                var slicedToArray = __webpack_require__(26);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
                var objectWithoutProperties = __webpack_require__(25);

                // EXTERNAL MODULE: ./node_modules/.pnpm/react-is@17.0.2/node_modules/react-is/index.js
                var react_is = __webpack_require__(675);

                // EXTERNAL MODULE: ./node_modules/.pnpm/clsx@1.2.1/node_modules/clsx/dist/clsx.m.js
                var clsx_m = __webpack_require__(19);

                // EXTERNAL MODULE: ./node_modules/.pnpm/react-transition-group@4.4.5_react-dom@18.2.0_react@18.3.1/node_modules/react-transition-group/esm/Transition.js + 1 modules
                var Transition = __webpack_require__(571);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/styles/transitions.js
                var transitions = __webpack_require__(681);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/transitions/utils.js
                var reflow = function reflow(node) {
                    return node.scrollTop;
                };

                function getTransitionProps(props, options) {
                    var timeout = props.timeout,
                        _props$style = props.style,
                        style = _props$style === void 0 ? {} : _props$style;
                    return {
                        duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
                        delay: style.transitionDelay
                    };
                }
                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+styles@4.11.5_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/styles/esm/useTheme/useTheme.js
                var useTheme = __webpack_require__(1650);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/styles/defaultTheme.js
                var defaultTheme = __webpack_require__(275);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/styles/useTheme.js



                function useTheme_useTheme() {
                    var theme = Object(useTheme["a" /* default */ ])() || defaultTheme["a" /* default */ ];

                    if (false) {}

                    return theme;
                }
                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/useForkRef.js
                var useForkRef = __webpack_require__(403);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/Collapse/Collapse.js














                var Collapse_styles = function styles(theme) {
                    return {
                        /* Styles applied to the root element. */
                        root: {
                            height: 0,
                            overflow: 'hidden',
                            transition: theme.transitions.create('height')
                        },

                        /* Styles applied to the root element when the transition has entered. */
                        entered: {
                            height: 'auto',
                            overflow: 'visible'
                        },

                        /* Styles applied to the root element when the transition has exited and `collapsedSize` != 0px. */
                        hidden: {
                            visibility: 'hidden'
                        },

                        /* Styles applied to the outer wrapper element. */
                        wrapper: {
                            // Hack to get children with a negative margin to not falsify the height computation.
                            display: 'flex'
                        },

                        /* Styles applied to the inner wrapper element. */
                        wrapperInner: {
                            width: '100%'
                        }
                    };
                };
                /**
                 * The Collapse transition is used by the
                 * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.
                 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
                 */

                var Collapse_Collapse = /*#__PURE__*/ react["forwardRef"](function Collapse(props, ref) {
                    var children = props.children,
                        classes = props.classes,
                        className = props.className,
                        collapsedHeight = props.collapsedHeight,
                        _props$collapsedSize = props.collapsedSize,
                        collapsedSizeProp = _props$collapsedSize === void 0 ? '0px' : _props$collapsedSize,
                        _props$component = props.component,
                        Component = _props$component === void 0 ? 'div' : _props$component,
                        _props$disableStrictM = props.disableStrictModeCompat,
                        disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
                        inProp = props.in,
                        onEnter = props.onEnter,
                        onEntered = props.onEntered,
                        onEntering = props.onEntering,
                        onExit = props.onExit,
                        onExited = props.onExited,
                        onExiting = props.onExiting,
                        style = props.style,
                        _props$timeout = props.timeout,
                        timeout = _props$timeout === void 0 ? transitions["b" /* duration */ ].standard : _props$timeout,
                        _props$TransitionComp = props.TransitionComponent,
                        TransitionComponent = _props$TransitionComp === void 0 ? Transition["a" /* default */ ] : _props$TransitionComp,
                        other = Object(objectWithoutProperties["a" /* default */ ])(props, ["children", "classes", "className", "collapsedHeight", "collapsedSize", "component", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);

                    var theme = useTheme_useTheme();
                    var timer = react["useRef"]();
                    var wrapperRef = react["useRef"](null);
                    var autoTransitionDuration = react["useRef"]();
                    var collapsedSize = typeof(collapsedHeight || collapsedSizeProp) === 'number' ? "".concat(collapsedHeight || collapsedSizeProp, "px") : collapsedHeight || collapsedSizeProp;
                    react["useEffect"](function() {
                        return function() {
                            clearTimeout(timer.current);
                        };
                    }, []);
                    var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
                    var nodeRef = react["useRef"](null);
                    var handleRef = Object(useForkRef["a" /* default */ ])(ref, enableStrictModeCompat ? nodeRef : undefined);

                    var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
                        return function(nodeOrAppearing, maybeAppearing) {
                            if (callback) {
                                var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
                                    _ref2 = Object(slicedToArray["a" /* default */ ])(_ref, 2),
                                    node = _ref2[0],
                                    isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


                                if (isAppearing === undefined) {
                                    callback(node);
                                } else {
                                    callback(node, isAppearing);
                                }
                            }
                        };
                    };

                    var handleEnter = normalizedTransitionCallback(function(node, isAppearing) {
                        node.style.height = collapsedSize;

                        if (onEnter) {
                            onEnter(node, isAppearing);
                        }
                    });
                    var handleEntering = normalizedTransitionCallback(function(node, isAppearing) {
                        var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;

                        var _getTransitionProps = getTransitionProps({
                                style: style,
                                timeout: timeout
                            }, {
                                mode: 'enter'
                            }),
                            transitionDuration = _getTransitionProps.duration;

                        if (timeout === 'auto') {
                            var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
                            node.style.transitionDuration = "".concat(duration2, "ms");
                            autoTransitionDuration.current = duration2;
                        } else {
                            node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
                        }

                        node.style.height = "".concat(wrapperHeight, "px");

                        if (onEntering) {
                            onEntering(node, isAppearing);
                        }
                    });
                    var handleEntered = normalizedTransitionCallback(function(node, isAppearing) {
                        node.style.height = 'auto';

                        if (onEntered) {
                            onEntered(node, isAppearing);
                        }
                    });
                    var handleExit = normalizedTransitionCallback(function(node) {
                        var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
                        node.style.height = "".concat(wrapperHeight, "px");

                        if (onExit) {
                            onExit(node);
                        }
                    });
                    var handleExited = normalizedTransitionCallback(onExited);
                    var handleExiting = normalizedTransitionCallback(function(node) {
                        var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;

                        var _getTransitionProps2 = getTransitionProps({
                                style: style,
                                timeout: timeout
                            }, {
                                mode: 'exit'
                            }),
                            transitionDuration = _getTransitionProps2.duration;

                        if (timeout === 'auto') {
                            var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
                            node.style.transitionDuration = "".concat(duration2, "ms");
                            autoTransitionDuration.current = duration2;
                        } else {
                            node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
                        }

                        node.style.height = collapsedSize;

                        if (onExiting) {
                            onExiting(node);
                        }
                    });

                    var addEndListener = function addEndListener(nodeOrNext, maybeNext) {
                        var next = enableStrictModeCompat ? nodeOrNext : maybeNext;

                        if (timeout === 'auto') {
                            timer.current = setTimeout(next, autoTransitionDuration.current || 0);
                        }
                    };

                    return /*#__PURE__*/ react["createElement"](TransitionComponent, Object(esm_extends["a" /* default */ ])({ in: inProp,
                        onEnter: handleEnter,
                        onEntered: handleEntered,
                        onEntering: handleEntering,
                        onExit: handleExit,
                        onExited: handleExited,
                        onExiting: handleExiting,
                        addEndListener: addEndListener,
                        nodeRef: enableStrictModeCompat ? nodeRef : undefined,
                        timeout: timeout === 'auto' ? null : timeout
                    }, other), function(state, childProps) {
                        return /*#__PURE__*/ react["createElement"](Component, Object(esm_extends["a" /* default */ ])({
                            className: Object(clsx_m["a" /* default */ ])(classes.root, classes.container, className, {
                                'entered': classes.entered,
                                'exited': !inProp && collapsedSize === '0px' && classes.hidden
                            }[state]),
                            style: Object(esm_extends["a" /* default */ ])({
                                minHeight: collapsedSize
                            }, style),
                            ref: handleRef
                        }, childProps), /*#__PURE__*/ react["createElement"]("div", {
                            className: classes.wrapper,
                            ref: wrapperRef
                        }, /*#__PURE__*/ react["createElement"]("div", {
                            className: classes.wrapperInner
                        }, children)));
                    });
                });
                false ? undefined : void 0;
                Collapse_Collapse.muiSupportAuto = true;
                /* harmony default export */
                var esm_Collapse_Collapse = (Object(withStyles["a" /* default */ ])(Collapse_styles, {
                    name: 'MuiCollapse'
                })(Collapse_Collapse));
                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/Paper/Paper.js







                var Paper_styles = function styles(theme) {
                    var elevations = {};
                    theme.shadows.forEach(function(shadow, index) {
                        elevations["elevation".concat(index)] = {
                            boxShadow: shadow
                        };
                    });
                    return Object(esm_extends["a" /* default */ ])({
                        /* Styles applied to the root element. */
                        root: {
                            backgroundColor: theme.palette.background.paper,
                            color: theme.palette.text.primary,
                            transition: theme.transitions.create('box-shadow')
                        },

                        /* Styles applied to the root element if `square={false}`. */
                        rounded: {
                            borderRadius: theme.shape.borderRadius
                        },

                        /* Styles applied to the root element if `variant="outlined"`. */
                        outlined: {
                            border: "1px solid ".concat(theme.palette.divider)
                        }
                    }, elevations);
                };
                var Paper_Paper = /*#__PURE__*/ react["forwardRef"](function Paper(props, ref) {
                    var classes = props.classes,
                        className = props.className,
                        _props$component = props.component,
                        Component = _props$component === void 0 ? 'div' : _props$component,
                        _props$square = props.square,
                        square = _props$square === void 0 ? false : _props$square,
                        _props$elevation = props.elevation,
                        elevation = _props$elevation === void 0 ? 1 : _props$elevation,
                        _props$variant = props.variant,
                        variant = _props$variant === void 0 ? 'elevation' : _props$variant,
                        other = Object(objectWithoutProperties["a" /* default */ ])(props, ["classes", "className", "component", "square", "elevation", "variant"]);

                    return /*#__PURE__*/ react["createElement"](Component, Object(esm_extends["a" /* default */ ])({
                        className: Object(clsx_m["a" /* default */ ])(classes.root, className, variant === 'outlined' ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
                        ref: ref
                    }, other));
                });
                false ? undefined : void 0;
                /* harmony default export */
                var esm_Paper_Paper = (Object(withStyles["a" /* default */ ])(Paper_styles, {
                    name: 'MuiPaper'
                })(Paper_Paper));
                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/Accordion/AccordionContext.js

                /**
                 * @ignore - internal component.
                 * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
                 */

                var AccordionContext = react["createContext"]({});

                if (false) {}

                /* harmony default export */
                var Accordion_AccordionContext = (AccordionContext);
                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/utils/useControlled.js
                var useControlled = __webpack_require__(1854);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/Accordion/Accordion.js














                var Accordion_styles = function styles(theme) {
                    var transition = {
                        duration: theme.transitions.duration.shortest
                    };
                    return {
                        /* Styles applied to the root element. */
                        root: {
                            position: 'relative',
                            transition: theme.transitions.create(['margin'], transition),
                            '&:before': {
                                position: 'absolute',
                                left: 0,
                                top: -1,
                                right: 0,
                                height: 1,
                                content: '""',
                                opacity: 1,
                                backgroundColor: theme.palette.divider,
                                transition: theme.transitions.create(['opacity', 'background-color'], transition)
                            },
                            '&:first-child': {
                                '&:before': {
                                    display: 'none'
                                }
                            },
                            '&$expanded': {
                                margin: '16px 0',
                                '&:first-child': {
                                    marginTop: 0
                                },
                                '&:last-child': {
                                    marginBottom: 0
                                },
                                '&:before': {
                                    opacity: 0
                                }
                            },
                            '&$expanded + &': {
                                '&:before': {
                                    display: 'none'
                                }
                            },
                            '&$disabled': {
                                backgroundColor: theme.palette.action.disabledBackground
                            }
                        },

                        /* Styles applied to the root element if `square={false}`. */
                        rounded: {
                            borderRadius: 0,
                            '&:first-child': {
                                borderTopLeftRadius: theme.shape.borderRadius,
                                borderTopRightRadius: theme.shape.borderRadius
                            },
                            '&:last-child': {
                                borderBottomLeftRadius: theme.shape.borderRadius,
                                borderBottomRightRadius: theme.shape.borderRadius,
                                // Fix a rendering issue on Edge
                                '@supports (-ms-ime-align: auto)': {
                                    borderBottomLeftRadius: 0,
                                    borderBottomRightRadius: 0
                                }
                            }
                        },

                        /* Styles applied to the root element if `expanded={true}`. */
                        expanded: {},

                        /* Styles applied to the root element if `disabled={true}`. */
                        disabled: {}
                    };
                };
                var Accordion_Accordion = /*#__PURE__*/ react["forwardRef"](function Accordion(props, ref) {
                    var childrenProp = props.children,
                        classes = props.classes,
                        className = props.className,
                        _props$defaultExpande = props.defaultExpanded,
                        defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande,
                        _props$disabled = props.disabled,
                        disabled = _props$disabled === void 0 ? false : _props$disabled,
                        expandedProp = props.expanded,
                        onChange = props.onChange,
                        _props$square = props.square,
                        square = _props$square === void 0 ? false : _props$square,
                        _props$TransitionComp = props.TransitionComponent,
                        TransitionComponent = _props$TransitionComp === void 0 ? esm_Collapse_Collapse : _props$TransitionComp,
                        TransitionProps = props.TransitionProps,
                        other = Object(objectWithoutProperties["a" /* default */ ])(props, ["children", "classes", "className", "defaultExpanded", "disabled", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"]);

                    var _useControlled = Object(useControlled["a" /* default */ ])({
                            controlled: expandedProp,
                            default: defaultExpanded,
                            name: 'Accordion',
                            state: 'expanded'
                        }),
                        _useControlled2 = Object(slicedToArray["a" /* default */ ])(_useControlled, 2),
                        expanded = _useControlled2[0],
                        setExpandedState = _useControlled2[1];

                    var handleChange = react["useCallback"](function(event) {
                        setExpandedState(!expanded);

                        if (onChange) {
                            onChange(event, !expanded);
                        }
                    }, [expanded, onChange, setExpandedState]);

                    var _React$Children$toArr = react["Children"].toArray(childrenProp),
                        _React$Children$toArr2 = _toArray(_React$Children$toArr),
                        summary = _React$Children$toArr2[0],
                        children = _React$Children$toArr2.slice(1);

                    var contextValue = react["useMemo"](function() {
                        return {
                            expanded: expanded,
                            disabled: disabled,
                            toggle: handleChange
                        };
                    }, [expanded, disabled, handleChange]);
                    return /*#__PURE__*/ react["createElement"](esm_Paper_Paper, Object(esm_extends["a" /* default */ ])({
                        className: Object(clsx_m["a" /* default */ ])(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
                        ref: ref,
                        square: square
                    }, other), /*#__PURE__*/ react["createElement"](Accordion_AccordionContext.Provider, {
                        value: contextValue
                    }, summary), /*#__PURE__*/ react["createElement"](TransitionComponent, Object(esm_extends["a" /* default */ ])({ in: expanded,
                        timeout: "auto"
                    }, TransitionProps), /*#__PURE__*/ react["createElement"]("div", {
                        "aria-labelledby": summary.props.id,
                        id: summary.props['aria-controls'],
                        role: "region"
                    }, children)));
                });
                false ? undefined : void 0;
                /* harmony default export */
                var esm_Accordion_Accordion = (Object(withStyles["a" /* default */ ])(Accordion_styles, {
                    name: 'MuiAccordion'
                })(Accordion_Accordion));
                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/ButtonBase/ButtonBase.js + 2 modules
                var ButtonBase = __webpack_require__(1666);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/IconButton/IconButton.js
                var IconButton = __webpack_require__(1769);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/AccordionSummary/AccordionSummary.js



                /* eslint-disable jsx-a11y/aria-role */








                var AccordionSummary_styles = function styles(theme) {
                    var transition = {
                        duration: theme.transitions.duration.shortest
                    };
                    return {
                        /* Styles applied to the root element. */
                        root: {
                            display: 'flex',
                            minHeight: 8 * 6,
                            transition: theme.transitions.create(['min-height', 'background-color'], transition),
                            padding: theme.spacing(0, 2),
                            '&:hover:not($disabled)': {
                                cursor: 'pointer'
                            },
                            '&$expanded': {
                                minHeight: 64
                            },
                            '&$focused, &$focusVisible': {
                                backgroundColor: theme.palette.action.focus
                            },
                            '&$disabled': {
                                opacity: theme.palette.action.disabledOpacity
                            }
                        },

                        /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */
                        expanded: {},

                        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
                        focused: {},

                        /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
                        focusVisible: {},

                        /* Pseudo-class applied to the root element if `disabled={true}`. */
                        disabled: {},

                        /* Styles applied to the children wrapper element. */
                        content: {
                            display: 'flex',
                            flexGrow: 1,
                            transition: theme.transitions.create(['margin'], transition),
                            margin: '12px 0',
                            '&$expanded': {
                                margin: '20px 0'
                            }
                        },

                        /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */
                        expandIcon: {
                            transform: 'rotate(0deg)',
                            transition: theme.transitions.create('transform', transition),
                            '&:hover': {
                                // Disable the hover effect for the IconButton,
                                // because a hover effect should apply to the entire Expand button and
                                // not only to the IconButton.
                                backgroundColor: 'transparent'
                            },
                            '&$expanded': {
                                transform: 'rotate(180deg)'
                            }
                        }
                    };
                };
                var AccordionSummary_AccordionSummary = /*#__PURE__*/ react["forwardRef"](function AccordionSummary(props, ref) {
                    var children = props.children,
                        classes = props.classes,
                        className = props.className,
                        expandIcon = props.expandIcon,
                        focusVisibleClassName = props.focusVisibleClassName,
                        _props$IconButtonProp = props.IconButtonProps,
                        IconButtonProps = _props$IconButtonProp === void 0 ? {} : _props$IconButtonProp,
                        onClick = props.onClick,
                        other = Object(objectWithoutProperties["a" /* default */ ])(props, ["children", "classes", "className", "expandIcon", "focusVisibleClassName", "IconButtonProps", "onClick"]);

                    var _React$useContext = react["useContext"](Accordion_AccordionContext),
                        _React$useContext$dis = _React$useContext.disabled,
                        disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis,
                        expanded = _React$useContext.expanded,
                        toggle = _React$useContext.toggle;

                    var handleChange = function handleChange(event) {
                        if (toggle) {
                            toggle(event);
                        }

                        if (onClick) {
                            onClick(event);
                        }
                    };

                    return /*#__PURE__*/ react["createElement"](ButtonBase["a" /* default */ ], Object(esm_extends["a" /* default */ ])({
                        focusRipple: false,
                        disableRipple: true,
                        disabled: disabled,
                        component: "div",
                        "aria-expanded": expanded,
                        className: Object(clsx_m["a" /* default */ ])(classes.root, className, disabled && classes.disabled, expanded && classes.expanded),
                        focusVisibleClassName: Object(clsx_m["a" /* default */ ])(classes.focusVisible, classes.focused, focusVisibleClassName),
                        onClick: handleChange,
                        ref: ref
                    }, other), /*#__PURE__*/ react["createElement"]("div", {
                        className: Object(clsx_m["a" /* default */ ])(classes.content, expanded && classes.expanded)
                    }, children), expandIcon && /*#__PURE__*/ react["createElement"](IconButton["a" /* default */ ], Object(esm_extends["a" /* default */ ])({
                        className: Object(clsx_m["a" /* default */ ])(classes.expandIcon, expanded && classes.expanded),
                        edge: "end",
                        component: "div",
                        tabIndex: null,
                        role: null,
                        "aria-hidden": true
                    }, IconButtonProps), expandIcon));
                });
                false ? undefined : void 0;
                /* harmony default export */
                var esm_AccordionSummary_AccordionSummary = (Object(withStyles["a" /* default */ ])(AccordionSummary_styles, {
                    name: 'MuiAccordionSummary'
                })(AccordionSummary_AccordionSummary));
                // CONCATENATED MODULE: ./node_modules/.pnpm/@material-ui+core@4.12.4_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@material-ui/core/esm/AccordionDetails/AccordionDetails.js






                var AccordionDetails_styles = function styles(theme) {
                    return {
                        /* Styles applied to the root element. */
                        root: {
                            display: 'flex',
                            padding: theme.spacing(1, 2, 2)
                        }
                    };
                };
                var AccordionDetails_AccordionDetails = /*#__PURE__*/ react["forwardRef"](function AccordionDetails(props, ref) {
                    var classes = props.classes,
                        className = props.className,
                        other = Object(objectWithoutProperties["a" /* default */ ])(props, ["classes", "className"]);

                    return /*#__PURE__*/ react["createElement"]("div", Object(esm_extends["a" /* default */ ])({
                        className: Object(clsx_m["a" /* default */ ])(classes.root, className),
                        ref: ref
                    }, other));
                });
                false ? undefined : void 0;
                /* harmony default export */
                var esm_AccordionDetails_AccordionDetails = (Object(withStyles["a" /* default */ ])(AccordionDetails_styles, {
                    name: 'MuiAccordionDetails'
                })(AccordionDetails_AccordionDetails));
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+material-ui@8.116.6_@date-io+core@1.3.13_@emotion+react@11.11.4_@emotion+styled@_3l36ikwk6uz4kyst3naerlbjj4/node_modules/@next-common/material-ui/dist/esm/components/Accordion/Accordion.style.js


                var useStyles = Object(makeStyles["a" /* default */ ])({
                    summary: {
                        border: "1px solid ".concat(colorPalette_colorPalette.gray200)
                    },
                    title: {
                        color: colorPalette_colorPalette.gray900,
                        fontSize: '16px',
                        fontWeight: 600,
                        fontFamily: 'RakutenSansUiSemiBold, serif',
                        textOverflow: 'ellipsis',
                        overflow: 'hidden',
                        whiteSpace: 'nowrap',
                        width: '60vw'
                    },
                    subTitle: {
                        color: colorPalette_colorPalette.gray500,
                        fontSize: '14px',
                        fontWeight: 400
                    },
                    detailsLite: {
                        padding: '0 16px 16px 16px !important',
                        display: 'flex',
                        flexDirection: 'column',
                        width: '100%',
                        borderTop: 'none'
                    },
                    details: {
                        padding: '16px !important',
                        display: 'flex',
                        flexDirection: 'column',
                        width: '100%',
                        borderTop: "1px solid ".concat(colorPalette_colorPalette.gray200)
                    },
                    detailsContent: {
                        color: colorPalette_colorPalette.gray700,
                        fontSize: '14px',
                        fontWeight: 400,
                        width: '100%'
                    },
                    customAccordionwithoutBorder: {
                        borderRadius: '0px !important',
                        borderLeft: '0px !important',
                        borderRight: '0px !important'
                    },
                    customAccordionLite: {
                        borderRadius: '4px',
                        border: "1px solid ".concat(colorPalette_colorPalette.gray200),
                        "&:hover": {
                            boxShadow: "0 0 0 4px ".concat(colorPalette_colorPalette.gray100)
                        },
                        "&:active": {
                            border: "1px solid ".concat(colorPalette_colorPalette.gray300)
                        },
                        '&:expanded': {
                            color: 'red'
                        }
                    },
                    'detailsContent > * > Button': {
                        width: '100%',
                        marginTop: '12px'
                    },
                    content: {
                        marginLeft: '12px'
                    },
                    icon: {
                        width: '32px',
                        height: '32px',
                        borderRadius: '4px',
                        backgroundColor: function backgroundColor(props) {
                            return props.iconBackgroundColor ? colorPalette_colorPalette[props.iconBackgroundColor] : colorPalette_colorPalette.gray700;
                        },
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        marginRight: '12px'
                    }
                });
                var CustomAccordion = Object(withStyles["a" /* default */ ])({
                    root: {
                        borderTop: "1px solid ".concat(colorPalette_colorPalette.gray200),
                        borderBottom: "1px solid ".concat(colorPalette_colorPalette.gray200),
                        '&:before': {
                            display: 'none'
                        },
                        boxShadow: 'none'
                    },
                    expanded: {
                        border: "1px solid ".concat(colorPalette_colorPalette.gray800),
                        '&$expanded': {
                            margin: 0
                        },
                        '&:active': {
                            border: "1px solid ".concat(colorPalette_colorPalette.gray600)
                        }
                    }
                })(esm_Accordion_Accordion);
                var CustomSummary = Object(withStyles["a" /* default */ ])({
                    root: {
                        backgroundColor: function backgroundColor(_ref) {
                            var summaryColor = _ref.summaryColor;
                            return summaryColor ? colorPalette_colorPalette[summaryColor] : '';
                        }
                    },
                    expanded: {
                        '&$expanded': {
                            minHeight: 'initial'
                        }
                    },
                    expandIcon: {
                        '&$expand': {
                            transform: 'rotate(180deg)'
                        }
                    },
                    content: {
                        margin: '16px 0',
                        '&$expanded': {
                            margin: '16px 0'
                        }
                    }
                })(esm_AccordionSummary_AccordionSummary);
                var CustomAccordionDetails = Object(withStyles["a" /* default */ ])({
                    root: {
                        backgroundColor: function backgroundColor(_ref2) {
                            var detailsColor = _ref2.detailsColor;
                            return detailsColor ? colorPalette_colorPalette[detailsColor] : '';
                        }
                    }
                })(esm_AccordionDetails_AccordionDetails);
                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+material-ui@8.116.6_@date-io+core@1.3.13_@emotion+react@11.11.4_@emotion+styled@_3l36ikwk6uz4kyst3naerlbjj4/node_modules/@next-common/material-ui/dist/esm/components/Accordion/Accordion.js





                var Accordion_AccordionMui = function AccordionMui(props) {
                    var title = props.title,
                        subTitle = props.subTitle,
                        children = props.children,
                        icon = props.icon,
                        summaryColor = props.summaryColor,
                        detailsColor = props.detailsColor,
                        _props$isLite = props.isLite,
                        isLite = _props$isLite === void 0 ? false : _props$isLite;
                    var s = useStyles(props);
                    return /*#__PURE__*/ react_default.a.createElement(CustomAccordion, {
                        className: isLite ? s.customAccordionLite : s.customAccordionwithoutBorder
                    }, /*#__PURE__*/ react_default.a.createElement(CustomSummary, {
                        summaryColor: summaryColor,
                        expandIcon: /*#__PURE__*/ react_default.a.createElement(KeyboardArrowDownOutlined_default.a, {
                            htmlColor: colorPalette_colorPalette.gray700,
                            style: {
                                fontSize: '18px'
                            }
                        })
                    }, /*#__PURE__*/ react_default.a.createElement(react_default.a.Fragment, null, icon ? ( /*#__PURE__*/ react_default.a.createElement(Box["a" /* default */ ], {
                        className: s.icon
                    }, icon)) : null, /*#__PURE__*/ react_default.a.createElement(Box["a" /* default */ ], null, /*#__PURE__*/ react_default.a.createElement("p", {
                        className: s.title
                    }, title), subTitle ? ( /*#__PURE__*/ react_default.a.createElement("p", {
                        className: s.subTitle,
                        dangerouslySetInnerHTML: {
                            __html: subTitle
                        }
                    })) : null))), /*#__PURE__*/ react_default.a.createElement(CustomAccordionDetails, {
                        detailsColor: detailsColor,
                        className: isLite ? s.detailsLite : s.details
                    }, /*#__PURE__*/ react_default.a.createElement(Box["a" /* default */ ], {
                        className: s.detailsContent
                    }, children)));
                };
                // EXTERNAL MODULE: ./node_modules/.pnpm/@next-common+material-ui-icons@8.111.5_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+_n73w4q23zfmkeq2myeosxit3aa/node_modules/@next-common/material-ui-icons/dist/esm/Check/Check.js
                var Check = __webpack_require__(744);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+icons-material@5.16.0_@mui+material@5.10.17_@types+react@18.2.75_react@18.3.1/node_modules/@mui/icons-material/TimerOutlined.js
                var TimerOutlined = __webpack_require__(2028);
                var TimerOutlined_default = /*#__PURE__*/ __webpack_require__.n(TimerOutlined);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+material@5.10.17_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@mui/material/esm/Card/Card.js + 1 modules
                var Card_Card = __webpack_require__(1809);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+material@5.10.17_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@mui/material/esm/CardContent/CardContent.js + 1 modules
                var CardContent = __webpack_require__(1810);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
                var objectWithoutPropertiesLoose = __webpack_require__(11);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+utils@5.16.6_@types+react@18.2.75_react@18.3.1/node_modules/@mui/utils/esm/composeClasses/composeClasses.js
                var composeClasses = __webpack_require__(299);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+system@5.15.15_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.75_react@18.3.1/node_modules/@mui/system/esm/colorManipulator.js + 1 modules
                var colorManipulator = __webpack_require__(808);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+material@5.10.17_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@mui/material/esm/styles/styled.js + 1 modules
                var styles_styled = __webpack_require__(17);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+material@5.10.17_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@mui/material/esm/styles/useThemeProps.js + 2 modules
                var useThemeProps = __webpack_require__(28);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+material@5.10.17_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@mui/material/esm/Divider/dividerClasses.js
                var dividerClasses = __webpack_require__(1704);

                // EXTERNAL MODULE: ./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js
                var jsx_runtime = __webpack_require__(8);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@mui+material@5.10.17_@emotion+react@11.11.4_@emotion+styled@11.11.5_@types+react@18.2.75_react-dom@18.2.0_react@18.3.1/node_modules/@mui/material/esm/Divider/Divider.js


                const _excluded = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];









                const useUtilityClasses = ownerState => {
                    const {
                        absolute,
                        children,
                        classes,
                        flexItem,
                        light,
                        orientation,
                        textAlign,
                        variant
                    } = ownerState;
                    const slots = {
                        root: ['root', absolute && 'absolute', variant, light && 'light', orientation === 'vertical' && 'vertical', flexItem && 'flexItem', children && 'withChildren', children && orientation === 'vertical' && 'withChildrenVertical', textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight', textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'],
                        wrapper: ['wrapper', orientation === 'vertical' && 'wrapperVertical']
                    };
                    return Object(composeClasses["a" /* default */ ])(slots, dividerClasses["b" /* getDividerUtilityClass */ ], classes);
                };
                const DividerRoot = Object(styles_styled["a" /* default */ ])('div', {
                    name: 'MuiDivider',
                    slot: 'Root',
                    overridesResolver: (props, styles) => {
                        const {
                            ownerState
                        } = props;
                        return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === 'vertical' && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft];
                    }
                })(({
                    theme,
                    ownerState
                }) => Object(esm_extends["a" /* default */ ])({
                    margin: 0,
                    // Reset browser default style.
                    flexShrink: 0,
                    borderWidth: 0,
                    borderStyle: 'solid',
                    borderColor: (theme.vars || theme).palette.divider,
                    borderBottomWidth: 'thin'
                }, ownerState.absolute && {
                    position: 'absolute',
                    bottom: 0,
                    left: 0,
                    width: '100%'
                }, ownerState.light && {
                    borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : Object(colorManipulator["a" /* alpha */ ])(theme.palette.divider, 0.08)
                }, ownerState.variant === 'inset' && {
                    marginLeft: 72
                }, ownerState.variant === 'middle' && ownerState.orientation === 'horizontal' && {
                    marginLeft: theme.spacing(2),
                    marginRight: theme.spacing(2)
                }, ownerState.variant === 'middle' && ownerState.orientation === 'vertical' && {
                    marginTop: theme.spacing(1),
                    marginBottom: theme.spacing(1)
                }, ownerState.orientation === 'vertical' && {
                    height: '100%',
                    borderBottomWidth: 0,
                    borderRightWidth: 'thin'
                }, ownerState.flexItem && {
                    alignSelf: 'stretch',
                    height: 'auto'
                }), ({
                    theme,
                    ownerState
                }) => Object(esm_extends["a" /* default */ ])({}, ownerState.children && {
                    display: 'flex',
                    whiteSpace: 'nowrap',
                    textAlign: 'center',
                    border: 0,
                    '&::before, &::after': {
                        position: 'relative',
                        width: '100%',
                        borderTop: `thin solid ${(theme.vars || theme).palette.divider}`,
                        top: '50%',
                        content: '""',
                        transform: 'translateY(50%)'
                    }
                }), ({
                    theme,
                    ownerState
                }) => Object(esm_extends["a" /* default */ ])({}, ownerState.children && ownerState.orientation === 'vertical' && {
                    flexDirection: 'column',
                    '&::before, &::after': {
                        height: '100%',
                        top: '0%',
                        left: '50%',
                        borderTop: 0,
                        borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`,
                        transform: 'translateX(0%)'
                    }
                }), ({
                    ownerState
                }) => Object(esm_extends["a" /* default */ ])({}, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && {
                    '&::before': {
                        width: '90%'
                    },
                    '&::after': {
                        width: '10%'
                    }
                }, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && {
                    '&::before': {
                        width: '10%'
                    },
                    '&::after': {
                        width: '90%'
                    }
                }));
                const DividerWrapper = Object(styles_styled["a" /* default */ ])('span', {
                    name: 'MuiDivider',
                    slot: 'Wrapper',
                    overridesResolver: (props, styles) => {
                        const {
                            ownerState
                        } = props;
                        return [styles.wrapper, ownerState.orientation === 'vertical' && styles.wrapperVertical];
                    }
                })(({
                    theme,
                    ownerState
                }) => Object(esm_extends["a" /* default */ ])({
                    display: 'inline-block',
                    paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
                    paddingRight: `calc(${theme.spacing(1)} * 1.2)`
                }, ownerState.orientation === 'vertical' && {
                    paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
                    paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
                }));
                const Divider_Divider = /*#__PURE__*/ react["forwardRef"](function Divider(inProps, ref) {
                    const props = Object(useThemeProps["a" /* default */ ])({
                        props: inProps,
                        name: 'MuiDivider'
                    });
                    const {
                        absolute = false,
                            children,
                            className,
                            component = children ? 'div' : 'hr',
                            flexItem = false,
                            light = false,
                            orientation = 'horizontal',
                            role = component !== 'hr' ? 'separator' : undefined,
                            textAlign = 'center',
                            variant = 'fullWidth'
                    } = props,
                    other = Object(objectWithoutPropertiesLoose["a" /* default */ ])(props, _excluded);
                    const ownerState = Object(esm_extends["a" /* default */ ])({}, props, {
                        absolute,
                        component,
                        flexItem,
                        light,
                        orientation,
                        role,
                        textAlign,
                        variant
                    });
                    const classes = useUtilityClasses(ownerState);
                    return /*#__PURE__*/ Object(jsx_runtime["jsx"])(DividerRoot, Object(esm_extends["a" /* default */ ])({
                        as: component,
                        className: Object(clsx_m["a" /* default */ ])(classes.root, className),
                        role: role,
                        ref: ref,
                        ownerState: ownerState
                    }, other, {
                        children: children ? /*#__PURE__*/ Object(jsx_runtime["jsx"])(DividerWrapper, {
                            className: classes.wrapper,
                            ownerState: ownerState,
                            children: children
                        }) : null
                    }));
                });
                false ? undefined : void 0;
                /* harmony default export */
                var esm_Divider_Divider = (Divider_Divider);
                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+icons-material@5.16.0_@mui+material@5.10.17_@types+react@18.2.75_react@18.3.1/node_modules/@mui/icons-material/CardGiftcardOutlined.js
                var CardGiftcardOutlined = __webpack_require__(2035);
                var CardGiftcardOutlined_default = /*#__PURE__*/ __webpack_require__.n(CardGiftcardOutlined);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+icons-material@5.16.0_@mui+material@5.10.17_@types+react@18.2.75_react@18.3.1/node_modules/@mui/icons-material/CasinoOutlined.js
                var CasinoOutlined = __webpack_require__(2036);
                var CasinoOutlined_default = /*#__PURE__*/ __webpack_require__.n(CasinoOutlined);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+icons-material@5.16.0_@mui+material@5.10.17_@types+react@18.2.75_react@18.3.1/node_modules/@mui/icons-material/LocalOfferOutlined.js
                var LocalOfferOutlined = __webpack_require__(2033);
                var LocalOfferOutlined_default = /*#__PURE__*/ __webpack_require__.n(LocalOfferOutlined);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+icons-material@5.16.0_@mui+material@5.10.17_@types+react@18.2.75_react@18.3.1/node_modules/@mui/icons-material/LocalShippingOutlined.js
                var LocalShippingOutlined = __webpack_require__(2034);
                var LocalShippingOutlined_default = /*#__PURE__*/ __webpack_require__.n(LocalShippingOutlined);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+icons-material@5.16.0_@mui+material@5.10.17_@types+react@18.2.75_react@18.3.1/node_modules/@mui/icons-material/PercentOutlined.js
                var PercentOutlined = __webpack_require__(2032);
                var PercentOutlined_default = /*#__PURE__*/ __webpack_require__.n(PercentOutlined);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/typeof.js
                var esm_typeof = __webpack_require__(39);

                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/requiredArgs/index.js
                function requiredArgs(required, args) {
                    if (args.length < required) {
                        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
                    }
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/toDate/index.js


                /**
                 * @name toDate
                 * @category Common Helpers
                 * @summary Convert the given argument to an instance of Date.
                 *
                 * @description
                 * Convert the given argument to an instance of Date.
                 *
                 * If the argument is an instance of Date, the function returns its clone.
                 *
                 * If the argument is a number, it is treated as a timestamp.
                 *
                 * If the argument is none of the above, the function returns Invalid Date.
                 *
                 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
                 *
                 * @param {Date|Number} argument - the value to convert
                 * @returns {Date} the parsed date in the local time zone
                 * @throws {TypeError} 1 argument required
                 *
                 * @example
                 * // Clone the date:
                 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
                 * //=> Tue Feb 11 2014 11:30:30
                 *
                 * @example
                 * // Convert the timestamp to date:
                 * const result = toDate(1392098430000)
                 * //=> Tue Feb 11 2014 11:30:30
                 */
                function toDate(argument) {
                    requiredArgs(1, arguments);
                    var argStr = Object.prototype.toString.call(argument);

                    // Clone the date
                    if (argument instanceof Date || Object(esm_typeof["a" /* default */ ])(argument) === 'object' && argStr === '[object Date]') {
                        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
                        return new Date(argument.getTime());
                    } else if (typeof argument === 'number' || argStr === '[object Number]') {
                        return new Date(argument);
                    } else {
                        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
                            // eslint-disable-next-line no-console
                            console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
                            // eslint-disable-next-line no-console
                            console.warn(new Error().stack);
                        }
                        return new Date(NaN);
                    }
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/isPast/index.js


                /**
                 * @name isPast
                 * @category Common Helpers
                 * @summary Is the given date in the past?
                 * @pure false
                 *
                 * @description
                 * Is the given date in the past?
                 *
                 * > ⚠️ Please note that this function is not present in the FP submodule as
                 * > it uses `Date.now()` internally hence impure and can't be safely curried.
                 *
                 * @param {Date|Number} date - the date to check
                 * @returns {Boolean} the date is in the past
                 * @throws {TypeError} 1 argument required
                 *
                 * @example
                 * // If today is 6 October 2014, is 2 July 2014 in the past?
                 * const result = isPast(new Date(2014, 6, 2))
                 * //=> true
                 */
                function isPast(dirtyDate) {
                    requiredArgs(1, arguments);
                    return toDate(dirtyDate).getTime() < Date.now();
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/toInteger/index.js
                function toInteger(dirtyNumber) {
                    if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
                        return NaN;
                    }
                    var number = Number(dirtyNumber);
                    if (isNaN(number)) {
                        return number;
                    }
                    return number < 0 ? Math.ceil(number) : Math.floor(number);
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/addDays/index.js



                /**
                 * @name addDays
                 * @category Day Helpers
                 * @summary Add the specified number of days to the given date.
                 *
                 * @description
                 * Add the specified number of days to the given date.
                 *
                 * @param {Date|Number} date - the date to be changed
                 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
                 * @returns {Date} - the new date with the days added
                 * @throws {TypeError} - 2 arguments required
                 *
                 * @example
                 * // Add 10 days to 1 September 2014:
                 * const result = addDays(new Date(2014, 8, 1), 10)
                 * //=> Thu Sep 11 2014 00:00:00
                 */
                function addDays(dirtyDate, dirtyAmount) {
                    requiredArgs(2, arguments);
                    var date = toDate(dirtyDate);
                    var amount = toInteger(dirtyAmount);
                    if (isNaN(amount)) {
                        return new Date(NaN);
                    }
                    if (!amount) {
                        // If 0 days, no-op to avoid changing times in the hour before end of DST
                        return date;
                    }
                    date.setDate(date.getDate() + amount);
                    return date;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/subDays/index.js



                /**
                 * @name subDays
                 * @category Day Helpers
                 * @summary Subtract the specified number of days from the given date.
                 *
                 * @description
                 * Subtract the specified number of days from the given date.
                 *
                 * @param {Date|Number} date - the date to be changed
                 * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
                 * @returns {Date} the new date with the days subtracted
                 * @throws {TypeError} 2 arguments required
                 *
                 * @example
                 * // Subtract 10 days from 1 September 2014:
                 * const result = subDays(new Date(2014, 8, 1), 10)
                 * //=> Fri Aug 22 2014 00:00:00
                 */
                function subDays(dirtyDate, dirtyAmount) {
                    requiredArgs(2, arguments);
                    var amount = toInteger(dirtyAmount);
                    return addDays(dirtyDate, -amount);
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/isDate/index.js


                /**
                 * @name isDate
                 * @category Common Helpers
                 * @summary Is the given value a date?
                 *
                 * @description
                 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
                 *
                 * @param {*} value - the value to check
                 * @returns {boolean} true if the given value is a date
                 * @throws {TypeError} 1 arguments required
                 *
                 * @example
                 * // For a valid date:
                 * const result = isDate(new Date())
                 * //=> true
                 *
                 * @example
                 * // For an invalid date:
                 * const result = isDate(new Date(NaN))
                 * //=> true
                 *
                 * @example
                 * // For some value:
                 * const result = isDate('2014-02-31')
                 * //=> false
                 *
                 * @example
                 * // For an object:
                 * const result = isDate({})
                 * //=> false
                 */
                function isDate(value) {
                    requiredArgs(1, arguments);
                    return value instanceof Date || Object(esm_typeof["a" /* default */ ])(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/isValid/index.js



                /**
                 * @name isValid
                 * @category Common Helpers
                 * @summary Is the given date valid?
                 *
                 * @description
                 * Returns false if argument is Invalid Date and true otherwise.
                 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
                 * Invalid Date is a Date, whose time value is NaN.
                 *
                 * Time value of Date: http://es5.github.io/#x15.9.1.1
                 *
                 * @param {*} date - the date to check
                 * @returns {Boolean} the date is valid
                 * @throws {TypeError} 1 argument required
                 *
                 * @example
                 * // For the valid date:
                 * const result = isValid(new Date(2014, 1, 31))
                 * //=> true
                 *
                 * @example
                 * // For the value, convertable into a date:
                 * const result = isValid(1393804800000)
                 * //=> true
                 *
                 * @example
                 * // For the invalid date:
                 * const result = isValid(new Date(''))
                 * //=> false
                 */
                function isValid(dirtyDate) {
                    requiredArgs(1, arguments);
                    if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
                        return false;
                    }
                    var date = toDate(dirtyDate);
                    return !isNaN(Number(date));
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/addMilliseconds/index.js



                /**
                 * @name addMilliseconds
                 * @category Millisecond Helpers
                 * @summary Add the specified number of milliseconds to the given date.
                 *
                 * @description
                 * Add the specified number of milliseconds to the given date.
                 *
                 * @param {Date|Number} date - the date to be changed
                 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
                 * @returns {Date} the new date with the milliseconds added
                 * @throws {TypeError} 2 arguments required
                 *
                 * @example
                 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
                 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
                 * //=> Thu Jul 10 2014 12:45:30.750
                 */
                function addMilliseconds(dirtyDate, dirtyAmount) {
                    requiredArgs(2, arguments);
                    var timestamp = toDate(dirtyDate).getTime();
                    var amount = toInteger(dirtyAmount);
                    return new Date(timestamp + amount);
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/subMilliseconds/index.js



                /**
                 * @name subMilliseconds
                 * @category Millisecond Helpers
                 * @summary Subtract the specified number of milliseconds from the given date.
                 *
                 * @description
                 * Subtract the specified number of milliseconds from the given date.
                 *
                 * @param {Date|Number} date - the date to be changed
                 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
                 * @returns {Date} the new date with the milliseconds subtracted
                 * @throws {TypeError} 2 arguments required
                 *
                 * @example
                 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
                 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
                 * //=> Thu Jul 10 2014 12:45:29.250
                 */
                function subMilliseconds(dirtyDate, dirtyAmount) {
                    requiredArgs(2, arguments);
                    var amount = toInteger(dirtyAmount);
                    return addMilliseconds(dirtyDate, -amount);
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js


                var MILLISECONDS_IN_DAY = 86400000;

                function getUTCDayOfYear(dirtyDate) {
                    requiredArgs(1, arguments);
                    var date = toDate(dirtyDate);
                    var timestamp = date.getTime();
                    date.setUTCMonth(0, 1);
                    date.setUTCHours(0, 0, 0, 0);
                    var startOfYearTimestamp = date.getTime();
                    var difference = timestamp - startOfYearTimestamp;
                    return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js


                function startOfUTCISOWeek(dirtyDate) {
                    requiredArgs(1, arguments);
                    var weekStartsOn = 1;
                    var date = toDate(dirtyDate);
                    var day = date.getUTCDay();
                    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
                    date.setUTCDate(date.getUTCDate() - diff);
                    date.setUTCHours(0, 0, 0, 0);
                    return date;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js



                function getUTCISOWeekYear(dirtyDate) {
                    requiredArgs(1, arguments);
                    var date = toDate(dirtyDate);
                    var year = date.getUTCFullYear();
                    var fourthOfJanuaryOfNextYear = new Date(0);
                    fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
                    fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
                    var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
                    var fourthOfJanuaryOfThisYear = new Date(0);
                    fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
                    fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
                    var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
                    if (date.getTime() >= startOfNextYear.getTime()) {
                        return year + 1;
                    } else if (date.getTime() >= startOfThisYear.getTime()) {
                        return year;
                    } else {
                        return year - 1;
                    }
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js



                function startOfUTCISOWeekYear(dirtyDate) {
                    requiredArgs(1, arguments);
                    var year = getUTCISOWeekYear(dirtyDate);
                    var fourthOfJanuary = new Date(0);
                    fourthOfJanuary.setUTCFullYear(year, 0, 4);
                    fourthOfJanuary.setUTCHours(0, 0, 0, 0);
                    var date = startOfUTCISOWeek(fourthOfJanuary);
                    return date;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js




                var MILLISECONDS_IN_WEEK = 604800000;

                function getUTCISOWeek(dirtyDate) {
                    requiredArgs(1, arguments);
                    var date = toDate(dirtyDate);
                    var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

                    // Round the number of days to the nearest integer
                    // because the number of milliseconds in a week is not constant
                    // (e.g. it's different in the week of the daylight saving time clock shift)
                    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/defaultOptions/index.js
                var defaultOptions_defaultOptions = {};

                function getDefaultOptions() {
                    return defaultOptions_defaultOptions;
                }

                function setDefaultOptions(newOptions) {
                    defaultOptions_defaultOptions = newOptions;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js




                function startOfUTCWeek(dirtyDate, options) {
                    var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
                    requiredArgs(1, arguments);
                    var defaultOptions = getDefaultOptions();
                    var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

                    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
                    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
                        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
                    }
                    var date = toDate(dirtyDate);
                    var day = date.getUTCDay();
                    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
                    date.setUTCDate(date.getUTCDate() - diff);
                    date.setUTCHours(0, 0, 0, 0);
                    return date;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js





                function getUTCWeekYear(dirtyDate, options) {
                    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
                    requiredArgs(1, arguments);
                    var date = toDate(dirtyDate);
                    var year = date.getUTCFullYear();
                    var defaultOptions = getDefaultOptions();
                    var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

                    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
                    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
                        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
                    }
                    var firstWeekOfNextYear = new Date(0);
                    firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
                    firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
                    var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
                    var firstWeekOfThisYear = new Date(0);
                    firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
                    firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
                    var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
                    if (date.getTime() >= startOfNextYear.getTime()) {
                        return year + 1;
                    } else if (date.getTime() >= startOfThisYear.getTime()) {
                        return year;
                    } else {
                        return year - 1;
                    }
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js





                function startOfUTCWeekYear(dirtyDate, options) {
                    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
                    requiredArgs(1, arguments);
                    var defaultOptions = getDefaultOptions();
                    var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
                    var year = getUTCWeekYear(dirtyDate, options);
                    var firstWeek = new Date(0);
                    firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
                    firstWeek.setUTCHours(0, 0, 0, 0);
                    var date = startOfUTCWeek(firstWeek, options);
                    return date;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/getUTCWeek/index.js




                var getUTCWeek_MILLISECONDS_IN_WEEK = 604800000;

                function getUTCWeek(dirtyDate, options) {
                    requiredArgs(1, arguments);
                    var date = toDate(dirtyDate);
                    var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

                    // Round the number of days to the nearest integer
                    // because the number of milliseconds in a week is not constant
                    // (e.g. it's different in the week of the daylight saving time clock shift)
                    return Math.round(diff / getUTCWeek_MILLISECONDS_IN_WEEK) + 1;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
                function addLeadingZeros(number, targetLength) {
                    var sign = number < 0 ? '-' : '';
                    var output = Math.abs(number).toString();
                    while (output.length < targetLength) {
                        output = '0' + output;
                    }
                    return sign + output;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/format/lightFormatters/index.js

                /*
                 * |     | Unit                           |     | Unit                           |
                 * |-----|--------------------------------|-----|--------------------------------|
                 * |  a  | AM, PM                         |  A* |                                |
                 * |  d  | Day of month                   |  D  |                                |
                 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
                 * |  m  | Minute                         |  M  | Month                          |
                 * |  s  | Second                         |  S  | Fraction of second             |
                 * |  y  | Year (abs)                     |  Y  |                                |
                 *
                 * Letters marked by * are not implemented but reserved by Unicode standard.
                 */
                var formatters = {
                    // Year
                    y: function y(date, token) {
                        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
                        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
                        // |----------|-------|----|-------|-------|-------|
                        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
                        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
                        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
                        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
                        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

                        var signedYear = date.getUTCFullYear();
                        // Returns 1 for 1 BC (which is year 0 in JavaScript)
                        var year = signedYear > 0 ? signedYear : 1 - signedYear;
                        return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
                    },
                    // Month
                    M: function M(date, token) {
                        var month = date.getUTCMonth();
                        return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
                    },
                    // Day of the month
                    d: function d(date, token) {
                        return addLeadingZeros(date.getUTCDate(), token.length);
                    },
                    // AM or PM
                    a: function a(date, token) {
                        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
                        switch (token) {
                            case 'a':
                            case 'aa':
                                return dayPeriodEnumValue.toUpperCase();
                            case 'aaa':
                                return dayPeriodEnumValue;
                            case 'aaaaa':
                                return dayPeriodEnumValue[0];
                            case 'aaaa':
                            default:
                                return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
                        }
                    },
                    // Hour [1-12]
                    h: function h(date, token) {
                        return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
                    },
                    // Hour [0-23]
                    H: function H(date, token) {
                        return addLeadingZeros(date.getUTCHours(), token.length);
                    },
                    // Minute
                    m: function m(date, token) {
                        return addLeadingZeros(date.getUTCMinutes(), token.length);
                    },
                    // Second
                    s: function s(date, token) {
                        return addLeadingZeros(date.getUTCSeconds(), token.length);
                    },
                    // Fraction of second
                    S: function S(date, token) {
                        var numberOfDigits = token.length;
                        var milliseconds = date.getUTCMilliseconds();
                        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
                        return addLeadingZeros(fractionalSeconds, token.length);
                    }
                };
                /* harmony default export */
                var lightFormatters = (formatters);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/format/formatters/index.js







                var dayPeriodEnum = {
                    am: 'am',
                    pm: 'pm',
                    midnight: 'midnight',
                    noon: 'noon',
                    morning: 'morning',
                    afternoon: 'afternoon',
                    evening: 'evening',
                    night: 'night'
                };
                /*
                 * |     | Unit                           |     | Unit                           |
                 * |-----|--------------------------------|-----|--------------------------------|
                 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
                 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
                 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
                 * |  d  | Day of month                   |  D  | Day of year                    |
                 * |  e  | Local day of week              |  E  | Day of week                    |
                 * |  f  |                                |  F* | Day of week in month           |
                 * |  g* | Modified Julian day            |  G  | Era                            |
                 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
                 * |  i! | ISO day of week                |  I! | ISO week of year               |
                 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
                 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
                 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
                 * |  m  | Minute                         |  M  | Month                          |
                 * |  n  |                                |  N  |                                |
                 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
                 * |  p! | Long localized time            |  P! | Long localized date            |
                 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
                 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
                 * |  s  | Second                         |  S  | Fraction of second             |
                 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
                 * |  u  | Extended year                  |  U* | Cyclic year                    |
                 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
                 * |  w  | Local week of year             |  W* | Week of month                  |
                 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
                 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
                 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
                 *
                 * Letters marked by * are not implemented but reserved by Unicode standard.
                 *
                 * Letters marked by ! are non-standard, but implemented by date-fns:
                 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
                 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
                 *   i.e. 7 for Sunday, 1 for Monday, etc.
                 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
                 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
                 *   `R` is supposed to be used in conjunction with `I` and `i`
                 *   for universal ISO week-numbering date, whereas
                 *   `Y` is supposed to be used in conjunction with `w` and `e`
                 *   for week-numbering date specific to the locale.
                 * - `P` is long localized date format
                 * - `p` is long localized time format
                 */

                var formatters_formatters = {
                    // Era
                    G: function G(date, token, localize) {
                        var era = date.getUTCFullYear() > 0 ? 1 : 0;
                        switch (token) {
                            // AD, BC
                            case 'G':
                            case 'GG':
                            case 'GGG':
                                return localize.era(era, {
                                    width: 'abbreviated'
                                });
                                // A, B
                            case 'GGGGG':
                                return localize.era(era, {
                                    width: 'narrow'
                                });
                                // Anno Domini, Before Christ
                            case 'GGGG':
                            default:
                                return localize.era(era, {
                                    width: 'wide'
                                });
                        }
                    },
                    // Year
                    y: function y(date, token, localize) {
                        // Ordinal number
                        if (token === 'yo') {
                            var signedYear = date.getUTCFullYear();
                            // Returns 1 for 1 BC (which is year 0 in JavaScript)
                            var year = signedYear > 0 ? signedYear : 1 - signedYear;
                            return localize.ordinalNumber(year, {
                                unit: 'year'
                            });
                        }
                        return lightFormatters.y(date, token);
                    },
                    // Local week-numbering year
                    Y: function Y(date, token, localize, options) {
                        var signedWeekYear = getUTCWeekYear(date, options);
                        // Returns 1 for 1 BC (which is year 0 in JavaScript)
                        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

                        // Two digit year
                        if (token === 'YY') {
                            var twoDigitYear = weekYear % 100;
                            return addLeadingZeros(twoDigitYear, 2);
                        }

                        // Ordinal number
                        if (token === 'Yo') {
                            return localize.ordinalNumber(weekYear, {
                                unit: 'year'
                            });
                        }

                        // Padding
                        return addLeadingZeros(weekYear, token.length);
                    },
                    // ISO week-numbering year
                    R: function R(date, token) {
                        var isoWeekYear = getUTCISOWeekYear(date);

                        // Padding
                        return addLeadingZeros(isoWeekYear, token.length);
                    },
                    // Extended year. This is a single number designating the year of this calendar system.
                    // The main difference between `y` and `u` localizers are B.C. years:
                    // | Year | `y` | `u` |
                    // |------|-----|-----|
                    // | AC 1 |   1 |   1 |
                    // | BC 1 |   1 |   0 |
                    // | BC 2 |   2 |  -1 |
                    // Also `yy` always returns the last two digits of a year,
                    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
                    u: function u(date, token) {
                        var year = date.getUTCFullYear();
                        return addLeadingZeros(year, token.length);
                    },
                    // Quarter
                    Q: function Q(date, token, localize) {
                        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
                        switch (token) {
                            // 1, 2, 3, 4
                            case 'Q':
                                return String(quarter);
                                // 01, 02, 03, 04
                            case 'QQ':
                                return addLeadingZeros(quarter, 2);
                                // 1st, 2nd, 3rd, 4th
                            case 'Qo':
                                return localize.ordinalNumber(quarter, {
                                    unit: 'quarter'
                                });
                                // Q1, Q2, Q3, Q4
                            case 'QQQ':
                                return localize.quarter(quarter, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                });
                                // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                            case 'QQQQQ':
                                return localize.quarter(quarter, {
                                    width: 'narrow',
                                    context: 'formatting'
                                });
                                // 1st quarter, 2nd quarter, ...
                            case 'QQQQ':
                            default:
                                return localize.quarter(quarter, {
                                    width: 'wide',
                                    context: 'formatting'
                                });
                        }
                    },
                    // Stand-alone quarter
                    q: function q(date, token, localize) {
                        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
                        switch (token) {
                            // 1, 2, 3, 4
                            case 'q':
                                return String(quarter);
                                // 01, 02, 03, 04
                            case 'qq':
                                return addLeadingZeros(quarter, 2);
                                // 1st, 2nd, 3rd, 4th
                            case 'qo':
                                return localize.ordinalNumber(quarter, {
                                    unit: 'quarter'
                                });
                                // Q1, Q2, Q3, Q4
                            case 'qqq':
                                return localize.quarter(quarter, {
                                    width: 'abbreviated',
                                    context: 'standalone'
                                });
                                // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                            case 'qqqqq':
                                return localize.quarter(quarter, {
                                    width: 'narrow',
                                    context: 'standalone'
                                });
                                // 1st quarter, 2nd quarter, ...
                            case 'qqqq':
                            default:
                                return localize.quarter(quarter, {
                                    width: 'wide',
                                    context: 'standalone'
                                });
                        }
                    },
                    // Month
                    M: function M(date, token, localize) {
                        var month = date.getUTCMonth();
                        switch (token) {
                            case 'M':
                            case 'MM':
                                return lightFormatters.M(date, token);
                                // 1st, 2nd, ..., 12th
                            case 'Mo':
                                return localize.ordinalNumber(month + 1, {
                                    unit: 'month'
                                });
                                // Jan, Feb, ..., Dec
                            case 'MMM':
                                return localize.month(month, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                });
                                // J, F, ..., D
                            case 'MMMMM':
                                return localize.month(month, {
                                    width: 'narrow',
                                    context: 'formatting'
                                });
                                // January, February, ..., December
                            case 'MMMM':
                            default:
                                return localize.month(month, {
                                    width: 'wide',
                                    context: 'formatting'
                                });
                        }
                    },
                    // Stand-alone month
                    L: function L(date, token, localize) {
                        var month = date.getUTCMonth();
                        switch (token) {
                            // 1, 2, ..., 12
                            case 'L':
                                return String(month + 1);
                                // 01, 02, ..., 12
                            case 'LL':
                                return addLeadingZeros(month + 1, 2);
                                // 1st, 2nd, ..., 12th
                            case 'Lo':
                                return localize.ordinalNumber(month + 1, {
                                    unit: 'month'
                                });
                                // Jan, Feb, ..., Dec
                            case 'LLL':
                                return localize.month(month, {
                                    width: 'abbreviated',
                                    context: 'standalone'
                                });
                                // J, F, ..., D
                            case 'LLLLL':
                                return localize.month(month, {
                                    width: 'narrow',
                                    context: 'standalone'
                                });
                                // January, February, ..., December
                            case 'LLLL':
                            default:
                                return localize.month(month, {
                                    width: 'wide',
                                    context: 'standalone'
                                });
                        }
                    },
                    // Local week of year
                    w: function w(date, token, localize, options) {
                        var week = getUTCWeek(date, options);
                        if (token === 'wo') {
                            return localize.ordinalNumber(week, {
                                unit: 'week'
                            });
                        }
                        return addLeadingZeros(week, token.length);
                    },
                    // ISO week of year
                    I: function I(date, token, localize) {
                        var isoWeek = getUTCISOWeek(date);
                        if (token === 'Io') {
                            return localize.ordinalNumber(isoWeek, {
                                unit: 'week'
                            });
                        }
                        return addLeadingZeros(isoWeek, token.length);
                    },
                    // Day of the month
                    d: function d(date, token, localize) {
                        if (token === 'do') {
                            return localize.ordinalNumber(date.getUTCDate(), {
                                unit: 'date'
                            });
                        }
                        return lightFormatters.d(date, token);
                    },
                    // Day of year
                    D: function D(date, token, localize) {
                        var dayOfYear = getUTCDayOfYear(date);
                        if (token === 'Do') {
                            return localize.ordinalNumber(dayOfYear, {
                                unit: 'dayOfYear'
                            });
                        }
                        return addLeadingZeros(dayOfYear, token.length);
                    },
                    // Day of week
                    E: function E(date, token, localize) {
                        var dayOfWeek = date.getUTCDay();
                        switch (token) {
                            // Tue
                            case 'E':
                            case 'EE':
                            case 'EEE':
                                return localize.day(dayOfWeek, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                });
                                // T
                            case 'EEEEE':
                                return localize.day(dayOfWeek, {
                                    width: 'narrow',
                                    context: 'formatting'
                                });
                                // Tu
                            case 'EEEEEE':
                                return localize.day(dayOfWeek, {
                                    width: 'short',
                                    context: 'formatting'
                                });
                                // Tuesday
                            case 'EEEE':
                            default:
                                return localize.day(dayOfWeek, {
                                    width: 'wide',
                                    context: 'formatting'
                                });
                        }
                    },
                    // Local day of week
                    e: function e(date, token, localize, options) {
                        var dayOfWeek = date.getUTCDay();
                        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
                        switch (token) {
                            // Numerical value (Nth day of week with current locale or weekStartsOn)
                            case 'e':
                                return String(localDayOfWeek);
                                // Padded numerical value
                            case 'ee':
                                return addLeadingZeros(localDayOfWeek, 2);
                                // 1st, 2nd, ..., 7th
                            case 'eo':
                                return localize.ordinalNumber(localDayOfWeek, {
                                    unit: 'day'
                                });
                            case 'eee':
                                return localize.day(dayOfWeek, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                });
                                // T
                            case 'eeeee':
                                return localize.day(dayOfWeek, {
                                    width: 'narrow',
                                    context: 'formatting'
                                });
                                // Tu
                            case 'eeeeee':
                                return localize.day(dayOfWeek, {
                                    width: 'short',
                                    context: 'formatting'
                                });
                                // Tuesday
                            case 'eeee':
                            default:
                                return localize.day(dayOfWeek, {
                                    width: 'wide',
                                    context: 'formatting'
                                });
                        }
                    },
                    // Stand-alone local day of week
                    c: function c(date, token, localize, options) {
                        var dayOfWeek = date.getUTCDay();
                        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
                        switch (token) {
                            // Numerical value (same as in `e`)
                            case 'c':
                                return String(localDayOfWeek);
                                // Padded numerical value
                            case 'cc':
                                return addLeadingZeros(localDayOfWeek, token.length);
                                // 1st, 2nd, ..., 7th
                            case 'co':
                                return localize.ordinalNumber(localDayOfWeek, {
                                    unit: 'day'
                                });
                            case 'ccc':
                                return localize.day(dayOfWeek, {
                                    width: 'abbreviated',
                                    context: 'standalone'
                                });
                                // T
                            case 'ccccc':
                                return localize.day(dayOfWeek, {
                                    width: 'narrow',
                                    context: 'standalone'
                                });
                                // Tu
                            case 'cccccc':
                                return localize.day(dayOfWeek, {
                                    width: 'short',
                                    context: 'standalone'
                                });
                                // Tuesday
                            case 'cccc':
                            default:
                                return localize.day(dayOfWeek, {
                                    width: 'wide',
                                    context: 'standalone'
                                });
                        }
                    },
                    // ISO day of week
                    i: function i(date, token, localize) {
                        var dayOfWeek = date.getUTCDay();
                        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
                        switch (token) {
                            // 2
                            case 'i':
                                return String(isoDayOfWeek);
                                // 02
                            case 'ii':
                                return addLeadingZeros(isoDayOfWeek, token.length);
                                // 2nd
                            case 'io':
                                return localize.ordinalNumber(isoDayOfWeek, {
                                    unit: 'day'
                                });
                                // Tue
                            case 'iii':
                                return localize.day(dayOfWeek, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                });
                                // T
                            case 'iiiii':
                                return localize.day(dayOfWeek, {
                                    width: 'narrow',
                                    context: 'formatting'
                                });
                                // Tu
                            case 'iiiiii':
                                return localize.day(dayOfWeek, {
                                    width: 'short',
                                    context: 'formatting'
                                });
                                // Tuesday
                            case 'iiii':
                            default:
                                return localize.day(dayOfWeek, {
                                    width: 'wide',
                                    context: 'formatting'
                                });
                        }
                    },
                    // AM or PM
                    a: function a(date, token, localize) {
                        var hours = date.getUTCHours();
                        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
                        switch (token) {
                            case 'a':
                            case 'aa':
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                });
                            case 'aaa':
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                }).toLowerCase();
                            case 'aaaaa':
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'narrow',
                                    context: 'formatting'
                                });
                            case 'aaaa':
                            default:
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'wide',
                                    context: 'formatting'
                                });
                        }
                    },
                    // AM, PM, midnight, noon
                    b: function b(date, token, localize) {
                        var hours = date.getUTCHours();
                        var dayPeriodEnumValue;
                        if (hours === 12) {
                            dayPeriodEnumValue = dayPeriodEnum.noon;
                        } else if (hours === 0) {
                            dayPeriodEnumValue = dayPeriodEnum.midnight;
                        } else {
                            dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
                        }
                        switch (token) {
                            case 'b':
                            case 'bb':
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                });
                            case 'bbb':
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                }).toLowerCase();
                            case 'bbbbb':
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'narrow',
                                    context: 'formatting'
                                });
                            case 'bbbb':
                            default:
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'wide',
                                    context: 'formatting'
                                });
                        }
                    },
                    // in the morning, in the afternoon, in the evening, at night
                    B: function B(date, token, localize) {
                        var hours = date.getUTCHours();
                        var dayPeriodEnumValue;
                        if (hours >= 17) {
                            dayPeriodEnumValue = dayPeriodEnum.evening;
                        } else if (hours >= 12) {
                            dayPeriodEnumValue = dayPeriodEnum.afternoon;
                        } else if (hours >= 4) {
                            dayPeriodEnumValue = dayPeriodEnum.morning;
                        } else {
                            dayPeriodEnumValue = dayPeriodEnum.night;
                        }
                        switch (token) {
                            case 'B':
                            case 'BB':
                            case 'BBB':
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'abbreviated',
                                    context: 'formatting'
                                });
                            case 'BBBBB':
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'narrow',
                                    context: 'formatting'
                                });
                            case 'BBBB':
                            default:
                                return localize.dayPeriod(dayPeriodEnumValue, {
                                    width: 'wide',
                                    context: 'formatting'
                                });
                        }
                    },
                    // Hour [1-12]
                    h: function h(date, token, localize) {
                        if (token === 'ho') {
                            var hours = date.getUTCHours() % 12;
                            if (hours === 0) hours = 12;
                            return localize.ordinalNumber(hours, {
                                unit: 'hour'
                            });
                        }
                        return lightFormatters.h(date, token);
                    },
                    // Hour [0-23]
                    H: function H(date, token, localize) {
                        if (token === 'Ho') {
                            return localize.ordinalNumber(date.getUTCHours(), {
                                unit: 'hour'
                            });
                        }
                        return lightFormatters.H(date, token);
                    },
                    // Hour [0-11]
                    K: function K(date, token, localize) {
                        var hours = date.getUTCHours() % 12;
                        if (token === 'Ko') {
                            return localize.ordinalNumber(hours, {
                                unit: 'hour'
                            });
                        }
                        return addLeadingZeros(hours, token.length);
                    },
                    // Hour [1-24]
                    k: function k(date, token, localize) {
                        var hours = date.getUTCHours();
                        if (hours === 0) hours = 24;
                        if (token === 'ko') {
                            return localize.ordinalNumber(hours, {
                                unit: 'hour'
                            });
                        }
                        return addLeadingZeros(hours, token.length);
                    },
                    // Minute
                    m: function m(date, token, localize) {
                        if (token === 'mo') {
                            return localize.ordinalNumber(date.getUTCMinutes(), {
                                unit: 'minute'
                            });
                        }
                        return lightFormatters.m(date, token);
                    },
                    // Second
                    s: function s(date, token, localize) {
                        if (token === 'so') {
                            return localize.ordinalNumber(date.getUTCSeconds(), {
                                unit: 'second'
                            });
                        }
                        return lightFormatters.s(date, token);
                    },
                    // Fraction of second
                    S: function S(date, token) {
                        return lightFormatters.S(date, token);
                    },
                    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
                    X: function X(date, token, _localize, options) {
                        var originalDate = options._originalDate || date;
                        var timezoneOffset = originalDate.getTimezoneOffset();
                        if (timezoneOffset === 0) {
                            return 'Z';
                        }
                        switch (token) {
                            // Hours and optional minutes
                            case 'X':
                                return formatTimezoneWithOptionalMinutes(timezoneOffset);

                                // Hours, minutes and optional seconds without `:` delimiter
                                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                                // so this token always has the same output as `XX`
                            case 'XXXX':
                            case 'XX':
                                // Hours and minutes without `:` delimiter
                                return formatTimezone(timezoneOffset);

                                // Hours, minutes and optional seconds with `:` delimiter
                                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                                // so this token always has the same output as `XXX`
                            case 'XXXXX':
                            case 'XXX': // Hours and minutes with `:` delimiter
                            default:
                                return formatTimezone(timezoneOffset, ':');
                        }
                    },
                    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
                    x: function x(date, token, _localize, options) {
                        var originalDate = options._originalDate || date;
                        var timezoneOffset = originalDate.getTimezoneOffset();
                        switch (token) {
                            // Hours and optional minutes
                            case 'x':
                                return formatTimezoneWithOptionalMinutes(timezoneOffset);

                                // Hours, minutes and optional seconds without `:` delimiter
                                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                                // so this token always has the same output as `xx`
                            case 'xxxx':
                            case 'xx':
                                // Hours and minutes without `:` delimiter
                                return formatTimezone(timezoneOffset);

                                // Hours, minutes and optional seconds with `:` delimiter
                                // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
                                // so this token always has the same output as `xxx`
                            case 'xxxxx':
                            case 'xxx': // Hours and minutes with `:` delimiter
                            default:
                                return formatTimezone(timezoneOffset, ':');
                        }
                    },
                    // Timezone (GMT)
                    O: function O(date, token, _localize, options) {
                        var originalDate = options._originalDate || date;
                        var timezoneOffset = originalDate.getTimezoneOffset();
                        switch (token) {
                            // Short
                            case 'O':
                            case 'OO':
                            case 'OOO':
                                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
                                // Long
                            case 'OOOO':
                            default:
                                return 'GMT' + formatTimezone(timezoneOffset, ':');
                        }
                    },
                    // Timezone (specific non-location)
                    z: function z(date, token, _localize, options) {
                        var originalDate = options._originalDate || date;
                        var timezoneOffset = originalDate.getTimezoneOffset();
                        switch (token) {
                            // Short
                            case 'z':
                            case 'zz':
                            case 'zzz':
                                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
                                // Long
                            case 'zzzz':
                            default:
                                return 'GMT' + formatTimezone(timezoneOffset, ':');
                        }
                    },
                    // Seconds timestamp
                    t: function t(date, token, _localize, options) {
                        var originalDate = options._originalDate || date;
                        var timestamp = Math.floor(originalDate.getTime() / 1000);
                        return addLeadingZeros(timestamp, token.length);
                    },
                    // Milliseconds timestamp
                    T: function T(date, token, _localize, options) {
                        var originalDate = options._originalDate || date;
                        var timestamp = originalDate.getTime();
                        return addLeadingZeros(timestamp, token.length);
                    }
                };

                function formatTimezoneShort(offset, dirtyDelimiter) {
                    var sign = offset > 0 ? '-' : '+';
                    var absOffset = Math.abs(offset);
                    var hours = Math.floor(absOffset / 60);
                    var minutes = absOffset % 60;
                    if (minutes === 0) {
                        return sign + String(hours);
                    }
                    var delimiter = dirtyDelimiter || '';
                    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
                }

                function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
                    if (offset % 60 === 0) {
                        var sign = offset > 0 ? '-' : '+';
                        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
                    }
                    return formatTimezone(offset, dirtyDelimiter);
                }

                function formatTimezone(offset, dirtyDelimiter) {
                    var delimiter = dirtyDelimiter || '';
                    var sign = offset > 0 ? '-' : '+';
                    var absOffset = Math.abs(offset);
                    var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
                    var minutes = addLeadingZeros(absOffset % 60, 2);
                    return sign + hours + delimiter + minutes;
                }
                /* harmony default export */
                var format_formatters = (formatters_formatters);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/format/longFormatters/index.js
                var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
                    switch (pattern) {
                        case 'P':
                            return formatLong.date({
                                width: 'short'
                            });
                        case 'PP':
                            return formatLong.date({
                                width: 'medium'
                            });
                        case 'PPP':
                            return formatLong.date({
                                width: 'long'
                            });
                        case 'PPPP':
                        default:
                            return formatLong.date({
                                width: 'full'
                            });
                    }
                };
                var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
                    switch (pattern) {
                        case 'p':
                            return formatLong.time({
                                width: 'short'
                            });
                        case 'pp':
                            return formatLong.time({
                                width: 'medium'
                            });
                        case 'ppp':
                            return formatLong.time({
                                width: 'long'
                            });
                        case 'pppp':
                        default:
                            return formatLong.time({
                                width: 'full'
                            });
                    }
                };
                var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
                    var matchResult = pattern.match(/(P+)(p+)?/) || [];
                    var datePattern = matchResult[1];
                    var timePattern = matchResult[2];
                    if (!timePattern) {
                        return dateLongFormatter(pattern, formatLong);
                    }
                    var dateTimeFormat;
                    switch (datePattern) {
                        case 'P':
                            dateTimeFormat = formatLong.dateTime({
                                width: 'short'
                            });
                            break;
                        case 'PP':
                            dateTimeFormat = formatLong.dateTime({
                                width: 'medium'
                            });
                            break;
                        case 'PPP':
                            dateTimeFormat = formatLong.dateTime({
                                width: 'long'
                            });
                            break;
                        case 'PPPP':
                        default:
                            dateTimeFormat = formatLong.dateTime({
                                width: 'full'
                            });
                            break;
                    }
                    return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
                };
                var longFormatters = {
                    p: timeLongFormatter,
                    P: dateTimeLongFormatter
                };
                /* harmony default export */
                var format_longFormatters = (longFormatters);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
                /**
                 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
                 * They usually appear for dates that denote time before the timezones were introduced
                 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
                 * and GMT+01:00:00 after that date)
                 *
                 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
                 * which would lead to incorrect calculations.
                 *
                 * This function returns the timezone offset in milliseconds that takes seconds in account.
                 */
                function getTimezoneOffsetInMilliseconds(date) {
                    var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
                    utcDate.setUTCFullYear(date.getFullYear());
                    return date.getTime() - utcDate.getTime();
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/protectedTokens/index.js
                var protectedDayOfYearTokens = ['D', 'DD'];
                var protectedWeekYearTokens = ['YY', 'YYYY'];

                function isProtectedDayOfYearToken(token) {
                    return protectedDayOfYearTokens.indexOf(token) !== -1;
                }

                function isProtectedWeekYearToken(token) {
                    return protectedWeekYearTokens.indexOf(token) !== -1;
                }

                function throwProtectedError(token, format, input) {
                    if (token === 'YYYY') {
                        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
                    } else if (token === 'YY') {
                        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
                    } else if (token === 'D') {
                        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
                    } else if (token === 'DD') {
                        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
                    }
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
                var formatDistanceLocale = {
                    lessThanXSeconds: {
                        one: 'less than a second',
                        other: 'less than {{count}} seconds'
                    },
                    xSeconds: {
                        one: '1 second',
                        other: '{{count}} seconds'
                    },
                    halfAMinute: 'half a minute',
                    lessThanXMinutes: {
                        one: 'less than a minute',
                        other: 'less than {{count}} minutes'
                    },
                    xMinutes: {
                        one: '1 minute',
                        other: '{{count}} minutes'
                    },
                    aboutXHours: {
                        one: 'about 1 hour',
                        other: 'about {{count}} hours'
                    },
                    xHours: {
                        one: '1 hour',
                        other: '{{count}} hours'
                    },
                    xDays: {
                        one: '1 day',
                        other: '{{count}} days'
                    },
                    aboutXWeeks: {
                        one: 'about 1 week',
                        other: 'about {{count}} weeks'
                    },
                    xWeeks: {
                        one: '1 week',
                        other: '{{count}} weeks'
                    },
                    aboutXMonths: {
                        one: 'about 1 month',
                        other: 'about {{count}} months'
                    },
                    xMonths: {
                        one: '1 month',
                        other: '{{count}} months'
                    },
                    aboutXYears: {
                        one: 'about 1 year',
                        other: 'about {{count}} years'
                    },
                    xYears: {
                        one: '1 year',
                        other: '{{count}} years'
                    },
                    overXYears: {
                        one: 'over 1 year',
                        other: 'over {{count}} years'
                    },
                    almostXYears: {
                        one: 'almost 1 year',
                        other: 'almost {{count}} years'
                    }
                };
                var formatDistance = function formatDistance(token, count, options) {
                    var result;
                    var tokenValue = formatDistanceLocale[token];
                    if (typeof tokenValue === 'string') {
                        result = tokenValue;
                    } else if (count === 1) {
                        result = tokenValue.one;
                    } else {
                        result = tokenValue.other.replace('{{count}}', count.toString());
                    }
                    if (options !== null && options !== void 0 && options.addSuffix) {
                        if (options.comparison && options.comparison > 0) {
                            return 'in ' + result;
                        } else {
                            return result + ' ago';
                        }
                    }
                    return result;
                };
                /* harmony default export */
                var _lib_formatDistance = (formatDistance);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
                function buildFormatLongFn(args) {
                    return function() {
                        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        // TODO: Remove String()
                        var width = options.width ? String(options.width) : args.defaultWidth;
                        var format = args.formats[width] || args.formats[args.defaultWidth];
                        return format;
                    };
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js

                var dateFormats = {
                    full: 'EEEE, MMMM do, y',
                    long: 'MMMM do, y',
                    medium: 'MMM d, y',
                    short: 'MM/dd/yyyy'
                };
                var timeFormats = {
                    full: 'h:mm:ss a zzzz',
                    long: 'h:mm:ss a z',
                    medium: 'h:mm:ss a',
                    short: 'h:mm a'
                };
                var dateTimeFormats = {
                    full: "{{date}} 'at' {{time}}",
                    long: "{{date}} 'at' {{time}}",
                    medium: '{{date}}, {{time}}',
                    short: '{{date}}, {{time}}'
                };
                var formatLong = {
                    date: buildFormatLongFn({
                        formats: dateFormats,
                        defaultWidth: 'full'
                    }),
                    time: buildFormatLongFn({
                        formats: timeFormats,
                        defaultWidth: 'full'
                    }),
                    dateTime: buildFormatLongFn({
                        formats: dateTimeFormats,
                        defaultWidth: 'full'
                    })
                };
                /* harmony default export */
                var _lib_formatLong = (formatLong);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
                var formatRelativeLocale = {
                    lastWeek: "'last' eeee 'at' p",
                    yesterday: "'yesterday at' p",
                    today: "'today at' p",
                    tomorrow: "'tomorrow at' p",
                    nextWeek: "eeee 'at' p",
                    other: 'P'
                };
                var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
                    return formatRelativeLocale[token];
                };
                /* harmony default export */
                var _lib_formatRelative = (formatRelative);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
                function buildLocalizeFn(args) {
                    return function(dirtyIndex, options) {
                        var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
                        var valuesArray;
                        if (context === 'formatting' && args.formattingValues) {
                            var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
                            var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
                            valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
                        } else {
                            var _defaultWidth = args.defaultWidth;
                            var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
                            valuesArray = args.values[_width] || args.values[_defaultWidth];
                        }
                        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
                        // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
                        return valuesArray[index];
                    };
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js

                var eraValues = {
                    narrow: ['B', 'A'],
                    abbreviated: ['BC', 'AD'],
                    wide: ['Before Christ', 'Anno Domini']
                };
                var quarterValues = {
                    narrow: ['1', '2', '3', '4'],
                    abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
                    wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
                };

                // Note: in English, the names of days of the week and months are capitalized.
                // If you are making a new locale based on this one, check if the same is true for the language you're working on.
                // Generally, formatted dates should look like they are in the middle of a sentence,
                // e.g. in Spanish language the weekdays and months should be in the lowercase.
                var monthValues = {
                    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
                    abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                    wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
                };
                var dayValues = {
                    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
                    short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                    abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                    wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
                };
                var dayPeriodValues = {
                    narrow: {
                        am: 'a',
                        pm: 'p',
                        midnight: 'mi',
                        noon: 'n',
                        morning: 'morning',
                        afternoon: 'afternoon',
                        evening: 'evening',
                        night: 'night'
                    },
                    abbreviated: {
                        am: 'AM',
                        pm: 'PM',
                        midnight: 'midnight',
                        noon: 'noon',
                        morning: 'morning',
                        afternoon: 'afternoon',
                        evening: 'evening',
                        night: 'night'
                    },
                    wide: {
                        am: 'a.m.',
                        pm: 'p.m.',
                        midnight: 'midnight',
                        noon: 'noon',
                        morning: 'morning',
                        afternoon: 'afternoon',
                        evening: 'evening',
                        night: 'night'
                    }
                };
                var formattingDayPeriodValues = {
                    narrow: {
                        am: 'a',
                        pm: 'p',
                        midnight: 'mi',
                        noon: 'n',
                        morning: 'in the morning',
                        afternoon: 'in the afternoon',
                        evening: 'in the evening',
                        night: 'at night'
                    },
                    abbreviated: {
                        am: 'AM',
                        pm: 'PM',
                        midnight: 'midnight',
                        noon: 'noon',
                        morning: 'in the morning',
                        afternoon: 'in the afternoon',
                        evening: 'in the evening',
                        night: 'at night'
                    },
                    wide: {
                        am: 'a.m.',
                        pm: 'p.m.',
                        midnight: 'midnight',
                        noon: 'noon',
                        morning: 'in the morning',
                        afternoon: 'in the afternoon',
                        evening: 'in the evening',
                        night: 'at night'
                    }
                };
                var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
                    var number = Number(dirtyNumber);

                    // If ordinal numbers depend on context, for example,
                    // if they are different for different grammatical genders,
                    // use `options.unit`.
                    //
                    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
                    // 'day', 'hour', 'minute', 'second'.

                    var rem100 = number % 100;
                    if (rem100 > 20 || rem100 < 10) {
                        switch (rem100 % 10) {
                            case 1:
                                return number + 'st';
                            case 2:
                                return number + 'nd';
                            case 3:
                                return number + 'rd';
                        }
                    }
                    return number + 'th';
                };
                var localize_localize = {
                    ordinalNumber: ordinalNumber,
                    era: buildLocalizeFn({
                        values: eraValues,
                        defaultWidth: 'wide'
                    }),
                    quarter: buildLocalizeFn({
                        values: quarterValues,
                        defaultWidth: 'wide',
                        argumentCallback: function argumentCallback(quarter) {
                            return quarter - 1;
                        }
                    }),
                    month: buildLocalizeFn({
                        values: monthValues,
                        defaultWidth: 'wide'
                    }),
                    day: buildLocalizeFn({
                        values: dayValues,
                        defaultWidth: 'wide'
                    }),
                    dayPeriod: buildLocalizeFn({
                        values: dayPeriodValues,
                        defaultWidth: 'wide',
                        formattingValues: formattingDayPeriodValues,
                        defaultFormattingWidth: 'wide'
                    })
                };
                /* harmony default export */
                var _lib_localize = (localize_localize);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
                function buildMatchFn(args) {
                    return function(string) {
                        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                        var width = options.width;
                        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
                        var matchResult = string.match(matchPattern);
                        if (!matchResult) {
                            return null;
                        }
                        var matchedString = matchResult[0];
                        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
                        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
                            return pattern.test(matchedString);
                        }) : findKey(parsePatterns, function(pattern) {
                            return pattern.test(matchedString);
                        });
                        var value;
                        value = args.valueCallback ? args.valueCallback(key) : key;
                        value = options.valueCallback ? options.valueCallback(value) : value;
                        var rest = string.slice(matchedString.length);
                        return {
                            value: value,
                            rest: rest
                        };
                    };
                }

                function findKey(object, predicate) {
                    for (var key in object) {
                        if (object.hasOwnProperty(key) && predicate(object[key])) {
                            return key;
                        }
                    }
                    return undefined;
                }

                function findIndex(array, predicate) {
                    for (var key = 0; key < array.length; key++) {
                        if (predicate(array[key])) {
                            return key;
                        }
                    }
                    return undefined;
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
                function buildMatchPatternFn(args) {
                    return function(string) {
                        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                        var matchResult = string.match(args.matchPattern);
                        if (!matchResult) return null;
                        var matchedString = matchResult[0];
                        var parseResult = string.match(args.parsePattern);
                        if (!parseResult) return null;
                        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
                        value = options.valueCallback ? options.valueCallback(value) : value;
                        var rest = string.slice(matchedString.length);
                        return {
                            value: value,
                            rest: rest
                        };
                    };
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/en-US/_lib/match/index.js


                var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
                var parseOrdinalNumberPattern = /\d+/i;
                var matchEraPatterns = {
                    narrow: /^(b|a)/i,
                    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
                    wide: /^(before christ|before common era|anno domini|common era)/i
                };
                var parseEraPatterns = {
                    any: [/^b/i, /^(a|c)/i]
                };
                var matchQuarterPatterns = {
                    narrow: /^[1234]/i,
                    abbreviated: /^q[1234]/i,
                    wide: /^[1234](th|st|nd|rd)? quarter/i
                };
                var parseQuarterPatterns = {
                    any: [/1/i, /2/i, /3/i, /4/i]
                };
                var matchMonthPatterns = {
                    narrow: /^[jfmasond]/i,
                    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
                    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
                };
                var parseMonthPatterns = {
                    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
                    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
                };
                var matchDayPatterns = {
                    narrow: /^[smtwf]/i,
                    short: /^(su|mo|tu|we|th|fr|sa)/i,
                    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
                    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
                };
                var parseDayPatterns = {
                    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
                    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
                };
                var matchDayPeriodPatterns = {
                    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
                    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
                };
                var parseDayPeriodPatterns = {
                    any: {
                        am: /^a/i,
                        pm: /^p/i,
                        midnight: /^mi/i,
                        noon: /^no/i,
                        morning: /morning/i,
                        afternoon: /afternoon/i,
                        evening: /evening/i,
                        night: /night/i
                    }
                };
                var match = {
                    ordinalNumber: buildMatchPatternFn({
                        matchPattern: matchOrdinalNumberPattern,
                        parsePattern: parseOrdinalNumberPattern,
                        valueCallback: function valueCallback(value) {
                            return parseInt(value, 10);
                        }
                    }),
                    era: buildMatchFn({
                        matchPatterns: matchEraPatterns,
                        defaultMatchWidth: 'wide',
                        parsePatterns: parseEraPatterns,
                        defaultParseWidth: 'any'
                    }),
                    quarter: buildMatchFn({
                        matchPatterns: matchQuarterPatterns,
                        defaultMatchWidth: 'wide',
                        parsePatterns: parseQuarterPatterns,
                        defaultParseWidth: 'any',
                        valueCallback: function valueCallback(index) {
                            return index + 1;
                        }
                    }),
                    month: buildMatchFn({
                        matchPatterns: matchMonthPatterns,
                        defaultMatchWidth: 'wide',
                        parsePatterns: parseMonthPatterns,
                        defaultParseWidth: 'any'
                    }),
                    day: buildMatchFn({
                        matchPatterns: matchDayPatterns,
                        defaultMatchWidth: 'wide',
                        parsePatterns: parseDayPatterns,
                        defaultParseWidth: 'any'
                    }),
                    dayPeriod: buildMatchFn({
                        matchPatterns: matchDayPeriodPatterns,
                        defaultMatchWidth: 'any',
                        parsePatterns: parseDayPeriodPatterns,
                        defaultParseWidth: 'any'
                    })
                };
                /* harmony default export */
                var _lib_match = (match);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/en-US/index.js





                /**
                 * @type {Locale}
                 * @category Locales
                 * @summary English locale (United States).
                 * @language English
                 * @iso-639-2 eng
                 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
                 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
                 */
                var en_US_locale = {
                    code: 'en-US',
                    formatDistance: _lib_formatDistance,
                    formatLong: _lib_formatLong,
                    formatRelative: _lib_formatRelative,
                    localize: _lib_localize,
                    match: _lib_match,
                    options: {
                        weekStartsOn: 0 /* Sunday */ ,
                        firstWeekContainsDate: 1
                    }
                };
                /* harmony default export */
                var en_US = (en_US_locale);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/_lib/defaultLocale/index.js

                /* harmony default export */
                var defaultLocale = (en_US);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/format/index.js










                // This RegExp consists of three parts separated by `|`:
                // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
                //   (one of the certain letters followed by `o`)
                // - (\w)\1* matches any sequences of the same letter
                // - '' matches two quote characters in a row
                // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
                //   except a single quote symbol, which ends the sequence.
                //   Two quote characters do not end the sequence.
                //   If there is no matching single quote
                //   then the sequence will continue until the end of the string.
                // - . matches any single character unmatched by previous parts of the RegExps
                var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

                // This RegExp catches symbols escaped by quotes, and also
                // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
                var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
                var escapedStringRegExp = /^'([^]*?)'?$/;
                var doubleQuoteRegExp = /''/g;
                var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

                /**
                 * @name format
                 * @category Common Helpers
                 * @summary Format the date.
                 *
                 * @description
                 * Return the formatted date string in the given format. The result may vary by locale.
                 *
                 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
                 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
                 *
                 * The characters wrapped between two single quotes characters (') are escaped.
                 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
                 * (see the last example)
                 *
                 * Format of the string is based on Unicode Technical Standard #35:
                 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
                 * with a few additions (see note 7 below the table).
                 *
                 * Accepted patterns:
                 * | Unit                            | Pattern | Result examples                   | Notes |
                 * |---------------------------------|---------|-----------------------------------|-------|
                 * | Era                             | G..GGG  | AD, BC                            |       |
                 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
                 * |                                 | GGGGG   | A, B                              |       |
                 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
                 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
                 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
                 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
                 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
                 * |                                 | yyyyy   | ...                               | 3,5   |
                 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
                 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
                 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
                 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
                 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
                 * |                                 | YYYYY   | ...                               | 3,5   |
                 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
                 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
                 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
                 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
                 * |                                 | RRRRR   | ...                               | 3,5,7 |
                 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
                 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
                 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
                 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
                 * |                                 | uuuuu   | ...                               | 3,5   |
                 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
                 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
                 * |                                 | QQ      | 01, 02, 03, 04                    |       |
                 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
                 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
                 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
                 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
                 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
                 * |                                 | qq      | 01, 02, 03, 04                    |       |
                 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
                 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
                 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
                 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
                 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
                 * |                                 | MM      | 01, 02, ..., 12                   |       |
                 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
                 * |                                 | MMMM    | January, February, ..., December  | 2     |
                 * |                                 | MMMMM   | J, F, ..., D                      |       |
                 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
                 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
                 * |                                 | LL      | 01, 02, ..., 12                   |       |
                 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
                 * |                                 | LLLL    | January, February, ..., December  | 2     |
                 * |                                 | LLLLL   | J, F, ..., D                      |       |
                 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
                 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
                 * |                                 | ww      | 01, 02, ..., 53                   |       |
                 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
                 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
                 * |                                 | II      | 01, 02, ..., 53                   | 7     |
                 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
                 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
                 * |                                 | dd      | 01, 02, ..., 31                   |       |
                 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
                 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
                 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
                 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
                 * |                                 | DDDD    | ...                               | 3     |
                 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
                 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
                 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
                 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
                 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
                 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
                 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
                 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
                 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
                 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
                 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
                 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
                 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
                 * |                                 | ee      | 02, 03, ..., 01                   |       |
                 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
                 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
                 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
                 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
                 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
                 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
                 * |                                 | cc      | 02, 03, ..., 01                   |       |
                 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
                 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
                 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
                 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
                 * | AM, PM                          | a..aa   | AM, PM                            |       |
                 * |                                 | aaa     | am, pm                            |       |
                 * |                                 | aaaa    | a.m., p.m.                        | 2     |
                 * |                                 | aaaaa   | a, p                              |       |
                 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
                 * |                                 | bbb     | am, pm, noon, midnight            |       |
                 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
                 * |                                 | bbbbb   | a, p, n, mi                       |       |
                 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
                 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
                 * |                                 | BBBBB   | at night, in the morning, ...     |       |
                 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
                 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
                 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
                 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
                 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
                 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
                 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
                 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
                 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
                 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
                 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
                 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
                 * | Minute                          | m       | 0, 1, ..., 59                     |       |
                 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
                 * |                                 | mm      | 00, 01, ..., 59                   |       |
                 * | Second                          | s       | 0, 1, ..., 59                     |       |
                 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
                 * |                                 | ss      | 00, 01, ..., 59                   |       |
                 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
                 * |                                 | SS      | 00, 01, ..., 99                   |       |
                 * |                                 | SSS     | 000, 001, ..., 999                |       |
                 * |                                 | SSSS    | ...                               | 3     |
                 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
                 * |                                 | XX      | -0800, +0530, Z                   |       |
                 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
                 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
                 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
                 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
                 * |                                 | xx      | -0800, +0530, +0000               |       |
                 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
                 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
                 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
                 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
                 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
                 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
                 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
                 * | Seconds timestamp               | t       | 512969520                         | 7     |
                 * |                                 | tt      | ...                               | 3,7   |
                 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
                 * |                                 | TT      | ...                               | 3,7   |
                 * | Long localized date             | P       | 04/29/1453                        | 7     |
                 * |                                 | PP      | Apr 29, 1453                      | 7     |
                 * |                                 | PPP     | April 29th, 1453                  | 7     |
                 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
                 * | Long localized time             | p       | 12:00 AM                          | 7     |
                 * |                                 | pp      | 12:00:00 AM                       | 7     |
                 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
                 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
                 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
                 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
                 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
                 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
                 * Notes:
                 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
                 *    are the same as "stand-alone" units, but are different in some languages.
                 *    "Formatting" units are declined according to the rules of the language
                 *    in the context of a date. "Stand-alone" units are always nominative singular:
                 *
                 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
                 *
                 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
                 *
                 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
                 *    the single quote characters (see below).
                 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
                 *    the output will be the same as default pattern for this unit, usually
                 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
                 *    are marked with "2" in the last column of the table.
                 *
                 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
                 *
                 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
                 *
                 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
                 *
                 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
                 *
                 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
                 *
                 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
                 *    The output will be padded with zeros to match the length of the pattern.
                 *
                 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
                 *
                 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
                 *    These tokens represent the shortest form of the quarter.
                 *
                 * 5. The main difference between `y` and `u` patterns are B.C. years:
                 *
                 *    | Year | `y` | `u` |
                 *    |------|-----|-----|
                 *    | AC 1 |   1 |   1 |
                 *    | BC 1 |   1 |   0 |
                 *    | BC 2 |   2 |  -1 |
                 *
                 *    Also `yy` always returns the last two digits of a year,
                 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
                 *
                 *    | Year | `yy` | `uu` |
                 *    |------|------|------|
                 *    | 1    |   01 |   01 |
                 *    | 14   |   14 |   14 |
                 *    | 376  |   76 |  376 |
                 *    | 1453 |   53 | 1453 |
                 *
                 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
                 *    except local week-numbering years are dependent on `options.weekStartsOn`
                 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
                 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
                 *
                 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
                 *    so right now these tokens fall back to GMT timezones.
                 *
                 * 7. These patterns are not in the Unicode Technical Standard #35:
                 *    - `i`: ISO day of week
                 *    - `I`: ISO week of year
                 *    - `R`: ISO week-numbering year
                 *    - `t`: seconds timestamp
                 *    - `T`: milliseconds timestamp
                 *    - `o`: ordinal number modifier
                 *    - `P`: long localized date
                 *    - `p`: long localized time
                 *
                 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
                 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
                 *
                 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
                 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
                 *
                 * @param {Date|Number} date - the original date
                 * @param {String} format - the string of tokens
                 * @param {Object} [options] - an object with options.
                 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
                 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
                 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
                 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
                 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
                 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
                 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
                 * @returns {String} the formatted date string
                 * @throws {TypeError} 2 arguments required
                 * @throws {RangeError} `date` must not be Invalid Date
                 * @throws {RangeError} `options.locale` must contain `localize` property
                 * @throws {RangeError} `options.locale` must contain `formatLong` property
                 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
                 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
                 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
                 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
                 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
                 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
                 * @throws {RangeError} format string contains an unescaped latin alphabet character
                 *
                 * @example
                 * // Represent 11 February 2014 in middle-endian format:
                 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
                 * //=> '02/11/2014'
                 *
                 * @example
                 * // Represent 2 July 2014 in Esperanto:
                 * import { eoLocale } from 'date-fns/locale/eo'
                 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
                 *   locale: eoLocale
                 * })
                 * //=> '2-a de julio 2014'
                 *
                 * @example
                 * // Escape string by single quote characters:
                 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
                 * //=> "3 o'clock"
                 */

                function format(dirtyDate, dirtyFormatStr, options) {
                    var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
                    requiredArgs(2, arguments);
                    var formatStr = String(dirtyFormatStr);
                    var defaultOptions = getDefaultOptions();
                    var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;
                    var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

                    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
                    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
                        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
                    }
                    var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

                    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
                    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
                        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
                    }
                    if (!locale.localize) {
                        throw new RangeError('locale must contain localize property');
                    }
                    if (!locale.formatLong) {
                        throw new RangeError('locale must contain formatLong property');
                    }
                    var originalDate = toDate(dirtyDate);
                    if (!isValid(originalDate)) {
                        throw new RangeError('Invalid time value');
                    }

                    // Convert the date in system timezone to the same date in UTC+00:00 timezone.
                    // This ensures that when UTC functions will be implemented, locales will be compatible with them.
                    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
                    var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
                    var utcDate = subMilliseconds(originalDate, timezoneOffset);
                    var formatterOptions = {
                        firstWeekContainsDate: firstWeekContainsDate,
                        weekStartsOn: weekStartsOn,
                        locale: locale,
                        _originalDate: originalDate
                    };
                    var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
                        var firstCharacter = substring[0];
                        if (firstCharacter === 'p' || firstCharacter === 'P') {
                            var longFormatter = format_longFormatters[firstCharacter];
                            return longFormatter(substring, locale.formatLong);
                        }
                        return substring;
                    }).join('').match(formattingTokensRegExp).map(function(substring) {
                        // Replace two single quote characters with one single quote character
                        if (substring === "''") {
                            return "'";
                        }
                        var firstCharacter = substring[0];
                        if (firstCharacter === "'") {
                            return cleanEscapedString(substring);
                        }
                        var formatter = format_formatters[firstCharacter];
                        if (formatter) {
                            if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
                                throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
                            }
                            if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
                                throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
                            }
                            return formatter(utcDate, substring, locale.localize, formatterOptions);
                        }
                        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
                            throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
                        }
                        return substring;
                    }).join('');
                    return result;
                }

                function cleanEscapedString(input) {
                    var matched = input.match(escapedStringRegExp);
                    if (!matched) {
                        return input;
                    }
                    return matched[1].replace(doubleQuoteRegExp, "'");
                }
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/fr/_lib/formatDistance/index.js
                var formatDistance_formatDistanceLocale = {
                    lessThanXSeconds: {
                        one: 'moins d’une seconde',
                        other: 'moins de {{count}} secondes'
                    },
                    xSeconds: {
                        one: '1 seconde',
                        other: '{{count}} secondes'
                    },
                    halfAMinute: '30 secondes',
                    lessThanXMinutes: {
                        one: 'moins d’une minute',
                        other: 'moins de {{count}} minutes'
                    },
                    xMinutes: {
                        one: '1 minute',
                        other: '{{count}} minutes'
                    },
                    aboutXHours: {
                        one: 'environ 1 heure',
                        other: 'environ {{count}} heures'
                    },
                    xHours: {
                        one: '1 heure',
                        other: '{{count}} heures'
                    },
                    xDays: {
                        one: '1 jour',
                        other: '{{count}} jours'
                    },
                    aboutXWeeks: {
                        one: 'environ 1 semaine',
                        other: 'environ {{count}} semaines'
                    },
                    xWeeks: {
                        one: '1 semaine',
                        other: '{{count}} semaines'
                    },
                    aboutXMonths: {
                        one: 'environ 1 mois',
                        other: 'environ {{count}} mois'
                    },
                    xMonths: {
                        one: '1 mois',
                        other: '{{count}} mois'
                    },
                    aboutXYears: {
                        one: 'environ 1 an',
                        other: 'environ {{count}} ans'
                    },
                    xYears: {
                        one: '1 an',
                        other: '{{count}} ans'
                    },
                    overXYears: {
                        one: 'plus d’un an',
                        other: 'plus de {{count}} ans'
                    },
                    almostXYears: {
                        one: 'presqu’un an',
                        other: 'presque {{count}} ans'
                    }
                };
                var formatDistance_formatDistance = function formatDistance(token, count, options) {
                    var result;
                    var form = formatDistance_formatDistanceLocale[token];
                    if (typeof form === 'string') {
                        result = form;
                    } else if (count === 1) {
                        result = form.one;
                    } else {
                        result = form.other.replace('{{count}}', String(count));
                    }
                    if (options !== null && options !== void 0 && options.addSuffix) {
                        if (options.comparison && options.comparison > 0) {
                            return 'dans ' + result;
                        } else {
                            return 'il y a ' + result;
                        }
                    }
                    return result;
                };
                /* harmony default export */
                var fr_lib_formatDistance = (formatDistance_formatDistance);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/fr/_lib/formatLong/index.js

                var formatLong_dateFormats = {
                    full: 'EEEE d MMMM y',
                    long: 'd MMMM y',
                    medium: 'd MMM y',
                    short: 'dd/MM/y'
                };
                var formatLong_timeFormats = {
                    full: 'HH:mm:ss zzzz',
                    long: 'HH:mm:ss z',
                    medium: 'HH:mm:ss',
                    short: 'HH:mm'
                };
                var formatLong_dateTimeFormats = {
                    full: "{{date}} 'à' {{time}}",
                    long: "{{date}} 'à' {{time}}",
                    medium: '{{date}}, {{time}}',
                    short: '{{date}}, {{time}}'
                };
                var formatLong_formatLong = {
                    date: buildFormatLongFn({
                        formats: formatLong_dateFormats,
                        defaultWidth: 'full'
                    }),
                    time: buildFormatLongFn({
                        formats: formatLong_timeFormats,
                        defaultWidth: 'full'
                    }),
                    dateTime: buildFormatLongFn({
                        formats: formatLong_dateTimeFormats,
                        defaultWidth: 'full'
                    })
                };
                /* harmony default export */
                var fr_lib_formatLong = (formatLong_formatLong);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/fr/_lib/formatRelative/index.js
                var formatRelative_formatRelativeLocale = {
                    lastWeek: "eeee 'dernier à' p",
                    yesterday: "'hier à' p",
                    today: "'aujourd’hui à' p",
                    tomorrow: "'demain à' p'",
                    nextWeek: "eeee 'prochain à' p",
                    other: 'P'
                };
                var formatRelative_formatRelative = function formatRelative(token, _date, _baseDate, _options) {
                    return formatRelative_formatRelativeLocale[token];
                };
                /* harmony default export */
                var fr_lib_formatRelative = (formatRelative_formatRelative);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/fr/_lib/localize/index.js

                var localize_eraValues = {
                    narrow: ['av. J.-C', 'ap. J.-C'],
                    abbreviated: ['av. J.-C', 'ap. J.-C'],
                    wide: ['avant Jésus-Christ', 'après Jésus-Christ']
                };
                var localize_quarterValues = {
                    narrow: ['T1', 'T2', 'T3', 'T4'],
                    abbreviated: ['1er trim.', '2ème trim.', '3ème trim.', '4ème trim.'],
                    wide: ['1er trimestre', '2ème trimestre', '3ème trimestre', '4ème trimestre']
                };
                var localize_monthValues = {
                    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
                    abbreviated: ['janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juil.', 'août', 'sept.', 'oct.', 'nov.', 'déc.'],
                    wide: ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
                };
                var localize_dayValues = {
                    narrow: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
                    short: ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'],
                    abbreviated: ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'],
                    wide: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']
                };
                var localize_dayPeriodValues = {
                    narrow: {
                        am: 'AM',
                        pm: 'PM',
                        midnight: 'minuit',
                        noon: 'midi',
                        morning: 'mat.',
                        afternoon: 'ap.m.',
                        evening: 'soir',
                        night: 'mat.'
                    },
                    abbreviated: {
                        am: 'AM',
                        pm: 'PM',
                        midnight: 'minuit',
                        noon: 'midi',
                        morning: 'matin',
                        afternoon: 'après-midi',
                        evening: 'soir',
                        night: 'matin'
                    },
                    wide: {
                        am: 'AM',
                        pm: 'PM',
                        midnight: 'minuit',
                        noon: 'midi',
                        morning: 'du matin',
                        afternoon: 'de l’après-midi',
                        evening: 'du soir',
                        night: 'du matin'
                    }
                };
                var localize_ordinalNumber = function ordinalNumber(dirtyNumber, options) {
                    var number = Number(dirtyNumber);
                    var unit = options === null || options === void 0 ? void 0 : options.unit;
                    if (number === 0) return '0';
                    var feminineUnits = ['year', 'week', 'hour', 'minute', 'second'];
                    var suffix;
                    if (number === 1) {
                        suffix = unit && feminineUnits.includes(unit) ? 'ère' : 'er';
                    } else {
                        suffix = 'ème';
                    }
                    return number + suffix;
                };
                var _lib_localize_localize = {
                    ordinalNumber: localize_ordinalNumber,
                    era: buildLocalizeFn({
                        values: localize_eraValues,
                        defaultWidth: 'wide'
                    }),
                    quarter: buildLocalizeFn({
                        values: localize_quarterValues,
                        defaultWidth: 'wide',
                        argumentCallback: function argumentCallback(quarter) {
                            return quarter - 1;
                        }
                    }),
                    month: buildLocalizeFn({
                        values: localize_monthValues,
                        defaultWidth: 'wide'
                    }),
                    day: buildLocalizeFn({
                        values: localize_dayValues,
                        defaultWidth: 'wide'
                    }),
                    dayPeriod: buildLocalizeFn({
                        values: localize_dayPeriodValues,
                        defaultWidth: 'wide'
                    })
                };
                /* harmony default export */
                var fr_lib_localize = (_lib_localize_localize);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/fr/_lib/match/index.js


                var match_matchOrdinalNumberPattern = /^(\d+)(ième|ère|ème|er|e)?/i;
                var match_parseOrdinalNumberPattern = /\d+/i;
                var match_matchEraPatterns = {
                    narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
                    abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
                    wide: /^(avant Jésus-Christ|après Jésus-Christ)/i
                };
                var match_parseEraPatterns = {
                    any: [/^av/i, /^ap/i]
                };
                var match_matchQuarterPatterns = {
                    narrow: /^T?[1234]/i,
                    abbreviated: /^[1234](er|ème|e)? trim\.?/i,
                    wide: /^[1234](er|ème|e)? trimestre/i
                };
                var match_parseQuarterPatterns = {
                    any: [/1/i, /2/i, /3/i, /4/i]
                };
                var match_matchMonthPatterns = {
                    narrow: /^[jfmasond]/i,
                    abbreviated: /^(janv|févr|mars|avr|mai|juin|juill|juil|août|sept|oct|nov|déc)\.?/i,
                    wide: /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i
                };
                var match_parseMonthPatterns = {
                    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
                    any: [/^ja/i, /^f/i, /^mar/i, /^av/i, /^ma/i, /^juin/i, /^juil/i, /^ao/i, /^s/i, /^o/i, /^n/i, /^d/i]
                };
                var match_matchDayPatterns = {
                    narrow: /^[lmjvsd]/i,
                    short: /^(di|lu|ma|me|je|ve|sa)/i,
                    abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
                    wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
                };
                var match_parseDayPatterns = {
                    narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
                    any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i]
                };
                var match_matchDayPeriodPatterns = {
                    narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
                    any: /^([ap]\.?\s?m\.?|du matin|de l'après[-\s]midi|du soir|de la nuit)/i
                };
                var match_parseDayPeriodPatterns = {
                    any: {
                        am: /^a/i,
                        pm: /^p/i,
                        midnight: /^min/i,
                        noon: /^mid/i,
                        morning: /mat/i,
                        afternoon: /ap/i,
                        evening: /soir/i,
                        night: /nuit/i
                    }
                };
                var match_match = {
                    ordinalNumber: buildMatchPatternFn({
                        matchPattern: match_matchOrdinalNumberPattern,
                        parsePattern: match_parseOrdinalNumberPattern,
                        valueCallback: function valueCallback(value) {
                            return parseInt(value);
                        }
                    }),
                    era: buildMatchFn({
                        matchPatterns: match_matchEraPatterns,
                        defaultMatchWidth: 'wide',
                        parsePatterns: match_parseEraPatterns,
                        defaultParseWidth: 'any'
                    }),
                    quarter: buildMatchFn({
                        matchPatterns: match_matchQuarterPatterns,
                        defaultMatchWidth: 'wide',
                        parsePatterns: match_parseQuarterPatterns,
                        defaultParseWidth: 'any',
                        valueCallback: function valueCallback(index) {
                            return index + 1;
                        }
                    }),
                    month: buildMatchFn({
                        matchPatterns: match_matchMonthPatterns,
                        defaultMatchWidth: 'wide',
                        parsePatterns: match_parseMonthPatterns,
                        defaultParseWidth: 'any'
                    }),
                    day: buildMatchFn({
                        matchPatterns: match_matchDayPatterns,
                        defaultMatchWidth: 'wide',
                        parsePatterns: match_parseDayPatterns,
                        defaultParseWidth: 'any'
                    }),
                    dayPeriod: buildMatchFn({
                        matchPatterns: match_matchDayPeriodPatterns,
                        defaultMatchWidth: 'any',
                        parsePatterns: match_parseDayPeriodPatterns,
                        defaultParseWidth: 'any'
                    })
                };
                /* harmony default export */
                var fr_lib_match = (match_match);
                // CONCATENATED MODULE: ./node_modules/.pnpm/date-fns@2.30.0/node_modules/date-fns/esm/locale/fr/index.js





                /**
                 * @type {Locale}
                 * @category Locales
                 * @summary French locale.
                 * @language French
                 * @iso-639-2 fra
                 * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
                 * @author François B [@fbonzon]{@link https://github.com/fbonzon}
                 */
                var fr_locale = {
                    code: 'fr',
                    formatDistance: fr_lib_formatDistance,
                    formatLong: fr_lib_formatLong,
                    formatRelative: fr_lib_formatRelative,
                    localize: fr_lib_localize,
                    match: fr_lib_match,
                    options: {
                        weekStartsOn: 1 /* Monday */ ,
                        firstWeekContainsDate: 4
                    }
                };
                /* harmony default export */
                var fr = (fr_locale);
                // EXTERNAL MODULE: ./node_modules/.pnpm/@mui+icons-material@5.16.0_@mui+material@5.10.17_@types+react@18.2.75_react@18.3.1/node_modules/@mui/icons-material/ArrowForwardOutlined.js
                var ArrowForwardOutlined = __webpack_require__(2038);
                var ArrowForwardOutlined_default = /*#__PURE__*/ __webpack_require__.n(ArrowForwardOutlined);

                // EXTERNAL MODULE: ./node_modules/.pnpm/graphql-tag@2.12.6_graphql@15.8.0/node_modules/graphql-tag/lib/index.js + 13 modules
                var lib = __webpack_require__(76);

                // EXTERNAL MODULE: ./node_modules/.pnpm/next@14.2.3_@babel+core@7.24.4_react-dom@18.2.0_react@18.3.1/node_modules/next/router.js
                var next_router = __webpack_require__(1872);

                // EXTERNAL MODULE: ./node_modules/.pnpm/@next-common+logger@8.17.0/node_modules/@next-common/logger/dist/logger-browser.js
                var logger_browser = __webpack_require__(2025);

                // CONCATENATED MODULE: ./node_modules/.pnpm/@next-common+crew-partner-modal@8.116.6_@apollo+client@3.9.10_@date-io+core@1.3.13_@emotion+r_pzwgn37dm3o2ce6mstzwgsio6u/node_modules/@next-common/crew-partner-modal/build/crew-partner-modal.esm.js


























                var crew_partner_modal_esm_NAME = 'crewPartnerModal';
                var URL_PARTNER_PARAM = {
                    name: 'partner'
                };
                var URL_PROMOTION_ID_PARAM = {
                    name: 'promotionId'
                };
                var URL_LOAD_MODAL_PARAM = {
                    name: 'loadCrewModal'
                };
                var URL_STEP_PARTNER_PARAM = {
                    name: 'step'
                };
                var URL_P_PARAM = {
                    name: 'p'
                };
                var STEPS = {
                    PARTNER_MODAL: 1,
                    EXTENSION_MODAL: 2,
                    PARTNER_SUCCESS_MODAL: 3,
                    PARTNER_SUCCESS_MODAL_FINAL: 4
                };
                // Labels
                var connectButtonLabel = 'Se connecter';
                var registerButtonLabel = "S'inscrire";
                var offerTitleLabel = 'Après traitement, vous receverez votre cashback sous';
                var offerTitleBookingLabel = 'Après traitement, vous receverez vos Rakuten Points sous';
                var crew_partner_modal_esm_infoUrl = 'https://help.fr.shopping.rakuten.net/hc/fr/articles/8516494969746-Mon-remboursement-en-Rakuten-Points-n-appara%C3%AEt-pas-ou-a-disparu-sur-Mon-Compte-pourquoi-';
                var offerDescLabel = /*#__PURE__*/ react_default.a.createElement("span", null, "En attendant, il appara\xEEtra", /*#__PURE__*/ react_default.a.createElement("b", null, " dans quelques jours "), "avec le statut", /*#__PURE__*/ react_default.a.createElement("b", null, " \u201CEn attente\u201D "), "dans votre espace Club R.");
                var offerDescBookingLabel = /*#__PURE__*/ react_default.a.createElement("span", null, "En attendant, ils appara\xEEtront", /*#__PURE__*/ react_default.a.createElement("b", null, " dans quelques jours "), "avec le statut", /*#__PURE__*/ react_default.a.createElement("b", null, " \u201CEn attente\u201D "), "dans votre espace Club R.");
                var multiCommissionLabel = "Jusqu'à ";
                var partnerModalActionLabel = 'J\'en profite';
                // Param names
                var partnerParamName = 'partner';
                var stepParamName = 'step';
                var CHANNEL = {
                    APPS_IOS: 1,
                    APPS_ANDROID: 2,
                    MOBILE: 3,
                    DESKTOP: 4
                };
                var crewQuestions = ['Comment ça marche ?', 'Délais de remboursement', 'Comment profiter du Club R'];
                var crewBookingQuestions = ['Comment ça marche ?', 'Délais de reception des points', 'Comment profiter du Club R'];
                var crewAnswers = {
                    firstAnswerAuth: ['Prendre connaissance des conditions particulières', 'Cliquez sur le bouton “Se connecter” ou “S’inscrire” ci-dessous', 'Acceptez tous les cookies sur Rakuten et le site partenaire', 'Faites vos achats sur le site partenaire', 'Gagnez des euros sur vos achats et utilisez les sur Rakuten'],
                    firstAnswerNotAuth: ['Prendre connaissance des conditions particulières', 'Inscrivez-vous gratuitement au Club R avec le bouton “J’en profite” ci-dessous', 'Acceptez tous les cookies sur Rakuten et le site partenaire', 'Faites vos achats sur le site partenaire', 'Gagnez des euros sur vos achats et utilisez les sur Rakuten'],
                    profitAnswer: [{
                        id: 0,
                        title: 'étape 1',
                        sub: 'Devenez membre du Club R en cliquant sur “j’en profite”'
                    }, {
                        id: 1,
                        title: 'étape 2',
                        sub: 'Cumulez des euros à chacun de vos achats'
                    }, {
                        id: 2,
                        title: 'étape 3',
                        sub: 'Utilisez vos euros sur le site Rakuten'
                    }]
                };
                var crewBookingAnswers = {
                    firstAnswerAuth: ['Prendre connaissance des conditions particulières', 'Cliquez sur le bouton “J’en profite” ci-dessous', 'Acceptez tous les cookies sur Rakuten et le site partenaire', 'Faites vos achats sur le site partenaire', 'Gagnez des Rakuten Points sur vos achats et utilisez les sur Rakuten'],
                    firstAnswerNotAuth: ['Prendre connaissance des conditions particulières', 'Inscrivez-vous gratuitement au Club R avec le bouton “J’en profite” ci-dessous', 'Acceptez tous les cookies sur Rakuten et le site partenaire', 'Faites vos achats sur le site partenaire', 'Gagnez des Rakuten Points sur vos achats et utilisez les sur Rakuten'],
                    profitAnswer: [{
                        id: 0,
                        title: 'étape 1',
                        sub: 'Devenez membre du Club R en cliquant sur “j’en profite”'
                    }, {
                        id: 1,
                        title: 'étape 2',
                        sub: 'Cumulez des euros à chacun de vos achats'
                    }, {
                        id: 2,
                        title: 'étape 3',
                        sub: 'Utilisez vos euros sur le site Rakuten'
                    }]
                };
                var crew_partner_modal_esm_postAnswers = {
                    firstAnswer: 'La validation du cashback est effectuée par le marchand, ' + "le temps d'attente est donc indépendant de notre volonté. ",
                    secondAnswer: 'Si vous retournez vos produits ou si vous n’avez pas ' + 'suivi les conditions fixées par le partenaire pour profiter du cashback il peut vous être refusé.'
                };
                var postBookingAnswers = {
                    firstAnswer: 'La validation de l’offre est effectuée par le marchand, ' + "le temps d'attente est donc indépendant de notre volonté. ",
                    secondAnswer: 'Si vous retournez vos produits ou si vous n’avez pas ' + 'suivi les conditions fixées par le partenaire pour profiter de l’offre, ils peuvent vous être refusés.'
                };
                var constants = /*#__PURE__*/ Object.freeze({
                    __proto__: null,
                    NAME: crew_partner_modal_esm_NAME,
                    URL_PARTNER_PARAM: URL_PARTNER_PARAM,
                    URL_PROMOTION_ID_PARAM: URL_PROMOTION_ID_PARAM,
                    URL_LOAD_MODAL_PARAM: URL_LOAD_MODAL_PARAM,
                    URL_STEP_PARTNER_PARAM: URL_STEP_PARTNER_PARAM,
                    URL_P_PARAM: URL_P_PARAM,
                    STEPS: STEPS,
                    connectButtonLabel: connectButtonLabel,
                    registerButtonLabel: registerButtonLabel,
                    offerTitleLabel: offerTitleLabel,
                    offerTitleBookingLabel: offerTitleBookingLabel,
                    infoUrl: crew_partner_modal_esm_infoUrl,
                    offerDescLabel: offerDescLabel,
                    offerDescBookingLabel: offerDescBookingLabel,
                    multiCommissionLabel: multiCommissionLabel,
                    partnerModalActionLabel: partnerModalActionLabel,
                    partnerParamName: partnerParamName,
                    stepParamName: stepParamName,
                    CHANNEL: CHANNEL,
                    crewQuestions: crewQuestions,
                    crewBookingQuestions: crewBookingQuestions,
                    crewAnswers: crewAnswers,
                    crewBookingAnswers: crewBookingAnswers,
                    postAnswers: crew_partner_modal_esm_postAnswers,
                    postBookingAnswers: postBookingAnswers
                });
                var s$6 = {
                    "container": "_f-container-5c463b",
                    "buttonContainer": "_f-buttonContainer-2540ca",
                    "whiteButtonWrapper": "_f-whiteButtonWrapper-990e06",
                    "mr10": "_f-mr10-10d678",
                    "whiteButton": "_f-whiteButton-9b97a5",
                    "button": "_f-button-ce0f2a",
                    "all": "_f-all-2365f0",
                    "redButton": "_f-redButton-8da14b",
                    "redButtonWrapper": "_f-redButtonWrapper-ee01b1",
                    "redButtonOnly": "_f-redButtonOnly-057367",
                    "blockSeparator": "_f-blockSeparator-103d6a",
                    "separator": "_f-separator-8ca174",
                    "title": "_f-title-7caef8",
                    "description": "_f-description-277153",
                    "bonsavoirText": "_f-bonsavoirText-07bd25",
                    "recompenseContainer": "_f-recompenseContainer-0a4d8e",
                    "logo": "_f-logo-007f29",
                    "scrollHeader": "_f-scrollHeader-a08231",
                    "category": "_f-category-634e98",
                    "fadeIn": "_f-fadeIn-97ee13",
                    "showContainer": "_f-showContainer-d2c07a",
                    "show": "_f-show-8905ca",
                    "externalLinkicon": "_f-externalLinkicon-c97f3a",
                    "secondButtonLabelRegisterDesktop": "_f-secondButtonLabelRegisterDesktop-c6c2bb",
                    "accordionContainer": "_f-accordionContainer-031b36",
                    "accordion": "_f-accordion-28170c",
                    "accordionItemContainer": "_f-accordionItemContainer-f390c2",
                    "externalLinkContainer": "_f-externalLinkContainer-7f8ecc",
                    "externalLinkText": "_f-externalLinkText-752e71",
                    "chevron": "_f-chevron-35e76b"
                };
                var crew_partner_modal_esm_CrewPartnerModalFooter = function CrewPartnerModalFooter(_a) {
                    var firstButton = _a.firstButton,
                        secondButton = _a.secondButton;
                    return secondButton ? ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.buttonContainer
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: "".concat(s$6.whiteButtonWrapper, " ").concat(s$6.mr10)
                    }, /*#__PURE__*/ react_default.a.createElement("button", {
                        type: "button",
                        className: "".concat(s$6.whiteButton, " ").concat(s$6.button),
                        onClick: firstButton.buttonAction
                    }, firstButton.buttonLabel, firstButton.icon && /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.externalLinkicon
                    }, firstButton.icon))), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.redButtonWrapper
                    }, /*#__PURE__*/ react_default.a.createElement("button", {
                        type: "button",
                        className: "".concat(s$6.redButton, " ").concat(s$6.button),
                        onClick: secondButton.buttonAction
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.secondButtonLabelRegisterDesktop
                    }, secondButton.icon && /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.externalLinkicon
                    }, secondButton.icon), secondButton.buttonLabel))))) : ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.buttonContainer
                    }, /*#__PURE__*/ react_default.a.createElement("button", {
                        type: "button",
                        className: "".concat(s$6.redButton, " ").concat(s$6.button, " ").concat(s$6.redButtonOnly),
                        onClick: firstButton.buttonAction
                    }, firstButton.buttonLabel, firstButton.icon && /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.externalLinkicon
                    }, firstButton.icon))));
                };
                var crew_partner_modal_esm_BrandLogo = function BrandLogo(_a) {
                    var imageUrl = _a.imageUrl,
                        _b = _a.color,
                        color = _b === void 0 ? colorPalette["a" /* colorPalette */ ].white : _b;
                    return /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.logo,
                        style: {
                            backgroundColor: color
                        }
                    }, /*#__PURE__*/ react_default.a.createElement("img", {
                        src: imageUrl,
                        alt: "logo"
                    }));
                };
                var crew_partner_modal_esm_BrandScrollLogo = function BrandScrollLogo(_a) {
                    var show = _a.show,
                        title = _a.title;
                    var classNames = show ? [s$6.scrollHeader, s$6.fadeIn].join(' ') : s$6.scrollHeader;
                    return /*#__PURE__*/ react_default.a.createElement("div", {
                        className: classNames
                    }, /*#__PURE__*/ react_default.a.createElement("h1", null, title));
                };
                var crew_partner_modal_esm_Close = function Close(_a) {
                    var _b = _a.viewbox,
                        viewbox = _b === void 0 ? '0 0 32 32' : _b,
                        width = _a.width,
                        height = _a.height,
                        _c = _a.fill,
                        fill = _c === void 0 ? '#929292' : _c;
                    return /*#__PURE__*/ react_default.a.createElement(svgImg_svgImg["a" /* SvgImg */ ], {
                        viewbox: viewbox,
                        title: "icon close",
                        width: width,
                        height: height
                    }, /*#__PURE__*/ react_default.a.createElement("g", {
                        fill: fill,
                        fillRule: "evenodd"
                    }, /*#__PURE__*/ react_default.a.createElement("g", {
                        id: "ic_close"
                    }, /*#__PURE__*/ react_default.a.createElement("polygon", {
                        id: "path-1",
                        points: "27 6.45 25.55 5 16 14.55 6.45 5 5 6.45 14.55 16 5 25.55 6.45 27 16 17.45 25.55 27 27 25.55 17.45 16 27 6.45"
                    }))));
                };
                var s$5 = {
                    "popin": "_f-popin-cbc77f",
                    "overlay": "_f-overlay-2dec97",
                    "darkOverlay": "_f-darkOverlay-effff4",
                    "container": "_f-container-55be07",
                    "body": "_f-body-189491",
                    "fullWidthBody": "_f-fullWidthBody-aee62d",
                    "safariFullWidthBody": "_f-safariFullWidthBody-2ac63a",
                    "closeIcon": "_f-closeIcon-5e1300"
                };
                var crew_partner_modal_esm_PopIn = function PopIn(_a) {
                    var _b = _a.inputStyle,
                        inputStyle = _b === void 0 ? {} : _b,
                        _c = _a.inputBodyStyle,
                        inputBodyStyle = _c === void 0 ? {} : _c,
                        _d = _a.containerBodyStyle,
                        containerBodyStyle = _d === void 0 ? {} : _d,
                        _e = _a.withCloseIcon,
                        withCloseIcon = _e === void 0 ? false : _e,
                        _f = _a.isOpen,
                        isOpen = _f === void 0 ? false : _f,
                        onCloseCallBack = _a.onCloseCallBack,
                        _g = _a.overlayClosable,
                        overlayClosable = _g === void 0 ? true : _g,
                        children = _a.children,
                        _h = _a.withFullWidthBody,
                        withFullWidthBody = _h === void 0 ? false : _h,
                        _j = _a.darkBgModal,
                        darkBgModal = _j === void 0 ? false : _j,
                        dataQa = _a.dataQa;
                    var _k = Object(react["useState"])(!isOpen),
                        isClosed = _k[0],
                        setIsClosed = _k[1];
                    var onCloseDefault = function onCloseDefault(func) {
                        document.querySelector('html').style.overflow = 'unset';
                        setIsClosed(true);
                        if (func) {
                            func();
                        }
                    };
                    var closePopIn = function closePopIn() {
                        return onCloseDefault(onCloseCallBack);
                    };
                    Object(react["useEffect"])(function() {
                        document.querySelector('html').style.overflow = 'hidden';
                        return function() {
                            document.querySelector('html').style.overflow = 'unset';
                        };
                    }, []);
                    Object(react["useEffect"])(function() {
                        setIsClosed(!isOpen);
                    }, [isOpen]);
                    return !isClosed && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$5.popin,
                        style: inputStyle
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$5.container,
                        style: containerBodyStyle
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: "".concat(s$5.overlay, " ").concat(darkBgModal ? s$5.darkOverlay : '', " "),
                        onClick: function onClick() {
                            if (overlayClosable) {
                                closePopIn();
                            }
                        }
                    }), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: "".concat(s$5.body, " ").concat(withFullWidthBody ? s$5.fullWidthBody : ''),
                        style: inputBodyStyle,
                        "data-qa": dataQa !== null && dataQa !== void 0 ? dataQa : null
                    }, withCloseIcon && ( /*#__PURE__*/ react_default.a.createElement("a", {
                        className: s$5.closeIcon,
                        onClick: closePopIn
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_Close, {
                        width: "24px",
                        height: "24px",
                        fill: "#00000"
                    }))), children))));
                };
                var s$4 = {
                    "modalContainer": "_f-modalContainer-442093",
                    "fullModalContainer": "_f-fullModalContainer-0ad129",
                    "footer": "_f-footer-827fe7"
                };
                var crew_partner_modal_esm_FullScreenModal = function FullScreenModal(_a) {
                    var bodyRef = _a.bodyRef,
                        modalOnCloseCallBack = _a.modalOnCloseCallBack,
                        body = _a.body,
                        footer = _a.footer,
                        _b = _a.darkBgModal,
                        darkBgModal = _b === void 0 ? false : _b,
                        _c = _a.withCloseIcon,
                        withCloseIcon = _c === void 0 ? true : _c;
                    return /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_PopIn, {
                        onCloseCallBack: modalOnCloseCallBack,
                        isOpen: true,
                        overlayClosable: true,
                        withCloseIcon: withCloseIcon,
                        withFullWidthBody: true,
                        darkBgModal: darkBgModal
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        ref: bodyRef,
                        className: footer ? s$4.modalContainer : s$4.fullModalContainer
                    }, body), footer && /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$4.footer
                    }, footer));
                };
                var ACTIONS;
                (function(ACTIONS) {
                    ACTIONS["INIT_CREW_PARTNER_MODAL"] = "crewPartnerModal/INIT_CREW_PARTNER_MODAL";
                    ACTIONS["SHOW_CREW_PARTNER_MODAL"] = "crewPartnerModal/SHOW_CREW_PARTNER_MODAL";
                    ACTIONS["INIT_ADBLOCK_DETECTION"] = "crewPartnerModal/INIT_ADBLOCK_DETECTION";
                    ACTIONS["SHOW_EXTENSION_MODAL"] = "crewPartnerModal/SHOW_EXTENSION_MODAL";
                    ACTIONS["SHOW_PARTNER_SUCCESS_MODAL"] = "crewPartnerModal/SHOW_PARTNER_SUCCESS_MODAL";
                    ACTIONS["SHOW_PARTNER_SUCCESS_MODAL_FINAL"] = "crewPartnerModal/SHOW_PARTNER_SUCCESS_MODAL_FINAL";
                    ACTIONS["FETCH_CREW_PARTNER_DATA_REQUEST"] = "crewPartnerModal/FETCH_CREW_PARTNER_DATA_REQUEST";
                    ACTIONS["FETCH_CREW_PARTNER_DATA_SUCCESS"] = "crewPartnerModal/FETCH_CREW_PARTNER_DATA_SUCCESS";
                    ACTIONS["FETCH_CREW_PARTNER_DATA_FAILURE"] = "crewPartnerModal/FETCH_CREW_PARTNER_DATA_FAILURE";
                    ACTIONS["FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_REQUEST"] = "crewPartnerModal/FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_REQUEST";
                    ACTIONS["FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_SUCCESS"] = "crewPartnerModal/FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_SUCCESS";
                    ACTIONS["FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_FAILURE"] = "crewPartnerModal/FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_FAILURE";
                    ACTIONS["CLEAR_PARTNER_DATA"] = "crewPartnerModal/CLEAR_PARTNER_DATA";
                    ACTIONS["FETCH_USER_DATA_REQUEST"] = "crewPartnerModal/FETCH_USER_DATA_REQUEST";
                    ACTIONS["FETCH_USER_DATA_SUCCESS"] = "crewPartnerModal/FETCH_USER_DATA_SUCCESS";
                    ACTIONS["FETCH_USER_DATA_FAILURE"] = "crewPartnerModal/FETCH_USER_DATA_FAILURE";
                })(ACTIONS || (ACTIONS = {}));
                var actionTypes = ACTIONS;
                var URLs = {
                    partner: '/visuels/content-short/lucy/club-r-everywhere/partners/partner_',
                    promo: '/restpublic/web/eshop/landing/'
                };

                /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
                var defaultAppTrackingId = 9143800;
                var getParamByName = function getParamByName(param) {
                    if (typeof window !== 'undefined') {
                        var params = new URLSearchParams(window.location.search);
                        return params.get(param);
                    }
                    return null;
                };
                var formatPartnerName = function formatPartnerName(partnerName) {
                    return partnerName.replace(/'/g, '');
                };
                var getCookie = function getCookie(name) {
                    var v = document.cookie.match("(^|;) ?".concat(name, "=([^;]*)(;|$)"));
                    return v ? v[2] : null;
                };
                var getURLRedirectNAVParam = function getURLRedirectNAVParam() {
                    var urlCheckPattern = /&redirectNAV=(.*)$/i;
                    if (urlCheckPattern.exec(window.location.href)) {
                        return decodeURIComponent(urlCheckPattern.exec(window.location.href)[1]);
                    }
                    return null;
                };
                var getURLRedirectParam = function getURLRedirectParam() {
                    var urlCheckPattern = /&redir=(.*)$/i;
                    if (urlCheckPattern.exec(window.location.href)) {
                        return urlCheckPattern.exec(window.location.href)[1];
                    }
                    return null;
                };
                var getTrackingParam = function getTrackingParam(loadedTracking, md) {
                    if (loadedTracking) {
                        return loadedTracking;
                    }
                    var pmCookie = getCookie('pm');
                    var urlSearchParams = new URLSearchParams(pmCookie);
                    var lastTracking = urlSearchParams.get('lasttracking');
                    if (md.isEmbeddedInBuyerApp) {
                        var trackingFromUrl = getParamByName('t');
                        return trackingFromUrl || lastTracking || defaultAppTrackingId;
                    }
                    return lastTracking;
                };
                var getChannelId = function getChannelId(md) {
                    if (md.isEmbeddedInBuyerApp && !md.iphone) {
                        return CHANNEL.APPS_ANDROID;
                    }
                    if (md.isEmbeddedInBuyerApp && md.iphone) {
                        return CHANNEL.APPS_IOS;
                    }
                    if (md.wsParams.isMobile) {
                        return CHANNEL.MOBILE;
                    }
                    return CHANNEL.DESKTOP;
                };
                var getRedirectUrl = function getRedirectUrl(loadedData, partnerData, partnerUrl, userId, consentCookie, md) {
                    // Base URL
                    var url = partnerUrl || partnerData.link || getURLRedirectNAVParam() || loadedData && loadedData.link;
                    // User ID
                    url += "&".concat(partnerData.user_id_parameter, "=").concat(userId);
                    // Tracking
                    url += '|';
                    var tracking = getTrackingParam(loadedData === null || loadedData === void 0 ? void 0 : loadedData.tracking, md);
                    if (tracking) {
                        url += tracking;
                    }
                    // ProductID
                    if (loadedData === null || loadedData === void 0 ? void 0 : loadedData.productID) {
                        url += "|".concat(loadedData.productID);
                    }
                    // Si on vient de l'extension pour rediriger sur la bonne FP partenaire
                    var redirectParam = getURLRedirectParam();
                    if (redirectParam) {
                        url += "&p=".concat(redirectParam);
                    }
                    // Consent Cookie
                    if (consentCookie) {
                        url += consentCookie;
                    }
                    url += "&channelId=".concat(getChannelId(md));
                    return url;
                };
                var crew_partner_modal_esm_isAdblockDetected = function isAdblockDetected() {
                    return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                        var googleAdUrl, isAdblockActive;
                        return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                            switch (_a.label) {
                                case 0:
                                    googleAdUrl = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js';
                                    isAdblockActive = false;
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/ , fetch(new Request(googleAdUrl)).catch(function() {
                                        isAdblockActive = true;
                                    })];
                                case 2:
                                    _a.sent();
                                    return [3 /*break*/ , 4];
                                case 3:
                                    _a.sent();
                                    isAdblockActive = true;
                                    return [3 /*break*/ , 4];
                                case 4:
                                    return [2 /*return*/ , isAdblockActive];
                            }
                        });
                    });
                };
                var HOST = typeof window === 'undefined' ? 'http://seo-recette001.priceminister.lan:48088' : '';
                var crew_partner_modal_esm_loadPartnerFromEvent = function loadPartnerFromEvent(partner, promotionId) {
                    return function(dispatch) {
                        return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                            var params, hash, newUrl;
                            return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                                if (partner) {
                                    dispatch({
                                        type: actionTypes.SHOW_CREW_PARTNER_MODAL,
                                        payload: {
                                            partner: partner,
                                            promotionId: promotionId,
                                            step: STEPS.PARTNER_MODAL
                                        },
                                        loadedData: null
                                    });
                                    params = new URLSearchParams(window.location.search);
                                    params.set(URL_PARTNER_PARAM.name, partner);
                                    if (promotionId) {
                                        params.set(URL_PROMOTION_ID_PARAM.name, promotionId);
                                    }
                                    hash = window.location.hash;
                                    newUrl = "".concat(window.location.protocol, "//").concat(window.location.host).concat(window.location.pathname, "?").concat(params.toString()).concat(hash.length > 1 ? hash : '');
                                    window.history.pushState({
                                        path: newUrl
                                    }, '', newUrl);
                                }
                                return [2 /*return*/ ];
                            });
                        });
                    };
                };
                var crew_partner_modal_esm_loadPartnerFromLink = function loadPartnerFromLink(dispatch) {
                    return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                        var loadCrewModal, data, partner, promotionId, step;
                        return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                            loadCrewModal = getParamByName(URL_LOAD_MODAL_PARAM.name);
                            if (loadCrewModal) {
                                data = localStorage.getItem("crew-fp-modal-".concat(loadCrewModal));
                                if (data) {
                                    data = JSON.parse(data);
                                    dispatch({
                                        type: actionTypes.SHOW_CREW_PARTNER_MODAL,
                                        payload: {
                                            partner: data.partnerName,
                                            promotionId: data.promotionId,
                                            step: STEPS.PARTNER_SUCCESS_MODAL,
                                            loadedData: {
                                                link: data.link,
                                                tracking: data.tracking,
                                                productID: data.productID,
                                                idCoupon: data.idCoupon
                                            }
                                        }
                                    });
                                    return [2 /*return*/ ];
                                }
                            }
                            partner = getParamByName(URL_PARTNER_PARAM.name) || getParamByName(URL_P_PARAM.name);
                            promotionId = getParamByName(URL_PROMOTION_ID_PARAM.name) || getParamByName(URL_PROMOTION_ID_PARAM.name);
                            step = getParamByName('step');
                            if (partner) {
                                dispatch({
                                    type: actionTypes.SHOW_CREW_PARTNER_MODAL,
                                    payload: {
                                        partner: partner,
                                        promotionId: promotionId,
                                        step: step === '3' ? STEPS.PARTNER_SUCCESS_MODAL : STEPS.PARTNER_MODAL
                                    },
                                    loadedData: null
                                });
                            }
                            return [2 /*return*/ ];
                        });
                    });
                };
                var crew_partner_modal_esm_initCrewBtnListeners = function initCrewBtnListeners() {
                    return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                        return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                            document.querySelector('body').addEventListener('click', function(e) {
                                var partnerBtn = e.target.closest('[data-popin]:not([data-productid])');
                                if (partnerBtn) {
                                    e.preventDefault();
                                    var partnerName = partnerBtn.getAttribute('data-js');
                                    var promotionId = partnerBtn.getAttribute('data-promotion-id');
                                    document.dispatchEvent(new CustomEvent('CREW-MODAL-PARTNER', {
                                        detail: {
                                            partner: partnerName,
                                            promotionId: promotionId
                                        }
                                    }));
                                }
                            });
                            return [2 /*return*/ ];
                        });
                    });
                };
                var crew_partner_modal_esm_dispatchShowCrewPartnerModal = function dispatchShowCrewPartnerModal(dispatch, partnerFPBtn, link) {
                    return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                        return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                            dispatch({
                                type: actionTypes.SHOW_CREW_PARTNER_MODAL,
                                payload: {
                                    partner: partnerFPBtn.getAttribute('data-js'),
                                    step: STEPS.PARTNER_MODAL,
                                    loadedData: {
                                        link: link || partnerFPBtn.getAttribute('data-link'),
                                        tracking: partnerFPBtn.getAttribute('data-tracking'),
                                        productID: partnerFPBtn.getAttribute('data-productid'),
                                        idCoupon: partnerFPBtn.getAttribute('data-id')
                                    }
                                }
                            });
                            return [2 /*return*/ ];
                        });
                    });
                };
                var initFPCrewBtnListener = function initFPCrewBtnListener(link, setProduct, setAdvertId) {
                    return function(dispatch) {
                        var url = window.location.href;
                        var params = new URL(url).searchParams;
                        var productId = params.get('productId');
                        var advertId = params.get('advertId');
                        var path = new URL(url).pathname;
                        var isProductPage = path.includes('/offer/buy') || path.includes('/mfp');
                        if (productId && advertId && !isProductPage) {
                            setProduct(Number(productId));
                            return setAdvertId(Number(advertId));
                        }
                        document.querySelector('body').addEventListener('click', function(e) {
                            var partnerFPBtnContainer = e.target.closest('.buyBoxCta');
                            if (partnerFPBtnContainer) {
                                var advertCntnr = partnerFPBtnContainer.querySelector('[data-advert-id]');
                                var partnerFPBtn = partnerFPBtnContainer.querySelector('[data-popin][data-productid]');
                                if (advertCntnr) {
                                    setAdvertId(Number(advertCntnr.getAttribute('data-advert-id')));
                                }
                                if (partnerFPBtn) {
                                    e.preventDefault();
                                    setProduct(Number(partnerFPBtn.getAttribute('data-productid')));
                                    crew_partner_modal_esm_dispatchShowCrewPartnerModal(dispatch, partnerFPBtn, link);
                                }
                            } else {
                                var advertCntnr = e.target.closest('.itemListCrew[data-advert-id]');
                                var advertvis = e.target.closest('.MuiBox-root[advert-crew-id]');
                                var advertvis2 = e.target.closest('.V5Box-root[advert-crew-id]');
                                var partnerFPBtn = e.target.closest('.crew-cta[data-popin][data-productid]');
                                if (advertvis) {
                                    setAdvertId(Number(advertvis.getAttribute('advert-crew-id')));
                                }
                                if (advertvis2) {
                                    setAdvertId(Number(advertvis2.getAttribute('advert-crew-id')));
                                }
                                if (advertCntnr) {
                                    setAdvertId(Number(advertCntnr.getAttribute('data-advert-id')));
                                }
                                if (partnerFPBtn) {
                                    e.preventDefault();
                                    setProduct(Number(partnerFPBtn.getAttribute('data-productid')));
                                    crew_partner_modal_esm_dispatchShowCrewPartnerModal(dispatch, partnerFPBtn, link);
                                }
                            }
                        });
                    };
                };
                var crew_partner_modal_esm_openRedirectModal = function openRedirectModal(partnerName, loadedData, redirectUrl) {
                    return function(dispatch) {
                        return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                            var params, hash, newUrl;
                            return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                                params = new URLSearchParams(window.location.search);
                                if (loadedData) {
                                    localStorage.setItem("crew-fp-modal-".concat(partnerName, "-").concat(loadedData.productID), JSON.stringify(Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, loadedData), {
                                        partnerName: partnerName
                                    })));
                                    params.delete(partnerParamName);
                                    params.delete(stepParamName);
                                    params.set(URL_LOAD_MODAL_PARAM.name, "".concat(partnerName, "-").concat(loadedData.productID));
                                } else {
                                    params.set(partnerParamName, partnerName);
                                    params.set(stepParamName, STEPS.PARTNER_SUCCESS_MODAL.toString());
                                    params.delete(URL_LOAD_MODAL_PARAM.name);
                                }
                                hash = window.location.hash;
                                newUrl = "".concat(window.location.protocol, "//").concat(window.location.host, "/activation-cashback?partner=").concat(partnerName).concat(hash.length > 1 ? hash : '').concat(redirectUrl ? "&redirectUrl=".concat(redirectUrl) : '');
                                window.open(newUrl, '_blank');
                                dispatch({
                                    type: actionTypes.SHOW_PARTNER_SUCCESS_MODAL_FINAL
                                });
                                return [2 /*return*/ ];
                            });
                        });
                    };
                };
                var crew_partner_modal_esm_checkAdBlock = function checkAdBlock(dispatch) {
                    return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                        var isAdblockActive;
                        return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                            switch (_a.label) {
                                case 0:
                                    return [4 /*yield*/ , crew_partner_modal_esm_isAdblockDetected()];
                                case 1:
                                    isAdblockActive = _a.sent();
                                    dispatch({
                                        type: actionTypes.INIT_ADBLOCK_DETECTION,
                                        payload: isAdblockActive
                                    });
                                    return [2 /*return*/ ];
                            }
                        });
                    });
                };
                var crew_partner_modal_esm_fetchCrewPartnerData = function fetchCrewPartnerData(partnerName) {
                    return function(dispatch) {
                        return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                            return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                                dispatch({
                                    type: actionTypes.FETCH_CREW_PARTNER_DATA_REQUEST
                                });
                                fetch("".concat(URLs.partner).concat(partnerName, ".json"), {
                                    method: 'GET',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                }).then(function(response) {
                                    return response.json();
                                }).then(function(data) {
                                    dispatch({
                                        type: actionTypes.FETCH_CREW_PARTNER_DATA_SUCCESS,
                                        payload: data[partnerName]
                                    });
                                }).catch(function(err) {
                                    dispatch({
                                        type: actionTypes.FETCH_CREW_PARTNER_DATA_FAILURE,
                                        payload: err.response && err.response.data
                                    });
                                });
                                return [2 /*return*/ ];
                            });
                        });
                    };
                };
                var crew_partner_modal_esm_fetchCrewPartnerDataWithCodePromoData = function fetchCrewPartnerDataWithCodePromoData(partnerName, promotionId) {
                    return function(dispatch) {
                        return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                            return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                                dispatch({
                                    type: actionTypes.FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_REQUEST
                                });
                                fetch("".concat(URLs.partner).concat(partnerName, ".json"), {
                                    method: 'GET',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                }).then(function(partnerDataResponse) {
                                    return partnerDataResponse.json();
                                }).then(function(partnerData) {
                                    fetch("".concat(HOST).concat(URLs.promo).concat(partnerName, "/info"), {
                                        method: 'GET',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        }
                                    }).then(function(promotionsResponse) {
                                        return promotionsResponse.json();
                                    }).then(function(promotionsData) {
                                        dispatch({
                                            type: actionTypes.FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_SUCCESS,
                                            payload: {
                                                partnerData: partnerData[partnerName],
                                                promotionData: promotionsData.promotions[promotionId]
                                            }
                                        });
                                    }).catch(function(err) {
                                        dispatch({
                                            type: actionTypes.FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_FAILURE,
                                            payload: err.response && err.response.data
                                        });
                                    });
                                }).catch(function(err) {
                                    dispatch({
                                        type: actionTypes.FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_FAILURE,
                                        payload: err.response && err.response.data
                                    });
                                });
                                return [2 /*return*/ ];
                            });
                        });
                    };
                };
                var crew_partner_modal_esm_handleOnClose = function handleOnClose(isVisNextUrl) {
                    return function(dispatch) {
                        return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                            var params, query, hash, newUrl;
                            return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                                if (!isVisNextUrl) {
                                    dispatch({
                                        type: actionTypes.CLEAR_PARTNER_DATA
                                    });
                                }
                                params = new URLSearchParams(window.location.search);
                                if (params.get(URL_PARTNER_PARAM.name) || params.get(URL_P_PARAM.name)) {
                                    params.delete(URL_PARTNER_PARAM.name);
                                    params.delete(URL_PROMOTION_ID_PARAM.name);
                                    params.delete(URL_P_PARAM.name);
                                    query = params.toString();
                                    hash = window.location.hash;
                                    newUrl = "".concat(window.location.protocol, "//").concat(window.location.host).concat(window.location.pathname).concat(query.length > 0 ? "?".concat(query) : '').concat(hash.length > 1 ? hash : '');
                                    window.history.pushState({
                                        path: newUrl
                                    }, '', newUrl);
                                }
                                return [2 /*return*/ ];
                            });
                        });
                    };
                };
                var buildRedirectUrl = function buildRedirectUrl(partnerName, advertId, productId) {
                    var params = new URLSearchParams(window.location.search);
                    params.set('partner', partnerName);
                    if (advertId) params.set('advertId', advertId);
                    if (productId) params.set('productId', productId);
                    return encodeURIComponent("".concat(window.location.pathname, "?").concat(params.toString()));
                };
                var crew_partner_modal_esm_handleRegister = function handleRegister(partnerName, advertId, productId) {
                    return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                        return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                            window.location.assign("/register?referer=crew&redirect_url=".concat(buildRedirectUrl(partnerName, advertId, productId)));
                            return [2 /*return*/ ];
                        });
                    });
                };
                var crew_partner_modal_esm_handleLogin = function handleLogin(partnerName, advertId, productId) {
                    return Object(tslib_es6["b" /* __awaiter */ ])(void 0, void 0, void 0, function() {
                        return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                            window.location.assign("/connect?action=redirect&clubsubscription=true&url=".concat(buildRedirectUrl(partnerName, advertId, productId)));
                            return [2 /*return*/ ];
                        });
                    });
                };
                var crew_partner_modal_esm_sendATInternetEvent = function sendATInternetEvent(page_1, props_1) {
                    var args_1 = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        args_1[_i - 2] = arguments[_i];
                    }
                    return Object(tslib_es6["b" /* __awaiter */ ])(void 0, Object(tslib_es6["g" /* __spreadArray */ ])([page_1, props_1], args_1, true), void 0, function(page, props, chapter1, chapter3) {
                        var tag, cleanProps_1;
                        if (chapter1 === void 0) {
                            chapter1 = 'crew';
                        }
                        return Object(tslib_es6["d" /* __generator */ ])(this, function(_a) {
                            if (window.ATInternet) {
                                tag = new window.ATInternet.Tracker.Tag();
                                tag.page.set({
                                    name: page,
                                    chapter1: chapter1,
                                    level2: window.location.pathname.startsWith("/s/") || window.location.pathname.startsWith("/search/") ? 25 : window.location.pathname.startsWith('/affiliate/') ? 24 : undefined,
                                    chapter3: chapter3
                                });
                                cleanProps_1 = Object(tslib_es6["a" /* __assign */ ])({}, props);
                                Object.keys(cleanProps_1).forEach(function(key) {
                                    return cleanProps_1[key] === undefined && delete cleanProps_1[key];
                                });
                                tag.setProps(Object(tslib_es6["a" /* __assign */ ])({}, cleanProps_1), false);
                                tag.dispatch();
                            }
                            return [2 /*return*/ ];
                        });
                    });
                };
                var actions = /*#__PURE__*/ Object.freeze({
                    __proto__: null,
                    loadPartnerFromEvent: crew_partner_modal_esm_loadPartnerFromEvent,
                    loadPartnerFromLink: crew_partner_modal_esm_loadPartnerFromLink,
                    initCrewBtnListeners: crew_partner_modal_esm_initCrewBtnListeners,
                    initFPCrewBtnListener: initFPCrewBtnListener,
                    openRedirectModal: crew_partner_modal_esm_openRedirectModal,
                    checkAdBlock: crew_partner_modal_esm_checkAdBlock,
                    fetchCrewPartnerData: crew_partner_modal_esm_fetchCrewPartnerData,
                    fetchCrewPartnerDataWithCodePromoData: crew_partner_modal_esm_fetchCrewPartnerDataWithCodePromoData,
                    handleOnClose: crew_partner_modal_esm_handleOnClose,
                    handleRegister: crew_partner_modal_esm_handleRegister,
                    handleLogin: crew_partner_modal_esm_handleLogin,
                    sendATInternetEvent: crew_partner_modal_esm_sendATInternetEvent
                });
                var s$3 = {
                    "Alert": "_f-Alert-101320",
                    "Content": "_f-Content-4f2e19",
                    "Icon": "_f-Icon-6e3577",
                    "TitleText": "_f-TitleText-15c615",
                    "Title": "_f-Title-c38750",
                    "Link": "_f-Link-6bb295",
                    "LinkLabel": "_f-LinkLabel-547c2b"
                };
                var iconStyle$1 = {
                    color: colorPalette["a" /* colorPalette */ ].lightBlue800,
                    fontSize: 16
                };
                var crew_partner_modal_esm_CookieCard = function CookieCard(_a) {
                    var isShowCashbackterm = _a.isShowCashbackterm;
                    var handleClick = function handleClick() {
                        var _a, _b;
                        (_b = (_a = window === null || window === void 0 ? void 0 : window.Didomi) === null || _a === void 0 ? void 0 : _a.preferences) === null || _b === void 0 ? void 0 : _b.show();
                    };
                    return /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$3.Alert
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$3.Content
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$3.Icon
                    }, /*#__PURE__*/ react_default.a.createElement(CookieOutlined_default.a, {
                        style: iconStyle$1
                    })), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$3.Title
                    }, "Pour profiter ", isShowCashbackterm ? "de l'offre" : "du cashback", ", il est imp\xE9ratif d'accepter tous les cookies Rakuten.")), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$3.Link,
                        onClick: handleClick
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$3.LinkLabel
                    }, "Accepter les cookies")));
                };
                var s$2 = {
                    "accordionItemContainer": "_f-accordionItemContainer-f629bf",
                    "accrodionItemText": "_f-accrodionItemText-75a11f",
                    "listItemContainer": "_f-listItemContainer-2db82b",
                    "listItemWrapper": "_f-listItemWrapper-61531c",
                    "itemWrapper": "_f-itemWrapper-26d9ac",
                    "listItem": "_f-listItem-c51960",
                    "cardContainer": "_f-cardContainer-106d61",
                    "logoContainer": "_f-logoContainer-dc40c9",
                    "logo": "_f-logo-118755",
                    "textContainer": "_f-textContainer-344ec7",
                    "title": "_f-title-e060ff",
                    "duration": "_f-duration-e8b650",
                    "description": "_f-description-754b24",
                    "externalLinkContainer": "_f-externalLinkContainer-ea32eb",
                    "externalLinkText": "_f-externalLinkText-a4fc29",
                    "chevron": "_f-chevron-be42f7",
                    "containerItem": "_f-containerItem-fb15f3",
                    "containerPadding": "_f-containerPadding-f566c5",
                    "iconItem": "_f-iconItem-e5b948",
                    "separationBorder": "_f-separationBorder-34f89c",
                    "iconTitleWraper": "_f-iconTitleWraper-47cfc5",
                    "iconTitleWraperMargin": "_f-iconTitleWraperMargin-e3ab4b",
                    "iconContainer": "_f-iconContainer-006816",
                    "bigIcon": "_f-bigIcon-0795f7",
                    "titleRefund": "_f-titleRefund-f8e220",
                    "descriptionRefund": "_f-descriptionRefund-99f203",
                    "titleProfit": "_f-titleProfit-a0c3fa",
                    "descriptionProfit": "_f-descriptionProfit-89b0f7"
                };
                var smallIconStyle = {
                    color: colorPalette["a" /* colorPalette */ ].white,
                    fontSize: 10,
                    verticalAlign: 'middle'
                };
                var iconStyle = {
                    color: colorPalette["a" /* colorPalette */ ].red600,
                    fontSize: 16,
                    verticalAlign: 'middle'
                };
                var crew_partner_modal_esm_AccordionItem = function AccordionItem(_a) {
                    var title = _a.title,
                        description = _a.description,
                        _b = _a.isList,
                        isList = _b === void 0 ? false : _b,
                        Icon = _a.Icon,
                        Icons = _a.Icons,
                        _c = _a.hasHeader,
                        hasHeader = _c === void 0 ? false : _c,
                        children = _a.children;
                    var displayItems = function displayItems() {
                        if (isList && Array.isArray(description)) {
                            var items = description === null || description === void 0 ? void 0 : description.reduce(function(acc, key, id) {
                                var item = /*#__PURE__*/ react_default.a.createElement("div", {
                                    className: s$2.listItemContainer
                                }, Icon ? ( /*#__PURE__*/ react_default.a.createElement("div", {
                                    className: "".concat(s$2.containerItem, " ").concat(id !== 0 && s$2.containerPadding)
                                }, /*#__PURE__*/ react_default.a.createElement("div", {
                                    className: s$2.iconItem
                                }, /*#__PURE__*/ react_default.a.createElement(Icon, {
                                    style: smallIconStyle
                                })), /*#__PURE__*/ react_default.a.createElement("text", null, key))) : ( /*#__PURE__*/ react_default.a.createElement("li", {
                                    className: s$2.listItem
                                }, key)));
                                return Object(tslib_es6["g" /* __spreadArray */ ])(Object(tslib_es6["g" /* __spreadArray */ ])([], acc, true), [item], false);
                            }, []);
                            return /*#__PURE__*/ react_default.a.createElement("div", {
                                className: s$2.listItemContainer
                            }, Icon ? /*#__PURE__*/ react_default.a.createElement("div", {
                                className: s$2.itemWrapper
                            }, items) : /*#__PURE__*/ react_default.a.createElement("ul", {
                                className: s$2.listItemWrapper
                            }, items));
                        }
                        if (hasHeader) {
                            var hasSeparation_1 = description.length > 1;
                            // @ts-expect-error description is considered as string array
                            var items = description === null || description === void 0 ? void 0 : description.reduce(function(acc, key) {
                                var item = /*#__PURE__*/ react_default.a.createElement("div", {
                                    key: key.id,
                                    className: "".concat(hasSeparation_1 && s$2.separationBorder)
                                }, /*#__PURE__*/ react_default.a.createElement("div", {
                                    className: "".concat(s$2.iconTitleWraper, " ").concat(key.id !== 0 && s$2.iconTitleWraperMargin, " ")
                                }, /*#__PURE__*/ react_default.a.createElement("div", {
                                    className: s$2.iconContainer
                                }, key.id === 0 ? /*#__PURE__*/ react_default.a.createElement(TimerOutlined_default.a, {
                                    style: iconStyle
                                }) : /*#__PURE__*/ react_default.a.createElement(Check["default"], {
                                    style: iconStyle
                                })), /*#__PURE__*/ react_default.a.createElement("text", {
                                    className: s$2.titleRefund
                                }, key.title)), /*#__PURE__*/ react_default.a.createElement("text", {
                                    className: s$2.descriptionRefund
                                }, key.sub));
                                return Object(tslib_es6["g" /* __spreadArray */ ])(Object(tslib_es6["g" /* __spreadArray */ ])([], acc, true), [item], false);
                            }, []);
                            return /*#__PURE__*/ react_default.a.createElement("div", {
                                className: "".concat(s$2.listItemContainer, " ").concat(s$2.itemWrapper)
                            }, items);
                        }
                        if (Icons) {
                            // @ts-expect-error description is considered as string array
                            var items = description === null || description === void 0 ? void 0 : description.reduce(function(acc, key) {
                                var BigIcon = Icons[key.id];
                                var item = /*#__PURE__*/ react_default.a.createElement("div", {
                                    key: key.id
                                }, /*#__PURE__*/ react_default.a.createElement("div", {
                                    className: "".concat(s$2.iconTitleWraper, " ").concat(key.id !== 0 ? s$2.iconTitleWraperMargin : '', " ")
                                }, /*#__PURE__*/ react_default.a.createElement("div", {
                                    className: "".concat(s$2.iconContainer, " ").concat(s$2.bigIcon)
                                }, /*#__PURE__*/ react_default.a.createElement("img", {
                                    src: BigIcon
                                })), /*#__PURE__*/ react_default.a.createElement("div", {
                                    style: {
                                        display: 'flex',
                                        flexDirection: 'column',
                                        flex: 1
                                    }
                                }, /*#__PURE__*/ react_default.a.createElement("text", {
                                    className: s$2.titleProfit
                                }, key.title), /*#__PURE__*/ react_default.a.createElement("text", {
                                    className: s$2.descriptionProfit
                                }, key.sub))));
                                return Object(tslib_es6["g" /* __spreadArray */ ])(Object(tslib_es6["g" /* __spreadArray */ ])([], acc, true), [item], false);
                            }, []);
                            return /*#__PURE__*/ react_default.a.createElement("div", {
                                className: "".concat(s$2.listItemContainer, " ").concat(s$2.itemWrapper)
                            }, items);
                        }
                        return /*#__PURE__*/ react_default.a.createElement("div", {
                            className: s$2.accordionItemContainer
                        }, /*#__PURE__*/ react_default.a.createElement("text", {
                            className: s$2.accrodionItemText
                        }, description));
                    };
                    return /*#__PURE__*/ react_default.a.createElement(Accordion_AccordionMui, {
                        title: title,
                        isLite: true
                    }, /*#__PURE__*/ react_default.a.createElement(react_default.a.Fragment, null, displayItems(), children));
                };
                var crew_partner_modal_esm_CrewPartnerContentModal = function CrewPartnerContentModal(_a) {
                    var _b, _c, _d, _e, _f;
                    var partnerData = _a.partnerData,
                        isAuthenticated = _a.isAuthenticated,
                        v2 = _a.v2,
                        userData = _a.userData,
                        activationQuestions = _a.activationQuestions,
                        activationAnswers = _a.activationAnswers,
                        isHidden = _a.isHidden,
                        titleRef = _a.titleRef,
                        showV2 = _a.showV2,
                        isCookieEnabled = _a.isCookieEnabled,
                        isShowCashbackterm = _a.isShowCashbackterm;
                    var partnerName = partnerData === null || partnerData === void 0 ? void 0 : partnerData.title;
                    var multi = ((_b = partnerData === null || partnerData === void 0 ? void 0 : partnerData.cashback) === null || _b === void 0 ? void 0 : _b.multi) ? partnerData.cashback.multi : false;
                    var boost = ((_c = partnerData === null || partnerData === void 0 ? void 0 : partnerData.cashback) === null || _c === void 0 ? void 0 : _c.boost) ? partnerData.cashback.boost : false;
                    var isCustomerCrew = ((_d = userData === null || userData === void 0 ? void 0 : userData.crew) === null || _d === void 0 ? void 0 : _d.isCustomerCrew) ? userData.crew.isCustomerCrew : false;
                    var _g = partnerData === null || partnerData === void 0 ? void 0 : partnerData.cashback,
                        value = _g.value,
                        type = _g.type;
                    var Icons = ['https://fr.shopping.rakuten.com/visuels/0_next-common/crew-partner-modal/notes.png', 'https://fr.shopping.rakuten.com/visuels/0_next-common/crew-partner-modal/bag.png', 'https://fr.shopping.rakuten.com/visuels/0_next-common/crew-partner-modal/coin.png'];
                    return /*#__PURE__*/ react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/ react_default.a.createElement("div", {
                        ref: titleRef,
                        className: v2 && showV2 ? [s$6.show, s$6.showContainer].join(' ') : s$6.showContainer
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.title
                    }, partnerData.title), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.description
                    }, "R\xE9cuperez des ", isShowCashbackterm ? 'Rakuten Points' : 'euros', " en achetant sur ", partnerData.title)), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.recompenseContainer
                    }, /*#__PURE__*/ react_default.a.createElement(Advantage_Advantage, {
                        value: value,
                        type: type,
                        multi: multi,
                        isShowCashbackterm: isShowCashbackterm,
                        isCustomerCrew: !isCustomerCrew,
                        boost: boost,
                        partnerName: partnerName
                    })), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.container
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.blockSeparator
                    }), !isCookieEnabled && /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CookieCard, {
                        isShowCashbackterm: isShowCashbackterm
                    }), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.blockSeparator
                    }), !isHidden && ( /*#__PURE__*/ react_default.a.createElement(react_default.a.Fragment, null, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.bonsavoirText
                    }, "Bon \xE0 savoir"), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.accordionContainer
                    }, (!isAuthenticated || !((_e = userData === null || userData === void 0 ? void 0 : userData.priceClub) === null || _e === void 0 ? void 0 : _e.isSubscribed)) && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.accordionItemContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AccordionItem, {
                        title: activationQuestions[2],
                        description: activationAnswers.profitAnswer,
                        Icons: Icons
                    }))), isAuthenticated && !((_f = userData === null || userData === void 0 ? void 0 : userData.crew) === null || _f === void 0 ? void 0 : _f.hasMadeEnoughCrewPurshase) && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.accordionItemContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AccordionItem, {
                        title: activationQuestions[0],
                        description: activationAnswers.firstAnswerAuth,
                        isList: true,
                        // @ts-expect-error ts-migrate(2739) FIXME: Type 'OverridableComponent<SvgIconTypeMap<{}, "svg... Remove this comment to see the full error message
                        Icon: Check["default"]
                    }))), !isAuthenticated && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.accordionItemContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AccordionItem, {
                        title: activationQuestions[0],
                        description: activationAnswers.firstAnswerNotAuth,
                        isList: true,
                        // @ts-expect-error ts-migrate(2322) FIXME: Type 'OverridableComponent<SvgIconTypeMap<{}, "svg... Remove this comment to see the full error message
                        Icon: Check["default"]
                    }))), (partnerData === null || partnerData === void 0 ? void 0 : partnerData.conditions) && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.accordionItemContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AccordionItem, {
                        title: "Conditions particuli\xE8res",
                        description: partnerData.conditions,
                        isList: true
                    }))), (partnerData === null || partnerData === void 0 ? void 0 : partnerData.category) === 'voyage' || (partnerData === null || partnerData === void 0 ? void 0 : partnerData.isLongReimbursement) ? ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.accordionItemContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AccordionItem, {
                        title: activationQuestions[1],
                        description: activationAnswers.longRefundAnswer,
                        hasHeader: true
                    }))) : ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$6.accordionItemContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AccordionItem, {
                        title: activationQuestions[1],
                        description: activationAnswers.refundAnswer,
                        hasHeader: true
                    }))))))));
                };
                var crew_partner_modal_esm_useStyles = Object(makeStyles["a" /* default */ ])(function(theme) {
                    var _a;
                    return {
                        container: (_a = {
                            margin: '16px'
                        }, _a[theme.breakpoints.up(768)] = {
                            marginBottom: '116px'
                        }, _a),
                        detailsContainer: {
                            borderColor: "".concat(colorPalette_colorPalette.white, " !important")
                        },
                        cardContainer: {
                            borderColor: "".concat(colorPalette_colorPalette.gray900, " !important"),
                            marginBottom: '16px'
                        },
                        titleContainer: {
                            borderBottom: 'solid 1px',
                            borderBottomColor: colorPalette_colorPalette.gray200,
                            color: colorPalette_colorPalette.red800,
                            display: 'flex',
                            justifyContent: 'center',
                            gap: '6px',
                            fontWeight: 600,
                            fontSize: '14px',
                            paddingTop: '12px',
                            paddingBottom: '12px'
                        },
                        descriptionContainer: {
                            color: colorPalette_colorPalette.gray900,
                            fontWeight: 600,
                            fontSize: '14px',
                            paddingBottom: '16px !important'
                        },
                        description: {
                            maxHeight: '68px',
                            overflow: 'hidden',
                            display: '-webkit-box',
                            '-webkit-box-orient': 'vertical',
                            '-webkit-line-clamp': '4'
                        },
                        divider: {
                            borderColor: colorPalette_colorPalette.gray200,
                            margin: '16px 0 !important'
                        },
                        offer: {
                            '& span': {
                                fontWeight: 600,
                                fontSize: '14px'
                            },
                            '& > div': {
                                gap: '0px',
                                paddingTop: '12px',
                                flexDirection: 'column',
                                '& > div': {
                                    padding: '4px 0px'
                                }
                            }
                        },
                        cookieCardContainer: {
                            marginTop: '12px'
                        },
                        textContainer: {
                            '& span': {
                                fontWeight: 600,
                                fontSize: '14px'
                            },
                            '& > div': {
                                marginTop: '12px',
                                fontSize: '12px',
                                color: colorPalette_colorPalette.gray700
                            }
                        },
                        expiration: {
                            fontWeight: 600,
                            textTransform: 'uppercase'
                        },
                        voucherContainer: {
                            display: 'flex',
                            marginTop: '16px',
                            gap: '16px',
                            '& > div': {
                                flexGrow: '1',
                                display: 'flex',
                                '& > span': {
                                    margin: 'auto',
                                    marginLeft: '16px',
                                    fontWeight: 700,
                                    color: colorPalette_colorPalette.gray900
                                }
                            },
                            '& > button': {
                                border: "1px solid ".concat(colorPalette_colorPalette.red800)
                            }
                        }
                    };
                });
                var PromotionTypes = [{
                    name: 'PROMOTION',
                    label: 'Offre du moment',
                    icon: function icon(props) {
                        return /*#__PURE__*/ react_default.a.createElement(PercentOutlined_default.a, Object(tslib_es6["a" /* __assign */ ])({}, props));
                    }
                }, {
                    name: 'VOUCHER',
                    label: 'Code promo',
                    icon: function icon(props) {
                        return /*#__PURE__*/ react_default.a.createElement(LocalOfferOutlined_default.a, Object(tslib_es6["a" /* __assign */ ])({}, props));
                    }
                }, {
                    name: 'FREE SHIPPING',
                    label: 'Livraison gratuite',
                    icon: function icon(props) {
                        return /*#__PURE__*/ react_default.a.createElement(LocalShippingOutlined_default.a, Object(tslib_es6["a" /* __assign */ ])({}, props));
                    }
                }, {
                    name: 'FREE ARTICLE',
                    label: 'Cadeau offert',
                    icon: function icon(props) {
                        return /*#__PURE__*/ react_default.a.createElement(CardGiftcardOutlined_default.a, Object(tslib_es6["a" /* __assign */ ])({}, props));
                    }
                }, {
                    name: 'CONTEST',
                    label: 'Jeu concours',
                    icon: function icon(props) {
                        return /*#__PURE__*/ react_default.a.createElement(CasinoOutlined_default.a, Object(tslib_es6["a" /* __assign */ ])({}, props));
                    }
                }];
                var crew_partner_modal_esm_toDateString = function toDateString(start, end) {
                    var endDate = new Date(Date.parse(end));
                    var startDate = new Date(Date.parse(start));
                    var result = '';
                    if (!isPast(new Date(end)) && isPast(subDays(new Date(end), 7))) {
                        result = 'Expire bientôt';
                    } else if (isPast(new Date(end))) {
                        result = 'Expiré';
                    } else if (startDate.getFullYear() === endDate.getFullYear()) {
                        if (startDate.getMonth() === endDate.getMonth()) {
                            if (startDate.getDay() === endDate.getDay()) {
                                result = "Uniquement le ".concat(format(startDate, 'dd MMM yyyy', {
                                    locale: fr
                                }));
                            } else {
                                result = "Du ".concat(format(startDate, 'dd', {
                                    locale: fr
                                }), " au ").concat(format(endDate, 'dd MMM yyyy', {
                                    locale: fr
                                }));
                            }
                        } else {
                            result = "Du ".concat(format(startDate, 'dd MMM', {
                                locale: fr
                            }), " au ").concat(format(endDate, 'dd MMM yyyy', {
                                locale: fr
                            }));
                        }
                    } else {
                        result = "Du ".concat(format(startDate, 'dd MMM yyyy', {
                            locale: fr
                        }), " au ").concat(format(endDate, 'dd MMM yyyy', {
                            locale: fr
                        }));
                    }
                    return result;
                };
                var crew_partner_modal_esm_CrewPromotionContentModal = function CrewPromotionContentModal(_a) {
                    var _b, _c, _d;
                    var partnerData = _a.partnerData,
                        promotionData = _a.promotionData,
                        userData = _a.userData,
                        titleRef = _a.titleRef,
                        isCookieEnabled = _a.isCookieEnabled,
                        isShowCashbackterm = _a.isShowCashbackterm;
                    var classes = crew_partner_modal_esm_useStyles();
                    var defaultPromotionData = PromotionTypes.find(function(p) {
                        return p.name === promotionData.type;
                    });
                    var partnerName = partnerData === null || partnerData === void 0 ? void 0 : partnerData.title;
                    var multi = ((_b = partnerData === null || partnerData === void 0 ? void 0 : partnerData.cashback) === null || _b === void 0 ? void 0 : _b.multi) ? partnerData.cashback.multi : false;
                    var boost = ((_c = partnerData === null || partnerData === void 0 ? void 0 : partnerData.cashback) === null || _c === void 0 ? void 0 : _c.boost) ? partnerData.cashback.boost : false;
                    var isCustomerCrew = ((_d = userData === null || userData === void 0 ? void 0 : userData.crew) === null || _d === void 0 ? void 0 : _d.isCustomerCrew) ? userData.crew.isCustomerCrew : false;
                    var _e = partnerData === null || partnerData === void 0 ? void 0 : partnerData.cashback,
                        value = _e.value,
                        type = _e.type;
                    var _f = Object(react["useState"])(false),
                        hasVoucherClicked = _f[0],
                        setVoucherClicked = _f[1];
                    return /*#__PURE__*/ react_default.a.createElement("div", {
                        ref: titleRef,
                        className: classes.container
                    }, /*#__PURE__*/ react_default.a.createElement(Card_Card["a" /* default */ ], {
                        variant: "outlined",
                        className: classes.cardContainer
                    }, /*#__PURE__*/ react_default.a.createElement(CardContent["a" /* default */ ], {
                        className: classes.titleContainer
                    }, defaultPromotionData.icon({
                        fontSize: 'small'
                    }), " ", defaultPromotionData.label), /*#__PURE__*/ react_default.a.createElement(CardContent["a" /* default */ ], {
                        className: classes.descriptionContainer
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: classes.description
                    }, promotionData.title.replace(/<[^>]*>?/gm, '')), promotionData.type === 'VOUCHER' && promotionData.code && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: classes.voucherContainer
                    }, /*#__PURE__*/ react_default.a.createElement(Card_Card["a" /* default */ ], {
                        variant: "outlined"
                    }, /*#__PURE__*/ react_default.a.createElement("span", null, promotionData.code)), /*#__PURE__*/ react_default.a.createElement(Button["a" /* Button */ ], {
                        variant: hasVoucherClicked ? 'outlined' : 'contained',
                        onClick: function onClick() {
                            navigator.clipboard.writeText(promotionData.code);
                            setVoucherClicked(true);
                        }
                    }, ' ', hasVoucherClicked ? 'Copié !' : 'Copier'))))), /*#__PURE__*/ react_default.a.createElement(Card_Card["a" /* default */ ], {
                        variant: "outlined",
                        className: classes.detailsContainer
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: classes.offer
                    }, /*#__PURE__*/ react_default.a.createElement("span", null, "Offre cumul\xE9e"), /*#__PURE__*/ react_default.a.createElement(Advantage_Advantage, {
                        size: "S",
                        value: value,
                        type: type,
                        multi: multi,
                        isCustomerCrew: !isCustomerCrew,
                        boost: boost,
                        partnerName: partnerName,
                        isShowCashbackterm: isShowCashbackterm
                    })), !isCookieEnabled && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: classes.cookieCardContainer
                    }, !isCookieEnabled && /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CookieCard, {
                        isShowCashbackterm: isShowCashbackterm
                    }))), /*#__PURE__*/ react_default.a.createElement(esm_Divider_Divider, {
                        className: classes.divider,
                        variant: "fullWidth"
                    }), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: classes.textContainer
                    }, /*#__PURE__*/ react_default.a.createElement("span", null, "D\xE9tail"), /*#__PURE__*/ react_default.a.createElement("div", {
                        dangerouslySetInnerHTML: {
                            __html: promotionData.description
                        }
                    })), /*#__PURE__*/ react_default.a.createElement(esm_Divider_Divider, {
                        className: classes.divider,
                        variant: "fullWidth"
                    }), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: classes.textContainer
                    }, /*#__PURE__*/ react_default.a.createElement("span", null, "Validit\xE9"), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: classes.expiration
                    }, crew_partner_modal_esm_toDateString(promotionData.start, promotionData.end)))));
                };

                /* eslint-disable @typescript-eslint/no-explicit-any */
                var crew_partner_modal_esm_DidomiContainer = esm.containers.DidomiContainer;
                var crew_partner_modal_esm_CrewPartnerModal = function CrewPartnerModal(_a) {
                    var _b = _a.v2,
                        v2 = _b === void 0 ? false : _b,
                        _c = _a.isAuthenticated,
                        isAuthenticated = _c === void 0 ? false : _c,
                        partnerData = _a.partnerData,
                        promotionData = _a.promotionData,
                        firstButton = _a.firstButton,
                        secondButton = _a.secondButton,
                        onCloseCallBack = _a.onCloseCallBack,
                        userData = _a.userData,
                        activationAnswers = _a.activationAnswers,
                        activationQuestions = _a.activationQuestions,
                        _d = _a.isHidden,
                        isHidden = _d === void 0 ? false : _d,
                        isShowCashbackterm = _a.isShowCashbackterm;
                    var bodyRef = Object(react["useRef"])(null);
                    var titleRef = Object(react["useRef"])(null);
                    var _e = Object(react["useState"])(0),
                        scrollTop = _e[0],
                        setScrollTop = _e[1];
                    var _f = Object(react["useState"])(false),
                        show = _f[0],
                        setShow = _f[1];
                    var _g = Object(react["useState"])(false),
                        showV2 = _g[0],
                        setShowV2 = _g[1];
                    var _h = Object(react["useState"])(false),
                        isCookieEnabled = _h[0],
                        setIsCookieEnabled = _h[1];
                    var updateCookies = function updateCookies() {
                        var _a, _b;
                        var consents = (_a = window.Didomi) === null || _a === void 0 ? void 0 : _a.getUserStatus();
                        var purposes = consents === null || consents === void 0 ? void 0 : consents.purposes;
                        setIsCookieEnabled((_b = purposes === null || purposes === void 0 ? void 0 : purposes.consent) === null || _b === void 0 ? void 0 : _b.enabled.some(function(e) {
                            return e === 'cookies';
                        }));
                    };
                    Object(react["useEffect"])(function() {
                        if (window.Didomi) {
                            updateCookies();
                        }
                    }, []);
                    var handleScroll = function handleScroll(event) {
                        setScrollTop(function() {
                            return event.srcElement.scrollTop;
                        });
                    };
                    Object(react["useEffect"])(function() {
                        var _a, _b, _c, _d, _e;
                        var dataLayerCrewUserExist = ((_a = window.dataLayer) === null || _a === void 0 ? void 0 : _a.find(function(element) {
                            return element.isCrewUser;
                        })) !== undefined;
                        var updateDataLayerCrewUser = !dataLayerCrewUserExist || dataLayerCrewUserExist && !((_b = window.dataLayer) === null || _b === void 0 ? void 0 : _b.find(function(element) {
                            return element.isCrewUser;
                        }).isCrewUser);
                        if (updateDataLayerCrewUser) {
                            if (!dataLayerCrewUserExist || ((_c = userData === null || userData === void 0 ? void 0 : userData.crew) === null || _c === void 0 ? void 0 : _c.isCustomerCrew)) {
                                (_d = window.dataLayer) === null || _d === void 0 ? void 0 : _d.push({
                                    isCrewUser: (_e = userData === null || userData === void 0 ? void 0 : userData.crew) === null || _e === void 0 ? void 0 : _e.isCustomerCrew
                                });
                            }
                        }
                    }, []);
                    Object(react["useEffect"])(function() {
                        if (scrollTop > 84) {
                            setShow(true);
                        } else {
                            setShow(false);
                        }
                        if (scrollTop >= titleRef.current.offsetTop - 30) {
                            setShowV2(true);
                        } else {
                            setShowV2(false);
                        }
                    }, [scrollTop]);
                    Object(react["useEffect"])(function() {
                        var _a, _b;
                        bodyRef.current.addEventListener('scroll', handleScroll);
                        var eventPage = promotionData ? 'code_promo' : 'crew_popin_marque';
                        var eventProps = {
                            category_crew_main: partnerData.category,
                            category_crew_sub: promotionData ? undefined : partnerData.category,
                            partner_name: partnerData.title,
                            user_id: (_a = userData === null || userData === void 0 ? void 0 : userData.profile) === null || _a === void 0 ? void 0 : _a.userId,
                            super_points: (_b = userData === null || userData === void 0 ? void 0 : userData.priceClub) === null || _b === void 0 ? void 0 : _b.rank,
                            voucher_type: promotionData ? promotionData.type : undefined
                        };
                        var chapter1 = promotionData ? 'affiliate' : 'crew';
                        var chapter3 = promotionData ? 'popin_voucher' : undefined;
                        if (window.ATInternet) {
                            setTimeout(function() {
                                crew_partner_modal_esm_sendATInternetEvent(eventPage, eventProps, chapter1, chapter3);
                            }, 0);
                        } else {
                            window.addEventListener('load', function() {
                                crew_partner_modal_esm_sendATInternetEvent(eventPage, eventProps, chapter1, chapter3);
                            });
                        }
                    }, []);
                    var consentHasChanged = function consentHasChanged() {
                        updateCookies();
                    };
                    var imageUrl = partnerData.brand_illustration_url ? partnerData.brand_illustration_url : partnerData.logo_url;
                    var color = partnerData.brand_illustration_bg ? partnerData.brand_illustration_bg : undefined;
                    var body = /*#__PURE__*/ react_default.a.createElement(react_default.a.Fragment, null, !v2 && /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_BrandScrollLogo, {
                        show: show,
                        title: partnerData.title
                    }), /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_BrandLogo, {
                        imageUrl: imageUrl,
                        color: color
                    }), promotionData ? ( /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CrewPromotionContentModal, {
                        partnerData: partnerData,
                        promotionData: promotionData,
                        userData: userData,
                        titleRef: titleRef,
                        isCookieEnabled: isCookieEnabled,
                        isShowCashbackterm: isShowCashbackterm
                    })) : ( /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CrewPartnerContentModal, {
                        partnerData: partnerData,
                        isAuthenticated: isAuthenticated,
                        v2: v2,
                        userData: userData,
                        activationQuestions: activationQuestions,
                        activationAnswers: activationAnswers,
                        isHidden: isHidden,
                        titleRef: titleRef,
                        showV2: showV2,
                        isCookieEnabled: isCookieEnabled,
                        isShowCashbackterm: isShowCashbackterm
                    })), /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_DidomiContainer, {
                        onConsentChanged: consentHasChanged
                    }));
                    var footer = /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CrewPartnerModalFooter, {
                        firstButton: firstButton,
                        secondButton: secondButton
                    });
                    return /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_FullScreenModal, {
                        bodyRef: bodyRef,
                        modalOnCloseCallBack: onCloseCallBack,
                        body: body,
                        footer: footer
                    });
                };
                var s$1 = {
                    "bodyStyle": "_f-bodyStyle-89a75f",
                    "adBlockerModalContainer": "_f-adBlockerModalContainer-cf02a4",
                    "adBlockerModalTitle": "_f-adBlockerModalTitle-c25c06",
                    "adBlockerModalSubTitle": "_f-adBlockerModalSubTitle-401620",
                    "adBlockerModalButton": "_f-adBlockerModalButton-1ae137",
                    "adBlockerModalPopinSvg": "_f-adBlockerModalPopinSvg-aeb88e"
                };

                /* eslint-disable max-len */
                /* eslint-disable react/self-closing-comp */
                var crew_partner_modal_esm_AdBlockerIcon = function AdBlockerIcon(_a) {
                    var _b = _a.width,
                        width = _b === void 0 ? '114' : _b,
                        _c = _a.height,
                        height = _c === void 0 ? '114' : _c,
                        _d = _a.fill,
                        fill = _d === void 0 ? colorPalette["a" /* colorPalette */ ].gray900 : _d;
                    return /*#__PURE__*/ react_default.a.createElement(svgImg_svgImg["a" /* SvgImg */ ], {
                        viewbox: "0 0 114 114",
                        title: "app",
                        width: width,
                        height: height,
                        fill: fill
                    }, /*#__PURE__*/ react_default.a.createElement("circle", {
                        cx: "57",
                        cy: "57",
                        r: "57",
                        fill: "#FFF0F0"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M24.3138 42H85V60.5294L70 62.0735L68.5 77H27.5L24 73L24.3138 42Z",
                        fill: "white"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M25 33H70C71.6569 33 73 34.3431 73 36V41H25V33Z",
                        fill: "#FFD3D3"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M84 57C84 57.5523 84.4477 58 85 58C85.5523 58 86 57.5523 86 57H84ZM64 78C64.5523 78 65 77.5523 65 77C65 76.4477 64.5523 76 64 76V78ZM28.6722 33H80.3278V31H28.6722V33ZM25 72.3278V36.6722H23V72.3278H25ZM84 36.6685V57H86V36.6685H84ZM64 76H28.6722V78H64V76ZM23 72.3278C23 75.4604 25.5395 78 28.6722 78V76C26.6441 76 25 74.3559 25 72.3278H23ZM80.3278 33C82.3569 33 84 34.6414 84 36.6685H86C86 33.5347 83.4594 31 80.3278 31V33ZM28.6722 31C25.5395 31 23 33.5395 23 36.6722H25C25 34.6441 26.6441 33 28.6722 33V31Z",
                        fill: "#BF0000"
                    }), /*#__PURE__*/ react_default.a.createElement("circle", {
                        cx: "79.5865",
                        cy: "72.4016",
                        r: "13.2002",
                        fill: "#BF0000"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M71.9996 72.4998H87.9996",
                        stroke: "white",
                        strokeWidth: "2",
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M24.3359 41.5H85",
                        stroke: "#BF0000",
                        strokeWidth: "2",
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M73.3947 32.3362V41.0002",
                        stroke: "#BF0000",
                        strokeWidth: "2",
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }), /*#__PURE__*/ react_default.a.createElement("circle", {
                        cx: "30.5",
                        cy: "36.7",
                        r: "1.5",
                        fill: "#BF0000"
                    }), /*#__PURE__*/ react_default.a.createElement("circle", {
                        cx: "36.5",
                        cy: "36.7",
                        r: "1.5",
                        fill: "#BF0000"
                    }), /*#__PURE__*/ react_default.a.createElement("circle", {
                        cx: "42.5",
                        cy: "36.7",
                        r: "1.5",
                        fill: "#BF0000"
                    }));
                };
                var crew_partner_modal_esm_AdBlockerModal = function AdBlockerModal(_a) {
                    var handleClick = _a.handleClick,
                        userData = _a.userData,
                        onCloseCallBack = _a.onCloseCallBack;
                    Object(react["useEffect"])(function() {
                        var _a, _b;
                        var eventPage = 'popin_adblocker';
                        var eventProps = {
                            user_id: (_a = userData === null || userData === void 0 ? void 0 : userData.profile) === null || _a === void 0 ? void 0 : _a.userId,
                            super_points: (_b = userData === null || userData === void 0 ? void 0 : userData.priceClub) === null || _b === void 0 ? void 0 : _b.rank
                        };
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        if (window.ATInternet) {
                            setTimeout(function() {
                                crew_partner_modal_esm_sendATInternetEvent(eventPage, eventProps);
                            }, 0);
                        } else {
                            window.addEventListener('load', function() {
                                crew_partner_modal_esm_sendATInternetEvent(eventPage, eventProps);
                            });
                        }
                    }, []);
                    var body = /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$1.adBlockerModalContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AdBlockerIcon, null), /*#__PURE__*/ react_default.a.createElement("h1", {
                        className: s$1.adBlockerModalTitle
                    }, "D\xE9sactivez votre adblocker"), /*#__PURE__*/ react_default.a.createElement("p", {
                        className: s$1.adBlockerModalSubTitle
                    }, "Pensez \xE0 d\xE9sactiver votre adblocker et \xE0 accepter les cookies en arrivant sur le site du partenaire pour profiter de l\u2019offre de remboursement."));
                    var footer = /*#__PURE__*/ react_default.a.createElement("button", {
                        type: "button",
                        className: s$1.adBlockerModalButton,
                        onClick: handleClick
                    }, "J\u2019ai d\xE9sactiv\xE9 mon adblocker");
                    return /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_FullScreenModal, {
                        body: body,
                        modalOnCloseCallBack: onCloseCallBack,
                        footer: footer
                    });
                };
                var crew_partner_modal_esm_s = {
                    "crewPartnerSuccessModalContainer": "_f-crewPartnerSuccessModalContainer-34e690",
                    "crewPartnerSuccessMargin": "_f-crewPartnerSuccessMargin-aeba74",
                    "crewPartnerSuccessNoMargin": "_f-crewPartnerSuccessNoMargin-1a1dff",
                    "crewPartnerSuccessModalSvg": "_f-crewPartnerSuccessModalSvg-1a8295",
                    "crewPartnerSuccessModalTitle": "_f-crewPartnerSuccessModalTitle-66859b",
                    "externalLinkicon": "_f-externalLinkicon-c53844",
                    "crewPartnerSuccessModalButton": "_f-crewPartnerSuccessModalButton-347b60",
                    "crewPartnerSuccessModalButtonHidden": "_f-crewPartnerSuccessModalButtonHidden-a28a77",
                    "accordionContainer": "_f-accordionContainer-81b396",
                    "accordion": "_f-accordion-58a80e",
                    "accordionItemContainer": "_f-accordionItemContainer-78c64c",
                    "externalLinkContainer": "_f-externalLinkContainer-8e5cff",
                    "externalLinkText": "_f-externalLinkText-fa0db4",
                    "chevron": "_f-chevron-5444fc",
                    "cardContainer": "_f-cardContainer-4f036f"
                };
                var crew_partner_modal_esm_ExternalLinkIcon = function ExternalLinkIcon(_a) {
                    var _b = _a.width,
                        width = _b === void 0 ? '16' : _b,
                        _c = _a.height,
                        height = _c === void 0 ? '17' : _c,
                        _d = _a.fill,
                        fill = _d === void 0 ? colorPalette["a" /* colorPalette */ ].gray900 : _d;
                    return /*#__PURE__*/ react_default.a.createElement(svgImg_svgImg["a" /* SvgImg */ ], {
                        viewbox: "0 0 16 17",
                        title: "app",
                        width: width,
                        height: height,
                        fill: fill
                    }, /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M10.5 13.7192H2.5V5.71924H6.5V4.71924H2.5C2.23478 4.71924 1.98043 4.8246 1.79289 5.01213C1.60536 5.19967 1.5 5.45402 1.5 5.71924V13.7192C1.5 13.9845 1.60536 14.2388 1.79289 14.4263C1.98043 14.6139 2.23478 14.7192 2.5 14.7192H10.5C10.7652 14.7192 11.0196 14.6139 11.2071 14.4263C11.3946 14.2388 11.5 13.9845 11.5 13.7192V9.71924H10.5V13.7192Z",
                        fill: "white"
                    }), /*#__PURE__*/ react_default.a.createElement("path", {
                        d: "M13.5 1.71924H8.5V2.71924H12.793L6.5 9.01224L7.2075 9.71924L13.5 3.42624V7.71924H14.5V2.71924V1.71924H13.5Z",
                        fill: "white"
                    }));
                };
                var crew_partner_modal_esm_CrewPartnerSuccessButton = function CrewPartnerSuccessButton(_a) {
                    var partnerTitle = _a.partnerTitle,
                        crewUrl = _a.crewUrl,
                        currentCount = _a.currentCount,
                        buttonCallBefore = _a.buttonCallBefore;
                    var buttonAction = function buttonAction() {
                        if (buttonCallBefore) {
                            buttonCallBefore();
                        }
                        window.location.href = crewUrl;
                    };
                    return /*#__PURE__*/ react_default.a.createElement("button", {
                        type: "button",
                        className: crew_partner_modal_esm_s.crewPartnerSuccessModalButton,
                        onClick: buttonAction
                    }, "Acheter sur ", partnerTitle, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: crew_partner_modal_esm_s.externalLinkicon
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_ExternalLinkIcon, null)), /*#__PURE__*/ react_default.a.createElement("span", null, " (", currentCount, " secondes)"));
                };
                var crew_partner_modal_esm_Card = function Card(_a) {
                    var validationDelay = _a.validationDelay,
                        cardTitle = _a.cardTitle,
                        cardDescription = _a.cardDescription,
                        imageUrl = _a.imageUrl;
                    var displayLink = function displayLink() {
                        return /*#__PURE__*/ react_default.a.createElement("div", {
                            className: s$2.externalLinkContainer
                        }, /*#__PURE__*/ react_default.a.createElement(Link_Link, {
                            label: "Voir ma cagnotte",
                            url: "https://fr.shopping.rakuten.com/user/club",
                            rightIcon: /*#__PURE__*/ react_default.a.createElement(ArrowForwardOutlined_default.a, null),
                            openUrlInNewTab: false,
                            marginBottom: "0px",
                            underline: true
                        }));
                    };
                    return /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$2.cardContainer
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$2.logoContainer
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$2.logo
                    }, /*#__PURE__*/ react_default.a.createElement("img", {
                        src: imageUrl,
                        alt: "logo"
                    }))), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: s$2.textContainer
                    }, /*#__PURE__*/ react_default.a.createElement("p", {
                        className: s$2.title
                    }, cardTitle), /*#__PURE__*/ react_default.a.createElement("p", {
                        className: s$2.duration
                    }, validationDelay), /*#__PURE__*/ react_default.a.createElement("p", {
                        className: s$2.description
                    }, cardDescription), displayLink()));
                };
                var crew_partner_modal_esm_CrewPartnerSuccessModal = function CrewPartnerSuccessModal(_a) {
                    var _b = _a.disableRedirection,
                        disableRedirection = _b === void 0 ? false : _b,
                        cardDescription = _a.cardDescription,
                        cardTitle = _a.cardTitle,
                        partnerData = _a.partnerData,
                        userData = _a.userData,
                        _c = _a.darkBgModal,
                        darkBgModal = _c === void 0 ? false : _c,
                        onCloseCallBack = _a.onCloseCallBack,
                        modalTitle = _a.modalTitle,
                        redirectAllowed = _a.redirectAllowed,
                        _d = _a.isFinalStep,
                        isFinalStep = _d === void 0 ? false : _d,
                        _e = _a.isCloseIcon,
                        isCloseIcon = _e === void 0 ? false : _e,
                        _f = _a.infoUrl,
                        infoUrl = _f === void 0 ? '#' : _f,
                        postQuestions = _a.postQuestions,
                        postAnswers = _a.postAnswers,
                        validationDelay = _a.validationDelay,
                        partnerUrl = _a.partnerUrl;
                    var routeChange = function routeChange(url) {
                        window.open(url);
                    };
                    var _g = Object(react["useState"])(0),
                        intervalId = _g[0],
                        setIntervalId = _g[1];
                    var _h = Object(react["useState"])(5),
                        currentCount = _h[0],
                        setCount = _h[1];
                    var timer = function timer() {
                        return setCount(function(prevCount) {
                            return prevCount - 1;
                        });
                    };
                    var sendRedirectEvent = function sendRedirectEvent() {
                        var _a, _b;
                        var eventPage = 'remboursement_active_bis';
                        var eventProps = {
                            user_id: (_a = userData === null || userData === void 0 ? void 0 : userData.profile) === null || _a === void 0 ? void 0 : _a.userId,
                            super_points: (_b = userData === null || userData === void 0 ? void 0 : userData.priceClub) === null || _b === void 0 ? void 0 : _b.rank
                        };
                        if (window.ATInternet) {
                            setTimeout(function() {
                                crew_partner_modal_esm_sendATInternetEvent(eventPage, eventProps);
                            }, 0);
                        } else {
                            window.addEventListener('load', function() {
                                crew_partner_modal_esm_sendATInternetEvent(eventPage, eventProps);
                            });
                        }
                    };
                    Object(react["useEffect"])(function() {
                        sendRedirectEvent();
                    }, []);
                    var buttonCallBefore = function buttonCallBefore() {
                        clearInterval(intervalId);
                        sendRedirectEvent();
                    };
                    Object(react["useEffect"])(function() {
                        if (currentCount <= 0 && redirectAllowed) {
                            sendRedirectEvent();
                            clearInterval(intervalId);
                            window.location.href = partnerUrl;
                        }
                    }, [currentCount, redirectAllowed]);
                    Object(react["useEffect"])(
                        // eslint-disable-next-line consistent-return
                        function() {
                            var _a, _b;
                            if (!disableRedirection) {
                                var eventPage_1 = 'remboursement_active';
                                var eventProps_1 = {
                                    category_crew_main: partnerData.category,
                                    category_crew_sub: partnerData.category,
                                    patner_name: partnerData.title,
                                    user_id: (_a = userData === null || userData === void 0 ? void 0 : userData.profile) === null || _a === void 0 ? void 0 : _a.userId,
                                    super_points: (_b = userData === null || userData === void 0 ? void 0 : userData.priceClub) === null || _b === void 0 ? void 0 : _b.rank
                                };
                                if (window.ATInternet) {
                                    setTimeout(function() {
                                        crew_partner_modal_esm_sendATInternetEvent(eventPage_1, eventProps_1);
                                    }, 0);
                                } else {
                                    window.addEventListener('load', function() {
                                        crew_partner_modal_esm_sendATInternetEvent(eventPage_1, eventProps_1);
                                    });
                                }
                                var id_1 = setInterval(timer, 1000);
                                setIntervalId(id_1);
                                return function() {
                                    return clearInterval(id_1);
                                };
                            }
                        }, []);
                    var displayLink = function displayLink() {
                        return /*#__PURE__*/ react_default.a.createElement("div", {
                            className: crew_partner_modal_esm_s.externalLinkContainer
                        }, /*#__PURE__*/ react_default.a.createElement(Link_Link, {
                            label: "Plus d'informations",
                            url: infoUrl,
                            rightIcon: /*#__PURE__*/ react_default.a.createElement(ArrowForwardOutlined_default.a, null),
                            openUrlInNewTab: false,
                            underline: true
                        }));
                    };
                    var body = /*#__PURE__*/ react_default.a.createElement("div", {
                        className: "".concat(crew_partner_modal_esm_s.crewPartnerSuccessModalContainer, " ").concat(crew_partner_modal_esm_s.crewPartnerSuccessMargin)
                    }, /*#__PURE__*/ react_default.a.createElement("div", {
                        className: crew_partner_modal_esm_s.crewPartnerSuccessModalSvg
                    }, /*#__PURE__*/ react_default.a.createElement("img", {
                        src: "https://fr.shopping.rakuten.com/visuels/0_next-common/crew-partner-modal/cart_1.png",
                        alt: "cart"
                    })), /*#__PURE__*/ react_default.a.createElement("h1", {
                        className: crew_partner_modal_esm_s.crewPartnerSuccessModalTitle
                    }, modalTitle), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: crew_partner_modal_esm_s.cardContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_Card, {
                        validationDelay: validationDelay,
                        cardDescription: cardDescription,
                        cardTitle: cardTitle,
                        imageUrl: partnerData.logo_url
                    })), /*#__PURE__*/ react_default.a.createElement("div", {
                        className: crew_partner_modal_esm_s.accordionContainer
                    }, (postAnswers === null || postAnswers === void 0 ? void 0 : postAnswers.firstAnswer) && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: crew_partner_modal_esm_s.accordion
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AccordionItem, {
                        title: postQuestions[0],
                        description: postAnswers.firstAnswer
                    }))), (postAnswers === null || postAnswers === void 0 ? void 0 : postAnswers.secondAnswer) && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: crew_partner_modal_esm_s.accordionItemContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AccordionItem, {
                        title: postQuestions[1],
                        description: postAnswers.secondAnswer
                    }, displayLink()))), (partnerData === null || partnerData === void 0 ? void 0 : partnerData.conditions) && ( /*#__PURE__*/ react_default.a.createElement("div", {
                        className: crew_partner_modal_esm_s.accordionItemContainer
                    }, /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_AccordionItem, {
                        title: "Conditions particuli\xE8res",
                        description: partnerData.conditions,
                        isList: true
                    })))));
                    var footer = isFinalStep ? ( /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CrewPartnerModalFooter, {
                        firstButton: {
                            buttonLabel: "Acheter sur ".concat(partnerData.title),
                            buttonAction: function buttonAction() {
                                return routeChange(partnerUrl);
                            },
                            // @ts-expect-error ts-migrate(2322) FIXME: Type '{ className: any; }' is not assignable to ty... Remove this comment to see the full error message
                            icon: /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_ExternalLinkIcon, {
                                className: crew_partner_modal_esm_s.externalLinkicon
                            })
                        }
                    })) : ( /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CrewPartnerSuccessButton, {
                        partnerTitle: partnerData.title,
                        currentCount: currentCount,
                        crewUrl: partnerUrl,
                        buttonCallBefore: buttonCallBefore
                    }));
                    return /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_FullScreenModal, {
                        withCloseIcon: isCloseIcon,
                        modalOnCloseCallBack: onCloseCallBack,
                        body: body,
                        footer: footer,
                        darkBgModal: darkBgModal
                    });
                };

                /* eslint-disable @typescript-eslint/ban-ts-comment */
                var getComponentByStep = function getComponentByStep(step) {
                    switch (step) {
                        case STEPS.PARTNER_MODAL:
                            // @ts-ignore
                            return crew_partner_modal_esm_CrewPartnerModal;
                        case STEPS.EXTENSION_MODAL:
                            // @ts-ignore
                            return crew_partner_modal_esm_AdBlockerModal;
                        case STEPS.PARTNER_SUCCESS_MODAL:
                            // @ts-ignore
                            return crew_partner_modal_esm_CrewPartnerSuccessModal;
                        case STEPS.PARTNER_SUCCESS_MODAL_FINAL:
                            // @ts-ignore
                            return crew_partner_modal_esm_CrewPartnerSuccessModal;
                        default:
                            return null;
                    }
                };
                var crew_partner_modal_esm_StepsContainer = function StepsContainer(_a) {
                    var isAuthenticated = _a.isAuthenticated,
                        isSubscribed = _a.isSubscribed,
                        partnerData = _a.partnerData,
                        promotionData = _a.promotionData,
                        step = _a.step,
                        handleRedirectPartner = _a.handleRedirectPartner,
                        handleAdBlockClick = _a.handleAdBlockClick,
                        onCloseCallBack = _a.onCloseCallBack,
                        userData = _a.userData,
                        activationQuestions = _a.activationQuestions,
                        activationAnswers = _a.activationAnswers,
                        postQuestions = _a.postQuestions,
                        postAnswers = _a.postAnswers,
                        validationDelay = _a.validationDelay,
                        redirectUrl = _a.redirectUrl,
                        redirectAllowed = _a.redirectAllowed,
                        advertId = _a.advertId,
                        productId = _a.productId,
                        isShowCashbackterm = _a.isShowCashbackterm;
                    var partnerName = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.partnerName;
                    });
                    var StepComponent = getComponentByStep(parseInt(step, 10));
                    var CrewPartnerUnSubModalComponent =
                        /*#__PURE__*/
                        // @ts-expect-error ts-migrate(2322) FIXME: Type '{ onCloseCallBack: Function; isAuthenticated... Remove this comment to see the full error message
                        react_default.a.createElement(StepComponent, {
                            onCloseCallBack: onCloseCallBack,
                            isAuthenticated: isAuthenticated,
                            partnerData: partnerData,
                            promotionData: promotionData,
                            activationQuestions: activationQuestions,
                            activationAnswers: activationAnswers,
                            isShowCashbackterm: isShowCashbackterm,
                            firstButton: {
                                buttonLabel: registerButtonLabel,
                                buttonAction: function buttonAction() {
                                    crew_partner_modal_esm_handleRegister(partnerName, productId, advertId);
                                }
                            },
                            userData: userData
                        });
                    var CrewPartnerSubModalComponent =
                        /*#__PURE__*/
                        // @ts-expect-error ts-migrate(2322) FIXME: Type '{ onCloseCallBack: Function; isAuthenticated... Remove this comment to see the full error message
                        react_default.a.createElement(StepComponent, {
                            onCloseCallBack: onCloseCallBack,
                            isAuthenticated: isAuthenticated,
                            partnerData: partnerData,
                            promotionData: promotionData,
                            activationQuestions: activationQuestions,
                            activationAnswers: activationAnswers,
                            isShowCashbackterm: isShowCashbackterm,
                            firstButton: {
                                buttonLabel: partnerModalActionLabel,
                                buttonAction: handleRedirectPartner
                            },
                            userData: userData
                        });
                    // @ts-expect-error ts-migrate(2322) FIXME: Type '{ userData: any[]; onCloseCallBack: Function... Remove this comment to see the full error message
                    var AdBlockModalComponent = /*#__PURE__*/ react_default.a.createElement(StepComponent, {
                        userData: userData,
                        onCloseCallBack: onCloseCallBack,
                        handleClick: handleAdBlockClick
                    });
                    var CrewPartnerSuccessModalComponent =
                        /*#__PURE__*/
                        // @ts-ignore
                        react_default.a.createElement(StepComponent, {
                            cardTitle: isShowCashbackterm ? offerTitleBookingLabel : offerTitleLabel,
                            modalTitle: /*#__PURE__*/ react_default.a.createElement(react_default.a.Fragment, null, "Vous avez fait votre achat ?"),
                            cardDescription: isShowCashbackterm ? offerDescBookingLabel : offerDescLabel,
                            partnerUrl: redirectUrl,
                            onCloseCallBack: onCloseCallBack,
                            userData: userData,
                            partnerData: partnerData,
                            promotionData: promotionData,
                            redirectAllowed: redirectAllowed,
                            darkBgModal: true,
                            postQuestions: postQuestions,
                            postAnswers: postAnswers,
                            validationDelay: validationDelay,
                            infoUrl: crew_partner_modal_esm_infoUrl,
                            isShowCashbackterm: isShowCashbackterm
                        });
                    var CrewPartnerSuccessFinalModalComponent =
                        /*#__PURE__*/
                        // @ts-ignore
                        react_default.a.createElement(StepComponent, {
                            disableRedirection: true,
                            cardTitle: isShowCashbackterm ? offerTitleBookingLabel : offerTitleLabel,
                            modalTitle: /*#__PURE__*/ react_default.a.createElement(react_default.a.Fragment, null, "Vous avez fait votre achat ?"),
                            cardDescription: isShowCashbackterm ? offerDescBookingLabel : offerDescLabel,
                            partnerUrl: redirectUrl,
                            onCloseCallBack: onCloseCallBack,
                            userData: userData,
                            partnerData: partnerData,
                            promotionData: promotionData,
                            isFinalStep: true,
                            postQuestions: postQuestions,
                            postAnswers: postAnswers,
                            validationDelay: validationDelay,
                            infoUrl: crew_partner_modal_esm_infoUrl,
                            isShowCashbackterm: isShowCashbackterm,
                            isCloseIcon: true
                        });
                    // @ts-expect-error ts-migrate(2367) FIXME: This condition will always return 'false' since th... Remove this comment to see the full error message
                    if (step === STEPS.PARTNER_MODAL) {
                        return StepComponent && isSubscribed ? CrewPartnerSubModalComponent : CrewPartnerUnSubModalComponent;
                    }
                    // @ts-expect-error ts-migrate(2367) FIXME: This condition will always return 'false' since th... Remove this comment to see the full error message
                    if (step === STEPS.EXTENSION_MODAL) {
                        return StepComponent && AdBlockModalComponent;
                    }
                    // @ts-expect-error ts-migrate(2367) FIXME: This condition will always return 'false' since th... Remove this comment to see the full error message
                    if (step === STEPS.PARTNER_SUCCESS_MODAL) {
                        return StepComponent && CrewPartnerSuccessModalComponent;
                    }
                    // @ts-expect-error ts-migrate(2367) FIXME: This condition will always return 'false' since th... Remove this comment to see the full error message
                    if (step === STEPS.PARTNER_SUCCESS_MODAL_FINAL) {
                        return StepComponent && CrewPartnerSuccessFinalModalComponent;
                    }
                    // @ts-expect-error ts-migrate(2322) FIXME: Type '{}' is not assignable to type 'IntrinsicAttr... Remove this comment to see the full error message
                    return StepComponent && /*#__PURE__*/ react_default.a.createElement(StepComponent, null);
                };
                var getUserID = function getUserID(userData) {
                    return userData && userData.profile && userData.profile.userId;
                };
                var isUserLogged = function isUserLogged(userData) {
                    var userId = getUserID(userData);
                    return userId && userId !== 0 && Number.isInteger(userId);
                };
                var isUserSubscribed = function isUserSubscribed(userData) {
                    return userData && userData.priceClub && userData.priceClub.isSubscribed;
                };
                var getConsentCookie = function getConsentCookie(platformId, userId) {
                    var gdprConsent = ''; // KWANKO
                    var cnst = 'g2p'; // Rak Adv Permet d'indiquer a RakAdv les types de consentements acceptes (purposes)
                    var cjgdpr = '0'; // CJ
                    var cjgdprType = '7';
                    var consents = window.Didomi.getUserConsentStatusForAll();
                    var purposes = consents.purposes;
                    var consentPurposes = {
                        cookies: '1',
                        select_basic_ads: '2',
                        create_ads_profile: '3',
                        select_personalized_ads: '4',
                        create_content_profile: '5',
                        select_personalized_content: '6',
                        measure_ad_performance: '7',
                        measure_content_performance: '8',
                        market_research: '9',
                        improve_products: '10'
                    };
                    purposes.enabled.forEach(function(purpose) {
                        var enabledPurpose = consentPurposes[purpose];
                        if (enabledPurpose) {
                            cnst = "".concat(cnst + enabledPurpose, ",");
                            if (enabledPurpose === '1') {
                                cjgdpr = '1';
                            }
                        }
                    });
                    purposes.disabled.forEach(function(purpose) {
                        var declinedPurpose = consentPurposes[purpose];
                        if (declinedPurpose) {
                            if (declinedPurpose === '1') {
                                cjgdpr = '0';
                            }
                        }
                    });
                    var n = cnst.lastIndexOf(',');
                    if (n !== -1) {
                        cnst = cnst.substr(0, n); // On retire la dernière virgule
                    }
                    var getTCData = function getTCData(tcData, success) {
                        if (success && tcData.eventStatus === 'tcloaded') {
                            gdprConsent = tcData.tcString;
                        }
                    };
                    // @ts-expect-error didomi class.
                    __tcfapi('addEventListener', 2, getTCData);
                    switch (platformId) {
                        case 10:
                            // CJ
                            return "&cjgdpr=".concat(cjgdpr, "&cjgdprType=").concat(cjgdprType);
                        case 4: // KWANKO
                        case 14:
                            // KWANKO
                            return "&gdpr_consent=".concat(gdprConsent, "&gdpr_cb=").concat(userId);
                        case 6:
                            // RakAd
                            return "&cnst=".concat(cnst);
                        case 1:
                            //effiliation
                            return "&gdpr=1&&gdpr_consent=".concat(gdprConsent);
                        default:
                            return '';
                    }
                };
                var crew_partner_modal_esm_CrewPartnerLoggedInModal = function CrewPartnerLoggedInModal(_a) {
                    var _b;
                    var isAuthenticated = _a.isAuthenticated,
                        partnerData = _a.partnerData,
                        promotionData = _a.promotionData,
                        activationQuestions = _a.activationQuestions,
                        activationAnswers = _a.activationAnswers,
                        postQuestions = _a.postQuestions,
                        postAnswers = _a.postAnswers,
                        validationDelay = _a.validationDelay,
                        partnerUrl = _a.partnerUrl,
                        advertId = _a.advertId,
                        productId = _a.productId,
                        isShowCashbackterm = _a.isShowCashbackterm,
                        onCloseCallBack = _a.onCloseCallBack;
                    var dispatch = Object(es["d" /* useDispatch */ ])();
                    var step = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.step;
                    });
                    var isAdblockActive = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.isAdblockActive;
                    });
                    var partnerName = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.partnerName;
                    });
                    var userData = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.userData;
                    });
                    var loadedData = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.loadedData;
                    });
                    var md = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.md;
                    });
                    var _c = Object(react["useState"])(''),
                        consentCookie = _c[0],
                        setConsentCookie = _c[1];
                    var _d = Object(react["useState"])(''),
                        redirectUrl = _d[0],
                        setRedirectUrl = _d[1];
                    var _e = Object(react["useState"])(false),
                        redirectAllowed = _e[0],
                        setRedirectAllowed = _e[1];
                    var clubSubscriber = isUserSubscribed(userData);
                    var isEventPage = window.location.href.includes('/event/');
                    var isSearchPage = window.location.href.includes('/search/');
                    var isSeoSearchPage = window.location.href.includes('/s/');
                    var isAffiliatePage = window.location.href.includes('/affiliate/');
                    var isHomePage = window.location.pathname === '/';
                    var wsRedirectionLink = "".concat(partnerUrl).concat(consentCookie);
                    var redirection = isEventPage || isSearchPage || isHomePage || isSeoSearchPage || isAffiliatePage ? redirectUrl : wsRedirectionLink || redirectUrl;
                    var handleConsentCookie = function handleConsentCookie() {
                        var _a;
                        if (window.Didomi && partnerData.platform && userData.profile && md) {
                            var cookie = getConsentCookie(partnerData.platform.id, (_a = userData === null || userData === void 0 ? void 0 : userData.profile) === null || _a === void 0 ? void 0 : _a.userId);
                            setConsentCookie(cookie);
                            setRedirectAllowed(true);
                        }
                    };
                    Object(react["useEffect"])(function() {
                        if (window.Didomi) {
                            setTimeout(function() {
                                handleConsentCookie();
                            }, 0);
                        } else {
                            window.addEventListener('load', function() {
                                handleConsentCookie();
                            });
                        }
                    }, []);
                    Object(react["useEffect"])(function() {
                        var _a;
                        if (md) {
                            setRedirectUrl(getRedirectUrl(loadedData, partnerData, userData === null || userData === void 0 ? void 0 : userData.partnerUrl, (_a = userData === null || userData === void 0 ? void 0 : userData.profile) === null || _a === void 0 ? void 0 : _a.userId, consentCookie, md));
                        }
                    }, [loadedData, partnerData, (_b = userData === null || userData === void 0 ? void 0 : userData.profile) === null || _b === void 0 ? void 0 : _b.userId, consentCookie, md]);
                    var handleRedirectPartner = function handleRedirectPartner() {
                        var _a, _b;
                        if (isAdblockActive) {
                            dispatch({
                                type: actionTypes.SHOW_EXTENSION_MODAL
                            });
                        } else {
                            var eventPage_1 = 'remboursement_active';
                            var eventProps_1 = {
                                category_crew_main: partnerData.category,
                                category_crew_sub: partnerData.category,
                                partner_name: partnerData.title,
                                user_id: (_a = userData === null || userData === void 0 ? void 0 : userData.profile) === null || _a === void 0 ? void 0 : _a.userId,
                                super_points: (_b = userData === null || userData === void 0 ? void 0 : userData.priceClub) === null || _b === void 0 ? void 0 : _b.rank
                            };
                            if (window.ATInternet) {
                                setTimeout(function() {
                                    crew_partner_modal_esm_sendATInternetEvent(eventPage_1, eventProps_1);
                                }, 0);
                            } else {
                                window.addEventListener('load', function() {
                                    crew_partner_modal_esm_sendATInternetEvent(eventPage_1, eventProps_1);
                                });
                            }
                            dispatch(crew_partner_modal_esm_openRedirectModal(partnerName, loadedData, redirection));
                        }
                    };
                    var handleAdBlockClick = function handleAdBlockClick() {
                        window.location.reload();
                    };
                    Object(react["useEffect"])(function() {
                        if (step === STEPS.PARTNER_SUCCESS_MODAL) {
                            if (isAdblockActive) {
                                dispatch({
                                    type: actionTypes.SHOW_EXTENSION_MODAL
                                });
                            } else {
                                dispatch({
                                    type: actionTypes.SHOW_PARTNER_SUCCESS_MODAL
                                });
                            }
                        } else if (step === STEPS.EXTENSION_MODAL) {
                            handleRedirectPartner();
                        }
                    }, [isAdblockActive]);
                    Object(react["useEffect"])(function() {
                        if (step === STEPS.PARTNER_SUCCESS_MODAL) {
                            dispatch(crew_partner_modal_esm_checkAdBlock);
                        }
                    }, [step]);
                    return /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_StepsContainer, {
                        isAuthenticated: isAuthenticated,
                        partnerData: partnerData,
                        promotionData: promotionData,
                        step: step,
                        handleRedirectPartner: handleRedirectPartner,
                        handleAdBlockClick: handleAdBlockClick,
                        userData: userData,
                        onCloseCallBack: onCloseCallBack,
                        isSubscribed: clubSubscriber,
                        activationQuestions: activationQuestions,
                        activationAnswers: activationAnswers,
                        postQuestions: postQuestions,
                        postAnswers: postAnswers,
                        validationDelay: validationDelay,
                        redirectUrl: redirection,
                        redirectAllowed: redirectAllowed,
                        productId: productId,
                        advertId: advertId,
                        isShowCashbackterm: isShowCashbackterm
                    });
                };
                var crew_partner_modal_esm_CrewPartnerNotLoggedInModal = function CrewPartnerNotLoggedInModal(_a) {
                    var isAuthenticated = _a.isAuthenticated,
                        partnerName = _a.partnerName,
                        partnerData = _a.partnerData,
                        promotionData = _a.promotionData,
                        activationQuestions = _a.activationQuestions,
                        activationAnswers = _a.activationAnswers,
                        advertId = _a.advertId,
                        productId = _a.productId,
                        isShowCashbackterm = _a.isShowCashbackterm,
                        onCloseCallBack = _a.onCloseCallBack;
                    return /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CrewPartnerModal, {
                        isAuthenticated: isAuthenticated,
                        isShowCashbackterm: isShowCashbackterm,
                        partnerData: partnerData,
                        promotionData: promotionData,
                        activationQuestions: activationQuestions,
                        activationAnswers: activationAnswers,
                        firstButton: {
                            buttonLabel: connectButtonLabel,
                            buttonAction: function buttonAction() {
                                crew_partner_modal_esm_handleLogin(partnerName, advertId, productId);
                            }
                        },
                        secondButton: {
                            buttonLabel: registerButtonLabel,
                            buttonAction: function buttonAction() {
                                crew_partner_modal_esm_handleRegister(partnerName, advertId, productId);
                            }
                        },
                        onCloseCallBack: onCloseCallBack
                    });
                };
                var INITIAL_QUERY = Object(lib["a" /* default */ ])(templateObject_1 || (templateObject_1 = Object(tslib_es6["e" /* __makeTemplateObject */ ])(["query crew {\n  profile {\n    firstNameOrPseudo\n    userId\n  }\n  priceClub {\n    isSubscribed\n    rank\n  }\n  crew {\n    isCustomerCrew\n  }\n}\n"], ["query crew {\n  profile {\n    firstNameOrPseudo\n    userId\n  }\n  priceClub {\n    isSubscribed\n    rank\n  }\n  crew {\n    isCustomerCrew\n  }\n}\n"])));
                var CREW_QUERY = Object(lib["a" /* default */ ])(templateObject_2 || (templateObject_2 = Object(tslib_es6["e" /* __makeTemplateObject */ ])(["query getCrewPartner ($crewPartnerInput: CrewPartnerInput!) {\n  crewPartner (crewPartnerInput: $crewPartnerInput) {\n    partnerUrl\n  }\n  profile {\n    firstNameOrPseudo\n    userId\n  }\n  priceClub {\n    isSubscribed\n    rank\n  }\n  crew {\n    isCustomerCrew\n  }\n}\n"], ["query getCrewPartner ($crewPartnerInput: CrewPartnerInput!) {\n  crewPartner (crewPartnerInput: $crewPartnerInput) {\n    partnerUrl\n  }\n  profile {\n    firstNameOrPseudo\n    userId\n  }\n  priceClub {\n    isSubscribed\n    rank\n  }\n  crew {\n    isCustomerCrew\n  }\n}\n"])));
                var templateObject_1, templateObject_2;
                var limitObjects = function limitObjects(input, condition) {
                    if (!condition) {
                        var result = {};
                        for (var key in input) {
                            if (Object.prototype.hasOwnProperty.call(input, key)) {
                                result[key] = input[key].slice(0, 1);
                            }
                        }
                        return result;
                    } else {
                        return input;
                    }
                };
                var Router;
                try {
                    Router = __webpack_require__(1872);
                } catch (e) {
                    Router = null;
                }
                var crew_partner_modal_esm_CrewPartnerModalContainer = function CrewPartnerModalContainer(advertCrewModale) {
                    var _a, _b, _c, _d, _e, _f, _g;
                    var showPopin = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.showPopin;
                    });
                    var partnerName = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.partnerName;
                    });
                    var promotionId = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.promotionId;
                    });
                    var partnerData = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.partnerData;
                    });
                    var promotionData = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.promotionData;
                    });
                    var userData = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.userData;
                    });
                    var loadedData = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.crewPartnerModal && state.crewPartnerModal.loadedData;
                    });
                    var md = Object(es["e" /* useSelector */ ])(function(state) {
                        return state.md;
                    });
                    var _h = Object(react["useState"])(null),
                        advertId = _h[0],
                        setAdvertId = _h[1];
                    var _j = Object(react["useState"])(null),
                        productId = _j[0],
                        setProduct = _j[1];
                    var dispatch = Object(es["d" /* useDispatch */ ])();
                    var isConnected = isUserLogged(userData);
                    var ref = Object(react["useRef"])(false);
                    var _k = Object(react["useState"])(''),
                        consentCookie = _k[0],
                        setConsentCookie = _k[1];
                    var query_options = {
                        crewPartnerInput: {
                            sellerLogin: "ClubR_".concat(partnerName),
                            advertId: advertId,
                            productId: productId,
                            channelId: getChannelId(md),
                            tracking: 23
                        }
                    };
                    var initialQuery = Object(useQuery["a" /* useQuery */ ])(INITIAL_QUERY);
                    var isSkipQuery = !productId || !partnerName;
                    var crewQuery = Object(useQuery["a" /* useQuery */ ])(CREW_QUERY, {
                        variables: query_options,
                        skip: isSkipQuery
                    });

                    function isNextApplication() {
                        var _a;
                        try {
                            // eslint-disable-next-line react-hooks/rules-of-hooks
                            var router = typeof window !== 'undefined' ? Object(next_router["useRouter"])() : null;
                            //pour savoir si on est sur fp ou page event
                            return (_a = router === null || router === void 0 ? void 0 : router.asPath) === null || _a === void 0 ? void 0 : _a.includes('Clubr');
                        } catch (e) {
                            return false;
                        }
                    }
                    var isVisNextUrl = isNextApplication();
                    if (!isVisNextUrl && initialQuery && !initialQuery.loading) {
                        dispatch({
                            type: actionTypes.FETCH_USER_DATA_SUCCESS,
                            payload: initialQuery.data
                        });
                        ref.current = true;
                    }
                    Object(react["useEffect"])(function() {
                        if (advertId && !ref.current) {
                            dispatch({
                                type: actionTypes.FETCH_USER_DATA_SUCCESS,
                                payload: crewQuery.data
                            });
                        }
                    }, [advertId]);
                    // eslint-disable-next-line camelcase
                    var isShowCashbackterm = (_a = partnerData === null || partnerData === void 0 ? void 0 : partnerData.cashback) === null || _a === void 0 ? void 0 : _a.hideCashbackTerm;
                    var validationDelay = (partnerData === null || partnerData === void 0 ? void 0 : partnerData.validation_delay) ? partnerData === null || partnerData === void 0 ? void 0 : partnerData.validation_delay : "".concat(partnerData === null || partnerData === void 0 ? void 0 : partnerData.point_attribution_estimated, " jours") || false;
                    var refundAnswer = {
                        refundAnswer: [{
                            id: 0,
                            title: 'Délais d’apparition',
                            sub: "".concat(isShowCashbackterm ? 'Les Rakuten Points peuvent' : 'Le cashback peut', " prendre quelques jours pour appara\xEEtre sur votre compte Club R")
                        }, {
                            id: 1,
                            title: 'Délais de validation',
                            sub: "".concat(validationDelay, " d'attente environ avant validation ").concat(isShowCashbackterm ? 'des Rakuten Points' : 'du cashback')
                        }],
                        longRefundAnswer: [{
                            id: 0,
                            title: 'Délais d’apparition',
                            sub: "".concat(isShowCashbackterm ? 'Les Rakuten Points apparaitront' : 'Le cashback apparaitra', " sur votre compte Club R d\u2019ici quelques jours.")
                        }, {
                            id: 1,
                            title: 'Délais de validation',
                            sub: "".concat(isShowCashbackterm ? 'Les Rakuten Points arriveront' : 'Le cashback arrivera', " 12 semaines apr\xE8s la consommation du voyage ou de l'activit\xE9.")
                        }]
                    };
                    var limitedAnwers = limitObjects(refundAnswer, !!(partnerData === null || partnerData === void 0 ? void 0 : partnerData.point_attribution_estimated));
                    var answers = Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, crewAnswers), limitedAnwers);
                    var bookingAnswers = Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, crewBookingAnswers), refundAnswer);
                    var handleLoadPartner = function handleLoadPartner(event) {
                        dispatch(crew_partner_modal_esm_loadPartnerFromEvent(event.detail.partner, event.detail.promotionId));
                        if (isVisNextUrl && event.detail.partner) {
                            if (event.detail.promotionId) {
                                dispatch(crew_partner_modal_esm_fetchCrewPartnerDataWithCodePromoData(event.detail.partner, event.detail.promotionId));
                            } else {
                                dispatch(crew_partner_modal_esm_fetchCrewPartnerData(event.detail.partner));
                            }
                        }
                    };
                    var postQuestions = ["Pourquoi ".concat(validationDelay, " avant la validation ?"), isShowCashbackterm ? 'Mes Rakuten Points peuvent-ils être non éligibles ?' : 'Mon cashback peut-il être non éligible ?'];
                    Object(react["useEffect"])(function() {
                        dispatch({
                            type: actionTypes.FETCH_USER_DATA_REQUEST
                        });
                        document.addEventListener('CREW-MODAL-PARTNER', handleLoadPartner);
                        dispatch(crew_partner_modal_esm_loadPartnerFromLink);
                        dispatch(crew_partner_modal_esm_checkAdBlock);
                        dispatch(crew_partner_modal_esm_initCrewBtnListeners);
                        return function() {
                            document.removeEventListener('CREW-MODAL-PARTNER', handleLoadPartner);
                        };
                    }, []);
                    Object(react["useEffect"])(function() {
                        if (showPopin && partnerName) {
                            if (promotionId) {
                                dispatch(crew_partner_modal_esm_fetchCrewPartnerDataWithCodePromoData(partnerName, promotionId));
                            } else {
                                dispatch(crew_partner_modal_esm_fetchCrewPartnerData(partnerName));
                            }
                        }
                    }, [showPopin, partnerName]);
                    Object(react["useEffect"])(function() {
                        dispatch(initFPCrewBtnListener((userData === null || userData === void 0 ? void 0 : userData.partnerUrl) || (partnerData === null || partnerData === void 0 ? void 0 : partnerData.link) || '', setProduct, setAdvertId));
                    }, [partnerData]);
                    var onCloseCallBack = function onCloseCallBack() {
                        dispatch(crew_partner_modal_esm_handleOnClose(isVisNextUrl));
                    };
                    var handleConsentCookie = function handleConsentCookie() {
                        var _a, _b;
                        if (window.Didomi && partnerData.platform && md) {
                            //if the user is not connected, we must have 0 for the userId
                            var userId = (_b = (_a = userData === null || userData === void 0 ? void 0 : userData.profile) === null || _a === void 0 ? void 0 : _a.userId) !== null && _b !== void 0 ? _b : 0;
                            var cookie = getConsentCookie(partnerData.platform.id, userId);
                            setConsentCookie(cookie);
                        }
                    };
                    Object(react["useEffect"])(function() {
                        if (partnerData && userData && window.Didomi) {
                            setTimeout(function() {
                                handleConsentCookie();
                            }, 0);
                        } else if (partnerData && userData) {
                            window.addEventListener('load', function() {
                                handleConsentCookie();
                            });
                        }
                    }, [partnerData, userData]);
                    if (shouldRedirectUnloggedUsersDirectly(md, advertCrewModale) && initialQuery && crewQuery && !initialQuery.loading && !crewQuery.loading && !isConnected && !isVisNextUrl && loadedData && partnerData && userData) {
                        var redirectUrl = void 0;
                        if (promotionData.link || ((_c = (_b = crewQuery === null || crewQuery === void 0 ? void 0 : crewQuery.data) === null || _b === void 0 ? void 0 : _b.crewPartner) === null || _c === void 0 ? void 0 : _c.partnerUrl)) {
                            if (promotionData.link) {
                                redirectUrl = promotionData.link;
                            } else {
                                redirectUrl = (_e = (_d = crewQuery.data) === null || _d === void 0 ? void 0 : _d.crewPartner) === null || _e === void 0 ? void 0 : _e.partnerUrl;
                            }
                            if (consentCookie) {
                                redirectUrl = "".concat(redirectUrl).concat(consentCookie);
                            }
                        } else {
                            //fallback in case graphql doesn't work ;this shouldn't happen
                            redirectUrl = getRedirectUrl(loadedData, partnerData, userData === null || userData === void 0 ? void 0 : userData.partnerUrl, 0, consentCookie, md);
                        }
                        window.open(redirectUrl, '_blank');
                        return /*#__PURE__*/ react_default.a.createElement(react_default.a.Fragment, null);
                    } else {
                        return partnerData && showPopin && initialQuery && crewQuery && !initialQuery.loading && !crewQuery.loading && (isConnected ? ( /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CrewPartnerLoggedInModal, {
                            isAuthenticated: isConnected,
                            partnerData: partnerData,
                            promotionData: promotionData,
                            onCloseCallBack: onCloseCallBack,
                            activationQuestions: isShowCashbackterm ? crewBookingQuestions : crewQuestions,
                            activationAnswers: isShowCashbackterm ? bookingAnswers : answers,
                            postQuestions: postQuestions,
                            postAnswers: isShowCashbackterm ? postBookingAnswers : crew_partner_modal_esm_postAnswers,
                            validationDelay: validationDelay,
                            partnerUrl: (_g = (_f = crewQuery.data) === null || _f === void 0 ? void 0 : _f.crewPartner) === null || _g === void 0 ? void 0 : _g.partnerUrl,
                            productId: productId,
                            advertId: advertId,
                            isShowCashbackterm: isShowCashbackterm
                        })) : ( /*#__PURE__*/ react_default.a.createElement(crew_partner_modal_esm_CrewPartnerNotLoggedInModal, {
                            isAuthenticated: isConnected,
                            partnerData: partnerData,
                            promotionData: promotionData,
                            partnerName: partnerName,
                            onCloseCallBack: onCloseCallBack,
                            activationQuestions: isShowCashbackterm ? crewBookingQuestions : crewQuestions,
                            activationAnswers: isShowCashbackterm ? bookingAnswers : answers,
                            productId: productId,
                            advertId: advertId,
                            isShowCashbackterm: isShowCashbackterm
                        })));
                    }
                };
                var shouldRedirectUnloggedUsersDirectly = function shouldRedirectUnloggedUsersDirectly(md, advertCrewModale) {
                    var isBuyerApp = md.isEmbeddedInBuyerApp;
                    return !isBuyerApp && advertCrewModale.instantRedirectDesktopActive;
                };
                var containers = /*#__PURE__*/ Object.freeze({
                    __proto__: null,
                    CrewPartnerModalContainer: crew_partner_modal_esm_CrewPartnerModalContainer
                });
                var initialState = {
                    showPopin: false,
                    isReady: false,
                    loading: false,
                    partnerName: null,
                    promotionId: null,
                    partnerData: null,
                    error: null,
                    step: null,
                    isAdblockActive: false,
                    userData: null,
                    loadedData: null,
                    promotionData: null
                };

                function crew_partner_modal_esm_reducer(state, action) {
                    if (state === void 0) {
                        state = initialState;
                    }
                    switch (action.type) {
                        case actionTypes.SHOW_CREW_PARTNER_MODAL:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                showPopin: true,
                                partnerName: formatPartnerName(action.payload.partner),
                                promotionId: action.payload.promotionId,
                                step: action.payload.step,
                                loadedData: action.payload.loadedData
                            });
                        case actionTypes.INIT_CREW_PARTNER_MODAL:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                isReady: true
                            });
                        case actionTypes.FETCH_CREW_PARTNER_DATA_REQUEST:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                loading: true,
                                error: false,
                                partnerData: null
                            });
                        case actionTypes.FETCH_CREW_PARTNER_DATA_SUCCESS:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                loading: false,
                                error: false,
                                partnerData: action.payload
                            });
                        case actionTypes.FETCH_CREW_PARTNER_DATA_FAILURE:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                loading: false,
                                error: true,
                                partnerData: null
                            });
                        case actionTypes.FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_REQUEST:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                loading: true,
                                error: false,
                                partnerData: null,
                                promotionData: null
                            });
                        case actionTypes.FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_SUCCESS:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                loading: false,
                                error: false,
                                partnerData: action.payload.partnerData,
                                promotionData: action.payload.promotionData
                            });
                        case actionTypes.FETCH_CREW_PARTNER_AND_CODE_PROMO_DATA_FAILURE:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                loading: false,
                                error: true,
                                partnerData: null,
                                promotionData: null
                            });
                        case actionTypes.SHOW_EXTENSION_MODAL:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                step: STEPS.EXTENSION_MODAL
                            });
                        case actionTypes.SHOW_PARTNER_SUCCESS_MODAL:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                step: STEPS.PARTNER_SUCCESS_MODAL
                            });
                        case actionTypes.SHOW_PARTNER_SUCCESS_MODAL_FINAL:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                step: STEPS.PARTNER_SUCCESS_MODAL_FINAL
                            });
                        case actionTypes.INIT_ADBLOCK_DETECTION:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                isAdblockActive: action.payload
                            });
                        case actionTypes.CLEAR_PARTNER_DATA:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                partnerName: null,
                                promotionId: null,
                                partnerData: null,
                                promotionData: null,
                                loadedData: null
                            });
                        case actionTypes.FETCH_USER_DATA_REQUEST:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                loading: true,
                                error: false,
                                userData: null
                            });
                        case actionTypes.FETCH_USER_DATA_SUCCESS:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                loading: false,
                                error: false,
                                userData: action.payload
                            });
                        case actionTypes.FETCH_USER_DATA_FAILURE:
                            return Object(tslib_es6["a" /* __assign */ ])(Object(tslib_es6["a" /* __assign */ ])({}, state), {
                                loading: false,
                                error: true,
                                userData: null
                            });
                        default:
                            return state;
                    }
                }
                var logger = Object(logger_browser["getLogger"])('crewPartnerModal');
                /* eslint-disable @typescript-eslint/explicit-module-boundary-types */
                var initialAction = function initialAction(watchContext) {
                    return function() {
                        if (watchContext) {
                            logger.debug('initialAction triggered');
                        }
                    };
                };
                var crewPartnerModalModule = {
                    containers: containers,
                    actions: actions,
                    constants: constants,
                    reducer: crew_partner_modal_esm_reducer,
                    initalAction: initialAction,
                    actionTypes: actionTypes
                };


                /***/
            }),

        /***/
        350:
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* unused harmony export ClassNames */
                /* unused harmony export Global */
                /* unused harmony export createElement */
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return css;
                });
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "b", function() {
                    return jsx;
                });
                /* unused harmony export keyframes */
                /* harmony import */
                var _emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1675);
                /* harmony import */
                var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
                /* harmony import */
                var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
                /* harmony import */
                var _emotion_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(401);
                /* harmony import */
                var _emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(742);
                /* harmony import */
                var _emotion_serialize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(583);
                /* harmony import */
                var _emotion_cache__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(548);
                /* harmony import */
                var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(453);
                /* harmony import */
                var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __webpack_require__.n(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6__);
                /* harmony import */
                var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(335);
                /* harmony import */
                var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(142);
                /* harmony import */
                var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/ __webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_8__);












                var jsx
                /*: typeof React.createElement */
                = function jsx
                /*: typeof React.createElement */
                (type
                    /*: React.ElementType */
                    , props
                    /*: Object */
                ) {
                    var args = arguments;

                    if (props == null || !_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* h */ "e"].call(props, 'css')) {
                        return react__WEBPACK_IMPORTED_MODULE_1__["createElement"].apply(undefined, args);
                    }

                    var argsLength = args.length;
                    var createElementArgArray = new Array(argsLength);
                    createElementArgArray[0] = _emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* E */ "a"];
                    createElementArgArray[1] = Object(_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* c */ "d"])(type, props);

                    for (var i = 2; i < argsLength; i++) {
                        createElementArgArray[i] = args[i];
                    }

                    return react__WEBPACK_IMPORTED_MODULE_1__["createElement"].apply(null, createElementArgArray);
                };

                // initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
                // initial client-side render from SSR, use place of hydrating tag

                var Global
                /*: React.AbstractComponent<
                GlobalProps
                > */
                = /* #__PURE__ */ Object(_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* w */ "g"])(function(props
                    /*: GlobalProps */
                    , cache) {

                    var styles = props.styles;
                    var serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__[ /* serializeStyles */ "a"])([styles], undefined, react__WEBPACK_IMPORTED_MODULE_1__["useContext"](_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* T */ "b"]));

                    if (!_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* i */ "f"]) {
                        var _ref;

                        var serializedNames = serialized.name;
                        var serializedStyles = serialized.styles;
                        var next = serialized.next;

                        while (next !== undefined) {
                            serializedNames += ' ' + next.name;
                            serializedStyles += next.styles;
                            next = next.next;
                        }

                        var shouldCache = cache.compat === true;
                        var rules = cache.insert("", {
                            name: serializedNames,
                            styles: serializedStyles
                        }, cache.sheet, shouldCache);

                        if (shouldCache) {
                            return null;
                        }

                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__["createElement"]("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
                            __html: rules
                        }, _ref.nonce = cache.sheet.nonce, _ref));
                    } // yes, i know these hooks are used conditionally
                    // but it is based on a constant that will never change at runtime
                    // it's effectively like having two implementations and switching them out
                    // so it's not actually breaking anything


                    var sheetRef = react__WEBPACK_IMPORTED_MODULE_1__["useRef"]();
                    Object(_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_3__[ /* useInsertionEffectWithLayoutFallback */ "b"])(function() {
                        var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

                        var sheet = new cache.sheet.constructor({
                            key: key,
                            nonce: cache.sheet.nonce,
                            container: cache.sheet.container,
                            speedy: cache.sheet.isSpeedy
                        });
                        var rehydrating = false;
                        var node
                        /*: HTMLStyleElement | null*/
                        = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

                        if (cache.sheet.tags.length) {
                            sheet.before = cache.sheet.tags[0];
                        }

                        if (node !== null) {
                            rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

                            node.setAttribute('data-emotion', key);
                            sheet.hydrate([node]);
                        }

                        sheetRef.current = [sheet, rehydrating];
                        return function() {
                            sheet.flush();
                        };
                    }, [cache]);
                    Object(_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_3__[ /* useInsertionEffectWithLayoutFallback */ "b"])(function() {
                        var sheetRefCurrent = sheetRef.current;
                        var sheet = sheetRefCurrent[0],
                            rehydrating = sheetRefCurrent[1];

                        if (rehydrating) {
                            sheetRefCurrent[1] = false;
                            return;
                        }

                        if (serialized.next !== undefined) {
                            // insert keyframes
                            Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_2__[ /* insertStyles */ "b"])(cache, serialized.next, true);
                        }

                        if (sheet.tags.length) {
                            // if this doesn't exist then it will be null so the style element will be appended
                            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
                            sheet.before = element;
                            sheet.flush();
                        }

                        cache.insert("", serialized, sheet, false);
                    }, [cache, serialized.name]);
                    return null;
                });

                /* import type { Interpolation, SerializedStyles } from '@emotion/utils' */

                function css()
                /*: SerializedStyles */
                {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__[ /* serializeStyles */ "a"])(args);
                }

                /*
                type Keyframes = {|
                  name: string,
                  styles: string,
                  anim: 1,
                  toString: () => string
                |} & string
                */

                var keyframes = function
                /*: Keyframes */
                keyframes() {
                    var insertable = css.apply(void 0, arguments);
                    var name = "animation-" + insertable.name;
                    return {
                        name: name,
                        styles: "@keyframes " + name + "{" + insertable.styles + "}",
                        anim: 1,
                        toString: function toString() {
                            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
                        }
                    };
                };

                /*
                type ClassNameArg =
                  | string
                  | boolean
                  | { [key: string]: boolean }
                  | Array<ClassNameArg>
                  | null
                  | void
                */

                var classnames = function
                /*: string */
                classnames(args
                    /*: Array<ClassNameArg> */
                ) {
                    var len = args.length;
                    var i = 0;
                    var cls = '';

                    for (; i < len; i++) {
                        var arg = args[i];
                        if (arg == null) continue;
                        var toAdd = void 0;

                        switch (typeof arg) {
                            case 'boolean':
                                break;

                            case 'object':
                                {
                                    if (Array.isArray(arg)) {
                                        toAdd = classnames(arg);
                                    } else {

                                        toAdd = '';

                                        for (var k in arg) {
                                            if (arg[k] && k) {
                                                toAdd && (toAdd += ' ');
                                                toAdd += k;
                                            }
                                        }
                                    }

                                    break;
                                }

                            default:
                                {
                                    toAdd = arg;
                                }
                        }

                        if (toAdd) {
                            cls && (cls += ' ');
                            cls += toAdd;
                        }
                    }

                    return cls;
                };

                function merge(registered
                    /*: Object */
                    , css
                    /*: (...args: Array<any>) => string */
                    , className
                    /*: string */
                ) {
                    var registeredStyles = [];
                    var rawClassName = Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_2__[ /* getRegisteredStyles */ "a"])(registered, registeredStyles, className);

                    if (registeredStyles.length < 2) {
                        return className;
                    }

                    return rawClassName + css(registeredStyles);
                }

                var Insertion = function Insertion(_ref) {
                    var cache = _ref.cache,
                        serializedArr = _ref.serializedArr;
                    var rules = Object(_emotion_use_insertion_effect_with_fallbacks__WEBPACK_IMPORTED_MODULE_3__[ /* useInsertionEffectAlwaysWithSyncFallback */ "a"])(function() {
                        var rules = '';

                        for (var i = 0; i < serializedArr.length; i++) {
                            var res = Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_2__[ /* insertStyles */ "b"])(cache, serializedArr[i], false);

                            if (!_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* i */ "f"] && res !== undefined) {
                                rules += res;
                            }
                        }

                        if (!_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* i */ "f"]) {
                            return rules;
                        }
                    });

                    if (!_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* i */ "f"] && rules.length !== 0) {
                        var _ref2;

                        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__["createElement"]("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function(serialized) {
                            return serialized.name;
                        }).join(' '), _ref2.dangerouslySetInnerHTML = {
                            __html: rules
                        }, _ref2.nonce = cache.sheet.nonce, _ref2));
                    }

                    return null;
                };
                /*
                type Props = {
                  children: ({
                    css: (...args: any) => string,
                    cx: (...args: Array<ClassNameArg>) => string,
                    theme: Object
                  }) => React.Node
                } */


                var ClassNames
                /*: React.AbstractComponent<Props>*/
                = /* #__PURE__ */ Object(_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* w */ "g"])(function(props, cache) {
                    var hasRendered = false;
                    var serializedArr = [];

                    var css = function css() {
                        if (hasRendered && _emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* a */ "c"]) {
                            throw new Error('css can only be used during render');
                        }

                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }

                        var serialized = Object(_emotion_serialize__WEBPACK_IMPORTED_MODULE_4__[ /* serializeStyles */ "a"])(args, cache.registered);
                        serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`

                        Object(_emotion_utils__WEBPACK_IMPORTED_MODULE_2__[ /* registerStyles */ "c"])(cache, serialized, false);
                        return cache.key + "-" + serialized.name;
                    };

                    var cx = function cx() {
                        if (hasRendered && _emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* a */ "c"]) {
                            throw new Error('cx can only be used during render');
                        }

                        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            args[_key2] = arguments[_key2];
                        }

                        return merge(cache.registered, css, classnames(args));
                    };

                    var content = {
                        css: css,
                        cx: cx,
                        theme: react__WEBPACK_IMPORTED_MODULE_1__["useContext"](_emotion_element_b4c8b265_esm_js__WEBPACK_IMPORTED_MODULE_0__[ /* T */ "b"])
                    };
                    var ele = props.children(content);
                    hasRendered = true;
                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__["createElement"](react__WEBPACK_IMPORTED_MODULE_1__["Fragment"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__["createElement"](Insertion, {
                        cache: cache,
                        serializedArr: serializedArr
                    }), ele);
                });




                /***/
            }),

        /***/
        810:
            /***/
            (function(module, __webpack_exports__, __webpack_require__) {

                "use strict";
                /* harmony export (binding) */
                __webpack_require__.d(__webpack_exports__, "a", function() {
                    return deprecatedPropType;
                });

                function deprecatedPropType(validator, reason) {
                    if (true) {
                        return function() {
                            return null;
                        };
                    }

                    return function(props, propName, componentName, location, propFullName) {
                        var componentNameSafe = componentName || '<<anonymous>>';
                        var propFullNameSafe = propFullName || propName;

                        if (typeof props[propName] !== 'undefined') {
                            return new Error("The ".concat(location, " `").concat(propFullNameSafe, "` of ") + "`".concat(componentNameSafe, "` is deprecated. ").concat(reason));
                        }

                        return null;
                    };
                }

                /***/
            })

    }
]);