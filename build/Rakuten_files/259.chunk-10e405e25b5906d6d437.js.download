(window["webpackJsonp_name_iso"] = window["webpackJsonp_name_iso"] || []).push([[259],{

/***/ 1911:
/***/ (function(module, exports, __webpack_require__) {

// extracted by extract-css-chunks-webpack-plugin
module.exports = {"color-0":"var(--color-0)","gray-900":"var(--gray-900)","gray-800":"var(--gray-800)","gray-700":"var(--gray-700)","gray-600":"var(--gray-600)","gray-500":"var(--gray-500)","gray-400":"var(--gray-400)","gray-300":"var(--gray-300)","gray-200":"var(--gray-200)","gray-100":"var(--gray-100)","white":"var(--white)","red-1000":"var(--red-1000)","red-900":"var(--red-900)","red-800":"var(--red-800)","red-700":"var(--red-700)","red-600":"var(--red-600)","red-500":"var(--red-500)","red-400":"var(--red-400)","red-300":"var(--red-300)","red-200":"var(--red-200)","red-100":"var(--red-100)","orange-1000":"var(--orange-1000)","orange-900":"var(--orange-900)","orange-800":"var(--orange-800)","orange-700":"var(--orange-700)","orange-600":"var(--orange-600)","orange-500":"var(--orange-500)","orange-400":"var(--orange-400)","orange-300":"var(--orange-300)","orange-200":"var(--orange-200)","orange-100":"var(--orange-100)","yellow-1000":"var(--yellow-1000)","yellow-900":"var(--yellow-900)","yellow-800":"var(--yellow-800)","yellow-700":"var(--yellow-700)","yellow-600":"var(--yellow-600)","yellow-500":"var(--yellow-500)","yellow-400":"var(--yellow-400)","yellow-300":"var(--yellow-300)","yellow-200":"var(--yellow-200)","yellow-100":"var(--yellow-100)","green-1000":"var(--green-1000)","green-900":"var(--green-900)","green-800":"var(--green-800)","green-700":"var(--green-700)","green-600":"var(--green-600)","green-500":"var(--green-500)","green-400":"var(--green-400)","green-300":"var(--green-300)","green-200":"var(--green-200)","green-100":"var(--green-100)","light-blue-1000":"var(--light-blue-1000)","light-blue-900":"var(--light-blue-900)","light-blue-800":"var(--light-blue-800)","light-blue-700":"var(--light-blue-700)","light-blue-600":"var(--light-blue-600)","light-blue-500":"var(--light-blue-500)","light-blue-400":"var(--light-blue-400)","light-blue-300":"var(--light-blue-300)","light-blue-200":"var(--light-blue-200)","light-blue-100":"var(--light-blue-100)","blue-1000":"var(--blue-1000)","blue-900":"var(--blue-900)","blue-800":"var(--blue-800)","blue-700":"var(--blue-700)","blue-600":"var(--blue-600)","blue-500":"var(--blue-500)","blue-400":"var(--blue-400)","blue-300":"var(--blue-300)","blue-200":"var(--blue-200)","blue-100":"var(--blue-100)","purple-1000":"var(--purple-1000)","purple-900":"var(--purple-900)","purple-800":"var(--purple-800)","purple-700":"var(--purple-700)","purple-600":"var(--purple-600)","purple-500":"var(--purple-500)","purple-400":"var(--purple-400)","purple-300":"var(--purple-300)","purple-200":"var(--purple-200)","purple-100":"var(--purple-100)","pink-1000":"var(--pink-1000)","pink-900":"var(--pink-900)","pink-800":"var(--pink-800)","pink-700":"var(--pink-700)","pink-600":"var(--pink-600)","pink-500":"var(--pink-500)","pink-400":"var(--pink-400)","pink-300":"var(--pink-300)","pink-200":"var(--pink-200)","pink-100":"var(--pink-100)","silver-dark":"var(--silver-dark)","silver-middle":"var(--silver-middle)","silver-light":"var(--silver-light)","silver-lightest":"var(--silver-lightest)","gold-dark":"var(--gold-dark)","gold-middle":"var(--gold-middle)","gold-light":"var(--gold-light)","gold-lightest":"var(--gold-lightest)","platinum-dark":"var(--platinum-dark)","platinum-middle":"var(--platinum-middle)","platinum-light":"var(--platinum-light)","platinum-lightest":"var(--platinum-lightest)","nearWhite":"var(--near-white)","lightGray":"var(--light-gray)","moonGray":"var(--moon-gray)","blue":"var(--blue)","navy":"var(--navy)","purple":"var(--purple)","green":"var(--green)","nearBlack":"var(--near-black)","text":"var(--text)","orange":"var(--orange)","lightRead":"var(--light-red)","red":"var(--red)","darkRed":"var(--dark-red)","iconGray":"var(--icon-gray)","iconActive":"var(--icon-active)","secondHand":"var(--secondHand)","new":"var(--new)","grade3":"var(--grade3)","grade1":"var(--grade1)","lightRed2":"var(--light-red2)","lightGreen":"var(--light-green)","yellow":"var(--yellow)","lightYellow":"var(--light-yellow)","lightBlue":"var(--light-blue)","phone":"var(--phone)","landscape":"var(--landscape)","tablet":"var(--tablet)","desktop":"var(--desktop)","wide":"var(--wide)","max":"var(--max)","containerNotice":"notice-module_containerNotice_6Ac","containerTxt":"notice-module_containerTxt_DzP","titleTxtStyle":"notice-module_titleTxtStyle_xFH","paragraphTxtStyle":"notice-module_paragraphTxtStyle_N-c","containerContinueWithoutConsent":"notice-module_containerContinueWithoutConsent_fDZ","continueWithoutConsentTxtStyle":"notice-module_continueWithoutConsentTxtStyle_bx+","containerArrow":"notice-module_containerArrow_FiI","containerBtn":"notice-module_containerBtn_kvY","btnStyle":"notice-module_btnStyle_Z6z","acceptAndCloseBtnStyle":"notice-module_acceptAndCloseBtnStyle_eqO","preferencesBtnStyle":"notice-module_preferencesBtnStyle_0rs","lnkDidomi":"notice-module_lnkDidomi_Bc1"};

/***/ }),

/***/ 2102:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// NAMESPACE OBJECT: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/containers/index.js
var containers_namespaceObject = {};
__webpack_require__.r(containers_namespaceObject);
__webpack_require__.d(containers_namespaceObject, "DidomiContainer", function() { return didomiContainer; });

// NAMESPACE OBJECT: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/constants.js
var constants_namespaceObject = {};
__webpack_require__.r(constants_namespaceObject);
__webpack_require__.d(constants_namespaceObject, "NAME", function() { return NAME; });
__webpack_require__.d(constants_namespaceObject, "DEFAULT_STATE", function() { return DEFAULT_STATE; });

// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/actions.js
var actions = __webpack_require__(582);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/extends.js
var esm_extends = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/.pnpm/react-redux@7.2.9_react-dom@18.2.0_react@18.3.1/node_modules/react-redux/es/index.js + 24 modules
var es = __webpack_require__(29);

// EXTERNAL MODULE: ./node_modules/.pnpm/@apollo+client@3.9.10_@types+react@18.2.75_graphql@15.8.0_react-dom@17.0.2_react@16.14.0/node_modules/@apollo/client/react/hooks/useQuery.js + 4 modules
var useQuery = __webpack_require__(1798);

// EXTERNAL MODULE: ./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js
var react = __webpack_require__(0);
var react_default = /*#__PURE__*/__webpack_require__.n(react);

// EXTERNAL MODULE: ./node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js
var prop_types = __webpack_require__(4);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);

// CONCATENATED MODULE: ./node_modules/.pnpm/@didomi+react@1.8.6_react@16.14.0/node_modules/@didomi/react/es/index.js



var es_DidomiSDK = function DidomiSDK(_ref) {
  var _ref$apiKey = _ref.apiKey,
      apiKeyProp = _ref$apiKey === undefined ? null : _ref$apiKey,
      _ref$iabVersion = _ref.iabVersion,
      iabVersion = _ref$iabVersion === undefined ? 2 : _ref$iabVersion,
      _ref$noticeId = _ref.noticeId,
      noticeId = _ref$noticeId === undefined ? null : _ref$noticeId,
      _ref$platform = _ref.platform,
      platform = _ref$platform === undefined ? null : _ref$platform,
      _ref$config = _ref.config,
      config = _ref$config === undefined ? {} : _ref$config,
      _ref$gdprAppliesGloba = _ref.gdprAppliesGlobally,
      gdprAppliesGloballyProp = _ref$gdprAppliesGloba === undefined ? true : _ref$gdprAppliesGloba,
      onReady = _ref.onReady,
      onConsentChanged = _ref.onConsentChanged,
      onNoticeShown = _ref.onNoticeShown,
      onNoticeHidden = _ref.onNoticeHidden,
      onNoticeBackdropclick = _ref.onNoticeBackdropclick,
      onNoticeClickAgree = _ref.onNoticeClickAgree,
      onNoticeClickMoreInfo = _ref.onNoticeClickMoreInfo,
      onPreferencesClickAgreeToAll = _ref.onPreferencesClickAgreeToAll,
      onPreferencesClickDisagreeToAll = _ref.onPreferencesClickDisagreeToAll,
      onPreferencesClickPurposeAgree = _ref.onPreferencesClickPurposeAgree,
      onPreferencesClickPurposeDisagree = _ref.onPreferencesClickPurposeDisagree,
      onPreferencesClickViewVendors = _ref.onPreferencesClickViewVendors,
      onPreferencesClickSaveChoices = _ref.onPreferencesClickSaveChoices,
      onPreferencesClickVendorAgree = _ref.onPreferencesClickVendorAgree,
      onPreferencesClickVendorDisagree = _ref.onPreferencesClickVendorDisagree,
      onPreferencesClickVendorSaveChoices = _ref.onPreferencesClickVendorSaveChoices,
      _ref$sdkPath = _ref.sdkPath,
      sdkPath = _ref$sdkPath === undefined ? 'https://sdk.privacy-center.org/' : _ref$sdkPath,
      _ref$embedTCFStub = _ref.embedTCFStub,
      embedTCFStub = _ref$embedTCFStub === undefined ? true : _ref$embedTCFStub;

  /**
   * Set all the Didomi event listeners from the props
   */
  var setEvents = function setEvents() {
    if (onReady) {
      window.didomiOnReady = window.didomiOnReady || [];
      window.didomiOnReady.push(onReady);
    }

    window.didomiEventListeners = window.didomiEventListeners || [];

    if (onConsentChanged) {
      window.didomiEventListeners.push({
        event: 'consent.changed',
        listener: function listener(e) {
          onConsentChanged(e.consentToken);
        }
      });
    }

    if (onNoticeShown) {
      window.didomiEventListeners.push({
        event: 'notice.shown',
        listener: function listener() {
          return onNoticeShown();
        }
      });
    }

    if (onNoticeHidden) {
      window.didomiEventListeners.push({
        event: 'notice.hidden',
        listener: function listener() {
          return onNoticeHidden();
        }
      });
    }

    if (onNoticeBackdropclick) {
      window.didomiEventListeners.push({
        event: 'notice.backdropclick',
        listener: function listener() {
          return onNoticeBackdropclick();
        }
      });
    }

    if (onNoticeClickAgree) {
      window.didomiEventListeners.push({
        event: 'notice.clickagree',
        listener: function listener() {
          return onNoticeClickAgree();
        }
      });
    }

    if (onNoticeClickMoreInfo) {
      window.didomiEventListeners.push({
        event: 'notice.clickmoreinfo',
        listener: function listener() {
          return onNoticeClickMoreInfo();
        }
      });
    }

    if (onPreferencesClickAgreeToAll) {
      window.didomiEventListeners.push({
        event: 'preferences.clickagreetoall',
        listener: function listener() {
          return onPreferencesClickAgreeToAll();
        }
      });
    }

    if (onPreferencesClickDisagreeToAll) {
      window.didomiEventListeners.push({
        event: 'preferences.clickdisagreetoall',
        listener: function listener() {
          return onPreferencesClickDisagreeToAll();
        }
      });
    }

    if (onPreferencesClickPurposeAgree) {
      window.didomiEventListeners.push({
        event: 'preferences.clickpurposeagree',
        listener: function listener() {
          return onPreferencesClickPurposeAgree();
        }
      });
    }

    if (onPreferencesClickPurposeDisagree) {
      window.didomiEventListeners.push({
        event: 'preferences.clickpurposedisagree',
        listener: function listener() {
          return onPreferencesClickPurposeDisagree();
        }
      });
    }

    if (onPreferencesClickViewVendors) {
      window.didomiEventListeners.push({
        event: 'preferences.clickviewvendors',
        listener: function listener() {
          return onPreferencesClickViewVendors();
        }
      });
    }

    if (onPreferencesClickSaveChoices) {
      window.didomiEventListeners.push({
        event: 'preferences.clicksavechoices',
        listener: function listener() {
          return onPreferencesClickSaveChoices();
        }
      });
    }

    if (onPreferencesClickVendorAgree) {
      window.didomiEventListeners.push({
        event: 'preferences.clickvendoragree',
        listener: function listener() {
          return onPreferencesClickVendorAgree();
        }
      });
    }

    if (onPreferencesClickVendorDisagree) {
      window.didomiEventListeners.push({
        event: 'preferences.clickvendordisagree',
        listener: function listener() {
          return onPreferencesClickVendorDisagree();
        }
      });
    }

    if (onPreferencesClickVendorSaveChoices) {
      window.didomiEventListeners.push({
        event: 'preferences.clickvendorsavechoices',
        listener: function listener() {
          return onPreferencesClickVendorSaveChoices();
        }
      });
    }
  };

  /**
   * Get the API Key from the props or from the config if it exists
   */
  var getApiKey = function getApiKey() {
    var apiKey = void 0;
    if (config.app && config.app.apiKey) {
      apiKey = config.app.apiKey;
    }
    return apiKeyProp || apiKey;
  };

  /**
   * Initialize the SDK, set the config object and insert the loader.js into the DOM
   */
  var init = function init() {
    var loaderParams = void 0;
    var apiKey = getApiKey();
    var gdprAppliesGlobally = gdprAppliesGloballyProp === false ? false : true;
    window.didomiConfig = config || {};

    // Set the SDK path
    window.didomiConfig.sdkPath = sdkPath;

    // Embed the Didomi SDK on the page
    window.gdprAppliesGlobally = gdprAppliesGlobally;
    if (noticeId) {
      loaderParams = 'target_type=notice&target=' + noticeId;
      if (platform) {
        loaderParams = 'platform=' + platform + '&' + loaderParams;
      }
    } else {
      loaderParams = 'target=' + document.location.hostname;
    }

    // Embed the TCF stub
    if (embedTCFStub) {
      if (iabVersion === 2) {
        // TCF v2
        // prettier-ignore
        (function () {
          function a(e) {
            if (!window.frames[e]) {
              if (document.body && document.body.firstChild) {
                var t = document.body;var n = document.createElement("iframe");n.style.display = "none";n.name = e;n.title = e;t.insertBefore(n, t.firstChild);
              } else {
                setTimeout(function () {
                  a(e);
                }, 5);
              }
            }
          }function e(n, r, o, c, s) {
            function e(e, t, n, a) {
              if (typeof n !== "function") {
                return;
              }if (!window[r]) {
                window[r] = [];
              }var i = false;if (s) {
                i = s(e, t, n);
              }if (!i) {
                window[r].push({ command: e, parameter: t, callback: n, version: a });
              }
            }e.stub = true;function t(a) {
              if (!window[n] || window[n].stub !== true) {
                return;
              }if (!a.data) {
                return;
              }var i = typeof a.data === "string";var e;try {
                e = i ? JSON.parse(a.data) : a.data;
              } catch (t) {
                return;
              }if (e[o]) {
                var r = e[o];window[n](r.command, r.parameter, function (e, t) {
                  var n = {};n[c] = { returnValue: e, success: t, callId: r.callId };a.source.postMessage(i ? JSON.stringify(n) : n, "*");
                }, r.version);
              }
            }if (typeof window[n] !== "function") {
              window[n] = e;if (window.addEventListener) {
                window.addEventListener("message", t, false);
              } else {
                window.attachEvent("onmessage", t);
              }
            }
          }e("__tcfapi", "__tcfapiBuffer", "__tcfapiCall", "__tcfapiReturn");a("__tcfapiLocator");
        })();
      } else {
        // TCF v1
        // prettier-ignore
        (function () {
          function r() {
            if (!window.frames.__cmpLocator) {
              if (document.body && document.body.firstChild) {
                var e = document.body;var t = document.createElement("iframe");t.style.display = "none";t.name = "__cmpLocator";t.title = "cmpLocator";e.insertBefore(t, e.firstChild);
              } else {
                setTimeout(r, 5);
              }
            }
          }function e(e, t, r) {
            if (typeof r !== "function") {
              return;
            }if (!window.__cmpBuffer) {
              window.__cmpBuffer = [];
            }if (e === "ping") {
              r({ gdprAppliesGlobally: window.gdprAppliesGlobally, cmpLoaded: false }, true);
            } else {
              window.__cmpBuffer.push({ command: e, parameter: t, callback: r });
            }
          }e.stub = true;function t(a) {
            if (!window.__cmp || window.__cmp.stub !== true) {
              return;
            }if (!a.data) {
              return;
            }var n = typeof a.data === "string";var e;try {
              e = n ? JSON.parse(a.data) : a.data;
            } catch (t) {
              return;
            }if (e.__cmpCall) {
              var o = e.__cmpCall;window.__cmp(o.command, o.parameter, function (e, t) {
                var r = { __cmpReturn: { returnValue: e, success: t, callId: o.callId } };a.source.postMessage(n ? JSON.stringify(r) : r, "*");
              });
            }
          }if (typeof window.__cmp !== "function") {
            window.__cmp = e;if (window.addEventListener) {
              window.addEventListener("message", t, false);
            } else {
              window.attachEvent("onmessage", t);
            }
          }r();
        })();
      }
    }

    var spcloaderId = 'spcloader';
    var spcloaderScript = document.getElementById(spcloaderId);

    // Didomi is already loaded, no need to add the script again
    if (spcloaderScript) {
      return null;
    }

    // Embed the SDK
    var loaderScript = document.createElement('script');
    loaderScript.id = spcloaderId;
    loaderScript.type = 'text/javascript';
    loaderScript.async = true;
    loaderScript.src = sdkPath + apiKey + '/loader.js?' + loaderParams;
    loaderScript.charset = 'utf-8';

    var firstScriptTagInDocument = document.getElementsByTagName('script')[0];
    firstScriptTagInDocument.parentNode.insertBefore(loaderScript, firstScriptTagInDocument);
  };

  react_default.a.useEffect(function () {
    setEvents();
    init();
  }, []);

  return null;
};

es_DidomiSDK.propTypes = {
  apiKey: prop_types_default.a.string,
  iabVersion: prop_types_default.a.number,
  noticeId: prop_types_default.a.string,
  platform: prop_types_default.a.string,
  config: prop_types_default.a.object,
  gdprAppliesGlobally: prop_types_default.a.bool,
  onReady: prop_types_default.a.func,
  onConsentChanged: prop_types_default.a.func,
  onNoticeShown: prop_types_default.a.func,
  onNoticeHidden: prop_types_default.a.func,
  onNoticeBackdropclick: prop_types_default.a.func,
  onNoticeClickAgree: prop_types_default.a.func,
  onNoticeClickMoreInfo: prop_types_default.a.func,
  onPreferencesClickAgreeToAll: prop_types_default.a.func,
  onPreferencesClickDisagreeToAll: prop_types_default.a.func,
  onPreferencesClickPurposeAgree: prop_types_default.a.func,
  onPreferencesClickPurposeDisagree: prop_types_default.a.func,
  onPreferencesClickViewVendors: prop_types_default.a.func,
  onPreferencesClickSaveChoices: prop_types_default.a.func,
  onPreferencesClickVendorAgree: prop_types_default.a.func,
  onPreferencesClickVendorDisagree: prop_types_default.a.func,
  onPreferencesClickVendorSaveChoices: prop_types_default.a.func,
  sdkPath: prop_types_default.a.string,
  embedTCFStub: prop_types_default.a.bool
};


// EXTERNAL MODULE: ./node_modules/.pnpm/debug@3.1.0/node_modules/debug/src/browser.js
var browser = __webpack_require__(44);
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);

// EXTERNAL MODULE: ./node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/index.js
var node_modules_prop_types = __webpack_require__(10);
var node_modules_prop_types_default = /*#__PURE__*/__webpack_require__.n(node_modules_prop_types);

// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/Didomi/didomiProptypes.js

var didomiProptypes = {
  partnersActivationConfig: node_modules_prop_types_default.a.shape({
    partners_all: node_modules_prop_types_default.a.string,
    partners_tracking: node_modules_prop_types_default.a.string,
    partners_monet: node_modules_prop_types_default.a.string,
    partners_contentSquare: node_modules_prop_types_default.a.string,
    partners_gtm: node_modules_prop_types_default.a.string,
    partners_kameleoon: node_modules_prop_types_default.a.string,
    partners_xiti: node_modules_prop_types_default.a.string,
    partners_dfp: node_modules_prop_types_default.a.string,
    partners_criteo: node_modules_prop_types_default.a.string
  }),
  isReady: node_modules_prop_types_default.a.func.isRequired,
  initDfp: node_modules_prop_types_default.a.func.isRequired,
  initCriteo: node_modules_prop_types_default.a.func.isRequired,
  initKML: node_modules_prop_types_default.a.func.isRequired,
  loadContentSquare: node_modules_prop_types_default.a.func.isRequired,
  sendContentSquareTags: node_modules_prop_types_default.a.func.isRequired,
  refreshGtmTags: node_modules_prop_types_default.a.func.isRequired,
  initialSendGtmTags: node_modules_prop_types_default.a.func.isRequired,
  sendXitiTag: node_modules_prop_types_default.a.func.isRequired,
  immediateSendTags: node_modules_prop_types_default.a.bool.isRequired,
  eventControlledGTMSendTags: node_modules_prop_types_default.a.bool.isRequired,
  didomiReady: node_modules_prop_types_default.a.bool.isRequired,
  monetizationReady: node_modules_prop_types_default.a.bool.isRequired,
  partnerReady: node_modules_prop_types_default.a.bool.isRequired,
  partnerInitalAction: node_modules_prop_types_default.a.func.isRequired,
  currentUrl: node_modules_prop_types_default.a.string,
  loadMonetizationPersonalizeSuccess: node_modules_prop_types_default.a.func.isRequired,
  pushUserInfoToDataLayer: node_modules_prop_types_default.a.func.isRequired,
  personalized: node_modules_prop_types_default.a.shape({
    clubSubscriptionStatus: node_modules_prop_types_default.a.shape({
      status: node_modules_prop_types_default.a.string
    })
  })
};
var didomiDefaultProptypes = {
  partnersActivationConfig: {
    partners_all: 'on',
    partners_tracking: 'on',
    partners_monet: 'on',
    partners_contentSquare: 'on',
    partners_gtm: 'on',
    partners_kameleoon: 'on',
    partners_xiti: 'on',
    partners_dfp: 'on',
    partners_criteo: 'on'
  },
  personalized: null,
  noticeId: '',
  currentUrl: ''
};
// EXTERNAL MODULE: ./node_modules/.pnpm/react-dom@18.2.0_react@18.3.1/node_modules/react-dom/index.js
var react_dom = __webpack_require__(46);

// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/Didomi/notice.module.css
var notice_module = __webpack_require__(1911);
var notice_module_default = /*#__PURE__*/__webpack_require__.n(notice_module);

// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/svg/utils/rightArrow.js
var rightArrow = __webpack_require__(405);

// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/Didomi/noticeHTML.js
var __jsx = react_default.a.createElement;




/**
 * notice consent didomi
 * @returns {*}
 * @constructor
 */
function NoticeHTML() {
  var openPreferences = function openPreferences(event) {
    if (!event.key || event.key && event.key === 'enter') {
      window.Didomi.preferences.show();
    }
  };
  var acceptAll = function acceptAll(event) {
    if (!event.key || event.key && event.key === 'enter') {
      window.Didomi.setUserAgreeToAll();
    }
  };
  var openVendors = function openVendors(event) {
    if (!event.key || event.key && event.key === 'enter') {
      window.Didomi.preferences.show('vendors');
    }
  };
  var refuseAll = function refuseAll(event) {
    if (!event.key || event.key && event.key === 'enter') {
      window.Didomi.setUserDisagreeToAll();
    }
  };
  return __jsx("div", {
    className: notice_module_default.a.containerNotice
  }, __jsx("div", {
    className: notice_module_default.a.containerTxt
  }, __jsx("span", {
    className: notice_module_default.a.titleTxtStyle
  }, "Vos pr\xE9f\xE9rences en mati\xE8re de cookies"), __jsx("div", {
    onClick: refuseAll,
    className: notice_module_default.a.containerContinueWithoutConsent
  }, __jsx("span", {
    className: notice_module_default.a.continueWithoutConsentTxtStyle
  }, "Continuer sans accepter"), __jsx("span", {
    className: notice_module_default.a.containerArrow
  }, __jsx(rightArrow["a" /* default */], {
    fill: "black",
    width: "12px",
    height: "12px"
  }))), __jsx("p", {
    className: notice_module_default.a.paragraphTxtStyle
  }, "Rakuten France et ses", ' ', __jsx("span", {
    className: notice_module_default.a.lnkDidomi,
    onClick: openVendors
  }, "partenaires"), ' ', "traitent vos donn\xE9es personnelles", ' ', "(telles que les donn\xE9es de navigation, les donn\xE9es de", ' ', "transaction, les informations issues des cookies et d'autres identifiants uniques) en stockant et en acc\xE9dant aux informations sur", "votre terminal, en analysant activement les caract\xE9ristiques de celui-ci afin de vous identifier et en utilisant vos donn\xE9es de g\xE9olocalisation pr\xE9cises pour vous proposer des annonces et des contenus personnalis\xE9s, mesurer la performance des annonces et des contenus affich\xE9s, conna\xEEtre leur audience et d\xE9velopper leurs produits. Vous pouvez retirer votre consentement \xE0 tout moment depuis la rubrique \xAB Gestion des cookies \xBB.")), __jsx("div", {
    className: notice_module_default.a.containerBtn
  }, __jsx("div", {
    onClick: acceptAll,
    className: "didomi_accept_button ".concat(notice_module_default.a.btnStyle, " ").concat(notice_module_default.a.acceptAndCloseBtnStyle, " "),
    onKeyPress: acceptAll
  }, __jsx("span", null, "Accepter et fermer")), __jsx("div", {
    onClick: openPreferences,
    className: " ".concat(notice_module_default.a.btnStyle, " ").concat(notice_module_default.a.preferencesBtnStyle, " "),
    onKeyPress: openPreferences
  }, __jsx("span", null, "Param\xE9trer"))));
}
/* harmony default export */ var noticeHTML = (NoticeHTML);
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/Didomi/didomiConfig.js
var didomiConfig_jsx = react_default.a.createElement;



var didomiConfig = {
  notice: {
    content: {
      html: {
        en: function en(element) {
          Object(react_dom["render"])(didomiConfig_jsx(noticeHTML, {
            shouldDisplayMoreText: true
          }), element);
        }
      }
    }
  }
};
var apiKey = 'cf68c9f5-2900-4a80-a413-8347d137161a';
var didomiConfig_iabVersion = 2;
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/Didomi/didomi.js
var didomi_jsx = react_default.a.createElement;





var debug = browser_default()('canopy:didomi');
function Didomi(_ref) {
  var partnersActivationConfig = _ref.partnersActivationConfig,
    isReady = _ref.isReady,
    initDfp = _ref.initDfp,
    initKML = _ref.initKML,
    loadContentSquare = _ref.loadContentSquare,
    sendContentSquareTags = _ref.sendContentSquareTags,
    refreshGtmTags = _ref.refreshGtmTags,
    initialSendGtmTags = _ref.initialSendGtmTags,
    initCriteo = _ref.initCriteo,
    immediateSendTags = _ref.immediateSendTags,
    monetizationReady = _ref.monetizationReady,
    partnerReady = _ref.partnerReady,
    usedGtmToSendPartner = _ref.usedGtmToSendPartner,
    partnerInitalAction = _ref.partnerInitalAction,
    eventControlledGTMSendTags = _ref.eventControlledGTMSendTags,
    didomiReady = _ref.didomiReady,
    currentUrl = _ref.currentUrl,
    sendXitiTag = _ref.sendXitiTag,
    loadXiti = _ref.loadXiti,
    loadMonetizationPersonalizeSuccess = _ref.loadMonetizationPersonalizeSuccess,
    personalized = _ref.personalized,
    pushUserInfoToDataLayer = _ref.pushUserInfoToDataLayer,
    didomiNoticeId = _ref.didomiNoticeId;
  var didomi;
  Object(react["useEffect"])(function () {
    if (personalized && personalized.clubSubscriptionStatus) {
      debug('Didomi loadMonetizationPersonalizeSuccess', personalized.clubSubscriptionStatus.status);
      loadMonetizationPersonalizeSuccess(personalized.clubSubscriptionStatus.status); // will set monetizationReady
    }
  }, [personalized]);

  // only call dft when Didomi is ready and monetizationReady is true also
  var _useState = Object(react["useState"])(false),
    souldCallInitDfp = _useState[0],
    setSouldCallInitDfp = _useState[1];
  Object(react["useEffect"])(function () {
    debug('Didomi initDfp ', {
      souldCallInitDfp: souldCallInitDfp,
      monetizationReady: monetizationReady
    });
    if (souldCallInitDfp && monetizationReady) {
      initDfp();
    }
  }, [souldCallInitDfp, monetizationReady]);

  // only call initCrito when Didomi is ready and monetizationReady is true also
  var _useState2 = Object(react["useState"])(false),
    souldCallInitCriteo = _useState2[0],
    setSouldCallInitCriteo = _useState2[1];
  Object(react["useEffect"])(function () {
    debug('Didomi initCriteo ', {
      souldCallInitCriteo: souldCallInitCriteo,
      monetizationReady: monetizationReady
    });
    if (souldCallInitCriteo && monetizationReady) {
      initCriteo();
    }
  }, [souldCallInitCriteo, monetizationReady]);
  Object(react["useEffect"])(function () {
    if (!partnerReady) {
      debug('Didomi call partnerInitalAction');
      if (!usedGtmToSendPartner) {
        partnerInitalAction(); // will load parter data and set partnerReady
      }
    } else {
      debug('Didomi call pushUserInfoToDataLayer');
      pushUserInfoToDataLayer();
    }
  }, [partnerReady]);

  // only call initKML when Didomi is ready and partnerReady is true also
  var _useState3 = Object(react["useState"])(false),
    souldCallInitKML = _useState3[0],
    setSouldCallInitKML = _useState3[1];
  Object(react["useEffect"])(function () {
    debug('Didomi initKML ', {
      souldCallInitKML: souldCallInitKML,
      partnerReady: partnerReady
    });
    if (souldCallInitKML && partnerReady) {
      initKML();
    }
  }, [souldCallInitKML, partnerReady]);

  // only call initialSendGtmTags when Didomi is ready and partnerReady is true also
  var _useState4 = Object(react["useState"])(false),
    souldCallInitSendGtmTags = _useState4[0],
    setSouldCallInitSendGtmTags = _useState4[1];
  Object(react["useEffect"])(function () {
    debug('Didomi initialSendGtmTags ', {
      souldCallInitSendGtmTags: souldCallInitSendGtmTags,
      partnerReady: partnerReady
    });
    if (souldCallInitSendGtmTags && partnerReady) {
      initialSendGtmTags();
    }
  }, [souldCallInitSendGtmTags, partnerReady]);

  // only call loadContentSquare when Didomi is ready and partnerReady is true also
  var _useState5 = Object(react["useState"])(false),
    souldCallLoadContenSquare = _useState5[0],
    setSouldCallLoadContenSquare = _useState5[1];
  Object(react["useEffect"])(function () {
    debug('Didomi loadContentSquare', {
      souldCallLoadContenSquare: souldCallLoadContenSquare,
      partnerReady: partnerReady
    });
    if (souldCallLoadContenSquare && partnerReady) {
      loadContentSquare();
    }
  }, [souldCallLoadContenSquare, partnerReady]);
  var _useState6 = Object(react["useState"])(false),
    shouldCallLoadXiti = _useState6[0],
    setShouldCallLoadXiti = _useState6[1];
  Object(react["useEffect"])(function () {
    debug('Didomi load Xiti', {
      setShouldCallLoadXiti: setShouldCallLoadXiti,
      partnerReady: partnerReady
    });
    if (shouldCallLoadXiti && partnerReady) {
      loadXiti();
    }
  }, [shouldCallLoadXiti, partnerReady]);

  // on inital render add event listener
  Object(react["useEffect"])(function () {
    window.didomiEventListeners = window.didomiEventListeners || [];
    window.didomiEventListeners.push({
      event: 'integrations.consentpassedtodfp',
      listener: function listener(data) {
        if (data.index === 0) {
          // This is the very first event on the page that gets triggered on page load
          if (data.consentStatus === undefined) {
            if (partnersActivationConfig.partners_monet === 'on') {
              // initDfp();
              setSouldCallInitDfp(true);
            }
          }
        }
      }
    });
  }, []);
  Object(react["useEffect"])(function () {
    debug('Didomi SendPageTag ', {
      didomiReady: didomiReady,
      immediateSendTags: immediateSendTags
    });
    if (didomiReady && immediateSendTags) {
      if (partnersActivationConfig.partners_tracking === 'on') {
        window.Didomi.getObservableOnUserConsentStatusForVendor('c:contentsquare').subscribe(function (consentStatus) {
          if (consentStatus) {
            sendContentSquareTags(currentUrl);
          }
        });
        if (partnersActivationConfig.partners_xiti === 'on') {
          sendXitiTag();
        }
      }
    }
  }, [didomiReady, immediateSendTags]);
  var handleIsReady = function handleIsReady() {
    debug('handleIsReady');
    didomi = window.Didomi;
    // set isReady flag in didomi redux store
    isReady();

    // check if consent was already given - we don't wait on didomi transferring consent to google
    // DFP - it will either load personalized or non personalized depending on consent shared with google
    if (partnersActivationConfig.partners_all === 'on') {
      if (partnersActivationConfig.partners_monet === 'on') {
        if (partnersActivationConfig.partners_criteo === 'on') {
          didomi.getObservableOnUserConsentStatusForVendor('91').subscribe(function (consentStatus) {
            if (consentStatus) {
              setSouldCallInitCriteo(true);
            }
          });
        }
        if (partnersActivationConfig.partners_dfp === 'on') {
          if (didomi.getUserConsentStatusForVendor('google')) {
            setSouldCallInitDfp(true);
          }
          didomi.getObservableOnUserConsentStatusForVendor('google').subscribe(function (consentStatus) {
            if (consentStatus) {
              window.googletag = window.googletag || {};
              window.googletag.cmd = window.googletag.cmd || [];
              window.googletag.cmd.push(function () {
                window.googletag.pubads().refresh();
              });
            }
          });
        }
      }
      if (partnersActivationConfig.partners_tracking === 'on') {
        if (partnersActivationConfig.partners_kameleoon === 'on') {
          setSouldCallInitKML(true);
        }
        if (partnersActivationConfig.partners_xiti === 'on') {
          setShouldCallLoadXiti(true);
        }
        if (partnersActivationConfig.partners_gtm === 'on') {
          if (!eventControlledGTMSendTags) {
            setSouldCallInitSendGtmTags(true);
          }
        }
        if (partnersActivationConfig.partners_contentSquare === 'on') {
          window.Didomi.getObservableOnUserConsentStatusForVendor('c:contentsquare').subscribe(function (consentStatus) {
            if (consentStatus) {
              setSouldCallLoadContenSquare(true);
            }
          });
        }
      }
    }
  };
  var handleConsentChange = function handleConsentChange() {
    didomi = window.Didomi;
    // on consentChange in order to allow gtm to check consent change we need to re-send the tags
    if (!eventControlledGTMSendTags) {
      refreshGtmTags();
    }
  };
  if (partnerReady || usedGtmToSendPartner) {
    return didomi_jsx("div", null, didomi_jsx(es_DidomiSDK, {
      apiKey: apiKey,
      iabVersion: didomiConfig_iabVersion,
      noticeId: didomiNoticeId,
      config: didomiConfig,
      onReady: handleIsReady,
      onConsentChanged: handleConsentChange
    }));
  }
  return null;
}
Didomi.defaultProps = didomiDefaultProptypes;
/* harmony default export */ var Didomi_didomi = (Didomi);
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/components/Didomi/index.js

/* harmony default export */ var components_Didomi = (Didomi_didomi);
// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/monetization/actions.js
var monetization_actions = __webpack_require__(210);

// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js
var taggedTemplateLiteral = __webpack_require__(106);

// EXTERNAL MODULE: ./node_modules/.pnpm/graphql-tag@2.12.6_graphql@15.8.0/node_modules/graphql-tag/lib/index.js + 13 modules
var lib = __webpack_require__(76);

// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/monetization/graphql/Query.js

var _templateObject;

var METADATA_FRAGMENT_CLUBSUBSCRIPTIONSTATUS = Object(lib["a" /* default */])(_templateObject || (_templateObject = Object(taggedTemplateLiteral["a" /* default */])(["\n  fragment MonetizationClubSubscriptionStatus on ClubSubscriptionStatus {\n    status\n  }\n"])));

// export const METADATA_QUERY_PERSONALIZED = gql`query monetizationInital {
//   clubSubscriptionStatus {
//     ...MonetizationInital
//   }
// }
// ${METADATA_FRAGMENT_CLUBSUBSCRIPTIONSTATUS.clubSubscriptionStatus}
// `;
// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/monetization/constants.js
var constants = __webpack_require__(404);

// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/partners/actions.js
var partners_actions = __webpack_require__(112);

// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/partners/initialAction.js
var initialAction = __webpack_require__(689);

// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/partners/actionTypes.js
var actionTypes = __webpack_require__(36);

// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/containers/didomiContainer.js

var didomiContainer_jsx = react_default.a.createElement;











var didomiContainer_mapStateToProps = function mapStateToProps(state) {
  var monetizationReady = false;
  if (state.monetization) {
    // eslint-disable-next-line prefer-destructuring
    monetizationReady = state[constants["NAME"]].monetizationReady;
  }
  var partnerReady = false;
  if (state.partners) {
    // eslint-disable-next-line prefer-destructuring
    partnerReady = state.partners.partnerReady;
  }
  return {
    partnersActivationConfig: state.didomi.partnersActivationConfig,
    immediateSendTags: state.didomi.immediateSendTags,
    eventControlledGTMSendTags: state.didomi.eventControlledGTMSendTags,
    didomiReady: state.didomi.isReady,
    currentUrl: state.didomi.currentUrl,
    isSellerRepo: state.didomi.isSellerRepo,
    didomiNoticeId: state.didomi.didomiNoticeId,
    monetizationReady: monetizationReady,
    partnerReady: partnerReady,
    usedGtmToSendPartner: state.didomi.usedGtmToSendPartner
  };
};

// default behavior for redux
var didomiContainer_mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    isReady: function isReady() {
      return dispatch(Object(actions["isReady"])());
    },
    initKML: function initKML() {
      return dispatch(Object(partners_actions["initKML"])());
    },
    loadContentSquare: function loadContentSquare() {
      return dispatch(Object(partners_actions["loadContentSquare"])());
    },
    sendContentSquareTags: function sendContentSquareTags(currentUrl) {
      return dispatch(Object(partners_actions["sendContentSquareTags"])(currentUrl));
    },
    initDfp: function initDfp() {
      return dispatch(Object(monetization_actions["initDfp"])());
    },
    refreshGtmTags: function refreshGtmTags() {
      return dispatch(Object(partners_actions["sendGtmTags"])(actionTypes["y" /* refreshTypes */]));
    },
    initialSendGtmTags: function initialSendGtmTags() {
      return dispatch(Object(partners_actions["sendGtmTags"])(actionTypes["x" /* initialTypes */]));
    },
    initCriteo: function initCriteo() {
      return dispatch(Object(monetization_actions["initCriteo"])());
    },
    initXitiAndSendPageTag: function initXitiAndSendPageTag() {
      return dispatch(Object(partners_actions["initXitiAndSendPageTag"])());
    },
    loadXiti: function loadXiti() {
      return dispatch(Object(partners_actions["loadXiti"])());
    },
    sendXitiTag: function sendXitiTag() {
      return dispatch(Object(partners_actions["sendXitiPageTag"])());
    },
    loadMonetizationPersonalizeSuccess: function loadMonetizationPersonalizeSuccess() {
      return dispatch(monetization_actions["loadMonetizationPersonalizeSuccess"].apply(void 0, arguments));
    },
    partnerInitalAction: function partnerInitalAction() {
      return dispatch(Object(initialAction["a" /* initalAction */])());
    },
    pushUserInfoToDataLayer: function pushUserInfoToDataLayer() {
      return dispatch(Object(partners_actions["pushUserInfoToDataLayer"])());
    }
  };
};
var didomiContainer_DidomiWithGraphQl = function DidomiWithGraphQl(props) {
  var data;
  var PERSONALIZED_QUERY = props.PERSONALIZED_QUERY,
    PERSONALIZED_QUERY_OPTION = props.PERSONALIZED_QUERY_OPTION;
  if (PERSONALIZED_QUERY) {
    var queryResult = Object(useQuery["a" /* useQuery */])(PERSONALIZED_QUERY, PERSONALIZED_QUERY_OPTION);
    // eslint-disable-next-line prefer-destructuring
    data = queryResult.data;
  }
  return didomiContainer_jsx(components_Didomi, Object(esm_extends["a" /* default */])({}, props, {
    personalized: data
  }));
};
didomiContainer_DidomiWithGraphQl.defaultProps = {
  PERSONALIZED_QUERY: null,
  PERSONALIZED_QUERY_OPTION: {
    ssr: false
  }
};
var ConnectedDidomi = Object(es["c" /* connect */])(didomiContainer_mapStateToProps, didomiContainer_mapDispatchToProps)(didomiContainer_DidomiWithGraphQl);
ConnectedDidomi.personalizedFraments = {
  clubSubscriptionStatus: METADATA_FRAGMENT_CLUBSUBSCRIPTIONSTATUS
};
/* harmony default export */ var didomiContainer = (ConnectedDidomi);
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/containers/index.js


// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/server/services/configService.js
var configService = __webpack_require__(84);
var configService_default = /*#__PURE__*/__webpack_require__.n(configService);

// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/constants.js

var constants_config = configService_default.a.get();
var NAME = 'didomi';
var DEFAULT_STATE = {
  didomiNoticeId: constants_config.featureFlipping.didomiNoticeId,
  isReady: false,
  immediateSendTags: true,
  isSellerRepo: false,
  eventControlledGTMSendTags: false,
  usedGtmToSendPartner: false
};
// EXTERNAL MODULE: ./node_modules/.pnpm/@babel+runtime@7.24.4/node_modules/@babel/runtime/helpers/esm/defineProperty.js
var defineProperty = __webpack_require__(7);

// EXTERNAL MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/actionTypes.js
var didomi_actionTypes = __webpack_require__(285);

// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/reducer/index.js

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { Object(defineProperty["a" /* default */])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }


function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  switch (action.type) {
    case didomi_actionTypes["c" /* IS_READY */]:
      return _objectSpread(_objectSpread({}, state), {}, {
        isReady: true
      });
    case didomi_actionTypes["a" /* DELAY_TAGS */]:
      {
        var newState = _objectSpread(_objectSpread({}, state), {}, {
          immediateSendTags: action.payload && action.payload.immediateSendTags ? action.payload.immediateSendTags : !state.immediateSendTags,
          currentUrl: action.payload ? action.payload : ''
        });
        return newState;
      }
    case didomi_actionTypes["d" /* IS_SELLER_REPO */]:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          isSellerRepo: true
        });
      }
    case didomi_actionTypes["e" /* USE_GTM_TO_SEND_PARTNER */]:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          usedGtmToSendPartner: action.payload
        });
      }
    case didomi_actionTypes["b" /* ENABLE_PARTNERS */]:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          partnersActivationConfig: action.payload
        });
      }
    default:
      return state;
  }
}
/* harmony default export */ var didomi_reducer = (reducer);
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/initialAction.js

var initialAction_initalAction = function initalAction(watchContext, baseUrl, preloadedConfig) {
  return function (dispatch) {
    var promiseall = [];
    if (preloadedConfig && preloadedConfig.Didomi && preloadedConfig.Didomi.partnersEnabled) {
      promiseall.push(dispatch(Object(actions["enablePartners"])(preloadedConfig.Didomi.partnersEnabled)));
    }
    if (preloadedConfig && preloadedConfig.Didomi && preloadedConfig.Didomi.usedGtmToSendPartner) {
      promiseall.push(dispatch(Object(actions["setUseGtmToSendPartner"])(preloadedConfig.Didomi.usedGtmToSendPartner)));
    }
    return Promise.all(promiseall);
  };
};
// CONCATENATED MODULE: ./node_modules/.pnpm/canopy-common-fo@12.40.0_@babel+core@7.24.4_@date-io+core@1.3.13_@types+react@18.2.75_enzyme@_whoumozrlvqevdl3s2ltxkc264/node_modules/canopy-common-fo/src/modules/didomi/index.js





/* harmony default export */ var modules_didomi = __webpack_exports__["default"] = ({
  actions: actions,
  initalAction: initialAction_initalAction,
  containers: containers_namespaceObject,
  constants: constants_namespaceObject,
  reducer: didomi_reducer
});

/***/ })

}]);